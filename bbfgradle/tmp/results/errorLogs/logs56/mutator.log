2021-03-12 00:36:19,544 [main:66] - Compilation checking started
2021-03-12 00:36:22,934 [main:50] - replacing init: HTML.() -> Unit [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:22,934 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:23,332 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> false depth = 0
2021-03-12 00:36:23,338 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:36:23,788 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:36:23,797 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:36:24,492 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:36:24,498 [main:95] - GENERATED = check(false)
2021-03-12 00:36:24,499 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> = { check(false)}
2021-03-12 00:36:24,499 [main:61] - GENERATED IS CALL =false
2021-03-12 00:36:24,818 [main:67] - randomType = UInt
2021-03-12 00:36:25,116 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:36:25,205 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:25,205 [main:66] - Compilation checking started
2021-03-12 00:36:26,574 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:26,575 [main:50] - replacing init: HTML.() -> Unit [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:26,575 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:26,825 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> false depth = 0
2021-03-12 00:36:26,829 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:36:26,839 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> = { println()}
2021-03-12 00:36:26,840 [main:61] - GENERATED IS CALL =false
2021-03-12 00:36:26,858 [main:67] - randomType = Element
2021-03-12 00:36:27,165 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:36:27,169 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:36:27,683 [main:302] - generating value of type = TextElement false depth = 2
2021-03-12 00:36:27,689 [main:112] - generating klass TextElement text = class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}
2021-03-12 00:36:27,943 [main:194] - Type params = []
2021-03-12 00:36:28,186 [main:302] - generating value of type = String true depth = 4
2021-03-12 00:36:28,202 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:28,233 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:28,234 [main:66] - Compilation checking started
2021-03-12 00:36:28,860 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit = init): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:28,861 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:36:28,868 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:28,868 [main:66] - Compilation checking started
2021-03-12 00:36:30,119 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:30,120 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:36:30,127 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:30,128 [main:66] - Compilation checking started
2021-03-12 00:36:31,205 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:31,206 [main:50] - replacing name: String String
2021-03-12 00:36:31,206 [main:54] - Getting value of type String
2021-03-12 00:36:31,445 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:36:31,449 [main:58] - GENERATED VALUE OF TYPE String = "doggo"
2021-03-12 00:36:31,449 [main:61] - GENERATED IS CALL =false
2021-03-12 00:36:32,672 [main:67] - randomType = LinkedHashSet<MutableMap<Short, Double>>?
2021-03-12 00:36:32,903 [main:302] - generating value of type = LinkedHashSet<MutableMap<Short, Double>> false depth = 0
2021-03-12 00:36:33,094 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<MutableMap<Short, Double>> = TODO()
2021-03-12 00:36:33,101 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<MutableMap<Short, Double>> = TODO()
2021-03-12 00:36:33,480 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:36:33,484 [main:95] - GENERATED = LinkedHashSet<MutableMap<Short, Double>>(219261943)
2021-03-12 00:36:33,781 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@53aa9e6e]
2021-03-12 00:36:33,951 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:36:34,137 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:36:34,328 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:36:34,339 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:36:34,763 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:36:34,937 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:36:34,944 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:36:35,473 [main:302] - generating value of type = String true depth = 6
2021-03-12 00:36:35,478 [main:95] - GENERATED = StringBuilder("sxrgq")
2021-03-12 00:36:35,478 [main:95] - GENERATED = StringBuilder(StringBuilder("sxrgq"))
2021-03-12 00:36:35,671 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:36:35,905 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:36:35,913 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:36:36,364 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:36:36,368 [main:95] - GENERATED = StringBuilder("lndwu")
2021-03-12 00:36:36,557 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:36:36,757 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:36:36,973 [main:78] - Generated call from random type = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)
2021-03-12 00:36:36,974 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:36,974 [main:66] - Compilation checking started
2021-03-12 00:36:37,940 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:37,940 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:36:37,946 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:37,947 [main:66] - Compilation checking started
2021-03-12 00:36:38,893 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:38,894 [main:50] - replacing builder: StringBuilder StringBuilder
2021-03-12 00:36:38,894 [main:54] - Getting value of type StringBuilder
2021-03-12 00:36:39,145 [main:302] - generating value of type = StringBuilder false depth = 0
2021-03-12 00:36:39,364 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): StringBuilder = TODO()
2021-03-12 00:36:39,371 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): StringBuilder = TODO()
2021-03-12 00:36:39,788 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:36:39,793 [main:95] - GENERATED = StringBuilder("akhpt")
2021-03-12 00:36:39,793 [main:58] - GENERATED VALUE OF TYPE StringBuilder = StringBuilder("akhpt")
2021-03-12 00:36:39,793 [main:61] - GENERATED IS CALL =true
2021-03-12 00:36:39,802 [main:67] - randomType = Int
2021-03-12 00:36:39,982 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:36:40,056 [main:106] - GETTING StringBuilder from String
2021-03-12 00:36:40,091 [main:106] - GETTING StringBuilder from String
2021-03-12 00:36:40,093 [main:106] - GETTING StringBuilder from String
2021-03-12 00:36:40,094 [main:106] - GETTING StringBuilder from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:40,118 [main:106] - GETTING StringBuilder from String
2021-03-12 00:36:40,120 [main:106] - GETTING StringBuilder from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:40,120 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:40,121 [main:50] - replacing indent: String String
2021-03-12 00:36:40,121 [main:54] - Getting value of type String
2021-03-12 00:36:40,342 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:36:40,349 [main:58] - GENERATED VALUE OF TYPE String = "imdld"
2021-03-12 00:36:40,349 [main:61] - GENERATED IS CALL =false
2021-03-12 00:36:40,616 [main:67] - randomType = Collection<Boolean>
2021-03-12 00:36:40,618 [main:106] - GETTING String from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:40,652 [main:106] - GETTING String from String
2021-03-12 00:36:40,685 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:36:40,685 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:36:40,896 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:36:41,128 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:36:41,368 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:36:41,374 [main:117] - GENERATED CALL = (text).replaceFirst('', '?', true)
2021-03-12 00:36:41,374 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:36:41,375 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:36:41,375 [main:117] - GENERATED CALL = (text).trim()
2021-03-12 00:36:41,375 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:36:41,375 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:36:41,623 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:36:41,815 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:36:42,045 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:36:42,050 [main:117] - GENERATED CALL = (text).replace('㾟', '', false)
2021-03-12 00:36:42,050 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7569a69c]]
2021-03-12 00:36:42,050 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:36:42,250 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:36:42,255 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7569a69c]
2021-03-12 00:36:42,256 [main:117] - GENERATED CALL = (text).get(-440950553).plus(name)
2021-03-12 00:36:42,256 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]]
2021-03-12 00:36:42,256 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:36:42,464 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:36:42,470 [main:117] - GENERATED CALL = (text).substringBeforeLast('⏃', text)
2021-03-12 00:36:42,470 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:36:42,470 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:36:42,665 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:36:42,670 [main:117] - GENERATED CALL = (text).length.toString(-578661223)
2021-03-12 00:36:42,670 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2455d93]]
2021-03-12 00:36:42,671 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:36:42,886 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:36:42,891 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2455d93]
2021-03-12 00:36:42,891 [main:117] - GENERATED CALL = (text).get(-1547254907).titlecase()
2021-03-12 00:36:42,891 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:36:42,892 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:36:43,109 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:36:43,305 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:36:43,310 [main:117] - GENERATED CALL = (text).replaceBefore('ﻥ', name, "holna")
2021-03-12 00:36:43,311 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:36:43,311 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:36:43,498 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:36:43,502 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:36:43,507 [main:117] - GENERATED CALL = (text).filterIndexed({a: Int, b: Char -> true})
2021-03-12 00:36:43,507 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:36:43,507 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:36:43,507 [main:117] - GENERATED CALL = (text).reversed()
2021-03-12 00:36:43,508 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:43,508 [main:302] - generating value of type = StringBuilder false depth = 0
2021-03-12 00:36:43,700 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): StringBuilder = TODO()
2021-03-12 00:36:43,707 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): StringBuilder = TODO()
2021-03-12 00:36:44,121 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:36:44,131 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 00:36:44,131 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:44,131 [main:66] - Compilation checking started
2021-03-12 00:36:44,601 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder = StringBuilder(StringBuilder()), indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:44,601 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:36:44,609 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:44,610 [main:66] - Compilation checking started
2021-03-12 00:36:45,042 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String = "zygxm") {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:45,043 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, Unit> false depth = 0
2021-03-12 00:36:45,047 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:36:45,056 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:45,056 [main:66] - Compilation checking started
2021-03-12 00:36:45,589 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit = { println()}{ println()}): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:45,589 [main:302] - generating value of type = StringBuilder false depth = 0
2021-03-12 00:36:45,839 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): StringBuilder = TODO()
2021-03-12 00:36:45,846 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): StringBuilder = TODO()
2021-03-12 00:36:46,219 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:36:46,227 [main:95] - GENERATED = StringBuilder("ivnlk")
2021-03-12 00:36:46,227 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:46,228 [main:66] - Compilation checking started
2021-03-12 00:36:46,729 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder = StringBuilder("ivnlk"), indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:46,730 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:36:46,735 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:46,736 [main:66] - Compilation checking started
2021-03-12 00:36:47,250 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String = "pzbpp") {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:47,251 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Head, Unit> false depth = 0
2021-03-12 00:36:47,255 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:36:47,429 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:36:47,435 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:36:47,813 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:36:47,817 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:36:47,993 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:36:48,002 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:36:48,397 [main:302] - generating value of type = Any false depth = 8
2021-03-12 00:36:48,397 [main:95] - GENERATED = println("fcoki")
2021-03-12 00:36:48,397 [main:95] - GENERATED = contract({ println("fcoki")})
2021-03-12 00:36:48,398 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:48,398 [main:66] - Compilation checking started
2021-03-12 00:36:48,925 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit = { contract({ println("fcoki")})}) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:48,925 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:36:48,930 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:36:49,107 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:36:49,113 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:36:49,590 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:36:49,590 [main:95] - GENERATED = println("bqsvp")
2021-03-12 00:36:49,590 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:49,591 [main:66] - Compilation checking started
2021-03-12 00:36:50,438 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit = { println("bqsvp")}) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:50,438 [main:50] - replacing init: Body.() -> Unit [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:36:50,438 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:36:50,648 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:36:50,652 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:36:50,835 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:36:50,842 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:36:51,279 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:36:51,284 [main:95] - GENERATED = require(false)
2021-03-12 00:36:51,284 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Body, Unit> = { require(false)}
2021-03-12 00:36:51,284 [main:61] - GENERATED IS CALL =false
2021-03-12 00:36:53,901 [main:67] - randomType = MutableMap<Function2<UByte?, Collection<Function1<Function2<Head, Head, Map<A, String>>, H1>>, Sequence<BodyTag>>, Map<P, Boolean>>
2021-03-12 00:36:53,906 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:36:53,948 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:36:53,956 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from StringBuilder
2021-03-12 00:36:54,004 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:54,027 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:36:54,032 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:36:54,036 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:36:54,040 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:36:54,064 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from StringBuilder
2021-03-12 00:36:54,069 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:36:54,073 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:36:54,073 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:36:54,092 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:54,092 [main:66] - Compilation checking started
2021-03-12 00:36:54,501 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit = { println("bqsvp")}) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit = init) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:54,502 [main:50] - replacing init: Title.() -> Unit [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:36:54,502 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:36:54,672 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Title, Unit> false depth = 0
2021-03-12 00:36:54,677 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:36:54,827 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:36:54,833 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:36:55,232 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:36:55,238 [main:95] - GENERATED = check(false)
2021-03-12 00:36:55,238 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Title, Unit> = { check(false)}
2021-03-12 00:36:55,238 [main:61] - GENERATED IS CALL =false
2021-03-12 00:36:55,458 [main:67] - randomType = UInt
2021-03-12 00:36:55,632 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:36:55,694 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:36:55,723 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from T
2021-03-12 00:36:55,741 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:36:55,778 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:36:55,783 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:36:55,787 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from StringBuilder
2021-03-12 00:36:55,826 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:36:55,831 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:36:55,860 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:55,888 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from StringBuilder
2021-03-12 00:36:55,895 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:36:55,900 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:36:55,904 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from StringBuilder
2021-03-12 00:36:55,909 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:55,913 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:36:55,918 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:36:55,923 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from [@kotlin.ExtensionFunctionType] Function1<T, Unit>
2021-03-12 00:36:55,948 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:55,949 [main:66] - Compilation checking started
2021-03-12 00:36:56,702 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit = { println("bqsvp")}) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit = { check(false)}) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:56,702 [main:50] - replacing init: B.() -> Unit [@kotlin.ExtensionFunctionType] Function1<B, Unit>
2021-03-12 00:36:56,703 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<B, Unit>
2021-03-12 00:36:56,882 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:36:56,886 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:36:57,062 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:36:57,069 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:36:57,484 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:36:57,489 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:36:57,698 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:36:57,704 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:36:58,345 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:36:58,350 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:36:58,354 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:36:58,362 [main:95] - GENERATED = repeat(1601189754, {a: Int -> println()})
2021-03-12 00:36:58,362 [main:95] - GENERATED = contract({ repeat(1601189754, {a: Int -> println()})})
2021-03-12 00:36:58,362 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<B, Unit> = { contract({ repeat(1601189754, {a: Int -> println()})})}
2021-03-12 00:36:58,362 [main:61] - GENERATED IS CALL =false
2021-03-12 00:36:58,736 [main:67] - randomType = Byte?
2021-03-12 00:36:58,906 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:36:58,957 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from StringBuilder
2021-03-12 00:36:58,991 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:36:59,022 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from StringBuilder
2021-03-12 00:36:59,028 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:36:59,033 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:36:59,039 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:36:59,064 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:36:59,069 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:36:59,073 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:36:59,077 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:36:59,103 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:36:59,108 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from StringBuilder
2021-03-12 00:36:59,112 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from T
2021-03-12 00:36:59,126 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:36:59,151 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from [@kotlin.ExtensionFunctionType] Function1<T, Unit>
2021-03-12 00:36:59,178 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:36:59,182 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:59,208 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:36:59,208 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:36:59,209 [main:66] - Compilation checking started
2021-03-12 00:36:59,676 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit = { println("bqsvp")}) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit = { check(false)}) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit = { contract({ repeat(1601189754, {a: Int -> println()})})}) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:36:59,676 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:36:59,681 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:36:59,888 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:36:59,895 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:00,530 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:37:00,535 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:37:00,539 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:37:00,725 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:37:00,731 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:37:01,149 [main:302] - generating value of type = Any false depth = 8
2021-03-12 00:37:01,149 [main:95] - GENERATED = print("rjhyb")
2021-03-12 00:37:01,149 [main:95] - GENERATED = repeat(-2104297026, {a: Int -> print("rjhyb")})
2021-03-12 00:37:01,150 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:37:01,150 [main:66] - Compilation checking started
2021-03-12 00:37:01,965 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit = { println("bqsvp")}) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit = { check(false)}) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit = { repeat(-2104297026, {a: Int -> print("rjhyb")})}) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:01,965 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:37:01,972 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:01,984 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:37:01,985 [main:66] - Compilation checking started
2021-03-12 00:37:02,760 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit = { println("bqsvp")}) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit = { check(false)}) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit = { repeat(-2104297026, {a: Int -> print("rjhyb")})}) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit = { println()}) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:02,760 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:37:02,765 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:02,927 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:37:02,933 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:37:03,432 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:37:03,436 [main:95] - GENERATED = check(true)
2021-03-12 00:37:03,437 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:37:03,437 [main:66] - Compilation checking started
2021-03-12 00:37:04,232 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit = { println("bqsvp")}) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit = { check(false)}) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit = { repeat(-2104297026, {a: Int -> print("rjhyb")})}) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit = { println()}) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit = { check(true)}) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:04,233 [main:50] - replacing init: UL.() -> Unit [@kotlin.ExtensionFunctionType] Function1<UL, Unit>
2021-03-12 00:37:04,233 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<UL, Unit>
2021-03-12 00:37:04,423 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:37:04,430 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:04,438 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<UL, Unit> = { println()}
2021-03-12 00:37:04,439 [main:61] - GENERATED IS CALL =false
2021-03-12 00:37:04,465 [main:67] - randomType = H1
2021-03-12 00:37:04,644 [main:302] - generating value of type = H1 false depth = 0
2021-03-12 00:37:04,649 [main:112] - generating klass H1 text = class H1() : BodyTag("h1")
2021-03-12 00:37:04,850 [main:194] - Type params = []
2021-03-12 00:37:05,179 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:37:05,213 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:37:05,245 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:37:05,249 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:37:05,275 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:37:05,280 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from StringBuilder
2021-03-12 00:37:05,315 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:37:05,341 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:37:05,345 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from StringBuilder
2021-03-12 00:37:05,350 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:37:05,354 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:37:05,358 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:37:05,380 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from [@kotlin.ExtensionFunctionType] Function1<B, Unit>
2021-03-12 00:37:05,402 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from [@kotlin.ExtensionFunctionType] Function1<T, Unit>
2021-03-12 00:37:05,425 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:37:05,429 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from StringBuilder
2021-03-12 00:37:05,433 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:37:05,437 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from T
2021-03-12 00:37:05,449 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:37:05,453 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from [@kotlin.ExtensionFunctionType] Function1<H1, Unit>
2021-03-12 00:37:05,477 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:37:05,501 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:37:05,501 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:37:05,501 [main:66] - Compilation checking started
2021-03-12 00:37:06,261 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit = { println("bqsvp")}) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit = { check(false)}) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit = { repeat(-2104297026, {a: Int -> print("rjhyb")})}) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit = { println()}) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit = { check(true)}) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit = { println()}) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:06,261 [main:50] - replacing href: String String
2021-03-12 00:37:06,261 [main:54] - Getting value of type String
2021-03-12 00:37:06,448 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:37:06,453 [main:58] - GENERATED VALUE OF TYPE String = "plnou"
2021-03-12 00:37:06,453 [main:61] - GENERATED IS CALL =false
2021-03-12 00:37:06,811 [main:67] - randomType = List<ULong>
2021-03-12 00:37:06,811 [main:106] - GETTING String from String
2021-03-12 00:37:06,834 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d9dd01]]
2021-03-12 00:37:06,834 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:37:06,978 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:07,131 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:07,135 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d9dd01]
2021-03-12 00:37:07,309 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:37:07,467 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:37:07,473 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:37:07,808 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:37:07,816 [main:95] - GENERATED = StringBuilder("qznyu")
2021-03-12 00:37:07,959 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:37:07,964 [main:117] - GENERATED CALL = (indent).subSequence(1776451165, 575465277).commonPrefixWith(StringBuilder("qznyu"), false)
2021-03-12 00:37:07,964 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]]
2021-03-12 00:37:07,964 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:37:08,107 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:08,333 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:37:08,339 [main:117] - GENERATED CALL = (indent).substringBeforeLast('啋', "xnwgn")
2021-03-12 00:37:08,339 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:37:08,339 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:37:08,517 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:08,701 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:08,876 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:37:08,880 [main:117] - GENERATED CALL = (indent).replaceFirst('엷', '焁', true)
2021-03-12 00:37:08,881 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:37:08,881 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:37:09,049 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:37:09,049 [main:117] - GENERATED CALL = (indent).plus("rugyb")
2021-03-12 00:37:09,049 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]]
2021-03-12 00:37:09,049 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:37:09,229 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:09,234 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]
2021-03-12 00:37:09,235 [main:117] - GENERATED CALL = (indent).get(26013370).uppercase()
2021-03-12 00:37:09,235 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]]
2021-03-12 00:37:09,235 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:37:09,409 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:09,556 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:09,561 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]
2021-03-12 00:37:09,727 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:37:09,905 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:37:09,911 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:37:10,549 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:37:10,555 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 00:37:10,748 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 00:37:10,756 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 00:37:10,956 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 00:37:10,964 [main:95] - GENERATED = linkedSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 00:37:10,964 [main:95] - GENERATED = Regex("olsgm", linkedSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 00:37:10,965 [main:117] - GENERATED CALL = (indent).subSequence(1454654249, 1106434631).replaceFirst(Regex("olsgm", linkedSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)), indent)
2021-03-12 00:37:10,965 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:37:10,965 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:37:11,137 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:37:11,142 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:37:11,147 [main:117] - GENERATED CALL = (indent).takeWhile({a: Char -> false})
2021-03-12 00:37:11,147 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:37:11,147 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:37:11,335 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:37:11,508 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:37:11,514 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:37:11,918 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:37:11,926 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 00:37:11,927 [main:117] - GENERATED CALL = (indent).removeSurrounding(StringBuilder(StringBuilder()))
2021-03-12 00:37:11,927 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:37:11,927 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:37:11,927 [main:117] - GENERATED CALL = (indent).lowercase()
2021-03-12 00:37:11,927 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:37:11,927 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:37:11,928 [main:117] - GENERATED CALL = (indent).concat(name)
2021-03-12 00:37:11,928 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:37:11,928 [main:66] - Compilation checking started
2021-03-12 00:37:12,329 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit = { println("bqsvp")}) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit = { check(false)}) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit = { repeat(-2104297026, {a: Int -> print("rjhyb")})}) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit = { println()}) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit = { check(true)}) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit = { println()}) = initTag(UL(), init)
    inline fun a(href: String = (indent).plus("rugyb"), init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:12,330 [main:50] - replacing init: A.() -> Unit [@kotlin.ExtensionFunctionType] Function1<A, Unit>
2021-03-12 00:37:12,330 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<A, Unit>
2021-03-12 00:37:12,549 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<A, Unit> false depth = 0
2021-03-12 00:37:12,554 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:12,706 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:37:12,711 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:37:13,214 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:37:13,219 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:37:13,223 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:37:13,223 [main:95] - GENERATED = check(true, { "zkdoq"})
2021-03-12 00:37:13,223 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<A, Unit> = { check(true, { "zkdoq"})}
2021-03-12 00:37:13,224 [main:61] - GENERATED IS CALL =false
2021-03-12 00:37:13,412 [main:67] - randomType = Sequence<String>
2021-03-12 00:37:13,417 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from [@kotlin.ExtensionFunctionType] Function1<T, Unit>
2021-03-12 00:37:13,454 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:37:13,503 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:37:13,528 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:37:13,550 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from StringBuilder
2021-03-12 00:37:13,572 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:37:13,576 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from StringBuilder
2021-03-12 00:37:13,580 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:37:13,602 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:37:13,606 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from [@kotlin.ExtensionFunctionType] Function1<B, Unit>
2021-03-12 00:37:13,629 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from T
2021-03-12 00:37:13,640 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:37:13,663 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:37:13,667 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from StringBuilder
2021-03-12 00:37:13,671 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from [@kotlin.ExtensionFunctionType] Function1<H1, Unit>
2021-03-12 00:37:13,693 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:37:13,697 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:37:13,703 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:37:13,710 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:37:13,717 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:37:13,723 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from [@kotlin.ExtensionFunctionType] Function1<UL, Unit>
2021-03-12 00:37:13,746 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:37:13,750 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:37:13,772 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:37:13,772 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:37:13,773 [main:66] - Compilation checking started
2021-03-12 00:37:14,545 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit = { println("bqsvp")}) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit = { check(false)}) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit = { repeat(-2104297026, {a: Int -> print("rjhyb")})}) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit = { println()}) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit = { check(true)}) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit = { println()}) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit = { check(true, { "zkdoq"})}) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:14,545 [main:50] - replacing init: LI.() -> Unit [@kotlin.ExtensionFunctionType] Function1<LI, Unit>
2021-03-12 00:37:14,546 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<LI, Unit>
2021-03-12 00:37:14,699 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<LI, Unit> false depth = 0
2021-03-12 00:37:14,704 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:14,713 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<LI, Unit> = { println()}
2021-03-12 00:37:14,713 [main:61] - GENERATED IS CALL =false
2021-03-12 00:37:14,731 [main:67] - randomType = P
2021-03-12 00:37:14,930 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:37:14,937 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:37:15,116 [main:194] - Type params = []
2021-03-12 00:37:15,404 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<H1, Unit>
2021-03-12 00:37:15,426 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<A, Unit>
2021-03-12 00:37:15,449 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:37:15,471 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from StringBuilder
2021-03-12 00:37:15,495 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:37:15,519 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<B, Unit>
2021-03-12 00:37:15,545 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<T, Unit>
2021-03-12 00:37:15,570 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:37:15,595 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:37:15,616 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from StringBuilder
2021-03-12 00:37:15,620 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:37:15,624 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:37:15,648 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:37:15,652 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:37:15,656 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from T
2021-03-12 00:37:15,668 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:37:15,693 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:37:15,697 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:37:15,701 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:37:15,705 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<UL, Unit>
2021-03-12 00:37:15,728 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from StringBuilder
2021-03-12 00:37:15,732 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:37:15,736 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:37:15,740 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:37:15,744 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:37:15,744 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:37:15,745 [main:66] - Compilation checking started
2021-03-12 00:37:16,473 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String = "mtsuj") : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String = "higef") : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String = (LinkedHashSet<MutableMap<Short, Double>>(219261943))?.joinToString(StringBuilder(), StringBuilder(StringBuilder("sxrgq")), StringBuilder("lndwu"), -49719651, "vkikj", null)) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit = { println("bqsvp")}) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit = { check(false)}) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String = "wnrdd") : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit = { repeat(-2104297026, {a: Int -> print("rjhyb")})}) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit = { println()}) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit = { check(true)}) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit = { println()}) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit = { check(true, { "zkdoq"})}) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit = { println()}) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit = { check(false)}): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:16,854 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:37:17,168 [main:112] - generating klass TextElement text = class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}
2021-03-12 00:37:17,331 [main:194] - Type params = []
2021-03-12 00:37:17,470 [main:302] - generating value of type = String true depth = 1
2021-03-12 00:37:17,474 [main:112] - generating klass Tag text = abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}
2021-03-12 00:37:17,832 [main:112] - generating klass TagWithText text = abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}
2021-03-12 00:37:18,208 [main:112] - generating klass HTML text = class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}
2021-03-12 00:37:18,343 [main:194] - Type params = []
2021-03-12 00:37:18,520 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}
2021-03-12 00:37:18,689 [main:194] - Type params = []
2021-03-12 00:37:18,821 [main:112] - generating klass Title text = class Title() : TagWithText("title")
2021-03-12 00:37:18,980 [main:194] - Type params = []
2021-03-12 00:37:19,114 [main:112] - generating klass BodyTag text = abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}
2021-03-12 00:37:19,423 [main:302] - generating value of type = B false depth = 1
2021-03-12 00:37:19,427 [main:112] - generating klass B text = class B() : BodyTag("b")
2021-03-12 00:37:19,622 [main:194] - Type params = []
2021-03-12 00:37:19,826 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:37:20,019 [main:194] - Type params = []
2021-03-12 00:37:20,163 [main:112] - generating klass UL text = class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}
2021-03-12 00:37:20,327 [main:194] - Type params = []
2021-03-12 00:37:20,460 [main:112] - generating klass B text = class B() : BodyTag("b")
2021-03-12 00:37:20,659 [main:194] - Type params = []
2021-03-12 00:37:20,819 [main:112] - generating klass LI text = class LI() : BodyTag("li")
2021-03-12 00:37:20,954 [main:194] - Type params = []
2021-03-12 00:37:21,108 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:37:21,242 [main:194] - Type params = []
2021-03-12 00:37:21,397 [main:112] - generating klass H1 text = class H1() : BodyTag("h1")
2021-03-12 00:37:21,530 [main:194] - Type params = []
2021-03-12 00:37:21,690 [main:112] - generating klass A text = class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}
2021-03-12 00:37:21,833 [main:194] - Type params = []
2021-03-12 00:37:22,323 [main:43] - GENERATING CALL OF inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}
2021-03-12 00:37:22,327 [main:61] - WITHOUT TYPE PARAMS = inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}
2021-03-12 00:37:22,688 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> false depth = 1
2021-03-12 00:37:22,692 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:37:22,876 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:22,883 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:23,521 [main:302] - generating value of type = Int true depth = 5
2021-03-12 00:37:23,525 [main:302] - generating value of type = Function1<Int, Unit> false depth = 5
2021-03-12 00:37:23,529 [main:302] - generating value of type = Unit false depth = 6
2021-03-12 00:37:23,681 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:37:23,686 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:37:24,111 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:37:24,111 [main:95] - GENERATED = println("skriq")
2021-03-12 00:37:24,111 [main:95] - GENERATED = repeat(1590980469, {a: Int -> println("skriq")})
2021-03-12 00:37:24,112 [main:95] - GENERATED = html({ repeat(1590980469, {a: Int -> println("skriq")})})
2021-03-12 00:37:24,263 [main:43] - GENERATING CALL OF fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}
2021-03-12 00:37:24,268 [main:61] - WITHOUT TYPE PARAMS = fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}
2021-03-12 00:37:24,619 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> false depth = 1
2021-03-12 00:37:24,623 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:37:24,763 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:37:24,768 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:37:25,069 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 00:37:25,074 [main:95] - GENERATED = require(false)
2021-03-12 00:37:25,074 [main:95] - GENERATED = htmlNoInline({ require(false)})
2021-03-12 00:37:25,236 [main:45] - Trying to change 275 nodes
2021-03-12 00:37:25,240 [main:53] - replacing (body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }, Body)
2021-03-12 00:37:25,241 [main:50] - replacing body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                } Body
2021-03-12 00:37:25,241 [main:54] - Getting value of type Body
2021-03-12 00:37:25,379 [main:302] - generating value of type = Body false depth = 0
2021-03-12 00:37:25,383 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:37:25,570 [main:194] - Type params = []
2021-03-12 00:37:25,717 [main:58] - GENERATED VALUE OF TYPE Body = Body()
2021-03-12 00:37:25,717 [main:61] - GENERATED IS CALL =true
2021-03-12 00:37:25,737 [main:67] - randomType = TagWithText
2021-03-12 00:37:25,903 [main:302] - generating value of type = TagWithText false depth = 0
2021-03-12 00:37:25,908 [main:112] - generating klass TagWithText text = abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}
2021-03-12 00:37:26,287 [main:106] - GETTING Body from String
2021-03-12 00:37:26,308 [main:106] - GETTING Body from LI
2021-03-12 00:37:26,412 [main:106] - GETTING Body from Head
2021-03-12 00:37:26,466 [main:106] - GETTING Body from String
2021-03-12 00:37:26,466 [main:106] - GETTING Body from Body
2021-03-12 00:37:26,525 [main:61] - replacement of body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                } of type Body is Body()
2021-03-12 00:37:26,656 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:37:26,657 [main:66] - Compilation checking started
2021-03-12 00:37:27,216 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:27,221 [main:53] - replacing (b { +"mixed" }, B)
2021-03-12 00:37:27,222 [main:50] - replacing b { +"mixed" } B
2021-03-12 00:37:27,222 [main:54] - Getting value of type B
2021-03-12 00:37:27,355 [main:302] - generating value of type = B false depth = 0
2021-03-12 00:37:27,359 [main:112] - generating klass B text = class B() : BodyTag("b")
2021-03-12 00:37:27,498 [main:194] - Type params = []
2021-03-12 00:37:27,624 [main:58] - GENERATED VALUE OF TYPE B = B()
2021-03-12 00:37:27,624 [main:61] - GENERATED IS CALL =true
2021-03-12 00:37:27,632 [main:67] - randomType = Boolean
2021-03-12 00:37:27,756 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:37:27,771 [main:106] - GETTING B from P
2021-03-12 00:37:27,852 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f], public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]]
2021-03-12 00:37:27,852 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f]
2021-03-12 00:37:27,980 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:37:27,984 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:28,151 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:37:28,156 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:37:28,514 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:37:28,519 [main:95] - GENERATED = require(false)
2021-03-12 00:37:28,519 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:37:28,647 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:37:28,651 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:28,658 [main:117] - GENERATED CALL = (B().pNoInline()).p({ require(false)}).b({ println()})
2021-03-12 00:37:28,658 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9], public final inline fun b(init: B.() -> kotlin.Unit): B defined in UL[SimpleFunctionDescriptorImpl@4f322f9e]]
2021-03-12 00:37:28,658 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]
2021-03-12 00:37:28,810 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:37:28,816 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:28,949 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:37:28,954 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:37:29,486 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:37:29,490 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:37:29,494 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:37:29,495 [main:95] - GENERATED = check(false, { "mkump"})
2021-03-12 00:37:29,495 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in UL[SimpleFunctionDescriptorImpl@4f322f9e]
2021-03-12 00:37:29,626 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:37:29,630 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:29,795 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:37:29,802 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:37:30,281 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:37:30,286 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:37:30,289 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:37:30,290 [main:95] - GENERATED = check(false, { "jlayo"})
2021-03-12 00:37:30,290 [main:117] - GENERATED CALL = (B().pNoInline()).ul({ check(false, { "mkump"})}).b({ check(false, { "jlayo"})})
2021-03-12 00:37:30,290 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final inline fun b(init: B.() -> kotlin.Unit): B defined in H1[SimpleFunctionDescriptorImpl@1a4a6d68]]
2021-03-12 00:37:30,290 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:37:30,443 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:37:30,446 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:30,579 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:37:30,584 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:37:30,932 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:37:30,933 [main:95] - GENERATED = print("uqsoa")
2021-03-12 00:37:30,933 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in H1[SimpleFunctionDescriptorImpl@1a4a6d68]
2021-03-12 00:37:31,100 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:37:31,104 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:31,239 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:37:31,244 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:37:31,559 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:37:31,559 [main:95] - GENERATED = println("qjfxi")
2021-03-12 00:37:31,560 [main:117] - GENERATED CALL = (B().pNoInline()).h1({ print("uqsoa")}).b({ println("qjfxi")})
2021-03-12 00:37:31,560 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]]
2021-03-12 00:37:31,560 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:37:31,704 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:37:31,717 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:31,726 [main:117] - GENERATED CALL = (B().pNoInline()).b({ println()})
2021-03-12 00:37:31,726 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4], public final inline fun b(init: B.() -> kotlin.Unit): B defined in B[SimpleFunctionDescriptorImpl@463aee87]]
2021-03-12 00:37:31,726 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:37:31,857 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:37:31,861 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:32,025 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:32,030 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:32,518 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:37:32,522 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:37:32,526 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:37:32,696 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:37:32,701 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:37:33,254 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:37:33,258 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:37:33,262 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:37:33,263 [main:95] - GENERATED = check(false, { "snsxi"})
2021-03-12 00:37:33,263 [main:95] - GENERATED = repeat(1397074735, {a: Int -> check(false, { "snsxi"})})
2021-03-12 00:37:33,263 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in B[SimpleFunctionDescriptorImpl@463aee87]
2021-03-12 00:37:33,397 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:37:33,401 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:33,560 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:33,566 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:33,884 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:37:33,888 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:37:34,029 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:37:34,034 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:37:34,360 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:37:34,365 [main:95] - GENERATED = check(false)
2021-03-12 00:37:34,365 [main:95] - GENERATED = contract({ check(false)})
2021-03-12 00:37:34,365 [main:117] - GENERATED CALL = (B().pNoInline()).b({ repeat(1397074735, {a: Int -> check(false, { "snsxi"})})}).b({ contract({ check(false)})})
2021-03-12 00:37:34,365 [main:61] - replacement of b { +"mixed" } of type B is (B().pNoInline()).b({ repeat(1397074735, {a: Int -> check(false, { "snsxi"})})}).b({ contract({ check(false)})})
2021-03-12 00:37:34,512 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:37:34,513 [main:66] - Compilation checking started
2021-03-12 00:37:34,847 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        (B().pNoInline()).b({ repeat(1397074735, {a: Int -> check(false, { "snsxi"})})}).b({ contract({ check(false)})})
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:34,852 [main:53] - replacing (head {
                    title { +"XML encoding with Kotlin" }
                }, Head)
2021-03-12 00:37:34,852 [main:50] - replacing head {
                    title { +"XML encoding with Kotlin" }
                } Head
2021-03-12 00:37:34,852 [main:54] - Getting value of type Head
2021-03-12 00:37:35,011 [main:302] - generating value of type = Head false depth = 0
2021-03-12 00:37:35,015 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}
2021-03-12 00:37:35,146 [main:194] - Type params = []
2021-03-12 00:37:35,313 [main:58] - GENERATED VALUE OF TYPE Head = Head()
2021-03-12 00:37:35,313 [main:61] - GENERATED IS CALL =true
2021-03-12 00:37:35,636 [main:67] - randomType = Byte?
2021-03-12 00:37:35,762 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:37:35,799 [main:106] - GETTING Head from HTML
2021-03-12 00:37:35,840 [main:113] - Case = [public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@1afe07ba]]
2021-03-12 00:37:35,840 [main:149] - GENERATING call of type public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@1afe07ba]
2021-03-12 00:37:35,988 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Head, Unit> false depth = 0
2021-03-12 00:37:35,992 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:36,123 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:36,129 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:36,624 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:37:36,627 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:37:36,632 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:37:36,763 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:36,768 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:37,277 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:37:37,282 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:37:37,287 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:37:37,295 [main:95] - GENERATED = repeat(-19159240, {a: Int -> println()})
2021-03-12 00:37:37,296 [main:95] - GENERATED = repeat(-1456237370, {a: Int -> repeat(-19159240, {a: Int -> println()})})
2021-03-12 00:37:37,296 [main:117] - GENERATED CALL = (result).head({ repeat(-1456237370, {a: Int -> repeat(-19159240, {a: Int -> println()})})})
2021-03-12 00:37:37,296 [main:61] - replacement of head {
                    title { +"XML encoding with Kotlin" }
                } of type Head is Head()
2021-03-12 00:37:37,455 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:37:37,455 [main:66] - Compilation checking started
2021-03-12 00:37:38,037 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:38,043 [main:53] - replacing (title { +"XML encoding with Kotlin" }, Title)
2021-03-12 00:37:38,043 [main:50] - replacing title { +"XML encoding with Kotlin" } Title
2021-03-12 00:37:38,043 [main:54] - Getting value of type Title
2021-03-12 00:37:38,230 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:37:38,234 [main:112] - generating klass Title text = class Title() : TagWithText("title")
2021-03-12 00:37:38,361 [main:194] - Type params = []
2021-03-12 00:37:38,511 [main:58] - GENERATED VALUE OF TYPE Title = Title()
2021-03-12 00:37:38,511 [main:61] - GENERATED IS CALL =true
2021-03-12 00:37:38,659 [main:67] - randomType = UByte
2021-03-12 00:37:38,801 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:37:38,852 [main:106] - GETTING Title from String
2021-03-12 00:37:38,881 [main:106] - GETTING Title from Head
2021-03-12 00:37:38,928 [main:113] - Case = [public final inline fun title(init: Title.() -> kotlin.Unit): Title defined in Head[SimpleFunctionDescriptorImpl@78b65e8c]]
2021-03-12 00:37:38,928 [main:149] - GENERATING call of type public final inline fun title(init: Title.() -> kotlin.Unit): Title defined in Head[SimpleFunctionDescriptorImpl@78b65e8c]
2021-03-12 00:37:39,082 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Title, Unit> false depth = 0
2021-03-12 00:37:39,086 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:39,225 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:37:39,231 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:37:39,539 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:37:39,543 [main:95] - GENERATED = check(true)
2021-03-12 00:37:39,543 [main:117] - GENERATED CALL = (HTML().head()).title({ check(true)})
2021-03-12 00:37:39,544 [main:61] - replacement of title { +"XML encoding with Kotlin" } of type Title is (HTML().head()).title({ check(true)})
2021-03-12 00:37:39,684 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:37:39,684 [main:66] - Compilation checking started
2021-03-12 00:37:40,007 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (HTML().head()).title({ check(true)})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:40,012 [main:53] - replacing ("https://jetbrains.com/kotlin", String)
2021-03-12 00:37:40,013 [main:50] - replacing "https://jetbrains.com/kotlin" String
2021-03-12 00:37:40,013 [main:54] - Getting value of type String
2021-03-12 00:37:40,172 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:37:40,176 [main:58] - GENERATED VALUE OF TYPE String = "werge"
2021-03-12 00:37:40,176 [main:61] - GENERATED IS CALL =false
2021-03-12 00:37:40,184 [main:67] - randomType = Int
2021-03-12 00:37:40,312 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:40,352 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d25f3]
2021-03-12 00:37:40,503 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:37:40,509 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25cea1e]
2021-03-12 00:37:40,510 [main:78] - Generated call from random type = (-826904823).div(-549203845858852994).toString(htmlVal)
2021-03-12 00:37:40,511 [main:106] - GETTING String from B
2021-03-12 00:37:40,595 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]]
2021-03-12 00:37:40,595 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:37:40,745 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:40,873 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:37:40,877 [main:117] - GENERATED CALL = (B().b()).name.substringBeforeLast('ミ', "gdmne")
2021-03-12 00:37:40,877 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in BodyTag[SimpleFunctionDescriptorImpl@6abc0ce3], public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2]]
2021-03-12 00:37:40,877 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in BodyTag[SimpleFunctionDescriptorImpl@6abc0ce3]
2021-03-12 00:37:41,016 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:37:41,028 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:41,035 [main:117] - GENERATED CALL = (B().b()).b({ println()}).name
2021-03-12 00:37:41,035 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:37:41,035 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:37:41,162 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:41,329 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:37:41,334 [main:117] - GENERATED CALL = (B().b()).name.replaceAfter('', "yoama", href)
2021-03-12 00:37:41,334 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:37:41,334 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:37:41,463 [main:117] - GENERATED CALL = (B().b()).name.plus(null)
2021-03-12 00:37:41,463 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]]
2021-03-12 00:37:41,463 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]
2021-03-12 00:37:41,463 [main:117] - GENERATED CALL = (B().b()).name.take(bodyVar)
2021-03-12 00:37:41,463 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:37:41,463 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:37:41,612 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:41,741 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:41,896 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:37:41,900 [main:117] - GENERATED CALL = (B().b()).name.replace('आ', 'ᱽ', false)
2021-03-12 00:37:41,901 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:37:41,901 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:37:41,901 [main:117] - GENERATED CALL = (B().b()).name.capitalize()
2021-03-12 00:37:41,901 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:37:41,901 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:37:41,901 [main:117] - GENERATED CALL = (B().b()).name.lowercase()
2021-03-12 00:37:41,901 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]]
2021-03-12 00:37:41,901 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:37:41,901 [main:117] - GENERATED CALL = (B().b()).name.dropLast(htmlVal)
2021-03-12 00:37:41,902 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:37:41,902 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:37:42,028 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:42,202 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:42,330 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:37:42,334 [main:117] - GENERATED CALL = (B().b()).name.replaceFirst('쇆', '㕎', true)
2021-03-12 00:37:42,334 [main:61] - replacement of "https://jetbrains.com/kotlin" of type String is (B().b()).name.lowercase()
2021-03-12 00:37:42,489 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:37:42,490 [main:66] - Compilation checking started
2021-03-12 00:37:42,857 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = (B().b()).name.lowercase()) { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:42,862 [main:53] - replacing ({
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }, [@kotlin.ExtensionFunctionType] Function1<Body, Unit>)
2021-03-12 00:37:42,862 [main:50] - replacing {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                } [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:37:42,862 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:37:43,013 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:37:43,017 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:43,148 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:37:43,153 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:37:43,461 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:37:43,462 [main:95] - GENERATED = println("armlz")
2021-03-12 00:37:43,462 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Body, Unit> = { println("armlz")}
2021-03-12 00:37:43,462 [main:61] - GENERATED IS CALL =false
2021-03-12 00:37:43,635 [main:67] - randomType = UInt
2021-03-12 00:37:43,761 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:37:43,795 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Int
2021-03-12 00:37:43,830 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from LI
2021-03-12 00:37:43,894 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:37:43,938 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:37:43,942 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Head
2021-03-12 00:37:43,986 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from B
2021-03-12 00:37:44,048 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:37:44,071 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:37:44,135 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:37:44,139 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:37:44,219 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:37:44,223 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:37:44,227 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Title
2021-03-12 00:37:44,293 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:37:44,297 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:37:44,301 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:37:44,305 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from UL
2021-03-12 00:37:44,397 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:37:44,401 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:37:44,405 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:37:44,409 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Array<String>
2021-03-12 00:37:44,424 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from H1
2021-03-12 00:37:44,495 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:37:44,496 [main:61] - replacement of {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                } of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit> is { println("armlz")}
2021-03-12 00:37:44,638 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:37:44,638 [main:66] - Compilation checking started
2021-03-12 00:37:45,211 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:45,215 [main:53] - replacing (attributes["href"], String?)
2021-03-12 00:37:45,215 [main:50] - replacing attributes["href"] String?
2021-03-12 00:37:45,215 [main:54] - Getting value of type String?
2021-03-12 00:37:45,363 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:37:45,367 [main:58] - GENERATED VALUE OF TYPE String? = "pcvkr"
2021-03-12 00:37:45,367 [main:61] - GENERATED IS CALL =false
2021-03-12 00:37:45,518 [main:67] - randomType = Float
2021-03-12 00:37:45,654 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:37:45,707 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@25a90679]
2021-03-12 00:37:45,708 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2455d93]
2021-03-12 00:37:45,708 [main:78] - Generated call from random type = (0.80657953f).toChar().titlecase()
2021-03-12 00:37:45,708 [main:106] - GETTING String? from String
2021-03-12 00:37:45,734 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:37:45,734 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:37:45,870 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:46,009 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:37:46,012 [main:117] - GENERATED CALL = (href)?.substringAfterLast('क़', "khjms")
2021-03-12 00:37:46,013 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:37:46,013 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:37:46,151 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:37:46,155 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:37:46,166 [main:117] - GENERATED CALL = (href)?.dropLastWhile({a: Char -> false})
2021-03-12 00:37:46,166 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:37:46,166 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:37:46,288 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:46,292 [main:117] - GENERATED CALL = (href)?.replaceAfter('䚗', TODO().toString(), A().href)
2021-03-12 00:37:46,292 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:37:46,292 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:37:46,292 [main:117] - GENERATED CALL = (href)?.lowercase()
2021-03-12 00:37:46,292 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]]
2021-03-12 00:37:46,292 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]
2021-03-12 00:37:46,424 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:46,584 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:46,587 [main:117] - GENERATED CALL = (href)?.padEnd(1795814437, 'ŝ')
2021-03-12 00:37:46,588 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:37:46,588 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:37:46,718 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:46,849 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:46,984 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:37:46,988 [main:117] - GENERATED CALL = (href)?.replaceFirst('ﬤ', '묫', false)
2021-03-12 00:37:46,988 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:37:46,988 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:37:47,116 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:37:47,120 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:37:47,124 [main:117] - GENERATED CALL = (href)?.takeWhile({a: Char -> true})
2021-03-12 00:37:47,124 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:37:47,124 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:37:47,259 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:47,264 [main:117] - GENERATED CALL = (href)?.replaceAfterLast('邋', testBodyNoInline(), TextElement("utmeo").text)
2021-03-12 00:37:47,264 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:37:47,264 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:37:47,391 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:47,394 [main:117] - GENERATED CALL = (href)?.substringBefore('?', testHtmlNoInline())
2021-03-12 00:37:47,394 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:37:47,395 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:37:47,530 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:37:47,534 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:37:47,664 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:47,668 [main:117] - GENERATED CALL = (href)?.compareTo("zpado").toString(2001404299)
2021-03-12 00:37:47,668 [main:61] - replacement of attributes["href"] of type String? is (href)?.lowercase()
2021-03-12 00:37:47,802 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:37:47,802 [main:66] - Compilation checking started
2021-03-12 00:37:48,389 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:48,393 [main:53] - replacing ("title", String)
2021-03-12 00:37:48,393 [main:50] - replacing "title" String
2021-03-12 00:37:48,393 [main:54] - Getting value of type String
2021-03-12 00:37:48,540 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:37:48,544 [main:58] - GENERATED VALUE OF TYPE String = "xasge"
2021-03-12 00:37:48,544 [main:61] - GENERATED IS CALL =false
2021-03-12 00:37:48,747 [main:67] - randomType = Body?
2021-03-12 00:37:48,900 [main:302] - generating value of type = Body false depth = 0
2021-03-12 00:37:48,903 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:37:49,034 [main:194] - Type params = []
2021-03-12 00:37:49,269 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:37:49,270 [main:78] - Generated call from random type = (Body())?.name.trim()
2021-03-12 00:37:49,270 [main:61] - replacement of "title" of type String is (Body())?.name.trim()
2021-03-12 00:37:49,389 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:37:49,390 [main:66] - Compilation checking started
2021-03-12 00:37:49,941 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:49,942 [main:53] - replacing (attributes["href"], String?)
2021-03-12 00:37:49,942 [main:50] - replacing attributes["href"] String?
2021-03-12 00:37:49,942 [main:54] - Getting value of type String?
2021-03-12 00:37:50,080 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:37:50,085 [main:58] - GENERATED VALUE OF TYPE String? = "sjggd"
2021-03-12 00:37:50,085 [main:61] - GENERATED IS CALL =false
2021-03-12 00:37:50,100 [main:67] - randomType = Head
2021-03-12 00:37:50,240 [main:302] - generating value of type = Head false depth = 0
2021-03-12 00:37:50,244 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}
2021-03-12 00:37:50,387 [main:194] - Type params = []
2021-03-12 00:37:50,578 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:37:50,712 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:50,849 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:50,984 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:37:50,989 [main:78] - Generated call from random type = (Head()).name.replaceFirst('鿨', '胀', false)
2021-03-12 00:37:50,989 [main:106] - GETTING String? from String
2021-03-12 00:37:51,021 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:37:51,021 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:37:51,144 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:37:51,148 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:37:51,152 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.takeLastWhile({a: Char -> true})
2021-03-12 00:37:51,152 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74a0bf2d]]
2021-03-12 00:37:51,152 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:37:51,288 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:51,424 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:51,427 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74a0bf2d]
2021-03-12 00:37:51,559 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:51,692 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:51,696 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.subSequence(29600351, -1726414934).substring(400222516, -1509855206)
2021-03-12 00:37:51,696 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]]
2021-03-12 00:37:51,696 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]
2021-03-12 00:37:51,827 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:51,831 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.repeat(-1221736416)
2021-03-12 00:37:51,832 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:37:51,832 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:37:51,832 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.trimIndent()
2021-03-12 00:37:51,832 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2455d93]]
2021-03-12 00:37:51,832 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:37:51,963 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:51,966 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2455d93]
2021-03-12 00:37:51,967 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.get(-379603636).titlecase()
2021-03-12 00:37:51,967 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:37:51,967 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:37:52,100 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:37:52,235 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:37:52,239 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.replaceAfterLast('ﭤ', "yzskk", TextElement("utmeo").text)
2021-03-12 00:37:52,239 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:37:52,239 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:37:52,370 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:52,505 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:52,642 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:37:52,649 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.replaceRange(1846874029, 572927160, "lydxb")
2021-03-12 00:37:52,649 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:37:52,649 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:37:52,649 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.toUpperCase()
2021-03-12 00:37:52,649 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]]
2021-03-12 00:37:52,649 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:37:52,781 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:52,785 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]
2021-03-12 00:37:52,785 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.get(1377347127).uppercase()
2021-03-12 00:37:52,785 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d9dd01]]
2021-03-12 00:37:52,785 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d9dd01]
2021-03-12 00:37:52,920 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:37:53,070 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:37:53,074 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.commonPrefixWith("upfck", false)
2021-03-12 00:37:53,074 [main:61] - replacement of attributes["href"] of type String? is (TextElement("utmeo").text)?.trimIndent()
2021-03-12 00:37:53,206 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:37:53,208 [main:53] - replacing (Body(), Body)
2021-03-12 00:37:53,208 [main:50] - replacing Body() Body
2021-03-12 00:37:53,208 [main:54] - Getting value of type Body
2021-03-12 00:37:53,338 [main:302] - generating value of type = Body false depth = 0
2021-03-12 00:37:53,342 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:37:53,476 [main:194] - Type params = []
2021-03-12 00:37:53,606 [main:58] - GENERATED VALUE OF TYPE Body = Body()
2021-03-12 00:37:53,607 [main:61] - GENERATED IS CALL =true
2021-03-12 00:37:53,775 [main:67] - randomType = B?
2021-03-12 00:37:53,905 [main:302] - generating value of type = B false depth = 0
2021-03-12 00:37:53,909 [main:112] - generating klass B text = class B() : BodyTag("b")
2021-03-12 00:37:54,047 [main:194] - Type params = []
2021-03-12 00:37:54,256 [main:106] - GETTING Body from LI
2021-03-12 00:37:54,315 [main:106] - GETTING Body from String
2021-03-12 00:37:54,331 [main:106] - GETTING Body from String
2021-03-12 00:37:54,332 [main:106] - GETTING Body from P
2021-03-12 00:37:54,389 [main:106] - GETTING Body from HTML
2021-03-12 00:37:54,429 [main:113] - Case = [public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]]
2021-03-12 00:37:54,429 [main:149] - GENERATING call of type public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]
2021-03-12 00:37:54,429 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).body(init)
2021-03-12 00:37:54,429 [main:113] - Case = [public final fun bodyNoInline(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@22614b31]]
2021-03-12 00:37:54,429 [main:149] - GENERATING call of type public final fun bodyNoInline(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@22614b31]
2021-03-12 00:37:54,430 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).bodyNoInline(init)
2021-03-12 00:37:54,430 [main:61] - replacement of Body() of type Body is (htmlNoInline({ require(false)})).body(init)
2021-03-12 00:37:54,561 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:37:54,562 [main:66] - Compilation checking started
2021-03-12 00:37:55,133 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:37:55,136 [main:53] - replacing (li { +arg; +"$htmlVal"; +"$bodyVar" }, LI)
2021-03-12 00:37:55,136 [main:50] - replacing li { +arg; +"$htmlVal"; +"$bodyVar" } LI
2021-03-12 00:37:55,136 [main:54] - Getting value of type LI
2021-03-12 00:37:55,274 [main:302] - generating value of type = LI false depth = 0
2021-03-12 00:37:55,278 [main:112] - generating klass LI text = class LI() : BodyTag("li")
2021-03-12 00:37:55,412 [main:194] - Type params = []
2021-03-12 00:37:55,563 [main:58] - GENERATED VALUE OF TYPE LI = LI()
2021-03-12 00:37:55,564 [main:61] - GENERATED IS CALL =true
2021-03-12 00:37:55,880 [main:67] - randomType = UByte?
2021-03-12 00:37:56,011 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:37:56,048 [main:106] - GETTING LI from String
2021-03-12 00:37:56,065 [main:106] - GETTING LI from LI
2021-03-12 00:37:56,123 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in LI[SimpleFunctionDescriptorImpl@6056149b], public final inline fun li(init: LI.() -> kotlin.Unit): LI defined in UL[SimpleFunctionDescriptorImpl@7131eef0]]
2021-03-12 00:37:56,123 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in LI[SimpleFunctionDescriptorImpl@6056149b]
2021-03-12 00:37:56,260 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:37:56,264 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:56,402 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:56,406 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:37:56,888 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:37:56,892 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:37:56,896 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:37:57,033 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:37:57,038 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:37:57,561 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:37:57,565 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:37:57,568 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:37:57,569 [main:95] - GENERATED = require(true, { "eioox"})
2021-03-12 00:37:57,569 [main:95] - GENERATED = repeat(612284411, {a: Int -> require(true, { "eioox"})})
2021-03-12 00:37:57,569 [main:149] - GENERATING call of type public final inline fun li(init: LI.() -> kotlin.Unit): LI defined in UL[SimpleFunctionDescriptorImpl@7131eef0]
2021-03-12 00:37:57,704 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<LI, Unit> false depth = 0
2021-03-12 00:37:57,708 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:37:57,883 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:37:57,888 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:37:58,205 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:37:58,206 [main:95] - GENERATED = print("wgaif")
2021-03-12 00:37:58,206 [main:117] - GENERATED CALL = (UL().li()).ul({ repeat(612284411, {a: Int -> require(true, { "eioox"})})}).li({ print("wgaif")})
2021-03-12 00:37:58,206 [main:61] - replacement of li { +arg; +"$htmlVal"; +"$bodyVar" } of type LI is (UL().li()).ul({ repeat(612284411, {a: Int -> require(true, { "eioox"})})}).li({ print("wgaif")})
2021-03-12 00:37:58,338 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:37:58,344 [main:53] - replacing ("Kotlin", String)
2021-03-12 00:37:58,344 [main:50] - replacing "Kotlin" String
2021-03-12 00:37:58,344 [main:54] - Getting value of type String
2021-03-12 00:37:58,483 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:37:58,487 [main:58] - GENERATED VALUE OF TYPE String = "uyduq"
2021-03-12 00:37:58,487 [main:61] - GENERATED IS CALL =false
2021-03-12 00:37:58,967 [main:67] - randomType = Set<Char?>
2021-03-12 00:37:58,967 [main:106] - GETTING String from String
2021-03-12 00:37:58,984 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:37:58,984 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:37:58,984 [main:117] - GENERATED CALL = (A().href).capitalize()
2021-03-12 00:37:58,984 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]]
2021-03-12 00:37:58,984 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:37:59,125 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:37:59,129 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]
2021-03-12 00:37:59,271 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:37:59,414 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:37:59,418 [main:117] - GENERATED CALL = (A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true)
2021-03-12 00:37:59,418 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:37:59,418 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:37:59,549 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:37:59,692 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:37:59,697 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:38:00,006 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:38:00,011 [main:95] - GENERATED = StringBuilder(1117888251)
2021-03-12 00:38:00,011 [main:117] - GENERATED CALL = (A().href).replaceRange(htmlVal, htmlVal, StringBuilder(1117888251))
2021-03-12 00:38:00,012 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2455d93]]
2021-03-12 00:38:00,012 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:38:00,012 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2455d93]
2021-03-12 00:38:00,012 [main:117] - GENERATED CALL = (A().href).get(bodyVar).titlecase()
2021-03-12 00:38:00,012 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:38:00,012 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:38:00,012 [main:117] - GENERATED CALL = (A().href).trim()
2021-03-12 00:38:00,012 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]]
2021-03-12 00:38:00,013 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]
2021-03-12 00:38:00,169 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:00,174 [main:117] - GENERATED CALL = (A().href).substring(-254072244)
2021-03-12 00:38:00,174 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:38:00,174 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:38:00,315 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:00,452 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:00,594 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:00,598 [main:117] - GENERATED CALL = (A().href).replaceBefore('ꊀ', "mbwpp", "elcvn")
2021-03-12 00:38:00,598 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:38:00,598 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:38:00,598 [main:117] - GENERATED CALL = (A().href).trimMargin(testBodyHtmlNoInline())
2021-03-12 00:38:00,598 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]]
2021-03-12 00:38:00,598 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]
2021-03-12 00:38:00,599 [main:117] - GENERATED CALL = (A().href).take(htmlVal)
2021-03-12 00:38:00,599 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]]
2021-03-12 00:38:00,599 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:38:00,599 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]
2021-03-12 00:38:00,730 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:38:00,878 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:38:00,883 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:38:01,367 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:38:01,371 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 00:38:01,534 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 00:38:01,540 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 00:38:01,678 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 00:38:01,682 [main:95] - GENERATED = setOfNotNull<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 00:38:01,683 [main:95] - GENERATED = Regex("fmeck", setOfNotNull<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 00:38:01,683 [main:117] - GENERATED CALL = (A().href).subSequence(bodyVar, htmlVal).replaceFirst(Regex("fmeck", setOfNotNull<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)), testHtmlNoInline())
2021-03-12 00:38:01,683 [main:61] - replacement of "Kotlin" of type String is (A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true)
2021-03-12 00:38:01,822 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:38:01,823 [main:66] - Compilation checking started
2021-03-12 00:38:02,372 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:38:02,375 [main:53] - replacing (args, Array<String>)
2021-03-12 00:38:02,375 [main:50] - replacing args Array<String>
2021-03-12 00:38:02,375 [main:54] - Getting value of type Array<String>
2021-03-12 00:38:02,519 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-12 00:38:02,664 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Strg> = TODO()
2021-03-12 00:38:02,669 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Strg> = TODO()
2021-03-12 00:38:02,995 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:38:02,999 [main:95] - GENERATED = arrayOfNulls<String>(872482887)
2021-03-12 00:38:02,999 [main:58] - GENERATED VALUE OF TYPE Array<String> = arrayOfNulls<String>(872482887)
2021-03-12 00:38:02,999 [main:61] - GENERATED IS CALL =true
2021-03-12 00:38:03,161 [main:67] - randomType = Long
2021-03-12 00:38:03,295 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:38:03,333 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:03,350 [main:106] - GETTING Array<String> from UL
2021-03-12 00:38:03,420 [main:106] - GETTING Array<String> from HTML
2021-03-12 00:38:03,460 [main:106] - GETTING Array<String> from P
2021-03-12 00:38:03,518 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:03,519 [main:106] - GETTING Array<String> from H1
2021-03-12 00:38:03,577 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:03,578 [main:106] - GETTING Array<String> from P
2021-03-12 00:38:03,579 [main:106] - GETTING Array<String> from Title
2021-03-12 00:38:03,618 [main:106] - GETTING Array<String> from B
2021-03-12 00:38:03,675 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:03,676 [main:106] - GETTING Array<String> from Head
2021-03-12 00:38:03,716 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:03,717 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:03,718 [main:106] - GETTING Array<String> from HTML
2021-03-12 00:38:03,719 [main:106] - GETTING Array<String> from Int
2021-03-12 00:38:03,750 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:03,751 [main:106] - GETTING Array<String> from Body
2021-03-12 00:38:03,810 [main:106] - GETTING Array<String> from Body
2021-03-12 00:38:03,811 [main:106] - GETTING Array<String> from LI
2021-03-12 00:38:03,870 [main:61] - replacement of args of type Array<String> is arrayOfNulls<String>(872482887)
2021-03-12 00:38:04,008 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:38:04,011 [main:53] - replacing ({ +"some text" }, [@kotlin.ExtensionFunctionType] Function1<P, Unit>)
2021-03-12 00:38:04,011 [main:50] - replacing { +"some text" } [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:38:04,011 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:38:04,147 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:04,151 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:04,157 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<P, Unit> = { println()}
2021-03-12 00:38:04,158 [main:61] - GENERATED IS CALL =false
2021-03-12 00:38:04,481 [main:67] - randomType = ArrayDeque<Char>
2021-03-12 00:38:04,623 [main:302] - generating value of type = ArrayDeque<Char> false depth = 0
2021-03-12 00:38:04,767 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Char> = TODO()
2021-03-12 00:38:04,771 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Char> = TODO()
2021-03-12 00:38:05,087 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:38:05,091 [main:95] - GENERATED = ArrayDeque<Char>(474205855)
2021-03-12 00:38:05,258 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from H1
2021-03-12 00:38:05,320 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Head
2021-03-12 00:38:05,363 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:05,383 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:38:05,448 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from LI
2021-03-12 00:38:05,510 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from B
2021-03-12 00:38:05,571 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:38:05,615 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:38:05,677 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from UL
2021-03-12 00:38:05,741 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:38:05,745 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:38:05,749 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:05,753 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:38:05,757 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:05,761 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:05,765 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:05,769 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:05,773 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Title
2021-03-12 00:38:05,824 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:05,828 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Int
2021-03-12 00:38:05,858 [main:61] - replacement of { +"some text" } of type [@kotlin.ExtensionFunctionType] Function1<P, Unit> is { println()}
2021-03-12 00:38:05,994 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:38:05,997 [main:53] - replacing (testHtmlNoInline(), String)
2021-03-12 00:38:05,997 [main:50] - replacing testHtmlNoInline() String
2021-03-12 00:38:05,998 [main:54] - Getting value of type String
2021-03-12 00:38:06,135 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:06,138 [main:58] - GENERATED VALUE OF TYPE String = "dajtc"
2021-03-12 00:38:06,139 [main:61] - GENERATED IS CALL =false
2021-03-12 00:38:06,299 [main:67] - randomType = UShort
2021-03-12 00:38:06,433 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:38:06,463 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1bf5d941]
2021-03-12 00:38:06,601 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:38:06,605 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:38:06,742 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:06,746 [main:78] - Generated call from random type = (29499.toUShort()).compareTo(72.toUByte()).toString(-1324310237)
2021-03-12 00:38:06,747 [main:106] - GETTING String from Head
2021-03-12 00:38:06,808 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:38:06,809 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:38:06,809 [main:117] - GENERATED CALL = (HTML().head()).name.concat(A().href)
2021-03-12 00:38:06,809 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:38:06,809 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:38:06,809 [main:117] - GENERATED CALL = (HTML().head()).name.trimStart()
2021-03-12 00:38:06,809 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]]
2021-03-12 00:38:06,809 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]
2021-03-12 00:38:06,810 [main:117] - GENERATED CALL = (HTML().head()).name.uppercase()
2021-03-12 00:38:06,810 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:38:06,810 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:38:06,951 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:07,094 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:07,239 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:38:07,243 [main:117] - GENERATED CALL = (HTML().head()).name.replace('꘰', '쎊', true)
2021-03-12 00:38:07,243 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:38:07,244 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:38:07,244 [main:117] - GENERATED CALL = (HTML().head()).name.toLowerCase()
2021-03-12 00:38:07,244 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:38:07,244 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:38:07,380 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:07,526 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:07,530 [main:117] - GENERATED CALL = (HTML().head()).name.replaceAfterLast('昁', expected, "dnxdm")
2021-03-12 00:38:07,530 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:38:07,531 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:38:07,683 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:07,826 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:07,831 [main:117] - GENERATED CALL = (HTML().head()).name.replaceBefore('둮', "hplte", expected)
2021-03-12 00:38:07,831 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d]]
2021-03-12 00:38:07,831 [main:117] - GENERATED CALL = (HTML().head()).name
2021-03-12 00:38:07,831 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:38:07,831 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:38:07,970 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:08,123 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:08,128 [main:117] - GENERATED CALL = (HTML().head()).name.replaceBeforeLast('䖧', "dqotv", testHtmlNoInline())
2021-03-12 00:38:08,128 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]]
2021-03-12 00:38:08,128 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:38:08,264 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:08,268 [main:117] - GENERATED CALL = (HTML().head()).name.substringBeforeLast('櫰', testBodyHtmlNoInline())
2021-03-12 00:38:08,268 [main:61] - replacement of testHtmlNoInline() of type String is (HTML().head()).name.replace('꘰', '쎊', true)
2021-03-12 00:38:08,407 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:38:08,407 [main:66] - Compilation checking started
2021-03-12 00:38:08,797 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (HTML().head()).name.replace('꘰', '쎊', true)) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:38:08,802 [main:53] - replacing ("2", String)
2021-03-12 00:38:08,803 [main:50] - replacing "2" String
2021-03-12 00:38:08,803 [main:54] - Getting value of type String
2021-03-12 00:38:09,014 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:09,020 [main:58] - GENERATED VALUE OF TYPE String = "yoxbi"
2021-03-12 00:38:09,020 [main:61] - GENERATED IS CALL =false
2021-03-12 00:38:09,392 [main:67] - randomType = Collection<Head>
2021-03-12 00:38:09,393 [main:106] - GETTING String from B
2021-03-12 00:38:09,480 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:38:09,480 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:38:09,481 [main:117] - GENERATED CALL = (B().b()).name.trim()
2021-03-12 00:38:09,481 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:38:09,481 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:38:09,621 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:38:09,625 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:38:09,629 [main:117] - GENERATED CALL = (B().b()).name.takeLastWhile({a: Char -> false})
2021-03-12 00:38:09,629 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:38:09,629 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:38:09,629 [main:117] - GENERATED CALL = (B().b()).name.trimIndent()
2021-03-12 00:38:09,630 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in B[PropertyDescriptorImpl@2b31fe92], public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]]
2021-03-12 00:38:09,630 [main:149] - GENERATING call of type public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]
2021-03-12 00:38:09,630 [main:117] - GENERATED CALL = (B().b()).attributes.get(testHtmlNoInline())
2021-03-12 00:38:09,630 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2]]
2021-03-12 00:38:09,630 [main:117] - GENERATED CALL = (B().b()).name
2021-03-12 00:38:09,630 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:38:09,630 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:38:09,764 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:38:09,768 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:38:09,772 [main:117] - GENERATED CALL = (B().b()).name.filterNot({a: Char -> false})
2021-03-12 00:38:09,772 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:38:09,772 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:38:09,772 [main:117] - GENERATED CALL = (B().b()).name.trimStart()
2021-03-12 00:38:09,772 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:38:09,772 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:38:09,931 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:10,074 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:10,077 [main:117] - GENERATED CALL = (B().b()).name.padStart(-1161215797, '')
2021-03-12 00:38:10,078 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:38:10,078 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:38:10,217 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:10,356 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:10,497 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:38:10,640 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:38:10,645 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:38:10,957 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:38:10,964 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 00:38:10,964 [main:117] - GENERATED CALL = (B().b()).name.replaceRange(1249290172, -1506766735, StringBuilder(StringBuilder()))
2021-03-12 00:38:10,964 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]]
2021-03-12 00:38:10,964 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]
2021-03-12 00:38:11,105 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:11,243 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:11,247 [main:117] - GENERATED CALL = (B().b()).name.padEnd(-297141803, '')
2021-03-12 00:38:11,248 [main:61] - replacement of "2" of type String is (B().b()).name.padStart(-1161215797, '')
2021-03-12 00:38:11,388 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:38:11,389 [main:66] - Compilation checking started
2021-03-12 00:38:11,746 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", (B().b()).name.padStart(-1161215797, ''), "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:38:11,749 [main:53] - replacing (result.toString(), String)
2021-03-12 00:38:11,749 [main:50] - replacing result.toString() String
2021-03-12 00:38:11,750 [main:54] - Getting value of type String
2021-03-12 00:38:11,907 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:11,911 [main:58] - GENERATED VALUE OF TYPE String = "fyxhc"
2021-03-12 00:38:11,911 [main:61] - GENERATED IS CALL =false
2021-03-12 00:38:12,257 [main:67] - randomType = Long?
2021-03-12 00:38:12,391 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:38:12,433 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67a831b1]
2021-03-12 00:38:12,433 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]
2021-03-12 00:38:12,434 [main:78] - Generated call from random type = (5878898954649041214)?.toChar().lowercase()
2021-03-12 00:38:12,434 [main:106] - GETTING String from String
2021-03-12 00:38:12,450 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:38:12,450 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:38:12,587 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:38:12,591 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:38:12,596 [main:117] - GENERATED CALL = (testAllInline()).takeWhile({a: Char -> true})
2021-03-12 00:38:12,596 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:38:12,596 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:38:12,730 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:12,870 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:12,874 [main:117] - GENERATED CALL = (testAllInline()).replaceBeforeLast('ﺕ', "qzlan", testBodyNoInline())
2021-03-12 00:38:12,874 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:38:12,874 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:38:13,007 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:38:13,011 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:38:13,014 [main:117] - GENERATED CALL = (testAllInline()).filter({a: Char -> false})
2021-03-12 00:38:13,015 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:38:13,015 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:38:13,134 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:13,138 [main:117] - GENERATED CALL = (testAllInline()).length.toString(1582812949)
2021-03-12 00:38:13,138 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]]
2021-03-12 00:38:13,138 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]
2021-03-12 00:38:13,257 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:13,261 [main:117] - GENERATED CALL = (testAllInline()).take(-915850999)
2021-03-12 00:38:13,261 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]]
2021-03-12 00:38:13,261 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]
2021-03-12 00:38:13,380 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:13,503 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:13,507 [main:117] - GENERATED CALL = (testAllInline()).removeRange(706255542, -936803564)
2021-03-12 00:38:13,507 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]]
2021-03-12 00:38:13,507 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]
2021-03-12 00:38:13,626 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:38:13,630 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:38:13,634 [main:117] - GENERATED CALL = (testAllInline()).replaceFirstChar({a: Char -> '騟'})
2021-03-12 00:38:13,634 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:38:13,634 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:38:13,752 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:13,895 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:14,018 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:38:14,022 [main:117] - GENERATED CALL = (testAllInline()).replace('甼', 'ꡥ', true)
2021-03-12 00:38:14,022 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]]
2021-03-12 00:38:14,022 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]
2021-03-12 00:38:14,141 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:14,145 [main:117] - GENERATED CALL = (testAllInline()).repeat(1584444808)
2021-03-12 00:38:14,145 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:38:14,145 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:38:14,145 [main:117] - GENERATED CALL = (testAllInline()).trimIndent()
2021-03-12 00:38:14,146 [main:61] - replacement of result.toString() of type String is "fyxhc"
2021-03-12 00:38:14,264 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:38:14,265 [main:66] - Compilation checking started
2021-03-12 00:38:14,792 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:38:14,795 [main:53] - replacing ("XML encoding with Kotlin", String)
2021-03-12 00:38:14,796 [main:50] - replacing "XML encoding with Kotlin" String
2021-03-12 00:38:14,796 [main:54] - Getting value of type String
2021-03-12 00:38:14,920 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:14,924 [main:58] - GENERATED VALUE OF TYPE String = "zvnuz"
2021-03-12 00:38:14,924 [main:61] - GENERATED IS CALL =false
2021-03-12 00:38:14,938 [main:67] - randomType = TextElement
2021-03-12 00:38:15,058 [main:302] - generating value of type = TextElement false depth = 0
2021-03-12 00:38:15,062 [main:112] - generating klass TextElement text = class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}
2021-03-12 00:38:15,181 [main:194] - Type params = []
2021-03-12 00:38:15,343 [main:302] - generating value of type = String true depth = 2
2021-03-12 00:38:15,361 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:38:15,361 [main:78] - Generated call from random type = (TextElement("zgjmo")).text.capitalize()
2021-03-12 00:38:15,362 [main:106] - GETTING String from P
2021-03-12 00:38:15,442 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]]
2021-03-12 00:38:15,442 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]
2021-03-12 00:38:15,564 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:38:15,568 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:38:15,571 [main:117] - GENERATED CALL = (B().pNoInline()).name.replaceFirstChar({a: Char -> '㗌'})
2021-03-12 00:38:15,572 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in P[PropertyDescriptorImpl@266183d2], public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]]
2021-03-12 00:38:15,572 [main:149] - GENERATING call of type public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]
2021-03-12 00:38:15,572 [main:117] - GENERATED CALL = (B().pNoInline()).attributes.get(TextElement("utmeo").text)
2021-03-12 00:38:15,572 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:38:15,572 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:38:15,572 [main:117] - GENERATED CALL = (B().pNoInline()).name.trimMargin(href)
2021-03-12 00:38:15,572 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:38:15,572 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:38:15,572 [main:117] - GENERATED CALL = (B().pNoInline()).name.toUpperCase()
2021-03-12 00:38:15,572 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:38:15,572 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:38:15,573 [main:117] - GENERATED CALL = (B().pNoInline()).name.trimStart()
2021-03-12 00:38:15,573 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:38:15,573 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:38:15,705 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:15,709 [main:117] - GENERATED CALL = (B().pNoInline()).name.substringAfterLast('', TextElement("utmeo").text)
2021-03-12 00:38:15,709 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:38:15,709 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:38:15,841 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:38:16,015 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:38:16,020 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:38:16,363 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:38:16,371 [main:95] - GENERATED = StringBuilder("mxvwv")
2021-03-12 00:38:16,371 [main:117] - GENERATED CALL = (B().pNoInline()).name.removePrefix(StringBuilder("mxvwv"))
2021-03-12 00:38:16,371 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:38:16,371 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:38:16,505 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:38:16,508 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:38:16,512 [main:117] - GENERATED CALL = (B().pNoInline()).name.filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:38:16,512 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:38:16,513 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:38:16,649 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:38:16,793 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 00:38:16,798 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 00:38:17,260 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:38:17,264 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:38:17,268 [main:95] - GENERATED = IntRange(326016071, -287128967)
2021-03-12 00:38:17,268 [main:117] - GENERATED CALL = (B().pNoInline()).name.slice(IntRange(326016071, -287128967))
2021-03-12 00:38:17,268 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:38:17,268 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:38:17,404 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:38:17,408 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:38:17,412 [main:117] - GENERATED CALL = (B().pNoInline()).name.filterNot({a: Char -> false})
2021-03-12 00:38:17,412 [main:61] - replacement of "XML encoding with Kotlin" of type String is "zvnuz"
2021-03-12 00:38:17,549 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:38:17,550 [main:66] - Compilation checking started
2021-03-12 00:38:18,083 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"zvnuz" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:38:18,086 [main:53] - replacing (ul {
                            for (arg in arrayOfNulls<String>(872482887))
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }, UL)
2021-03-12 00:38:18,086 [main:50] - replacing ul {
                            for (arg in arrayOfNulls<String>(872482887))
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        } UL
2021-03-12 00:38:18,086 [main:54] - Getting value of type UL
2021-03-12 00:38:18,244 [main:302] - generating value of type = UL false depth = 0
2021-03-12 00:38:18,248 [main:112] - generating klass UL text = class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}
2021-03-12 00:38:18,385 [main:194] - Type params = []
2021-03-12 00:38:18,504 [main:58] - GENERATED VALUE OF TYPE UL = UL()
2021-03-12 00:38:18,504 [main:61] - GENERATED IS CALL =true
2021-03-12 00:38:19,114 [main:67] - randomType = List<Function1<Head, Body?>>?
2021-03-12 00:38:19,115 [main:106] - GETTING UL from UL
2021-03-12 00:38:19,173 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e], public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]]
2021-03-12 00:38:19,173 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]
2021-03-12 00:38:19,309 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:19,313 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:19,448 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:38:19,453 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:38:19,725 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:38:19,725 [main:95] - GENERATED = print("ikcwe")
2021-03-12 00:38:19,726 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]
2021-03-12 00:38:19,845 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:38:19,848 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:19,972 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:19,977 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:20,390 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:20,394 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:38:20,398 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:38:20,398 [main:95] - GENERATED = require(true, { "bpkna"})
2021-03-12 00:38:20,398 [main:117] - GENERATED CALL = (B().ul()).p({ print("ikcwe")}).ul({ require(true, { "bpkna"})})
2021-03-12 00:38:20,398 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in BodyTag[SimpleFunctionDescriptorImpl@38146854], public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in UL[SimpleFunctionDescriptorImpl@3b7d9c92]]
2021-03-12 00:38:20,398 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in BodyTag[SimpleFunctionDescriptorImpl@38146854]
2021-03-12 00:38:20,526 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:38:20,530 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:20,687 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:38:20,692 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:38:20,979 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:38:20,980 [main:95] - GENERATED = println("lssuk")
2021-03-12 00:38:20,980 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in UL[SimpleFunctionDescriptorImpl@3b7d9c92]
2021-03-12 00:38:21,099 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:38:21,103 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:21,228 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:21,232 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:21,644 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:38:21,648 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:38:21,651 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:38:21,832 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:21,837 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:22,252 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:38:22,256 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:38:22,260 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:38:22,260 [main:95] - GENERATED = check(false, { "gczmj"})
2021-03-12 00:38:22,260 [main:95] - GENERATED = repeat(1165158278, {a: Int -> check(false, { "gczmj"})})
2021-03-12 00:38:22,260 [main:117] - GENERATED CALL = (B().ul()).ul({ println("lssuk")}).ul({ repeat(1165158278, {a: Int -> check(false, { "gczmj"})})})
2021-03-12 00:38:22,261 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in UL[SimpleFunctionDescriptorImpl@4f322f9e], public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in B[SimpleFunctionDescriptorImpl@7d275aa2]]
2021-03-12 00:38:22,261 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in UL[SimpleFunctionDescriptorImpl@4f322f9e]
2021-03-12 00:38:22,380 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:38:22,384 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:22,511 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:22,516 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:22,786 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:22,790 [main:95] - GENERATED = require(true)
2021-03-12 00:38:22,790 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in B[SimpleFunctionDescriptorImpl@7d275aa2]
2021-03-12 00:38:22,909 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:38:22,913 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:23,039 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:23,044 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:23,349 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:23,353 [main:95] - GENERATED = require(true)
2021-03-12 00:38:23,353 [main:117] - GENERATED CALL = (B().ul()).b({ require(true)}).ul({ require(true)})
2021-03-12 00:38:23,354 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in UL[SimpleFunctionDescriptorImpl@3b7d9c92]]
2021-03-12 00:38:23,354 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in UL[SimpleFunctionDescriptorImpl@3b7d9c92]
2021-03-12 00:38:23,487 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:38:23,491 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:23,638 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:23,643 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:23,953 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:23,958 [main:95] - GENERATED = require(true)
2021-03-12 00:38:23,958 [main:117] - GENERATED CALL = (B().ul()).ul({ require(true)})
2021-03-12 00:38:23,958 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in UL[SimpleFunctionDescriptorImpl@65ed116e], public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in H1[SimpleFunctionDescriptorImpl@5a58b88c]]
2021-03-12 00:38:23,958 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in UL[SimpleFunctionDescriptorImpl@65ed116e]
2021-03-12 00:38:24,093 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:38:24,097 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:24,246 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:24,252 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:24,721 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:24,725 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:38:24,730 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:38:24,730 [main:95] - GENERATED = require(false, { "thhyi"})
2021-03-12 00:38:24,730 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in H1[SimpleFunctionDescriptorImpl@5a58b88c]
2021-03-12 00:38:24,865 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:38:24,869 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:25,007 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:25,012 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:25,328 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:25,332 [main:95] - GENERATED = check(true)
2021-03-12 00:38:25,333 [main:117] - GENERATED CALL = (B().ul()).h1({ require(false, { "thhyi"})}).ul({ check(true)})
2021-03-12 00:38:25,333 [main:113] - Case = [public final inline fun li(init: LI.() -> kotlin.Unit): LI defined in UL[SimpleFunctionDescriptorImpl@7131eef0], public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in LI[SimpleFunctionDescriptorImpl@6056149b]]
2021-03-12 00:38:25,333 [main:149] - GENERATING call of type public final inline fun li(init: LI.() -> kotlin.Unit): LI defined in UL[SimpleFunctionDescriptorImpl@7131eef0]
2021-03-12 00:38:25,469 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<LI, Unit> false depth = 0
2021-03-12 00:38:25,473 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:25,613 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:25,618 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:25,934 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:38:25,938 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:38:26,092 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:26,097 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:26,607 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:38:26,611 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:38:26,614 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:38:26,615 [main:95] - GENERATED = check(false, { "zxvgs"})
2021-03-12 00:38:26,615 [main:95] - GENERATED = contract({ check(false, { "zxvgs"})})
2021-03-12 00:38:26,615 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in LI[SimpleFunctionDescriptorImpl@6056149b]
2021-03-12 00:38:26,755 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:38:26,759 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:26,767 [main:117] - GENERATED CALL = (B().ul()).li({ contract({ check(false, { "zxvgs"})})}).ul({ println()})
2021-03-12 00:38:26,767 [main:61] - replacement of ul {
                            for (arg in arrayOfNulls<String>(872482887))
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        } of type UL is (B().ul()).b({ require(true)}).ul({ require(true)})
2021-03-12 00:38:26,898 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:38:26,901 [main:53] - replacing (args, Array<String>)
2021-03-12 00:38:26,901 [main:50] - replacing args Array<String>
2021-03-12 00:38:26,901 [main:54] - Getting value of type Array<String>
2021-03-12 00:38:27,039 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-12 00:38:27,180 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-12 00:38:27,186 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-12 00:38:27,664 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:38:27,668 [main:302] - generating value of type = Function1<Int, String> false depth = 3
2021-03-12 00:38:27,672 [main:302] - generating value of type = String true depth = 4
2021-03-12 00:38:27,676 [main:95] - GENERATED = Array<String>(-1701606424, {a: Int -> "jdqmy"})
2021-03-12 00:38:27,676 [main:58] - GENERATED VALUE OF TYPE Array<String> = Array<String>(-1701606424, {a: Int -> "jdqmy"})
2021-03-12 00:38:27,676 [main:61] - GENERATED IS CALL =true
2021-03-12 00:38:27,690 [main:67] - randomType = LI
2021-03-12 00:38:27,830 [main:302] - generating value of type = LI false depth = 0
2021-03-12 00:38:27,834 [main:112] - generating klass LI text = class LI() : BodyTag("li")
2021-03-12 00:38:27,965 [main:194] - Type params = []
2021-03-12 00:38:28,205 [main:106] - GETTING Array<String> from P
2021-03-12 00:38:28,313 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:28,336 [main:106] - GETTING Array<String> from Body
2021-03-12 00:38:28,395 [main:106] - GETTING Array<String> from P
2021-03-12 00:38:28,396 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:28,397 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:28,398 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:28,399 [main:106] - GETTING Array<String> from LI
2021-03-12 00:38:28,459 [main:106] - GETTING Array<String> from UL
2021-03-12 00:38:28,517 [main:106] - GETTING Array<String> from B
2021-03-12 00:38:28,574 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:28,575 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:28,576 [main:106] - GETTING Array<String> from String
2021-03-12 00:38:28,577 [main:106] - GETTING Array<String> from Head
2021-03-12 00:38:28,617 [main:106] - GETTING Array<String> from Title
2021-03-12 00:38:28,654 [main:106] - GETTING Array<String> from Body
2021-03-12 00:38:28,655 [main:106] - GETTING Array<String> from HTML
2021-03-12 00:38:28,696 [main:106] - GETTING Array<String> from H1
2021-03-12 00:38:28,753 [main:106] - GETTING Array<String> from Int
2021-03-12 00:38:28,786 [main:106] - GETTING Array<String> from HTML
2021-03-12 00:38:28,786 [main:61] - replacement of args of type Array<String> is Array<String>(-1701606424, {a: Int -> "jdqmy"})
2021-03-12 00:38:28,930 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:38:28,934 [main:53] - replacing ({
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }, [@kotlin.ExtensionFunctionType] Function1<P, Unit>)
2021-03-12 00:38:28,935 [main:50] - replacing {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    } [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:38:28,935 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:38:29,074 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:29,078 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:29,225 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:29,230 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:29,540 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:38:29,544 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:38:29,551 [main:95] - GENERATED = contract({ println()})
2021-03-12 00:38:29,551 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<P, Unit> = { contract({ println()})}
2021-03-12 00:38:29,551 [main:61] - GENERATED IS CALL =false
2021-03-12 00:38:29,710 [main:67] - randomType = Short
2021-03-12 00:38:29,845 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:38:29,911 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:38:29,966 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:38:30,041 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:30,061 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:30,065 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:30,069 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:30,073 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from LI
2021-03-12 00:38:30,136 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:38:30,140 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:38:30,203 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Int
2021-03-12 00:38:30,236 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from B
2021-03-12 00:38:30,297 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:30,301 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Array<String>
2021-03-12 00:38:30,317 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:30,321 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Title
2021-03-12 00:38:30,363 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Int
2021-03-12 00:38:30,367 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:30,371 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:38:30,375 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:38:30,379 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:38:30,384 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:38:30,388 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Head
2021-03-12 00:38:30,431 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from H1
2021-03-12 00:38:30,492 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from UL
2021-03-12 00:38:30,550 [main:61] - replacement of {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    } of type [@kotlin.ExtensionFunctionType] Function1<P, Unit> is { contract({ println()})}
2021-03-12 00:38:30,709 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:38:30,709 [main:66] - Compilation checking started
2021-03-12 00:38:31,033 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"zvnuz" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p { contract({ println()})}
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:38:31,036 [main:53] - replacing ("this format can be used as an alternative markup to XML", String)
2021-03-12 00:38:31,036 [main:50] - replacing "this format can be used as an alternative markup to XML" String
2021-03-12 00:38:31,036 [main:54] - Getting value of type String
2021-03-12 00:38:31,174 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:31,178 [main:58] - GENERATED VALUE OF TYPE String = "nvecl"
2021-03-12 00:38:31,178 [main:61] - GENERATED IS CALL =false
2021-03-12 00:38:32,354 [main:67] - randomType = Function2<LinkedHashMap<Short, BodyTag>, HashSet<ArrayDeque<Char>>?, H1>
2021-03-12 00:38:32,354 [main:106] - GETTING String from String
2021-03-12 00:38:32,381 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]]
2021-03-12 00:38:32,381 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]
2021-03-12 00:38:32,521 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:32,525 [main:117] - GENERATED CALL = (A().href).repeat(-1637433757)
2021-03-12 00:38:32,526 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:38:32,526 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:38:32,668 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:38:32,671 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:38:32,675 [main:117] - GENERATED CALL = (A().href).takeLastWhile({a: Char -> true})
2021-03-12 00:38:32,675 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:38:32,675 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:38:32,829 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:32,833 [main:117] - GENERATED CALL = (A().href).replaceBefore('퓑', testBodyHtmlNoInline(), testBodyNoInline())
2021-03-12 00:38:32,833 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:38:32,833 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:38:32,833 [main:117] - GENERATED CALL = (A().href).trimEnd()
2021-03-12 00:38:32,833 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]]
2021-03-12 00:38:32,834 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]
2021-03-12 00:38:32,966 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:32,970 [main:117] - GENERATED CALL = (A().href).replaceIndent("flxxf")
2021-03-12 00:38:32,971 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]]
2021-03-12 00:38:32,971 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]
2021-03-12 00:38:32,971 [main:117] - GENERATED CALL = (A().href).drop(bodyVar)
2021-03-12 00:38:32,971 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:38:32,971 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:38:32,971 [main:117] - GENERATED CALL = (A().href).takeLast(bodyVar)
2021-03-12 00:38:32,971 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:38:32,971 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:38:33,092 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:38:33,095 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:38:33,099 [main:117] - GENERATED CALL = (A().href).filter({a: Char -> false})
2021-03-12 00:38:33,100 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:38:33,100 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:38:33,239 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:33,243 [main:117] - GENERATED CALL = (A().href).replaceBeforeLast('넫', TODO().toString(), TODO().toString())
2021-03-12 00:38:33,243 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:38:33,243 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:38:33,378 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:33,523 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:33,527 [main:117] - GENERATED CALL = (A().href).substringBefore('㏻', "jesvy")
2021-03-12 00:38:33,527 [main:61] - replacement of "this format can be used as an alternative markup to XML" of type String is (A().href).replaceIndent("flxxf")
2021-03-12 00:38:33,660 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:38:33,663 [main:53] - replacing (testHtmlNoInline(), String)
2021-03-12 00:38:33,664 [main:50] - replacing testHtmlNoInline() String
2021-03-12 00:38:33,664 [main:54] - Getting value of type String
2021-03-12 00:38:33,790 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:33,793 [main:58] - GENERATED VALUE OF TYPE String = "hetlt"
2021-03-12 00:38:33,794 [main:61] - GENERATED IS CALL =false
2021-03-12 00:38:33,808 [main:67] - randomType = B
2021-03-12 00:38:33,963 [main:302] - generating value of type = B false depth = 0
2021-03-12 00:38:33,967 [main:112] - generating klass B text = class B() : BodyTag("b")
2021-03-12 00:38:34,102 [main:194] - Type params = []
2021-03-12 00:38:34,344 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:38:34,472 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:38:34,476 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:38:34,480 [main:78] - Generated call from random type = (B()).name.filter({a: Char -> false})
2021-03-12 00:38:34,480 [main:61] - replacement of testHtmlNoInline() of type String is (B()).name.filter({a: Char -> false})
2021-03-12 00:38:34,617 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:38:34,617 [main:66] - Compilation checking started
2021-03-12 00:38:35,192 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"zvnuz" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:38:35,194 [main:53] - replacing (b { +"mixed" }, B)
2021-03-12 00:38:35,194 [main:50] - replacing b { +"mixed" } B
2021-03-12 00:38:35,194 [main:54] - Getting value of type B
2021-03-12 00:38:35,350 [main:302] - generating value of type = B false depth = 0
2021-03-12 00:38:35,354 [main:112] - generating klass B text = class B() : BodyTag("b")
2021-03-12 00:38:35,493 [main:194] - Type params = []
2021-03-12 00:38:35,619 [main:58] - GENERATED VALUE OF TYPE B = B()
2021-03-12 00:38:35,619 [main:61] - GENERATED IS CALL =true
2021-03-12 00:38:35,633 [main:67] - randomType = B
2021-03-12 00:38:35,783 [main:302] - generating value of type = B false depth = 0
2021-03-12 00:38:35,787 [main:112] - generating klass B text = class B() : BodyTag("b")
2021-03-12 00:38:35,923 [main:194] - Type params = []
2021-03-12 00:38:36,178 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@42da1125]
2021-03-12 00:38:36,304 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:36,308 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:36,455 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:36,460 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:36,942 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:36,946 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:38:36,950 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:38:36,950 [main:95] - GENERATED = require(false, { "pszxl"})
2021-03-12 00:38:36,950 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@b545afc]
2021-03-12 00:38:37,110 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:38:37,114 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:37,256 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:37,261 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:37,584 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:37,588 [main:95] - GENERATED = require(true)
2021-03-12 00:38:37,588 [main:78] - Generated call from random type = (B()).p({ require(false, { "pszxl"})}).b({ require(true)})
2021-03-12 00:38:37,588 [main:61] - replacement of b { +"mixed" } of type B is (B()).p({ require(false, { "pszxl"})}).b({ require(true)})
2021-03-12 00:38:37,729 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:38:37,732 [main:53] - replacing (init, [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>)
2021-03-12 00:38:37,732 [main:50] - replacing init [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:38:37,732 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:38:37,868 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> false depth = 0
2021-03-12 00:38:37,872 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:38,001 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:38,005 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:38,337 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:38,341 [main:95] - GENERATED = require(true)
2021-03-12 00:38:38,341 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> = { require(true)}
2021-03-12 00:38:38,342 [main:61] - GENERATED IS CALL =false
2021-03-12 00:38:38,683 [main:67] - randomType = Set<UShort>
2021-03-12 00:38:38,687 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from B
2021-03-12 00:38:38,753 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:38:38,773 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from UL
2021-03-12 00:38:38,836 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Head
2021-03-12 00:38:38,878 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:38:38,882 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from P
2021-03-12 00:38:38,944 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from LI
2021-03-12 00:38:39,005 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:38:39,009 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from H1
2021-03-12 00:38:39,072 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Title
2021-03-12 00:38:39,113 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from P
2021-03-12 00:38:39,117 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:38:39,121 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Body
2021-03-12 00:38:39,183 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Body
2021-03-12 00:38:39,187 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:38:39,191 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from HTML
2021-03-12 00:38:39,236 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:38:39,240 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from HTML
2021-03-12 00:38:39,244 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:38:39,244 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:38:39,262 [main:61] - replacement of init of type [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> is init
2021-03-12 00:38:39,400 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:38:39,403 [main:53] - replacing (init, [@kotlin.ExtensionFunctionType] Function1<Title, Unit>)
2021-03-12 00:38:39,403 [main:50] - replacing init [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:38:39,403 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:38:39,539 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Title, Unit> false depth = 0
2021-03-12 00:38:39,543 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:39,672 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:39,677 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:39,990 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:39,994 [main:95] - GENERATED = check(true)
2021-03-12 00:38:39,994 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Title, Unit> = { check(true)}
2021-03-12 00:38:39,994 [main:61] - GENERATED IS CALL =false
2021-03-12 00:38:40,512 [main:67] - randomType = Set<Long>
2021-03-12 00:38:40,512 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:38:40,534 [main:61] - replacement of init of type [@kotlin.ExtensionFunctionType] Function1<Title, Unit> is { check(true)}
2021-03-12 00:38:40,670 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:38:40,670 [main:66] - Compilation checking started
2021-03-12 00:38:41,227 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), { check(true)})
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"zvnuz" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:38:41,232 [main:53] - replacing (p { +"this format can be used as an alternative markup to XML" }, P)
2021-03-12 00:38:41,233 [main:50] - replacing p { +"this format can be used as an alternative markup to XML" } P
2021-03-12 00:38:41,233 [main:54] - Getting value of type P
2021-03-12 00:38:41,429 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:38:41,435 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:38:41,591 [main:194] - Type params = []
2021-03-12 00:38:41,717 [main:58] - GENERATED VALUE OF TYPE P = P()
2021-03-12 00:38:41,717 [main:61] - GENERATED IS CALL =true
2021-03-12 00:38:41,884 [main:67] - randomType = Byte
2021-03-12 00:38:42,035 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:38:42,087 [main:106] - GETTING P from P
2021-03-12 00:38:42,143 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]]
2021-03-12 00:38:42,143 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]
2021-03-12 00:38:42,286 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:38:42,290 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:42,298 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]
2021-03-12 00:38:42,435 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:42,439 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:42,588 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:42,593 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:43,083 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:38:43,087 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:38:43,092 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:38:43,253 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:43,258 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:43,757 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:38:43,761 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:38:43,765 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:38:43,928 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:43,934 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:44,295 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:38:44,299 [main:95] - GENERATED = require(true)
2021-03-12 00:38:44,299 [main:95] - GENERATED = repeat(1998010100, {a: Int -> require(true)})
2021-03-12 00:38:44,299 [main:95] - GENERATED = repeat(-969642147, {a: Int -> repeat(1998010100, {a: Int -> require(true)})})
2021-03-12 00:38:44,300 [main:117] - GENERATED CALL = (B().pNoInline()).ul({ println()}).pNoInline({ repeat(-969642147, {a: Int -> repeat(1998010100, {a: Int -> require(true)})})})
2021-03-12 00:38:44,300 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]]
2021-03-12 00:38:44,300 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]
2021-03-12 00:38:44,454 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:44,457 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:44,465 [main:117] - GENERATED CALL = (B().pNoInline()).p({ println()})
2021-03-12 00:38:44,465 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]]
2021-03-12 00:38:44,465 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:38:44,635 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:38:44,640 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:44,816 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:44,821 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:45,130 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:45,134 [main:95] - GENERATED = require(true)
2021-03-12 00:38:45,134 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]
2021-03-12 00:38:45,270 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:45,274 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:45,414 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:45,419 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:45,719 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:38:45,723 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:38:45,873 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:45,877 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:46,411 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:38:46,415 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:38:46,419 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:38:46,420 [main:95] - GENERATED = check(false, { "wupkl"})
2021-03-12 00:38:46,420 [main:95] - GENERATED = contract({ check(false, { "wupkl"})})
2021-03-12 00:38:46,420 [main:117] - GENERATED CALL = (B().pNoInline()).h1({ require(true)}).pNoInline({ contract({ check(false, { "wupkl"})})})
2021-03-12 00:38:46,420 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]]
2021-03-12 00:38:46,420 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:38:46,558 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:38:46,562 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:46,710 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:46,716 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:47,033 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:38:47,037 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:38:47,045 [main:95] - GENERATED = contract({ println()})
2021-03-12 00:38:47,045 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]
2021-03-12 00:38:47,183 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:47,187 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:47,330 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:38:47,335 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:38:47,648 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:38:47,648 [main:95] - GENERATED = println("mutxe")
2021-03-12 00:38:47,649 [main:117] - GENERATED CALL = (B().pNoInline()).b({ contract({ println()})}).pNoInline({ println("mutxe")})
2021-03-12 00:38:47,650 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9], public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]]
2021-03-12 00:38:47,650 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]
2021-03-12 00:38:47,788 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:38:47,792 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:47,936 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:38:47,941 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:38:48,235 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:38:48,235 [main:95] - GENERATED = print("iqohs")
2021-03-12 00:38:48,235 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]
2021-03-12 00:38:48,374 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:48,378 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:48,520 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:38:48,525 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:38:48,838 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:38:48,839 [main:95] - GENERATED = println("ydvio")
2021-03-12 00:38:48,839 [main:117] - GENERATED CALL = (B().pNoInline()).ul({ print("iqohs")}).p({ println("ydvio")})
2021-03-12 00:38:48,839 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]]
2021-03-12 00:38:48,839 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f]
2021-03-12 00:38:48,962 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:48,965 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:49,125 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:49,130 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:49,451 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:38:49,455 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:38:49,607 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:49,612 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:50,105 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:38:50,109 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:38:50,113 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:38:50,113 [main:95] - GENERATED = require(false, { "onilg"})
2021-03-12 00:38:50,113 [main:95] - GENERATED = contract({ require(false, { "onilg"})})
2021-03-12 00:38:50,113 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]
2021-03-12 00:38:50,269 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:50,274 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:50,425 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:50,429 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:50,739 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:50,743 [main:95] - GENERATED = require(true)
2021-03-12 00:38:50,743 [main:117] - GENERATED CALL = (B().pNoInline()).p({ contract({ require(false, { "onilg"})})}).pNoInline({ require(true)})
2021-03-12 00:38:50,743 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4], public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]]
2021-03-12 00:38:50,743 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:38:50,894 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:38:50,898 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:51,049 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:51,054 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:38:51,372 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:38:51,376 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:38:51,520 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:51,525 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:51,853 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:38:51,857 [main:95] - GENERATED = check(false)
2021-03-12 00:38:51,857 [main:95] - GENERATED = contract({ check(false)})
2021-03-12 00:38:51,857 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]
2021-03-12 00:38:51,984 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:51,987 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:51,995 [main:117] - GENERATED CALL = (B().pNoInline()).b({ contract({ check(false)})}).p({ println()})
2021-03-12 00:38:51,995 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]]
2021-03-12 00:38:51,995 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:38:52,137 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:38:52,141 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:52,149 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]
2021-03-12 00:38:52,285 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:52,289 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:52,438 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:52,444 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:38:52,907 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:52,911 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:38:52,915 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:38:52,916 [main:95] - GENERATED = require(true, { "xcsvy"})
2021-03-12 00:38:52,916 [main:117] - GENERATED CALL = (B().pNoInline()).h1({ println()}).p({ require(true, { "xcsvy"})})
2021-03-12 00:38:52,916 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f], public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]]
2021-03-12 00:38:52,916 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f]
2021-03-12 00:38:53,051 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:53,055 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:53,206 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:53,211 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:53,501 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:53,505 [main:95] - GENERATED = check(false)
2021-03-12 00:38:53,505 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]
2021-03-12 00:38:53,645 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:53,649 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:53,790 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:53,795 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:54,097 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:54,102 [main:95] - GENERATED = check(false)
2021-03-12 00:38:54,102 [main:117] - GENERATED CALL = (B().pNoInline()).p({ check(false)}).p({ check(false)})
2021-03-12 00:38:54,102 [main:113] - Case = [public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]]
2021-03-12 00:38:54,102 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]
2021-03-12 00:38:54,237 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:38:54,241 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:54,372 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:54,376 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:54,688 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:54,692 [main:95] - GENERATED = require(true)
2021-03-12 00:38:54,692 [main:117] - GENERATED CALL = (B().pNoInline()).pNoInline({ require(true)})
2021-03-12 00:38:54,692 [main:61] - replacement of p { +"this format can be used as an alternative markup to XML" } of type P is (B().pNoInline()).ul({ println()}).pNoInline({ repeat(-969642147, {a: Int -> repeat(1998010100, {a: Int -> require(true)})})})
2021-03-12 00:38:54,831 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:38:54,831 [main:66] - Compilation checking started
2021-03-12 00:38:55,197 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), { check(true)})
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"zvnuz" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    (B().pNoInline()).ul({ println()}).pNoInline({ repeat(-969642147, {a: Int -> repeat(1998010100, {a: Int -> require(true)})})})

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:38:55,199 [main:53] - replacing (head {
                    title { +"XML encoding with Kotlin" }
                }, Head)
2021-03-12 00:38:55,199 [main:50] - replacing head {
                    title { +"XML encoding with Kotlin" }
                } Head
2021-03-12 00:38:55,199 [main:54] - Getting value of type Head
2021-03-12 00:38:55,339 [main:302] - generating value of type = Head false depth = 0
2021-03-12 00:38:55,343 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), { check(true)})
}
2021-03-12 00:38:55,477 [main:194] - Type params = []
2021-03-12 00:38:55,599 [main:58] - GENERATED VALUE OF TYPE Head = Head()
2021-03-12 00:38:55,599 [main:61] - GENERATED IS CALL =true
2021-03-12 00:38:55,796 [main:67] - randomType = Map<P, A>
2021-03-12 00:38:55,797 [main:106] - GETTING Head from HTML
2021-03-12 00:38:55,853 [main:113] - Case = [public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@50e2f4cc]]
2021-03-12 00:38:55,853 [main:149] - GENERATING call of type public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@50e2f4cc]
2021-03-12 00:38:55,991 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Head, Unit> false depth = 0
2021-03-12 00:38:55,995 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:38:56,145 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:56,151 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:38:56,440 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:38:56,444 [main:95] - GENERATED = require(false)
2021-03-12 00:38:56,444 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).head({ require(false)})
2021-03-12 00:38:56,444 [main:61] - replacement of head {
                    title { +"XML encoding with Kotlin" }
                } of type Head is (htmlNoInline({ require(false)})).head({ require(false)})
2021-03-12 00:38:56,581 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:38:56,585 [main:53] - replacing ("Kotlin", String)
2021-03-12 00:38:56,585 [main:50] - replacing "Kotlin" String
2021-03-12 00:38:56,585 [main:54] - Getting value of type String
2021-03-12 00:38:56,719 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:56,723 [main:58] - GENERATED VALUE OF TYPE String = "ixfxx"
2021-03-12 00:38:56,723 [main:61] - GENERATED IS CALL =false
2021-03-12 00:38:56,738 [main:67] - randomType = Tag
2021-03-12 00:38:56,862 [main:302] - generating value of type = Tag false depth = 0
2021-03-12 00:38:56,866 [main:112] - generating klass Tag text = abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}
2021-03-12 00:38:57,194 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:38:57,336 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:57,476 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:57,480 [main:78] - Generated call from random type = (TODO()).name.substringBeforeLast('ݰ', "fteqn")
2021-03-12 00:38:57,481 [main:106] - GETTING String from P
2021-03-12 00:38:57,563 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:38:57,563 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:38:57,563 [main:117] - GENERATED CALL = (B().p()).name.toUpperCase()
2021-03-12 00:38:57,563 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:38:57,563 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:38:57,706 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:38:57,710 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:38:57,714 [main:117] - GENERATED CALL = (B().p()).name.filter({a: Char -> false})
2021-03-12 00:38:57,715 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:38:57,715 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:38:57,848 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:38:57,852 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:38:57,856 [main:117] - GENERATED CALL = (B().p()).name.dropLastWhile({a: Char -> true})
2021-03-12 00:38:57,856 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:38:57,856 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:38:57,856 [main:117] - GENERATED CALL = (B().p()).name.toLowerCase()
2021-03-12 00:38:57,856 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:38:57,857 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:38:57,977 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:57,982 [main:117] - GENERATED CALL = (B().p()).name.substringAfterLast('엳', TextElement("utmeo").text)
2021-03-12 00:38:57,982 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:38:57,982 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:38:57,982 [main:117] - GENERATED CALL = (B().p()).name.concat(href)
2021-03-12 00:38:57,982 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:38:57,982 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:38:57,982 [main:117] - GENERATED CALL = (B().p()).name.trimIndent()
2021-03-12 00:38:57,982 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]]
2021-03-12 00:38:57,982 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]
2021-03-12 00:38:57,982 [main:117] - GENERATED CALL = (B().p()).name.take(htmlVal)
2021-03-12 00:38:57,982 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in P[PropertyDescriptorImpl@266183d2], public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]]
2021-03-12 00:38:57,982 [main:149] - GENERATING call of type public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]
2021-03-12 00:38:57,983 [main:117] - GENERATED CALL = (B().p()).attributes.put(TODO().toString(), href)
2021-03-12 00:38:57,983 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]]
2021-03-12 00:38:57,983 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:38:57,983 [main:117] - GENERATED CALL = (B().p()).name.dropLast(bodyVar)
2021-03-12 00:38:57,983 [main:61] - replacement of "Kotlin" of type String is (B().p()).name.substringAfterLast('엳', TextElement("utmeo").text)
2021-03-12 00:38:58,139 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:38:58,140 [main:66] - Compilation checking started
2021-03-12 00:38:58,491 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), { check(true)})
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"zvnuz" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(B().p()).name.substringAfterLast('엳', TextElement("utmeo").text) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:38:58,494 [main:53] - replacing ("1", String)
2021-03-12 00:38:58,494 [main:50] - replacing "1" String
2021-03-12 00:38:58,494 [main:54] - Getting value of type String
2021-03-12 00:38:58,634 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:38:58,638 [main:58] - GENERATED VALUE OF TYPE String = "trqpt"
2021-03-12 00:38:58,638 [main:61] - GENERATED IS CALL =false
2021-03-12 00:38:58,653 [main:67] - randomType = H1
2021-03-12 00:38:58,796 [main:302] - generating value of type = H1 false depth = 0
2021-03-12 00:38:58,800 [main:112] - generating klass H1 text = class H1() : BodyTag("h1")
2021-03-12 00:38:58,922 [main:194] - Type params = []
2021-03-12 00:38:59,160 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:38:59,160 [main:78] - Generated call from random type = (H1()).name.trim()
2021-03-12 00:38:59,160 [main:106] - GETTING String from String
2021-03-12 00:38:59,181 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:38:59,181 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:38:59,307 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:38:59,310 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:38:59,314 [main:117] - GENERATED CALL = (href).takeLastWhile({a: Char -> true})
2021-03-12 00:38:59,314 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]]
2021-03-12 00:38:59,314 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]
2021-03-12 00:38:59,315 [main:117] - GENERATED CALL = (href).replaceIndent(testAllInline())
2021-03-12 00:38:59,315 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:38:59,315 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:38:59,455 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:38:59,459 [main:117] - GENERATED CALL = (href).substringAfterLast('腪', A().href)
2021-03-12 00:38:59,459 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]]
2021-03-12 00:38:59,459 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:38:59,594 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:59,598 [main:117] - GENERATED CALL = (href).dropLast(-138076436)
2021-03-12 00:38:59,598 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:38:59,599 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:38:59,599 [main:117] - GENERATED CALL = (href).prependIndent(TextElement("utmeo").text)
2021-03-12 00:38:59,599 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:38:59,599 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:38:59,599 [main:117] - GENERATED CALL = (href).trimEnd()
2021-03-12 00:38:59,599 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:38:59,599 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:38:59,723 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:59,726 [main:117] - GENERATED CALL = (href).takeLast(1248091885)
2021-03-12 00:38:59,727 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:38:59,727 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:38:59,727 [main:117] - GENERATED CALL = (href).trimMargin(testBodyHtmlNoInline())
2021-03-12 00:38:59,727 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]]
2021-03-12 00:38:59,727 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]
2021-03-12 00:38:59,867 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:38:59,871 [main:117] - GENERATED CALL = (href).substring(-1341321339)
2021-03-12 00:38:59,872 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:38:59,872 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:39:00,006 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:00,010 [main:117] - GENERATED CALL = (href).substringAfter('䞘', testBodyHtmlNoInline())
2021-03-12 00:39:00,010 [main:61] - replacement of "1" of type String is href
2021-03-12 00:39:00,138 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:39:00,138 [main:66] - Compilation checking started
2021-03-12 00:39:00,467 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), { check(true)})
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"zvnuz" }
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf(href, "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:00,470 [main:53] - replacing (title { +"zvnuz" }, Title)
2021-03-12 00:39:00,470 [main:50] - replacing title { +"zvnuz" } Title
2021-03-12 00:39:00,470 [main:54] - Getting value of type Title
2021-03-12 00:39:00,624 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:39:00,628 [main:112] - generating klass Title text = class Title() : TagWithText((Body())?.name.trim())
2021-03-12 00:39:00,783 [main:194] - Type params = []
2021-03-12 00:39:00,913 [main:58] - GENERATED VALUE OF TYPE Title = Title()
2021-03-12 00:39:00,913 [main:61] - GENERATED IS CALL =true
2021-03-12 00:39:01,113 [main:67] - randomType = UShort
2021-03-12 00:39:01,265 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:39:01,308 [main:106] - GETTING Title from Int
2021-03-12 00:39:01,338 [main:106] - GETTING Title from HTML
2021-03-12 00:39:01,377 [main:113] - Case = [public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@50e2f4cc], public final inline fun title(init: Title.() -> kotlin.Unit): Title defined in Head[SimpleFunctionDescriptorImpl@78b65e8c]]
2021-03-12 00:39:01,377 [main:149] - GENERATING call of type public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@50e2f4cc]
2021-03-12 00:39:01,520 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Head, Unit> false depth = 0
2021-03-12 00:39:01,524 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:01,666 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:01,671 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:01,976 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:01,980 [main:95] - GENERATED = require(true)
2021-03-12 00:39:01,981 [main:149] - GENERATING call of type public final inline fun title(init: Title.() -> kotlin.Unit): Title defined in Head[SimpleFunctionDescriptorImpl@78b65e8c]
2021-03-12 00:39:02,118 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Title, Unit> false depth = 0
2021-03-12 00:39:02,122 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:02,129 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
2021-03-12 00:39:02,129 [main:61] - replacement of title { +"zvnuz" } of type Title is (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
2021-03-12 00:39:02,260 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:39:02,261 [main:66] - Compilation checking started
2021-03-12 00:39:02,822 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), { check(true)})
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:02,826 [main:53] - replacing (initTag(Title(), { check(true)}), Title)
2021-03-12 00:39:02,826 [main:50] - replacing initTag(Title(), { check(true)}) Title
2021-03-12 00:39:02,826 [main:54] - Getting value of type Title
2021-03-12 00:39:02,993 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:39:02,997 [main:112] - generating klass Title text = class Title() : TagWithText((Body())?.name.trim())
2021-03-12 00:39:03,146 [main:194] - Type params = []
2021-03-12 00:39:03,320 [main:58] - GENERATED VALUE OF TYPE Title = Title()
2021-03-12 00:39:03,320 [main:61] - GENERATED IS CALL =true
2021-03-12 00:39:03,673 [main:67] - randomType = Array<Boolean>
2021-03-12 00:39:03,825 [main:302] - generating value of type = Array<Boolean> false depth = 0
2021-03-12 00:39:03,973 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Boolean): Array<Boolean> = TODO()
2021-03-12 00:39:03,978 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Boolean): Array<Boolean> = TODO()
2021-03-12 00:39:04,448 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:39:04,452 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 3
2021-03-12 00:39:04,456 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:04,460 [main:95] - GENERATED = Array<Boolean>(1315557703, {a: Int -> false})
2021-03-12 00:39:04,474 [main:106] - GETTING Title from P
2021-03-12 00:39:04,537 [main:106] - GETTING Title from P
2021-03-12 00:39:04,537 [main:106] - GETTING Title from String
2021-03-12 00:39:04,554 [main:106] - GETTING Title from [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:39:04,572 [main:106] - GETTING Title from H1
2021-03-12 00:39:04,628 [main:106] - GETTING Title from Title
2021-03-12 00:39:04,664 [main:61] - replacement of initTag(Title(), { check(true)}) of type Title is Title()
2021-03-12 00:39:04,804 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:39:04,804 [main:66] - Compilation checking started
2021-03-12 00:39:05,365 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:05,368 [main:53] - replacing ({ +(A().href).replaceIndent("flxxf") }, [@kotlin.ExtensionFunctionType] Function1<P, Unit>)
2021-03-12 00:39:05,368 [main:50] - replacing { +(A().href).replaceIndent("flxxf") } [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:39:05,368 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:39:05,524 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:39:05,528 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:05,677 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:39:05,682 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:39:05,999 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:39:06,003 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:39:06,146 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:39:06,151 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:39:06,658 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:39:06,662 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:39:06,666 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:39:06,666 [main:95] - GENERATED = check(false, { "qpygj"})
2021-03-12 00:39:06,666 [main:95] - GENERATED = contract({ check(false, { "qpygj"})})
2021-03-12 00:39:06,666 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<P, Unit> = { contract({ check(false, { "qpygj"})})}
2021-03-12 00:39:06,666 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:06,674 [main:67] - randomType = String
2021-03-12 00:39:06,814 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:06,844 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:06,868 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Head
2021-03-12 00:39:06,934 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from LI
2021-03-12 00:39:07,035 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:39:07,088 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:39:07,155 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Title
2021-03-12 00:39:07,196 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:39:07,258 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:39:07,262 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:07,266 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:39:07,270 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:39:07,274 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from UL
2021-03-12 00:39:07,336 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:07,340 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:07,344 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from B
2021-03-12 00:39:07,405 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Int
2021-03-12 00:39:07,439 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:07,443 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:07,447 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from H1
2021-03-12 00:39:07,508 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:07,508 [main:61] - replacement of { +(A().href).replaceIndent("flxxf") } of type [@kotlin.ExtensionFunctionType] Function1<P, Unit> is { contract({ check(false, { "qpygj"})})}
2021-03-12 00:39:07,673 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:39:07,678 [main:53] - replacing (li { +arg; +"$htmlVal"; +"$bodyVar" }, LI)
2021-03-12 00:39:07,678 [main:50] - replacing li { +arg; +"$htmlVal"; +"$bodyVar" } LI
2021-03-12 00:39:07,678 [main:54] - Getting value of type LI
2021-03-12 00:39:07,818 [main:302] - generating value of type = LI false depth = 0
2021-03-12 00:39:07,821 [main:112] - generating klass LI text = class LI() : BodyTag("li")
2021-03-12 00:39:07,946 [main:194] - Type params = []
2021-03-12 00:39:08,088 [main:58] - GENERATED VALUE OF TYPE LI = LI()
2021-03-12 00:39:08,088 [main:61] - GENERATED IS CALL =true
2021-03-12 00:39:08,108 [main:67] - randomType = Element
2021-03-12 00:39:08,248 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:39:08,252 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:39:08,541 [main:106] - GETTING LI from String
2021-03-12 00:39:08,563 [main:106] - GETTING LI from String
2021-03-12 00:39:08,564 [main:106] - GETTING LI from H1
2021-03-12 00:39:08,654 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in H1[SimpleFunctionDescriptorImpl@5a58b88c], public final inline fun li(init: LI.() -> kotlin.Unit): LI defined in UL[SimpleFunctionDescriptorImpl@7131eef0]]
2021-03-12 00:39:08,654 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in H1[SimpleFunctionDescriptorImpl@5a58b88c]
2021-03-12 00:39:08,779 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:39:08,783 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:08,931 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:08,937 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:09,242 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:09,246 [main:95] - GENERATED = check(true)
2021-03-12 00:39:09,246 [main:149] - GENERATING call of type public final inline fun li(init: LI.() -> kotlin.Unit): LI defined in UL[SimpleFunctionDescriptorImpl@7131eef0]
2021-03-12 00:39:09,393 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<LI, Unit> false depth = 0
2021-03-12 00:39:09,397 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:09,540 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:09,545 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:09,847 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:09,851 [main:95] - GENERATED = check(true)
2021-03-12 00:39:09,852 [main:117] - GENERATED CALL = (B().h1()).ul({ check(true)}).li({ check(true)})
2021-03-12 00:39:09,852 [main:61] - replacement of li { +arg; +"$htmlVal"; +"$bodyVar" } of type LI is LI()
2021-03-12 00:39:09,989 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:39:09,989 [main:66] - Compilation checking started
2021-03-12 00:39:10,584 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                LI()
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:10,587 [main:53] - replacing (testBodyNoInline(), String)
2021-03-12 00:39:10,587 [main:50] - replacing testBodyNoInline() String
2021-03-12 00:39:10,587 [main:54] - Getting value of type String
2021-03-12 00:39:10,762 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:10,766 [main:58] - GENERATED VALUE OF TYPE String = "uhhkr"
2021-03-12 00:39:10,766 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:10,943 [main:67] - randomType = Sequence<Body>
2021-03-12 00:39:10,944 [main:106] - GETTING String from UL
2021-03-12 00:39:11,024 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:39:11,025 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:39:11,167 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:11,308 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:11,312 [main:117] - GENERATED CALL = (B().ul()).name.substringBefore('モ', "ztxjg")
2021-03-12 00:39:11,312 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in UL[SimpleFunctionDescriptorImpl@65ed116e], public final val name: kotlin.String defined in H1[PropertyDescriptorImpl@e65af9a]]
2021-03-12 00:39:11,312 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in UL[SimpleFunctionDescriptorImpl@65ed116e]
2021-03-12 00:39:11,439 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:39:11,443 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:11,450 [main:117] - GENERATED CALL = (B().ul()).h1({ println()}).name
2021-03-12 00:39:11,450 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:39:11,450 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:39:11,450 [main:117] - GENERATED CALL = (B().ul()).name.trimEnd()
2021-03-12 00:39:11,450 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in UL[PropertyDescriptorImpl@5794aeae], public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]]
2021-03-12 00:39:11,450 [main:149] - GENERATING call of type public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]
2021-03-12 00:39:11,451 [main:117] - GENERATED CALL = (B().ul()).attributes.get(TODO().toString())
2021-03-12 00:39:11,451 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:39:11,451 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:39:11,451 [main:117] - GENERATED CALL = (B().ul()).name.reversed()
2021-03-12 00:39:11,451 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:39:11,451 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:39:11,595 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:11,599 [main:117] - GENERATED CALL = (B().ul()).name.substringAfterLast('萋', expected)
2021-03-12 00:39:11,600 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23]]
2021-03-12 00:39:11,600 [main:117] - GENERATED CALL = (B().ul()).name
2021-03-12 00:39:11,600 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:39:11,600 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:39:11,737 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:39:11,741 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:39:11,745 [main:117] - GENERATED CALL = (B().ul()).name.filter({a: Char -> false})
2021-03-12 00:39:11,745 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:39:11,745 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:39:11,869 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:39:11,873 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:39:11,877 [main:117] - GENERATED CALL = (B().ul()).name.dropLastWhile({a: Char -> true})
2021-03-12 00:39:11,877 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]]
2021-03-12 00:39:11,877 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]
2021-03-12 00:39:12,020 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:12,161 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:12,166 [main:117] - GENERATED CALL = (B().ul()).name.removeRange(-175735165, -605342717)
2021-03-12 00:39:12,166 [main:61] - replacement of testBodyNoInline() of type String is (B().ul()).name
2021-03-12 00:39:12,292 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:39:12,292 [main:66] - Compilation checking started
2021-03-12 00:39:12,616 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                LI()
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${(B().ul()).name}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:12,619 [main:53] - replacing (arrayOf("1", "2", "3"), Array<String>)
2021-03-12 00:39:12,619 [main:50] - replacing arrayOf("1", "2", "3") Array<String>
2021-03-12 00:39:12,619 [main:54] - Getting value of type Array<String>
2021-03-12 00:39:12,762 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-12 00:39:12,907 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-12 00:39:12,912 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-12 00:39:13,046 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:39:13,050 [main:95] - GENERATED = arrayOf<String>("oitsc")
2021-03-12 00:39:13,050 [main:58] - GENERATED VALUE OF TYPE Array<String> = arrayOf<String>("oitsc")
2021-03-12 00:39:13,050 [main:61] - GENERATED IS CALL =true
2021-03-12 00:39:13,220 [main:67] - randomType = Char?
2021-03-12 00:39:13,357 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:13,394 [main:106] - GETTING Array<String> from String
2021-03-12 00:39:13,423 [main:106] - GETTING Array<String> from String
2021-03-12 00:39:13,424 [main:106] - GETTING Array<String> from UL
2021-03-12 00:39:13,488 [main:106] - GETTING Array<String> from P
2021-03-12 00:39:13,545 [main:106] - GETTING Array<String> from HTML
2021-03-12 00:39:13,585 [main:106] - GETTING Array<String> from LI
2021-03-12 00:39:13,644 [main:106] - GETTING Array<String> from Head
2021-03-12 00:39:13,682 [main:106] - GETTING Array<String> from String
2021-03-12 00:39:13,683 [main:106] - GETTING Array<String> from H1
2021-03-12 00:39:13,739 [main:106] - GETTING Array<String> from Array<String>
2021-03-12 00:39:13,749 [main:113] - Case = [public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5392abe7]]
2021-03-12 00:39:13,749 [main:149] - GENERATING call of type public fun <T : kotlin.Any> kotlin.Array<T?>.requireNoNulls(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5392abe7]
2021-03-12 00:39:13,749 [main:117] - GENERATED CALL = (args).requireNoNulls()
2021-03-12 00:39:13,749 [main:113] - Case = [public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62f6c22e]]
2021-03-12 00:39:13,749 [main:149] - GENERATING call of type public fun <T> kotlin.Array<T>.sliceArray(indices: kotlin.collections.Collection<kotlin.Int>): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62f6c22e]
2021-03-12 00:39:13,890 [main:302] - generating value of type = Collection<Int> false depth = 0
2021-03-12 00:39:14,035 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(): Collection<Int> = TODO()
2021-03-12 00:39:14,040 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(): Collection<Int> = TODO()
2021-03-12 00:39:14,175 [main:95] - GENERATED = mutableSetOf<Int>()
2021-03-12 00:39:14,176 [main:117] - GENERATED CALL = (args).sliceArray(mutableSetOf<Int>())
2021-03-12 00:39:14,176 [main:113] - Case = [public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2f98755d]]
2021-03-12 00:39:14,176 [main:149] - GENERATING call of type public fun <T> kotlin.Array<T>.reversedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2f98755d]
2021-03-12 00:39:14,176 [main:117] - GENERATED CALL = (args).reversedArray()
2021-03-12 00:39:14,176 [main:113] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2d708c95]]
2021-03-12 00:39:14,176 [main:149] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArray(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2d708c95]
2021-03-12 00:39:14,176 [main:117] - GENERATED CALL = (args).sortedArray()
2021-03-12 00:39:14,176 [main:113] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5ac26c55]]
2021-03-12 00:39:14,176 [main:149] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<T>.sortedArrayDescending(): kotlin.Array<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5ac26c55]
2021-03-12 00:39:14,176 [main:117] - GENERATED CALL = (args).sortedArrayDescending()
2021-03-12 00:39:14,176 [main:61] - replacement of arrayOf("1", "2", "3") of type Array<String> is arrayOf<String>("oitsc")
2021-03-12 00:39:14,315 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:39:14,315 [main:66] - Compilation checking started
2021-03-12 00:39:14,848 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                LI()
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:14,851 [main:53] - replacing (0, Int)
2021-03-12 00:39:14,851 [main:50] - replacing 0 Int
2021-03-12 00:39:14,851 [main:54] - Getting value of type Int
2021-03-12 00:39:14,996 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:15,000 [main:58] - GENERATED VALUE OF TYPE Int = -1941999155
2021-03-12 00:39:15,001 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:15,168 [main:67] - randomType = Short
2021-03-12 00:39:15,291 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:39:15,331 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5e7fd1a9]
2021-03-12 00:39:15,477 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:39:15,481 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76d8a041]
2021-03-12 00:39:15,481 [main:78] - Generated call from random type = (-9947).compareTo(-5).xor(htmlVal)
2021-03-12 00:39:15,482 [main:106] - GETTING Int from P
2021-03-12 00:39:15,594 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]]
2021-03-12 00:39:15,594 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]
2021-03-12 00:39:15,594 [main:117] - GENERATED CALL = (B().p()).name.toInt()
2021-03-12 00:39:15,594 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]]
2021-03-12 00:39:15,595 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]
2021-03-12 00:39:15,737 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:15,882 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:39:15,886 [main:117] - GENERATED CALL = (B().p()).name.compareTo("rdyxs", false)
2021-03-12 00:39:15,886 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in P[DeserializedSimpleFunctionDescriptor@5777d591], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]]
2021-03-12 00:39:15,886 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in P[DeserializedSimpleFunctionDescriptor@5777d591]
2021-03-12 00:39:16,024 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:39:16,024 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]
2021-03-12 00:39:16,152 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:39:16,156 [main:117] - GENERATED CALL = (B().p()).equals("mrbbj").compareTo(false)
2021-03-12 00:39:16,156 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in P[PropertyDescriptorImpl@266183d2], public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@aaaf6a9]]
2021-03-12 00:39:16,156 [main:117] - GENERATED CALL = (B().p()).attributes.size
2021-03-12 00:39:16,156 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in P[PropertyDescriptorImpl@33314499], public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]]
2021-03-12 00:39:16,156 [main:149] - GENERATING call of type public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]
2021-03-12 00:39:16,299 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:39:16,303 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:39:16,580 [main:117] - GENERATED CALL = (B().p()).children.indexOf(TODO())
2021-03-12 00:39:16,580 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in P[PropertyDescriptorImpl@33314499], public open val size: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@3c464ee3]]
2021-03-12 00:39:16,580 [main:117] - GENERATED CALL = (B().p()).children.size
2021-03-12 00:39:16,580 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708]]
2021-03-12 00:39:16,580 [main:117] - GENERATED CALL = (B().p()).name.length
2021-03-12 00:39:16,580 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in P[PropertyDescriptorImpl@33314499], public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]]
2021-03-12 00:39:16,580 [main:149] - GENERATING call of type public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]
2021-03-12 00:39:16,719 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:39:16,723 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:39:17,001 [main:117] - GENERATED CALL = (B().p()).children.lastIndexOf(TODO())
2021-03-12 00:39:17,001 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in P[PropertyDescriptorImpl@33314499], protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@6913a175]]
2021-03-12 00:39:17,001 [main:117] - GENERATED CALL = (B().p()).children.modCount
2021-03-12 00:39:17,002 [main:61] - replacement of 0 of type Int is (B().p()).children.modCount
2021-03-12 00:39:17,141 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:39:17,142 [main:66] - Compilation checking started
2021-03-12 00:39:17,498 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                LI()
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            htmlNoInline {
                val htmlVal = (B().p()).children.modCount
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:17,502 [main:53] - replacing (htmlVal, Int)
2021-03-12 00:39:17,503 [main:50] - replacing htmlVal Int
2021-03-12 00:39:17,503 [main:54] - Getting value of type Int
2021-03-12 00:39:17,641 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:17,645 [main:58] - GENERATED VALUE OF TYPE Int = -1209642318
2021-03-12 00:39:17,645 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:17,660 [main:67] - randomType = TagWithText
2021-03-12 00:39:17,796 [main:302] - generating value of type = TagWithText false depth = 0
2021-03-12 00:39:17,800 [main:112] - generating klass TagWithText text = abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}
2021-03-12 00:39:18,083 [main:302] - generating value of type = HTML false depth = 2
2021-03-12 00:39:18,087 [main:112] - generating klass HTML text = class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}
2021-03-12 00:39:18,226 [main:194] - Type params = []
2021-03-12 00:39:18,389 [main:78] - Generated call from random type = (HTML()).children.size
2021-03-12 00:39:18,390 [main:106] - GETTING Int from String
2021-03-12 00:39:18,407 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f501a37]]
2021-03-12 00:39:18,407 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f501a37]
2021-03-12 00:39:18,549 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 00:39:18,693 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:39:18,698 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:39:18,832 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:39:18,836 [main:95] - GENERATED = charArrayOf('')
2021-03-12 00:39:18,983 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:19,128 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:39:19,132 [main:117] - GENERATED CALL = (testBodyNoInline()).lastIndexOfAny(charArrayOf(''), 115946476, false)
2021-03-12 00:39:19,132 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aecc1bf]]
2021-03-12 00:39:19,132 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aecc1bf]
2021-03-12 00:39:19,132 [main:117] - GENERATED CALL = (testBodyNoInline()).length.inc()
2021-03-12 00:39:19,133 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f0d9b3e]]
2021-03-12 00:39:19,133 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:39:19,133 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f0d9b3e]
2021-03-12 00:39:19,259 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 00:39:19,263 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:39:19,266 [main:117] - GENERATED CALL = (testBodyNoInline()).subSequence(bodyVar, bodyVar).sumOf({a: Char -> 1230117628})
2021-03-12 00:39:19,267 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a93033]]
2021-03-12 00:39:19,267 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:39:19,421 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:19,425 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a93033]
2021-03-12 00:39:19,564 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:39:19,568 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:39:19,572 [main:117] - GENERATED CALL = (testBodyNoInline()).subSequence(-1982572961, htmlVal).indexOfFirst({a: Char -> true})
2021-03-12 00:39:19,572 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@96b2690]]
2021-03-12 00:39:19,572 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@96b2690]
2021-03-12 00:39:19,696 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:39:19,700 [main:117] - GENERATED CALL = (testBodyNoInline()).length.minus(78)
2021-03-12 00:39:19,700 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]]
2021-03-12 00:39:19,700 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:39:19,700 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]
2021-03-12 00:39:19,700 [main:117] - GENERATED CALL = (testBodyNoInline()).compareTo(testBodyNoInline()).takeHighestOneBit()
2021-03-12 00:39:19,701 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@14a5bfd2]]
2021-03-12 00:39:19,701 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@14a5bfd2]
2021-03-12 00:39:19,701 [main:117] - GENERATED CALL = (testBodyNoInline()).length.coerceAtLeast(bodyVar)
2021-03-12 00:39:19,701 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59174973]]
2021-03-12 00:39:19,701 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@59174973]
2021-03-12 00:39:19,701 [main:117] - GENERATED CALL = (testBodyNoInline()).length.dec()
2021-03-12 00:39:19,701 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@23f7b16]]
2021-03-12 00:39:19,701 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:39:19,701 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@23f7b16]
2021-03-12 00:39:19,701 [main:117] - GENERATED CALL = (testBodyNoInline()).compareTo(href).countTrailingZeroBits()
2021-03-12 00:39:19,701 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b075304]]
2021-03-12 00:39:19,701 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:39:19,701 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b075304]
2021-03-12 00:39:19,843 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:39:19,848 [main:117] - GENERATED CALL = (testBodyNoInline()).compareTo(TextElement("utmeo").text).times(-93)
2021-03-12 00:39:19,848 [main:61] - replacement of htmlVal of type Int is (testBodyNoInline()).length.minus(78)
2021-03-12 00:39:19,986 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:39:19,987 [main:66] - Compilation checking started
2021-03-12 00:39:20,523 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                LI()
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:20,528 [main:53] - replacing (html, HTML)
2021-03-12 00:39:20,528 [main:50] - replacing html HTML
2021-03-12 00:39:20,528 [main:54] - Getting value of type HTML
2021-03-12 00:39:20,711 [main:302] - generating value of type = HTML false depth = 0
2021-03-12 00:39:20,715 [main:112] - generating klass HTML text = class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}
2021-03-12 00:39:20,863 [main:194] - Type params = []
2021-03-12 00:39:20,993 [main:58] - GENERATED VALUE OF TYPE HTML = HTML()
2021-03-12 00:39:20,994 [main:61] - GENERATED IS CALL =true
2021-03-12 00:39:21,177 [main:67] - randomType = Title?
2021-03-12 00:39:21,317 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:39:21,321 [main:112] - generating klass Title text = class Title() : TagWithText((Body())?.name.trim())
2021-03-12 00:39:21,451 [main:194] - Type params = []
2021-03-12 00:39:21,649 [main:106] - GETTING HTML from LI
2021-03-12 00:39:21,729 [main:106] - GETTING HTML from Body
2021-03-12 00:39:21,808 [main:106] - GETTING HTML from String
2021-03-12 00:39:21,833 [main:106] - GETTING HTML from Body
2021-03-12 00:39:21,834 [main:106] - GETTING HTML from String
2021-03-12 00:39:21,834 [main:106] - GETTING HTML from String
2021-03-12 00:39:21,834 [main:106] - GETTING HTML from HTML
2021-03-12 00:39:21,875 [main:61] - replacement of html of type HTML is HTML()
2021-03-12 00:39:22,013 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:39:22,013 [main:66] - Compilation checking started
2021-03-12 00:39:22,562 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                LI()
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:22,564 [main:53] - replacing ({ +"some text" }, [@kotlin.ExtensionFunctionType] Function1<P, Unit>)
2021-03-12 00:39:22,564 [main:50] - replacing { +"some text" } [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:39:22,564 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:39:22,715 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:39:22,719 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:22,865 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:39:22,870 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:39:23,185 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:39:23,189 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:39:23,335 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:39:23,341 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:39:23,652 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 00:39:23,656 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:39:23,803 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:23,809 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:24,137 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:39:24,142 [main:95] - GENERATED = require(true)
2021-03-12 00:39:24,142 [main:95] - GENERATED = contract({ require(true)})
2021-03-12 00:39:24,142 [main:95] - GENERATED = contract({ contract({ require(true)})})
2021-03-12 00:39:24,142 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<P, Unit> = { contract({ contract({ require(true)})})}
2021-03-12 00:39:24,142 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:24,151 [main:67] - randomType = String
2021-03-12 00:39:24,290 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:24,327 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Title
2021-03-12 00:39:24,381 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:24,405 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from UL
2021-03-12 00:39:24,477 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Int
2021-03-12 00:39:24,511 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:24,515 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:39:24,578 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:39:24,638 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:24,642 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from H1
2021-03-12 00:39:24,703 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:24,707 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:39:24,751 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from B
2021-03-12 00:39:24,812 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:39:24,816 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from LI
2021-03-12 00:39:24,880 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:39:24,884 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:24,888 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:39:24,892 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:24,896 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:24,900 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Head
2021-03-12 00:39:24,939 [main:61] - replacement of { +"some text" } of type [@kotlin.ExtensionFunctionType] Function1<P, Unit> is { contract({ contract({ require(true)})})}
2021-03-12 00:39:25,079 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:39:25,083 [main:53] - replacing ({
                            for (arg in args)
                                LI()
                        }, [@kotlin.ExtensionFunctionType] Function1<UL, Unit>)
2021-03-12 00:39:25,084 [main:50] - replacing {
                            for (arg in args)
                                LI()
                        } [@kotlin.ExtensionFunctionType] Function1<UL, Unit>
2021-03-12 00:39:25,084 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<UL, Unit>
2021-03-12 00:39:25,223 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:39:25,228 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:25,360 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:25,366 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:25,721 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:25,725 [main:95] - GENERATED = check(false)
2021-03-12 00:39:25,726 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<UL, Unit> = { check(false)}
2021-03-12 00:39:25,726 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:25,875 [main:67] - randomType = Float
2021-03-12 00:39:26,015 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:39:26,061 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Body
2021-03-12 00:39:26,153 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from B
2021-03-12 00:39:26,242 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from UL
2021-03-12 00:39:26,317 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:39:26,337 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:39:26,341 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Int
2021-03-12 00:39:26,375 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:39:26,379 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Head
2021-03-12 00:39:26,422 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from HTML
2021-03-12 00:39:26,466 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Title
2021-03-12 00:39:26,507 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from HTML
2021-03-12 00:39:26,511 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from LI
2021-03-12 00:39:26,575 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Array<String>
2021-03-12 00:39:26,589 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:39:26,593 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from H1
2021-03-12 00:39:26,655 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from P
2021-03-12 00:39:26,715 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from HTML
2021-03-12 00:39:26,719 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:39:26,723 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:39:26,727 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Body
2021-03-12 00:39:26,732 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from P
2021-03-12 00:39:26,736 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:39:26,740 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:39:26,744 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Int
2021-03-12 00:39:26,744 [main:61] - replacement of {
                            for (arg in args)
                                LI()
                        } of type [@kotlin.ExtensionFunctionType] Function1<UL, Unit> is { check(false)}
2021-03-12 00:39:26,895 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:39:26,895 [main:66] - Compilation checking started
2021-03-12 00:39:27,436 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:27,440 [main:53] - replacing ("b", String)
2021-03-12 00:39:27,440 [main:50] - replacing "b" String
2021-03-12 00:39:27,440 [main:54] - Getting value of type String
2021-03-12 00:39:27,597 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:27,602 [main:58] - GENERATED VALUE OF TYPE String = "zebsz"
2021-03-12 00:39:27,602 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:28,126 [main:67] - randomType = LinkedHashMap<TextElement, Double>
2021-03-12 00:39:28,249 [main:302] - generating value of type = LinkedHashMap<TextElement, Double> false depth = 0
2021-03-12 00:39:28,397 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<TextElement, Double>): LkedHashMap<TextElement, Double> = TODO()
2021-03-12 00:39:28,403 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<TextElement, Double>): LkedHashMap<TextElement, Double> = TODO()
2021-03-12 00:39:28,550 [main:302] - generating value of type = Pair<TextElement, Double> false depth = 3
2021-03-12 00:39:28,690 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: TextElement, second: Double): Pair<TextElement, Double> = TODO()
2021-03-12 00:39:28,696 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: TextElement, second: Double): Pair<TextElement, Double> = TODO()
2021-03-12 00:39:28,850 [main:302] - generating value of type = TextElement false depth = 6
2021-03-12 00:39:28,855 [main:112] - generating klass TextElement text = class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}
2021-03-12 00:39:28,993 [main:194] - Type params = []
2021-03-12 00:39:29,121 [main:302] - generating value of type = String true depth = 8
2021-03-12 00:39:29,125 [main:302] - generating value of type = Double true depth = 6
2021-03-12 00:39:29,129 [main:95] - GENERATED = Pair<TextElement, Double>(TextElement("bxnql"), 0.8986254259816715)
2021-03-12 00:39:29,129 [main:95] - GENERATED = linkedMapOf<TextElement, Double>(Pair<TextElement, Double>(TextElement("bxnql"), 0.8986254259816715))
2021-03-12 00:39:29,270 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:39:29,425 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:29,430 [main:78] - Generated call from random type = (linkedMapOf<TextElement, Double>(Pair<TextElement, Double>(TextElement("bxnql"), 0.8986254259816715))).size.toString(-1732676940)
2021-03-12 00:39:29,431 [main:106] - GETTING String from String
2021-03-12 00:39:29,464 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:39:29,464 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:39:29,618 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:39:29,770 [main:43] - GENERATING CALL OF fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): Iterable<Int> = TODO()
2021-03-12 00:39:29,776 [main:61] - WITHOUT TYPE PARAMS = fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): Iterable<Int> = TODO()
2021-03-12 00:39:30,247 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:39:30,251 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:39:30,256 [main:95] - GENERATED = CharRange('虒', '෩')
2021-03-12 00:39:30,256 [main:117] - GENERATED CALL = (A().href).slice(CharRange('虒', '෩'))
2021-03-12 00:39:30,256 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:39:30,256 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:39:30,256 [main:117] - GENERATED CALL = (A().href).concat(TODO().toString())
2021-03-12 00:39:30,256 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]]
2021-03-12 00:39:30,256 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]
2021-03-12 00:39:30,400 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:30,405 [main:117] - GENERATED CALL = (A().href).drop(1521332362)
2021-03-12 00:39:30,405 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:39:30,405 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:39:30,560 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:30,567 [main:117] - GENERATED CALL = (A().href).replaceBeforeLast('꧸', TextElement("utmeo").text, testBodyHtmlNoInline())
2021-03-12 00:39:30,567 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:39:30,567 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:39:30,704 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:39:30,705 [main:117] - GENERATED CALL = (A().href).plus("afzqs")
2021-03-12 00:39:30,705 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:39:30,705 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:39:30,705 [main:117] - GENERATED CALL = (A().href).trimIndent()
2021-03-12 00:39:30,705 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d9dd01]]
2021-03-12 00:39:30,705 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:39:30,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:30,998 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:31,002 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d9dd01]
2021-03-12 00:39:31,133 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:39:31,285 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:39:31,290 [main:117] - GENERATED CALL = (A().href).subSequence(785329973, -860893401).commonPrefixWith("jaxcg", true)
2021-03-12 00:39:31,290 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]]
2021-03-12 00:39:31,290 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:39:31,429 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:31,561 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:31,566 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]
2021-03-12 00:39:31,713 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:39:31,861 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 00:39:31,867 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 00:39:32,177 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:39:32,182 [main:95] - GENERATED = Regex("wvusl")
2021-03-12 00:39:32,320 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:32,325 [main:117] - GENERATED CALL = (A().href).subSequence(1408117794, -1450840893).replaceFirst(Regex("wvusl"), "dsbni")
2021-03-12 00:39:32,325 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]]
2021-03-12 00:39:32,325 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]
2021-03-12 00:39:32,448 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:32,596 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:32,601 [main:117] - GENERATED CALL = (A().href).removeRange(-2047590487, -964571876)
2021-03-12 00:39:32,601 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74a0bf2d]]
2021-03-12 00:39:32,602 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:39:32,743 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:32,876 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:32,880 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74a0bf2d]
2021-03-12 00:39:33,020 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:33,167 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:33,172 [main:117] - GENERATED CALL = (A().href).subSequence(1405922745, 762746720).substring(-1445018694, 1964650871)
2021-03-12 00:39:33,172 [main:61] - replacement of "b" of type String is (A().href).plus("afzqs")
2021-03-12 00:39:33,296 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:39:33,297 [main:66] - Compilation checking started
2021-03-12 00:39:33,817 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:33,820 [main:53] - replacing ("This is some", String)
2021-03-12 00:39:33,820 [main:50] - replacing "This is some" String
2021-03-12 00:39:33,820 [main:54] - Getting value of type String
2021-03-12 00:39:33,961 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:33,966 [main:58] - GENERATED VALUE OF TYPE String = "mdptn"
2021-03-12 00:39:33,966 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:34,129 [main:67] - randomType = Long
2021-03-12 00:39:34,252 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:39:34,287 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25cea1e]
2021-03-12 00:39:34,429 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:34,433 [main:78] - Generated call from random type = (-1070936797919582308).toString(880678690)
2021-03-12 00:39:34,434 [main:106] - GETTING String from LI
2021-03-12 00:39:34,511 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:39:34,511 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:39:34,645 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:39:34,652 [main:117] - GENERATED CALL = (UL().li()).name.removePrefix("movnk")
2021-03-12 00:39:34,652 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:39:34,652 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:39:34,774 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:34,779 [main:117] - GENERATED CALL = (UL().li()).name.concat("vrrbg")
2021-03-12 00:39:34,779 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]]
2021-03-12 00:39:34,779 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]
2021-03-12 00:39:34,779 [main:117] - GENERATED CALL = (UL().li()).name.uppercase()
2021-03-12 00:39:34,779 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:39:34,779 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:39:34,920 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:39:34,924 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:39:34,929 [main:117] - GENERATED CALL = (UL().li()).name.filter({a: Char -> false})
2021-03-12 00:39:34,929 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:39:34,929 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:39:35,070 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:39:35,070 [main:117] - GENERATED CALL = (UL().li()).name.plus("gllob")
2021-03-12 00:39:35,070 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:39:35,070 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:39:35,070 [main:117] - GENERATED CALL = (UL().li()).name.toLowerCase()
2021-03-12 00:39:35,070 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:39:35,070 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:39:35,199 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:39:35,203 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:39:35,207 [main:117] - GENERATED CALL = (UL().li()).name.filterNot({a: Char -> true})
2021-03-12 00:39:35,207 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]]
2021-03-12 00:39:35,208 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]
2021-03-12 00:39:35,349 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:35,354 [main:117] - GENERATED CALL = (UL().li()).name.padEnd(bodyVar, '䌶')
2021-03-12 00:39:35,354 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]]
2021-03-12 00:39:35,354 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]
2021-03-12 00:39:35,492 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:39:35,496 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:39:35,501 [main:117] - GENERATED CALL = (UL().li()).name.dropWhile({a: Char -> true})
2021-03-12 00:39:35,501 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:39:35,501 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:39:35,630 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:35,777 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:35,782 [main:117] - GENERATED CALL = (UL().li()).name.replaceAfterLast('먷', "gnmza", testBodyHtmlNoInline())
2021-03-12 00:39:35,782 [main:61] - replacement of "This is some" of type String is (UL().li()).name.filterNot({a: Char -> true})
2021-03-12 00:39:35,930 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:39:35,932 [main:53] - replacing (initTag(Body(), init), Body)
2021-03-12 00:39:35,933 [main:50] - replacing initTag(Body(), init) Body
2021-03-12 00:39:35,933 [main:54] - Getting value of type Body
2021-03-12 00:39:36,062 [main:302] - generating value of type = Body false depth = 0
2021-03-12 00:39:36,068 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:39:36,212 [main:194] - Type params = []
2021-03-12 00:39:36,350 [main:58] - GENERATED VALUE OF TYPE Body = Body()
2021-03-12 00:39:36,350 [main:61] - GENERATED IS CALL =true
2021-03-12 00:39:36,678 [main:67] - randomType = List<Byte>
2021-03-12 00:39:36,678 [main:106] - GETTING Body from Body
2021-03-12 00:39:36,771 [main:61] - replacement of initTag(Body(), init) of type Body is Body()
2021-03-12 00:39:36,906 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:39:36,906 [main:66] - Compilation checking started
2021-03-12 00:39:37,405 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:37,407 [main:53] - replacing ("text. For more see the", String)
2021-03-12 00:39:37,407 [main:50] - replacing "text. For more see the" String
2021-03-12 00:39:37,407 [main:54] - Getting value of type String
2021-03-12 00:39:37,547 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:37,552 [main:58] - GENERATED VALUE OF TYPE String = "mzccu"
2021-03-12 00:39:37,552 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:37,569 [main:67] - randomType = P
2021-03-12 00:39:37,706 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:39:37,710 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:39:37,835 [main:194] - Type params = []
2021-03-12 00:39:38,060 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:39:38,061 [main:78] - Generated call from random type = (P()).name.takeLast(bodyVar)
2021-03-12 00:39:38,061 [main:106] - GETTING String from String
2021-03-12 00:39:38,081 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:39:38,081 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:39:38,081 [main:117] - GENERATED CALL = (TODO().toString()).trimIndent()
2021-03-12 00:39:38,082 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:39:38,082 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:39:38,224 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:38,372 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:38,377 [main:117] - GENERATED CALL = (TODO().toString()).replaceAfter('湩', "tncqf", testBodyNoInline())
2021-03-12 00:39:38,377 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:39:38,377 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:39:38,377 [main:117] - GENERATED CALL = (TODO().toString()).reversed()
2021-03-12 00:39:38,377 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]]
2021-03-12 00:39:38,377 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]
2021-03-12 00:39:38,516 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:38,521 [main:117] - GENERATED CALL = (TODO().toString()).repeat(-1734645073)
2021-03-12 00:39:38,521 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:39:38,521 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:39:38,649 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:39:38,653 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:39:38,657 [main:117] - GENERATED CALL = (TODO().toString()).takeWhile({a: Char -> true})
2021-03-12 00:39:38,657 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]]
2021-03-12 00:39:38,657 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]
2021-03-12 00:39:38,658 [main:117] - GENERATED CALL = (TODO().toString()).uppercase()
2021-03-12 00:39:38,658 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:39:38,658 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:39:38,799 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:39:38,804 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:39:38,808 [main:117] - GENERATED CALL = (TODO().toString()).dropLastWhile({a: Char -> false})
2021-03-12 00:39:38,809 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:39:38,809 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:39:38,949 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:39,083 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:39,090 [main:117] - GENERATED CALL = (TODO().toString()).replaceAfterLast('╤', "ccqvs", testHtmlNoInline())
2021-03-12 00:39:39,090 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:39:39,090 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:39:39,231 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:39:39,239 [main:117] - GENERATED CALL = (TODO().toString()).removeSuffix("ojuhc")
2021-03-12 00:39:39,239 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:39:39,239 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:39:39,239 [main:117] - GENERATED CALL = (TODO().toString()).length.toString(bodyVar)
2021-03-12 00:39:39,239 [main:61] - replacement of "text. For more see the" of type String is (TODO().toString()).length.toString(bodyVar)
2021-03-12 00:39:39,387 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:39:39,389 [main:53] - replacing ({
                        +"Command line arguments were:"
                        ul {
                            for (arg in Array<String>(-1701606424, {a: Int -> "jdqmy"}))
                                (UL().li()).ul({ repeat(612284411, {a: Int -> require(true, { "eioox"})})}).li({ print("wgaif")})
                        }
                    }, [@kotlin.ExtensionFunctionType] Function1<P, Unit>)
2021-03-12 00:39:39,389 [main:50] - replacing {
                        +"Command line arguments were:"
                        ul {
                            for (arg in Array<String>(-1701606424, {a: Int -> "jdqmy"}))
                                (UL().li()).ul({ repeat(612284411, {a: Int -> require(true, { "eioox"})})}).li({ print("wgaif")})
                        }
                    } [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:39:39,390 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:39:39,517 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:39:39,521 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:39,670 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:39:39,676 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:39:40,148 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:40,152 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:39:40,157 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:39:40,157 [main:95] - GENERATED = check(true, { "zkbhi"})
2021-03-12 00:39:40,157 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<P, Unit> = { check(true, { "zkbhi"})}
2021-03-12 00:39:40,157 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:40,342 [main:67] - randomType = LI?
2021-03-12 00:39:40,465 [main:302] - generating value of type = LI false depth = 0
2021-03-12 00:39:40,469 [main:112] - generating klass LI text = class LI() : BodyTag("li")
2021-03-12 00:39:40,622 [main:194] - Type params = []
2021-03-12 00:39:40,863 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:40,889 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:39:40,951 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:39:40,994 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Head
2021-03-12 00:39:41,037 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from UL
2021-03-12 00:39:41,103 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from H1
2021-03-12 00:39:41,164 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:39:41,226 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:39:41,230 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:41,234 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Int
2021-03-12 00:39:41,268 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:39:41,272 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from LI
2021-03-12 00:39:41,334 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:41,338 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Title
2021-03-12 00:39:41,380 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:39:41,384 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from B
2021-03-12 00:39:41,445 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:41,449 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:41,453 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:41,457 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:39:41,457 [main:61] - replacement of {
                        +"Command line arguments were:"
                        ul {
                            for (arg in Array<String>(-1701606424, {a: Int -> "jdqmy"}))
                                (UL().li()).ul({ repeat(612284411, {a: Int -> require(true, { "eioox"})})}).li({ print("wgaif")})
                        }
                    } of type [@kotlin.ExtensionFunctionType] Function1<P, Unit> is { check(true, { "zkbhi"})}
2021-03-12 00:39:41,595 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:39:41,599 [main:53] - replacing ("$(testBodyNoInline()).length.minus(78)", String)
2021-03-12 00:39:41,600 [main:50] - replacing "$(testBodyNoInline()).length.minus(78)" String
2021-03-12 00:39:41,600 [main:54] - Getting value of type String
2021-03-12 00:39:41,738 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:41,742 [main:58] - GENERATED VALUE OF TYPE String = "tdios"
2021-03-12 00:39:41,743 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:41,891 [main:67] - randomType = ULong
2021-03-12 00:39:42,038 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 00:39:42,080 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6760f0c0]
2021-03-12 00:39:42,080 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25cea1e]
2021-03-12 00:39:42,080 [main:78] - Generated call from random type = (1023644429787970774.toULong()).toLong().toString(bodyVar)
2021-03-12 00:39:42,081 [main:106] - GETTING String from UL
2021-03-12 00:39:42,163 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in UL[SimpleFunctionDescriptorImpl@4f322f9e], public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2]]
2021-03-12 00:39:42,163 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in UL[SimpleFunctionDescriptorImpl@4f322f9e]
2021-03-12 00:39:42,290 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:39:42,294 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:42,446 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:42,452 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:42,756 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:42,760 [main:95] - GENERATED = check(true)
2021-03-12 00:39:42,760 [main:117] - GENERATED CALL = (B().ul()).b({ check(true)}).name
2021-03-12 00:39:42,760 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:39:42,761 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:39:42,900 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:43,044 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:43,049 [main:117] - GENERATED CALL = (B().ul()).name.replaceBeforeLast('쬹', "igddp", A().href)
2021-03-12 00:39:43,049 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in UL[PropertyDescriptorImpl@5794aeae], public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]]
2021-03-12 00:39:43,049 [main:149] - GENERATING call of type public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]
2021-03-12 00:39:43,178 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:43,183 [main:117] - GENERATED CALL = (B().ul()).attributes.put(href, "usyxg")
2021-03-12 00:39:43,183 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:39:43,183 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:39:43,339 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:39:43,487 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 00:39:43,492 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 00:39:43,626 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:39:43,631 [main:95] - GENERATED = hashSetOf<Int>(-2125629536)
2021-03-12 00:39:43,631 [main:117] - GENERATED CALL = (B().ul()).name.slice(hashSetOf<Int>(-2125629536))
2021-03-12 00:39:43,631 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:39:43,631 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:39:43,775 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:39:43,780 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:39:43,784 [main:117] - GENERATED CALL = (B().ul()).name.dropLastWhile({a: Char -> true})
2021-03-12 00:39:43,785 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:39:43,785 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:39:43,785 [main:117] - GENERATED CALL = (B().ul()).name.lowercase()
2021-03-12 00:39:43,785 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]]
2021-03-12 00:39:43,785 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]
2021-03-12 00:39:43,785 [main:117] - GENERATED CALL = (B().ul()).name.uppercase()
2021-03-12 00:39:43,785 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:39:43,785 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:39:43,923 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:39:43,928 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:39:43,932 [main:117] - GENERATED CALL = (B().ul()).name.takeLastWhile({a: Char -> true})
2021-03-12 00:39:43,933 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:39:43,933 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:39:44,060 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:44,064 [main:117] - GENERATED CALL = (B().ul()).name.replaceAfterLast('㺡', testAllInline(), testBodyHtmlNoInline())
2021-03-12 00:39:44,065 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:39:44,065 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:39:44,207 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:39:44,207 [main:117] - GENERATED CALL = (B().ul()).name.plus("asjui")
2021-03-12 00:39:44,208 [main:61] - replacement of "$(testBodyNoInline()).length.minus(78)" of type String is (B().ul()).name.takeLastWhile({a: Char -> true})
2021-03-12 00:39:44,355 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:39:44,355 [main:66] - Compilation checking started
2021-03-12 00:39:44,688 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +(B().ul()).name.takeLastWhile({a: Char -> true}); +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:39:44,690 [main:53] - replacing ("this format can be used as an alternative markup to XML", String)
2021-03-12 00:39:44,691 [main:50] - replacing "this format can be used as an alternative markup to XML" String
2021-03-12 00:39:44,691 [main:54] - Getting value of type String
2021-03-12 00:39:44,840 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:44,844 [main:58] - GENERATED VALUE OF TYPE String = "wjfdm"
2021-03-12 00:39:44,844 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:44,862 [main:67] - randomType = UL
2021-03-12 00:39:45,000 [main:302] - generating value of type = UL false depth = 0
2021-03-12 00:39:45,005 [main:112] - generating klass UL text = class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}
2021-03-12 00:39:45,130 [main:194] - Type params = []
2021-03-12 00:39:45,353 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:39:45,488 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:45,616 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:45,762 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:39:45,767 [main:78] - Generated call from random type = (UL()).name.replace('»', 'ﰿ', false)
2021-03-12 00:39:45,768 [main:106] - GETTING String from LI
2021-03-12 00:39:45,846 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]]
2021-03-12 00:39:45,846 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]
2021-03-12 00:39:45,846 [main:117] - GENERATED CALL = (UL().li()).name.replaceIndent(testAllInline())
2021-03-12 00:39:45,846 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]]
2021-03-12 00:39:45,846 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]
2021-03-12 00:39:45,846 [main:117] - GENERATED CALL = (UL().li()).name.take(bodyVar)
2021-03-12 00:39:45,847 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:39:45,847 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:39:45,984 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:46,113 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:46,117 [main:117] - GENERATED CALL = (UL().li()).name.replaceBefore('ẇ', testHtmlNoInline(), "yepco")
2021-03-12 00:39:46,117 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:39:46,117 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:39:46,256 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:46,399 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:46,529 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:39:46,534 [main:117] - GENERATED CALL = (UL().li()).name.replace('搏', '绐', true)
2021-03-12 00:39:46,534 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:39:46,534 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:39:46,534 [main:117] - GENERATED CALL = (UL().li()).name.decapitalize()
2021-03-12 00:39:46,534 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]]
2021-03-12 00:39:46,534 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]
2021-03-12 00:39:46,674 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:39:46,678 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:39:46,683 [main:117] - GENERATED CALL = (UL().li()).name.replaceFirstChar({a: Char -> '齗'})
2021-03-12 00:39:46,683 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:39:46,683 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:39:46,822 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:46,827 [main:117] - GENERATED CALL = (UL().li()).name.prependIndent("txtdj")
2021-03-12 00:39:46,827 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in LI[SimpleFunctionDescriptorImpl@113425e], public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681]]
2021-03-12 00:39:46,827 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in LI[SimpleFunctionDescriptorImpl@113425e]
2021-03-12 00:39:46,952 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:39:46,957 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:47,111 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:39:47,117 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:39:47,426 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:39:47,431 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:39:47,438 [main:95] - GENERATED = contract({ println()})
2021-03-12 00:39:47,438 [main:117] - GENERATED CALL = (UL().li()).p({ contract({ println()})}).name
2021-03-12 00:39:47,438 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:39:47,438 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:39:47,583 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:39:47,591 [main:117] - GENERATED CALL = (UL().li()).name.removeSuffix(StringBuilder())
2021-03-12 00:39:47,591 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in LI[SimpleFunctionDescriptorImpl@6056149b], public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23]]
2021-03-12 00:39:47,591 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in LI[SimpleFunctionDescriptorImpl@6056149b]
2021-03-12 00:39:47,724 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:39:47,728 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:47,868 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:39:47,874 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:39:48,354 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:39:48,359 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:39:48,363 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:39:48,520 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:39:48,525 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:39:48,822 [main:302] - generating value of type = Any false depth = 8
2021-03-12 00:39:48,822 [main:95] - GENERATED = println("yhgst")
2021-03-12 00:39:48,824 [main:95] - GENERATED = repeat(584066731, {a: Int -> println("yhgst")})
2021-03-12 00:39:48,824 [main:117] - GENERATED CALL = (UL().li()).ul({ repeat(584066731, {a: Int -> println("yhgst")})}).name
2021-03-12 00:39:48,824 [main:61] - replacement of "this format can be used as an alternative markup to XML" of type String is (UL().li()).name.replaceBefore('ẇ', testHtmlNoInline(), "yepco")
2021-03-12 00:39:48,965 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:39:48,967 [main:53] - replacing (init, [@kotlin.ExtensionFunctionType] Function1<Body, Unit>)
2021-03-12 00:39:48,967 [main:50] - replacing init [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:39:48,967 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:39:49,106 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:39:49,111 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:49,246 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:49,251 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:49,566 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:49,570 [main:95] - GENERATED = require(false)
2021-03-12 00:39:49,571 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Body, Unit> = { require(false)}
2021-03-12 00:39:49,571 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:49,727 [main:67] - randomType = Int?
2021-03-12 00:39:49,869 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:49,920 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:39:49,944 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:39:49,948 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from H1
2021-03-12 00:39:50,036 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:39:50,043 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:39:50,050 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:39:50,171 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from B
2021-03-12 00:39:50,232 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Title
2021-03-12 00:39:50,273 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Head
2021-03-12 00:39:50,315 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:39:50,360 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from UL
2021-03-12 00:39:50,422 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:39:50,482 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:39:50,486 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:39:50,490 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:39:50,494 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from LI
2021-03-12 00:39:50,574 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:39:50,578 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:39:50,582 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:39:50,582 [main:61] - replacement of init of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit> is { require(false)}
2021-03-12 00:39:50,721 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:39:50,723 [main:53] - replacing ("Kotlin", String)
2021-03-12 00:39:50,723 [main:50] - replacing "Kotlin" String
2021-03-12 00:39:50,723 [main:54] - Getting value of type String
2021-03-12 00:39:50,863 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:50,868 [main:58] - GENERATED VALUE OF TYPE String = "hvhsf"
2021-03-12 00:39:50,868 [main:61] - GENERATED IS CALL =false
2021-03-12 00:39:51,036 [main:67] - randomType = List<UL>
2021-03-12 00:39:51,037 [main:106] - GETTING String from B
2021-03-12 00:39:51,104 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:39:51,104 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:39:51,251 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:51,256 [main:117] - GENERATED CALL = (B().b()).name.replaceAfter('囃', TextElement("utmeo").text, testHtmlNoInline())
2021-03-12 00:39:51,256 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:39:51,256 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:39:51,395 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:39:51,400 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:39:51,404 [main:117] - GENERATED CALL = (B().b()).name.filterNot({a: Char -> false})
2021-03-12 00:39:51,404 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:39:51,404 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:39:51,533 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:51,682 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:51,687 [main:117] - GENERATED CALL = (B().b()).name.substringAfterLast('꾜', "ytugy")
2021-03-12 00:39:51,687 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:39:51,687 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:39:51,826 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:51,960 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:51,965 [main:117] - GENERATED CALL = (B().b()).name.padStart(-836569683, '⡤')
2021-03-12 00:39:51,965 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:39:51,965 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:39:52,112 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:52,256 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:39:52,261 [main:117] - GENERATED CALL = (B().b()).name.replaceAfterLast('⵨', TODO().toString(), "lclll")
2021-03-12 00:39:52,261 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]]
2021-03-12 00:39:52,261 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]
2021-03-12 00:39:52,261 [main:117] - GENERATED CALL = (B().b()).name.replaceIndent(testAllInline())
2021-03-12 00:39:52,261 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]]
2021-03-12 00:39:52,261 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]
2021-03-12 00:39:52,391 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:39:52,395 [main:117] - GENERATED CALL = (B().b()).name.drop(-1541158138)
2021-03-12 00:39:52,395 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]]
2021-03-12 00:39:52,395 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]
2021-03-12 00:39:52,540 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:39:52,544 [main:117] - GENERATED CALL = (B().b()).name.padEnd(bodyVar, 'Ⱅ')
2021-03-12 00:39:52,545 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:39:52,545 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:39:52,545 [main:117] - GENERATED CALL = (B().b()).name.toUpperCase()
2021-03-12 00:39:52,545 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:39:52,545 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:39:52,545 [main:117] - GENERATED CALL = (B().b()).name.trimIndent()
2021-03-12 00:39:52,545 [main:61] - replacement of "Kotlin" of type String is (B().b()).name.drop(-1541158138)
2021-03-12 00:39:52,684 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:39:52,688 [main:53] - replacing (p { +"this format can be used as an alternative markup to XML" }, P)
2021-03-12 00:39:52,688 [main:50] - replacing p { +"this format can be used as an alternative markup to XML" } P
2021-03-12 00:39:52,688 [main:54] - Getting value of type P
2021-03-12 00:39:52,816 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:39:52,820 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:39:52,963 [main:194] - Type params = []
2021-03-12 00:39:53,103 [main:58] - GENERATED VALUE OF TYPE P = P()
2021-03-12 00:39:53,103 [main:61] - GENERATED IS CALL =true
2021-03-12 00:39:53,255 [main:67] - randomType = Float
2021-03-12 00:39:53,396 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:39:53,437 [main:106] - GETTING P from Body
2021-03-12 00:39:53,504 [main:113] - Case = [public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@1df092da]]
2021-03-12 00:39:53,504 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@1df092da]
2021-03-12 00:39:53,641 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:39:53,645 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:53,795 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:53,801 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:54,113 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:54,117 [main:95] - GENERATED = check(true)
2021-03-12 00:39:54,117 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).pNoInline({ check(true)})
2021-03-12 00:39:54,118 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]]
2021-03-12 00:39:54,118 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]
2021-03-12 00:39:54,256 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:39:54,261 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:54,269 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).p({ println()})
2021-03-12 00:39:54,269 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b], public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]]
2021-03-12 00:39:54,269 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b]
2021-03-12 00:39:54,407 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:39:54,412 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:54,543 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:39:54,548 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:39:54,869 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:39:54,869 [main:95] - GENERATED = println("votln")
2021-03-12 00:39:54,869 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]
2021-03-12 00:39:55,006 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:39:55,010 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:55,174 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:39:55,180 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:39:55,478 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:39:55,478 [main:95] - GENERATED = println("qehzc")
2021-03-12 00:39:55,478 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).b({ println("votln")}).p({ println("qehzc")})
2021-03-12 00:39:55,478 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]]
2021-03-12 00:39:55,478 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b]
2021-03-12 00:39:55,617 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:39:55,621 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:55,629 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]
2021-03-12 00:39:55,768 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:39:55,773 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:55,910 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:39:55,915 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:39:56,386 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:56,390 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:39:56,394 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:39:56,395 [main:95] - GENERATED = check(true, { "hrvkp"})
2021-03-12 00:39:56,395 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).b({ println()}).pNoInline({ check(true, { "hrvkp"})})
2021-03-12 00:39:56,395 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]]
2021-03-12 00:39:56,395 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]
2021-03-12 00:39:56,538 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:39:56,542 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:56,689 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:56,694 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:57,004 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:57,009 [main:95] - GENERATED = check(false)
2021-03-12 00:39:57,009 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]
2021-03-12 00:39:57,149 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:39:57,153 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:57,287 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:57,293 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:57,608 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:57,613 [main:95] - GENERATED = require(false)
2021-03-12 00:39:57,613 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).h1({ check(false)}).pNoInline({ require(false)})
2021-03-12 00:39:57,613 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903], public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]]
2021-03-12 00:39:57,613 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]
2021-03-12 00:39:57,745 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:39:57,750 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:57,757 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]
2021-03-12 00:39:57,899 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:39:57,903 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:58,053 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:39:58,058 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:39:58,369 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:39:58,369 [main:95] - GENERATED = println("ohprq")
2021-03-12 00:39:58,369 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).h1({ println()}).p({ println("ohprq")})
2021-03-12 00:39:58,369 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]]
2021-03-12 00:39:58,370 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28]
2021-03-12 00:39:58,510 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:39:58,514 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:58,650 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:58,655 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:39:58,969 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:58,974 [main:95] - GENERATED = require(false)
2021-03-12 00:39:58,974 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]
2021-03-12 00:39:59,104 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:39:59,108 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:39:59,257 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:39:59,263 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:39:59,736 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:39:59,740 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:39:59,745 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:39:59,745 [main:95] - GENERATED = require(true, { "vlljz"})
2021-03-12 00:39:59,745 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).ul({ require(false)}).pNoInline({ require(true, { "vlljz"})})
2021-03-12 00:39:59,746 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]]
2021-03-12 00:39:59,746 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]
2021-03-12 00:39:59,885 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:39:59,890 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:00,025 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:00,031 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:00,349 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:40:00,349 [main:95] - GENERATED = print("goxlk")
2021-03-12 00:40:00,350 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]
2021-03-12 00:40:00,477 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:00,482 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:00,630 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:00,636 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:01,113 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:01,117 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:40:01,122 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:40:01,122 [main:95] - GENERATED = check(true, { "owsda"})
2021-03-12 00:40:01,122 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).p({ print("goxlk")}).pNoInline({ check(true, { "owsda"})})
2021-03-12 00:40:01,123 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b], public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]]
2021-03-12 00:40:01,123 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]
2021-03-12 00:40:01,263 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:01,268 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:01,402 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:01,408 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:01,724 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:01,729 [main:95] - GENERATED = check(true)
2021-03-12 00:40:01,729 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]
2021-03-12 00:40:01,859 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:01,863 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:02,012 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:02,018 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:02,496 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:40:02,501 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:40:02,505 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:40:02,650 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:02,655 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:02,961 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:40:02,965 [main:95] - GENERATED = check(false)
2021-03-12 00:40:02,966 [main:95] - GENERATED = repeat(90075708, {a: Int -> check(false)})
2021-03-12 00:40:02,966 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).p({ check(true)}).p({ repeat(90075708, {a: Int -> check(false)})})
2021-03-12 00:40:02,966 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28], public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]]
2021-03-12 00:40:02,966 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28]
2021-03-12 00:40:03,116 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:40:03,120 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:03,254 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:03,260 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:03,577 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:40:03,582 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:40:03,715 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:03,720 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:04,042 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:40:04,046 [main:95] - GENERATED = require(true)
2021-03-12 00:40:04,046 [main:95] - GENERATED = contract({ require(true)})
2021-03-12 00:40:04,047 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]
2021-03-12 00:40:04,176 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:04,180 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:04,330 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:04,336 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:04,643 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:04,647 [main:95] - GENERATED = check(false)
2021-03-12 00:40:04,648 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).ul({ contract({ require(true)})}).p({ check(false)})
2021-03-12 00:40:04,648 [main:61] - replacement of p { +"this format can be used as an alternative markup to XML" } of type P is (HTML().bodyNoInline()).p({ print("goxlk")}).pNoInline({ check(true, { "owsda"})})
2021-03-12 00:40:04,788 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:40:04,789 [main:66] - Compilation checking started
2021-03-12 00:40:05,139 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    (HTML().bodyNoInline()).p({ print("goxlk")}).pNoInline({ check(true, { "owsda"})})

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:40:05,141 [main:53] - replacing ({
                        +"Command line arguments were:"
                        ul {
                            for (arg in Array<String>(-1701606424, {a: Int -> "jdqmy"}))
                                (UL().li()).ul({ repeat(612284411, {a: Int -> require(true, { "eioox"})})}).li({ print("wgaif")})
                        }
                    }, [@kotlin.ExtensionFunctionType] Function1<P, Unit>)
2021-03-12 00:40:05,141 [main:50] - replacing {
                        +"Command line arguments were:"
                        ul {
                            for (arg in Array<String>(-1701606424, {a: Int -> "jdqmy"}))
                                (UL().li()).ul({ repeat(612284411, {a: Int -> require(true, { "eioox"})})}).li({ print("wgaif")})
                        }
                    } [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:40:05,141 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:40:05,285 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:05,290 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:05,441 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:05,446 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:05,937 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:40:05,942 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:40:05,946 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:40:06,082 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:06,087 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:06,415 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:40:06,419 [main:95] - GENERATED = check(false)
2021-03-12 00:40:06,420 [main:95] - GENERATED = repeat(1230422698, {a: Int -> check(false)})
2021-03-12 00:40:06,420 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<P, Unit> = { repeat(1230422698, {a: Int -> check(false)})}
2021-03-12 00:40:06,420 [main:61] - GENERATED IS CALL =false
2021-03-12 00:40:06,437 [main:67] - randomType = Tag
2021-03-12 00:40:06,562 [main:302] - generating value of type = Tag false depth = 0
2021-03-12 00:40:06,567 [main:112] - generating klass Tag text = abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}
2021-03-12 00:40:06,893 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:40:06,985 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:40:07,037 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:40:07,059 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:40:07,063 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:40:07,068 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:40:07,072 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:40:07,076 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from UL
2021-03-12 00:40:07,154 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from H1
2021-03-12 00:40:07,216 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from B
2021-03-12 00:40:07,289 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:40:07,293 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:40:07,297 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:40:07,301 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:40:07,363 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Title
2021-03-12 00:40:07,405 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Head
2021-03-12 00:40:07,447 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:40:07,451 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from LI
2021-03-12 00:40:07,514 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:40:07,514 [main:61] - replacement of {
                        +"Command line arguments were:"
                        ul {
                            for (arg in Array<String>(-1701606424, {a: Int -> "jdqmy"}))
                                (UL().li()).ul({ repeat(612284411, {a: Int -> require(true, { "eioox"})})}).li({ print("wgaif")})
                        }
                    } of type [@kotlin.ExtensionFunctionType] Function1<P, Unit> is { repeat(1230422698, {a: Int -> check(false)})}
2021-03-12 00:40:07,656 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:40:07,659 [main:53] - replacing (HTML(), HTML)
2021-03-12 00:40:07,659 [main:50] - replacing HTML() HTML
2021-03-12 00:40:07,659 [main:54] - Getting value of type HTML
2021-03-12 00:40:07,799 [main:302] - generating value of type = HTML false depth = 0
2021-03-12 00:40:07,804 [main:112] - generating klass HTML text = class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}
2021-03-12 00:40:07,931 [main:194] - Type params = []
2021-03-12 00:40:08,079 [main:58] - GENERATED VALUE OF TYPE HTML = HTML()
2021-03-12 00:40:08,079 [main:61] - GENERATED IS CALL =true
2021-03-12 00:40:08,088 [main:67] - randomType = String
2021-03-12 00:40:08,230 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:08,258 [main:106] - GETTING HTML from B
2021-03-12 00:40:08,351 [main:106] - GETTING HTML from String
2021-03-12 00:40:08,381 [main:106] - GETTING HTML from String
2021-03-12 00:40:08,381 [main:106] - GETTING HTML from String
2021-03-12 00:40:08,382 [main:106] - GETTING HTML from P
2021-03-12 00:40:08,453 [main:106] - GETTING HTML from String
2021-03-12 00:40:08,454 [main:106] - GETTING HTML from String
2021-03-12 00:40:08,455 [main:106] - GETTING HTML from String
2021-03-12 00:40:08,455 [main:106] - GETTING HTML from [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:40:08,474 [main:106] - GETTING HTML from P
2021-03-12 00:40:08,474 [main:106] - GETTING HTML from HTML
2021-03-12 00:40:08,514 [main:61] - replacement of HTML() of type HTML is html({ repeat(1590980469, {a: Int -> println("skriq")})})
2021-03-12 00:40:08,656 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:40:08,657 [main:66] - Compilation checking started
2021-03-12 00:40:09,219 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" }
                        }
                    }
                }
            }

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:40:09,223 [main:53] - replacing ({
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" }
                        }
                    }
                }
            }, [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>)
2021-03-12 00:40:09,223 [main:50] - replacing {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" }
                        }
                    }
                }
            } [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:40:09,223 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:40:09,368 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> false depth = 0
2021-03-12 00:40:09,372 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:09,519 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:09,524 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:09,827 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:40:09,827 [main:95] - GENERATED = println("jycml")
2021-03-12 00:40:09,827 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> = { println("jycml")}
2021-03-12 00:40:09,827 [main:61] - GENERATED IS CALL =false
2021-03-12 00:40:09,836 [main:67] - randomType = Int
2021-03-12 00:40:09,975 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:40:10,026 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:40:10,053 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Body
2021-03-12 00:40:10,141 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Body
2021-03-12 00:40:10,145 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:40:10,149 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:40:10,153 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:40:10,157 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from P
2021-03-12 00:40:10,219 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from HTML
2021-03-12 00:40:10,263 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from UL
2021-03-12 00:40:10,325 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Title
2021-03-12 00:40:10,367 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from B
2021-03-12 00:40:10,428 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from HTML
2021-03-12 00:40:10,432 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:40:10,436 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:40:10,440 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:40:10,444 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Head
2021-03-12 00:40:10,487 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:40:10,491 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from LI
2021-03-12 00:40:10,553 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Array<String>
2021-03-12 00:40:10,567 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from HTML
2021-03-12 00:40:10,571 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from P
2021-03-12 00:40:10,575 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from H1
2021-03-12 00:40:10,643 [main:61] - replacement of {
                val htmlVal = 0
                Head()
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" }
                        }
                    }
                }
            } of type [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> is { println("jycml")}
2021-03-12 00:40:10,780 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:40:10,781 [main:66] - Compilation checking started
2021-03-12 00:40:11,297 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:40:11,301 [main:53] - replacing ("1", String)
2021-03-12 00:40:11,302 [main:50] - replacing "1" String
2021-03-12 00:40:11,302 [main:54] - Getting value of type String
2021-03-12 00:40:11,450 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:11,453 [main:58] - GENERATED VALUE OF TYPE String = "gucyg"
2021-03-12 00:40:11,453 [main:61] - GENERATED IS CALL =false
2021-03-12 00:40:11,468 [main:67] - randomType = TextElement
2021-03-12 00:40:11,592 [main:302] - generating value of type = TextElement false depth = 0
2021-03-12 00:40:11,595 [main:112] - generating klass TextElement text = class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}
2021-03-12 00:40:11,721 [main:194] - Type params = []
2021-03-12 00:40:11,836 [main:302] - generating value of type = String true depth = 2
2021-03-12 00:40:11,849 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:40:11,980 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:40:11,983 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:40:11,987 [main:78] - Generated call from random type = (TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:40:11,987 [main:61] - replacement of "1" of type String is (TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:40:12,111 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:40:12,112 [main:66] - Compilation checking started
2021-03-12 00:40:12,601 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:40:12,604 [main:53] - replacing (htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            }, HTML)
2021-03-12 00:40:12,604 [main:50] - replacing htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            } HTML
2021-03-12 00:40:12,604 [main:54] - Getting value of type HTML
2021-03-12 00:40:12,741 [main:302] - generating value of type = HTML false depth = 0
2021-03-12 00:40:12,745 [main:112] - generating klass HTML text = class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}
2021-03-12 00:40:12,871 [main:194] - Type params = []
2021-03-12 00:40:13,002 [main:58] - GENERATED VALUE OF TYPE HTML = HTML()
2021-03-12 00:40:13,002 [main:61] - GENERATED IS CALL =true
2021-03-12 00:40:13,516 [main:67] - randomType = Function1<UShort, Set<Char>>
2021-03-12 00:40:13,517 [main:106] - GETTING HTML from String
2021-03-12 00:40:13,542 [main:106] - GETTING HTML from String
2021-03-12 00:40:13,542 [main:106] - GETTING HTML from Body
2021-03-12 00:40:13,629 [main:106] - GETTING HTML from HTML
2021-03-12 00:40:13,678 [main:61] - replacement of htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline { println("armlz")}
            } of type HTML is html({ repeat(1590980469, {a: Int -> println("skriq")})})
2021-03-12 00:40:13,811 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:40:13,811 [main:66] - Compilation checking started
2021-03-12 00:40:14,314 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:40:14,317 [main:53] - replacing ({ +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" }, [@kotlin.ExtensionFunctionType] Function1<LI, Unit>)
2021-03-12 00:40:14,317 [main:50] - replacing { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" } [@kotlin.ExtensionFunctionType] Function1<LI, Unit>
2021-03-12 00:40:14,317 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<LI, Unit>
2021-03-12 00:40:14,469 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<LI, Unit> false depth = 0
2021-03-12 00:40:14,473 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:14,610 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:14,624 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:14,923 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:40:14,927 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:40:14,934 [main:95] - GENERATED = contract({ println()})
2021-03-12 00:40:14,934 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<LI, Unit> = { contract({ println()})}
2021-03-12 00:40:14,934 [main:61] - GENERATED IS CALL =false
2021-03-12 00:40:15,746 [main:67] - randomType = Triple<LinkedHashSet<TagWithText>, Double, UShort>?
2021-03-12 00:40:15,883 [main:302] - generating value of type = Triple<LinkedHashSet<TagWithText>, Double, UShort> false depth = 0
2021-03-12 00:40:16,016 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: LinkedHashSet<TagWithText>, second: Double, third: UShort): Triple<LinkedHashSet<TagWithText>, Double, UShort> = TODO()
2021-03-12 00:40:16,020 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: LinkedHashSet<TagWithText>, second: Double, third: UShort): Triple<LinkedHashSet<TagWithText>, Double, UShort> = TODO()
2021-03-12 00:40:16,159 [main:302] - generating value of type = LinkedHashSet<TagWithText> false depth = 3
2021-03-12 00:40:16,284 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<TagWithText> = TODO()
2021-03-12 00:40:16,288 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<TagWithText> = TODO()
2021-03-12 00:40:16,439 [main:95] - GENERATED = linkedSetOf<TagWithText>()
2021-03-12 00:40:16,439 [main:302] - generating value of type = Double true depth = 3
2021-03-12 00:40:16,442 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 00:40:16,446 [main:95] - GENERATED = Triple<LinkedHashSet<TagWithText>, Double, UShort>(linkedSetOf<TagWithText>(), 0.4733724228888062, 31137.toUShort())
2021-03-12 00:40:16,480 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from UL
2021-03-12 00:40:16,555 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Int
2021-03-12 00:40:16,602 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Title
2021-03-12 00:40:16,656 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from P
2021-03-12 00:40:16,752 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Head
2021-03-12 00:40:16,800 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from LI
2021-03-12 00:40:16,863 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Int
2021-03-12 00:40:16,867 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:16,887 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:16,891 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Body
2021-03-12 00:40:16,953 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from H1
2021-03-12 00:40:17,013 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:17,017 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:17,021 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:17,025 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from HTML
2021-03-12 00:40:17,073 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from HTML
2021-03-12 00:40:17,077 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from P
2021-03-12 00:40:17,081 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from B
2021-03-12 00:40:17,142 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:17,146 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Body
2021-03-12 00:40:17,150 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:17,150 [main:61] - replacement of { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" } of type [@kotlin.ExtensionFunctionType] Function1<LI, Unit> is { contract({ println()})}
2021-03-12 00:40:17,285 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:40:17,289 [main:53] - replacing ({
                    title { +"XML encoding with Kotlin" }
                }, [@kotlin.ExtensionFunctionType] Function1<Head, Unit>)
2021-03-12 00:40:17,289 [main:50] - replacing {
                    title { +"XML encoding with Kotlin" }
                } [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:40:17,289 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:40:17,414 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Head, Unit> false depth = 0
2021-03-12 00:40:17,418 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:17,555 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:17,559 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:17,853 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:40:17,856 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:40:17,988 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:17,993 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:18,352 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 00:40:18,356 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:40:18,489 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:18,494 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:18,954 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:40:18,958 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-12 00:40:18,961 [main:302] - generating value of type = Any false depth = 13
2021-03-12 00:40:18,962 [main:95] - GENERATED = require(true, { "tssyk"})
2021-03-12 00:40:18,962 [main:95] - GENERATED = contract({ require(true, { "tssyk"})})
2021-03-12 00:40:18,962 [main:95] - GENERATED = contract({ contract({ require(true, { "tssyk"})})})
2021-03-12 00:40:18,962 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Head, Unit> = { contract({ contract({ require(true, { "tssyk"})})})}
2021-03-12 00:40:18,962 [main:61] - GENERATED IS CALL =false
2021-03-12 00:40:18,985 [main:67] - randomType = LI
2021-03-12 00:40:19,109 [main:302] - generating value of type = LI false depth = 0
2021-03-12 00:40:19,113 [main:112] - generating klass LI text = class LI() : BodyTag("li")
2021-03-12 00:40:19,232 [main:194] - Type params = []
2021-03-12 00:40:19,461 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Body
2021-03-12 00:40:19,549 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Int
2021-03-12 00:40:19,599 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Title
2021-03-12 00:40:19,665 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:40:19,699 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:40:19,703 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:40:19,707 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from P
2021-03-12 00:40:19,779 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from HTML
2021-03-12 00:40:19,823 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Body
2021-03-12 00:40:19,827 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:40:19,831 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Head
2021-03-12 00:40:19,873 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:40:19,877 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from LI
2021-03-12 00:40:19,939 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from UL
2021-03-12 00:40:20,001 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from H1
2021-03-12 00:40:20,061 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from HTML
2021-03-12 00:40:20,065 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from B
2021-03-12 00:40:20,126 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from P
2021-03-12 00:40:20,130 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:40:20,134 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:40:20,138 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Array<String>
2021-03-12 00:40:20,152 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:40:20,156 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from HTML
2021-03-12 00:40:20,156 [main:61] - replacement of {
                    title { +"XML encoding with Kotlin" }
                } of type [@kotlin.ExtensionFunctionType] Function1<Head, Unit> is { contract({ contract({ require(true, { "tssyk"})})})}
2021-03-12 00:40:20,299 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:40:20,299 [main:66] - Compilation checking started
2021-03-12 00:40:20,644 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head { contract({ contract({ require(true, { "tssyk"})})})}
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:40:20,646 [main:53] - replacing (Title(), Title)
2021-03-12 00:40:20,646 [main:50] - replacing Title() Title
2021-03-12 00:40:20,646 [main:54] - Getting value of type Title
2021-03-12 00:40:20,779 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:40:20,782 [main:112] - generating klass Title text = class Title() : TagWithText((Body())?.name.trim())
2021-03-12 00:40:20,909 [main:194] - Type params = []
2021-03-12 00:40:21,036 [main:58] - GENERATED VALUE OF TYPE Title = Title()
2021-03-12 00:40:21,036 [main:61] - GENERATED IS CALL =true
2021-03-12 00:40:21,687 [main:67] - randomType = Triple<Element, Long?, Head>?
2021-03-12 00:40:21,821 [main:302] - generating value of type = Triple<Element, Long?, Head> false depth = 0
2021-03-12 00:40:21,954 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Element, second: Long?, third: Head): Triple<Element, Long?, Head> = TODO()
2021-03-12 00:40:21,959 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Element, second: Long?, third: Head): Triple<Element, Long?, Head> = TODO()
2021-03-12 00:40:22,096 [main:302] - generating value of type = Element false depth = 3
2021-03-12 00:40:22,099 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:40:22,383 [main:302] - generating value of type = Long true depth = 3
2021-03-12 00:40:22,387 [main:302] - generating value of type = Head false depth = 3
2021-03-12 00:40:22,391 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}
2021-03-12 00:40:22,517 [main:194] - Type params = []
2021-03-12 00:40:22,646 [main:95] - GENERATED = Triple<Element, Long?, Head>(TODO(), -5659456947200053900, Head())
2021-03-12 00:40:22,668 [main:149] - GENERATING call of type public final inline fun title(init: Title.() -> kotlin.Unit): Title defined in Head[SimpleFunctionDescriptorImpl@4454611b]
2021-03-12 00:40:22,786 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Title, Unit> false depth = 0
2021-03-12 00:40:22,789 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:22,931 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:22,935 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:23,221 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:23,225 [main:95] - GENERATED = require(false)
2021-03-12 00:40:23,226 [main:78] - Generated call from random type = (Triple<Element, Long?, Head>(TODO(), -5659456947200053900, Head()))?.third.title({ require(false)})
2021-03-12 00:40:23,226 [main:61] - replacement of Title() of type Title is (Triple<Element, Long?, Head>(TODO(), -5659456947200053900, Head()))?.third.title({ require(false)})
2021-03-12 00:40:23,342 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:40:23,343 [main:53] - replacing ({ +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" }, [@kotlin.ExtensionFunctionType] Function1<LI, Unit>)
2021-03-12 00:40:23,343 [main:50] - replacing { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" } [@kotlin.ExtensionFunctionType] Function1<LI, Unit>
2021-03-12 00:40:23,344 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<LI, Unit>
2021-03-12 00:40:23,476 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<LI, Unit> false depth = 0
2021-03-12 00:40:23,480 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:23,614 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:23,618 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:23,892 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:40:23,893 [main:95] - GENERATED = print("wifbc")
2021-03-12 00:40:23,893 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<LI, Unit> = { print("wifbc")}
2021-03-12 00:40:23,893 [main:61] - GENERATED IS CALL =false
2021-03-12 00:40:24,696 [main:67] - randomType = Set<MutableMap<A?, Float>>?
2021-03-12 00:40:24,703 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:24,740 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:24,747 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from P
2021-03-12 00:40:24,858 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from H1
2021-03-12 00:40:24,939 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:24,943 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Body
2021-03-12 00:40:25,006 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from HTML
2021-03-12 00:40:25,052 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from UL
2021-03-12 00:40:25,116 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Head
2021-03-12 00:40:25,158 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:25,162 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from LI
2021-03-12 00:40:25,225 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from B
2021-03-12 00:40:25,289 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from P
2021-03-12 00:40:25,293 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:25,297 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Body
2021-03-12 00:40:25,301 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Title
2021-03-12 00:40:25,344 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:25,348 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from HTML
2021-03-12 00:40:25,352 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:40:25,352 [main:61] - replacement of { +arg; +"$(testBodyNoInline()).length.minus(78)"; +"$bodyVar" } of type [@kotlin.ExtensionFunctionType] Function1<LI, Unit> is { print("wifbc")}
2021-03-12 00:40:25,486 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:40:25,488 [main:53] - replacing (result.toString()!!, String)
2021-03-12 00:40:25,488 [main:50] - replacing result.toString()!! String
2021-03-12 00:40:25,488 [main:54] - Getting value of type String
2021-03-12 00:40:25,614 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:25,618 [main:58] - GENERATED VALUE OF TYPE String = "uwwiq"
2021-03-12 00:40:25,618 [main:61] - GENERATED IS CALL =false
2021-03-12 00:40:25,781 [main:67] - randomType = TagWithText?
2021-03-12 00:40:25,899 [main:302] - generating value of type = TagWithText false depth = 0
2021-03-12 00:40:25,902 [main:112] - generating klass TagWithText text = abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}
2021-03-12 00:40:26,232 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:40:26,350 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:40:26,490 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:40:26,494 [main:78] - Generated call from random type = (TODO())?.name.padStart(-870819246, '漌')
2021-03-12 00:40:26,495 [main:106] - GETTING String from Head
2021-03-12 00:40:26,541 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Head[PropertyDescriptorImpl@5ec6aa5d], public open fun remove(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@1834528b]]
2021-03-12 00:40:26,541 [main:149] - GENERATING call of type public open fun remove(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@1834528b]
2021-03-12 00:40:26,542 [main:117] - GENERATED CALL = (HTML().head()).attributes.remove(testBodyHtmlNoInline())
2021-03-12 00:40:26,542 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:40:26,542 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:40:26,677 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:40:26,801 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:40:26,806 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:40:27,105 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:40:27,109 [main:95] - GENERATED = StringBuilder(1168330088)
2021-03-12 00:40:27,109 [main:117] - GENERATED CALL = (HTML().head()).name.removeSuffix(StringBuilder(1168330088))
2021-03-12 00:40:27,109 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:40:27,109 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:40:27,237 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:40:27,358 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:40:27,362 [main:117] - GENERATED CALL = (HTML().head()).name.padStart(116564004, '養')
2021-03-12 00:40:27,362 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:40:27,362 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:40:27,498 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:40:27,626 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:27,630 [main:117] - GENERATED CALL = (HTML().head()).name.replaceBeforeLast('䰏', A().href, "vbkxk")
2021-03-12 00:40:27,630 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:40:27,630 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:40:27,758 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:40:27,765 [main:117] - GENERATED CALL = (HTML().head()).name.removePrefix(StringBuilder())
2021-03-12 00:40:27,765 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:40:27,765 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:40:27,884 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:40:28,028 [main:43] - GENERATING CALL OF fun <T> Iterable(iterator: ()->kotlin.collections.Iterator<Int>): Iterable<Int> = TODO()
2021-03-12 00:40:28,033 [main:61] - WITHOUT TYPE PARAMS = fun <T> Iterable(iterator: ()->kotlin.collections.Iterator<Int>): Iterable<Int> = TODO()
2021-03-12 00:40:28,330 [main:302] - generating value of type = Function0<Iterator<Int>> false depth = 3
2021-03-12 00:40:28,334 [main:302] - generating value of type = Iterator<Int> false depth = 4
2021-03-12 00:40:28,487 [main:43] - GENERATING CALL OF fun <T> iterator(block: suspend kotlin.sequences.SequenceScope<Int>.()->kotlin.Unit): Iterator<Int> = TODO()
2021-03-12 00:40:28,492 [main:61] - WITHOUT TYPE PARAMS = fun <T> iterator(block: suspend kotlin.sequences.SequenceScope<Int>.()->kotlin.Unit): Iterator<Int> = TODO()
2021-03-12 00:40:28,800 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<SequenceScope<Int>, Unit> false depth = 7
2021-03-12 00:40:28,804 [main:302] - generating value of type = Unit false depth = 8
2021-03-12 00:40:28,966 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:28,971 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:29,261 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 11
2021-03-12 00:40:29,265 [main:302] - generating value of type = Unit false depth = 12
2021-03-12 00:40:29,390 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:29,394 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:29,714 [main:302] - generating value of type = Any false depth = 15
2021-03-12 00:40:29,714 [main:95] - GENERATED = println("tlfgp")
2021-03-12 00:40:29,716 [main:95] - GENERATED = contract({ println("tlfgp")})
2021-03-12 00:40:29,716 [main:95] - GENERATED = iterator<Int>({a: SequenceScope<Int> -> contract({ println("tlfgp")})})
2021-03-12 00:40:29,716 [main:95] - GENERATED = Iterable<Int>({ iterator<Int>({a: SequenceScope<Int> -> contract({ println("tlfgp")})})})
2021-03-12 00:40:29,717 [main:117] - GENERATED CALL = (HTML().head()).name.slice(Iterable<Int>({ iterator<Int>({a: SequenceScope<Int> -> contract({ println("tlfgp")})})}))
2021-03-12 00:40:29,717 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:40:29,717 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:40:29,848 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:40:29,852 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:40:29,856 [main:117] - GENERATED CALL = (HTML().head()).name.filterNot({a: Char -> true})
2021-03-12 00:40:29,856 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:40:29,856 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:40:29,856 [main:117] - GENERATED CALL = (HTML().head()).name.trimEnd()
2021-03-12 00:40:29,856 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:40:29,856 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:40:29,974 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:40:29,977 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:40:29,981 [main:117] - GENERATED CALL = (HTML().head()).name.filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:40:29,981 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:40:29,981 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:40:30,117 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:30,121 [main:117] - GENERATED CALL = (HTML().head()).name.prependIndent("oiqdz")
2021-03-12 00:40:30,121 [main:61] - replacement of result.toString()!! of type String is (HTML().head()).name.trimEnd()
2021-03-12 00:40:30,245 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:40:30,246 [main:66] - Compilation checking started
2021-03-12 00:40:30,576 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return (HTML().head()).name.trimEnd()
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:40:30,578 [main:53] - replacing (p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }, P)
2021-03-12 00:40:30,578 [main:50] - replacing p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    } P
2021-03-12 00:40:30,578 [main:54] - Getting value of type P
2021-03-12 00:40:30,708 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:40:30,712 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:40:30,837 [main:194] - Type params = []
2021-03-12 00:40:30,965 [main:58] - GENERATED VALUE OF TYPE P = P()
2021-03-12 00:40:30,966 [main:61] - GENERATED IS CALL =true
2021-03-12 00:40:30,973 [main:67] - randomType = Int
2021-03-12 00:40:31,092 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:40:31,126 [main:106] - GETTING P from P
2021-03-12 00:40:31,183 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]]
2021-03-12 00:40:31,183 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f]
2021-03-12 00:40:31,313 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:31,317 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:31,450 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:31,455 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:31,729 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:31,733 [main:95] - GENERATED = require(true)
2021-03-12 00:40:31,733 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]
2021-03-12 00:40:31,866 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:31,869 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:32,012 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:32,017 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:32,456 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:32,459 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:40:32,463 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:40:32,463 [main:95] - GENERATED = check(false, { "peuql"})
2021-03-12 00:40:32,463 [main:117] - GENERATED CALL = (B().p()).p({ require(true)}).pNoInline({ check(false, { "peuql"})})
2021-03-12 00:40:32,464 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4], public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]]
2021-03-12 00:40:32,464 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:40:32,590 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:40:32,593 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:32,727 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:32,732 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:33,170 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:40:33,173 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:40:33,177 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:40:33,316 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:33,321 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:33,618 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:40:33,622 [main:95] - GENERATED = check(true)
2021-03-12 00:40:33,622 [main:95] - GENERATED = repeat(-760708522, {a: Int -> check(true)})
2021-03-12 00:40:33,622 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]
2021-03-12 00:40:33,748 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:33,752 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:33,887 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:33,892 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:34,330 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:34,334 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:40:34,337 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:40:34,338 [main:95] - GENERATED = require(true, { "uynqc"})
2021-03-12 00:40:34,338 [main:117] - GENERATED CALL = (B().p()).b({ repeat(-760708522, {a: Int -> check(true)})}).p({ require(true, { "uynqc"})})
2021-03-12 00:40:34,338 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]]
2021-03-12 00:40:34,338 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:40:34,466 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:40:34,470 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:34,593 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:34,598 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:34,893 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:40:34,896 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:40:35,031 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:35,035 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:35,326 [main:302] - generating value of type = Any false depth = 8
2021-03-12 00:40:35,326 [main:95] - GENERATED = print("ftmms")
2021-03-12 00:40:35,326 [main:95] - GENERATED = contract({ print("ftmms")})
2021-03-12 00:40:35,327 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]
2021-03-12 00:40:35,453 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:35,456 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:35,591 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:35,596 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:35,886 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:35,890 [main:95] - GENERATED = require(false)
2021-03-12 00:40:35,891 [main:117] - GENERATED CALL = (B().p()).h1({ contract({ print("ftmms")})}).p({ require(false)})
2021-03-12 00:40:35,891 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]]
2021-03-12 00:40:35,891 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]
2021-03-12 00:40:36,018 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:36,022 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:36,166 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:36,171 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:36,616 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:36,620 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:40:36,624 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:40:36,624 [main:95] - GENERATED = check(false, { "gbwig"})
2021-03-12 00:40:36,624 [main:117] - GENERATED CALL = (B().p()).p({ check(false, { "gbwig"})})
2021-03-12 00:40:36,624 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]]
2021-03-12 00:40:36,624 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:40:36,754 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:40:36,758 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:36,883 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:36,887 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:37,340 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:37,343 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:40:37,347 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:40:37,347 [main:95] - GENERATED = require(false, { "urzdf"})
2021-03-12 00:40:37,347 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]
2021-03-12 00:40:37,466 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:37,470 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:37,614 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:37,619 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:38,052 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:38,056 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:40:38,059 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:40:38,059 [main:95] - GENERATED = check(true, { "ouuyu"})
2021-03-12 00:40:38,060 [main:117] - GENERATED CALL = (B().p()).b({ require(false, { "urzdf"})}).pNoInline({ check(true, { "ouuyu"})})
2021-03-12 00:40:38,060 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9], public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]]
2021-03-12 00:40:38,060 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]
2021-03-12 00:40:38,197 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:40:38,200 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:38,332 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:38,337 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:38,615 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:40:38,619 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:40:38,767 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:38,772 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:39,062 [main:302] - generating value of type = Any false depth = 8
2021-03-12 00:40:39,063 [main:95] - GENERATED = println("oyekh")
2021-03-12 00:40:39,063 [main:95] - GENERATED = contract({ println("oyekh")})
2021-03-12 00:40:39,063 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]
2021-03-12 00:40:39,182 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:39,186 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:39,328 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:39,333 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:39,615 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:39,619 [main:95] - GENERATED = check(true)
2021-03-12 00:40:39,619 [main:117] - GENERATED CALL = (B().p()).ul({ contract({ println("oyekh")})}).p({ check(true)})
2021-03-12 00:40:39,619 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]]
2021-03-12 00:40:39,619 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]
2021-03-12 00:40:39,736 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:40:39,739 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:39,881 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:39,885 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:40,179 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:40:40,179 [main:95] - GENERATED = println("bphxn")
2021-03-12 00:40:40,179 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]
2021-03-12 00:40:40,296 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:40,300 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:40,306 [main:117] - GENERATED CALL = (B().p()).ul({ println("bphxn")}).pNoInline({ println()})
2021-03-12 00:40:40,307 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f], public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]]
2021-03-12 00:40:40,307 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f]
2021-03-12 00:40:40,441 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:40,445 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:40,576 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:40,580 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:41,018 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:41,021 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:40:41,025 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:40:41,025 [main:95] - GENERATED = require(false, { "ieybh"})
2021-03-12 00:40:41,025 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]
2021-03-12 00:40:41,152 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:41,155 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:41,288 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:41,292 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:41,581 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:40:41,581 [main:95] - GENERATED = println("vvcyj")
2021-03-12 00:40:41,581 [main:117] - GENERATED CALL = (B().p()).p({ require(false, { "ieybh"})}).p({ println("vvcyj")})
2021-03-12 00:40:41,581 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]]
2021-03-12 00:40:41,581 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:40:41,707 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:40:41,711 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:41,845 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:41,850 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:40:42,141 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:42,145 [main:95] - GENERATED = check(true)
2021-03-12 00:40:42,145 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]
2021-03-12 00:40:42,270 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:42,274 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:42,407 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:42,412 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:42,850 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:42,853 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:40:42,857 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:40:42,857 [main:95] - GENERATED = require(false, { "mtzsj"})
2021-03-12 00:40:42,857 [main:117] - GENERATED CALL = (B().p()).h1({ check(true)}).pNoInline({ require(false, { "mtzsj"})})
2021-03-12 00:40:42,857 [main:113] - Case = [public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]]
2021-03-12 00:40:42,858 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]
2021-03-12 00:40:42,984 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:42,988 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:43,111 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:43,115 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:43,406 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:40:43,406 [main:95] - GENERATED = println("izjrr")
2021-03-12 00:40:43,407 [main:117] - GENERATED CALL = (B().p()).pNoInline({ println("izjrr")})
2021-03-12 00:40:43,407 [main:61] - replacement of p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    } of type P is (B().p()).p({ require(false, { "ieybh"})}).p({ println("vvcyj")})
2021-03-12 00:40:43,532 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:40:43,534 [main:53] - replacing (arg, String)
2021-03-12 00:40:43,534 [main:50] - replacing arg String
2021-03-12 00:40:43,534 [main:54] - Getting value of type String
2021-03-12 00:40:43,653 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:43,656 [main:58] - GENERATED VALUE OF TYPE String = "mjqqr"
2021-03-12 00:40:43,656 [main:61] - GENERATED IS CALL =false
2021-03-12 00:40:43,958 [main:67] - randomType = Double?
2021-03-12 00:40:44,088 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:40:44,137 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@7f599e68]
2021-03-12 00:40:44,138 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19ca6280]
2021-03-12 00:40:44,273 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:40:44,277 [main:78] - Generated call from random type = (0.9689009624430491)?.toShort().toString(227302773)
2021-03-12 00:40:44,278 [main:106] - GETTING String from P
2021-03-12 00:40:44,349 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:40:44,350 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:40:44,475 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:40:44,481 [main:117] - GENERATED CALL = (B().p()).name.removeSurrounding("lzvti")
2021-03-12 00:40:44,482 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]]
2021-03-12 00:40:44,482 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]
2021-03-12 00:40:44,610 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:40:44,731 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:40:44,734 [main:117] - GENERATED CALL = (B().p()).name.removeRange(-1775420635, 800303235)
2021-03-12 00:40:44,734 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final val name: kotlin.String defined in H1[PropertyDescriptorImpl@e65af9a]]
2021-03-12 00:40:44,734 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:40:44,869 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:40:44,873 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:45,004 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:45,009 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:45,285 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:40:45,286 [main:95] - GENERATED = print("luucr")
2021-03-12 00:40:45,287 [main:117] - GENERATED CALL = (B().p()).h1({ print("luucr")}).name
2021-03-12 00:40:45,287 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:40:45,287 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:40:45,287 [main:117] - GENERATED CALL = (B().p()).name.lowercase()
2021-03-12 00:40:45,287 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:40:45,287 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:40:45,422 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:40:45,553 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:40:45,558 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:40:45,834 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:40:45,837 [main:95] - GENERATED = StringBuilder(618606389)
2021-03-12 00:40:45,837 [main:117] - GENERATED CALL = (B().p()).name.removeSuffix(StringBuilder(618606389))
2021-03-12 00:40:45,837 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681]]
2021-03-12 00:40:45,838 [main:117] - GENERATED CALL = (B().p()).name
2021-03-12 00:40:45,838 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:40:45,838 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:40:45,972 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:40:46,103 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:46,106 [main:117] - GENERATED CALL = (B().p()).name.replaceAfterLast('蹟', testAllInline(), "bldgw")
2021-03-12 00:40:46,107 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:40:46,107 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:40:46,235 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:40:46,239 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:40:46,243 [main:117] - GENERATED CALL = (B().p()).name.filter({a: Char -> true})
2021-03-12 00:40:46,243 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:40:46,243 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:40:46,243 [main:117] - GENERATED CALL = (B().p()).name.decapitalize()
2021-03-12 00:40:46,243 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:40:46,243 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:40:46,243 [main:117] - GENERATED CALL = (B().p()).name.trimEnd()
2021-03-12 00:40:46,243 [main:61] - replacement of arg of type String is (0.9689009624430491)?.toShort().toString(227302773)
2021-03-12 00:40:46,362 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:40:46,366 [main:53] - replacing ("This is some", String)
2021-03-12 00:40:46,367 [main:50] - replacing "This is some" String
2021-03-12 00:40:46,367 [main:54] - Getting value of type String
2021-03-12 00:40:46,501 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:46,505 [main:58] - GENERATED VALUE OF TYPE String = "uqkjx"
2021-03-12 00:40:46,505 [main:61] - GENERATED IS CALL =false
2021-03-12 00:40:46,980 [main:67] - randomType = Function1<ULong?, TagWithText>
2021-03-12 00:40:46,981 [main:106] - GETTING String from P
2021-03-12 00:40:47,050 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:40:47,050 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:40:47,175 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:40:47,306 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:47,310 [main:117] - GENERATED CALL = (B().pNoInline()).name.substringBefore('Ꙑ', "jzwjd")
2021-03-12 00:40:47,310 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:40:47,310 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:40:47,428 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:40:47,570 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:40:47,699 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:40:47,703 [main:117] - GENERATED CALL = (B().pNoInline()).name.replace('枭', '冒', false)
2021-03-12 00:40:47,703 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final val name: kotlin.String defined in H1[PropertyDescriptorImpl@e65af9a]]
2021-03-12 00:40:47,703 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:40:47,834 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:40:47,838 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:47,845 [main:117] - GENERATED CALL = (B().pNoInline()).h1({ println()}).name
2021-03-12 00:40:47,845 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:40:47,845 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:40:47,964 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:40:47,967 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:40:47,971 [main:117] - GENERATED CALL = (B().pNoInline()).name.takeLastWhile({a: Char -> true})
2021-03-12 00:40:47,971 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:40:47,971 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:40:47,971 [main:117] - GENERATED CALL = (B().pNoInline()).name.reversed()
2021-03-12 00:40:47,971 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]]
2021-03-12 00:40:47,971 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]
2021-03-12 00:40:48,108 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:40:48,112 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:40:48,116 [main:117] - GENERATED CALL = (B().pNoInline()).name.dropWhile({a: Char -> true})
2021-03-12 00:40:48,116 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:40:48,116 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:40:48,243 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:40:48,246 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:40:48,250 [main:117] - GENERATED CALL = (B().pNoInline()).name.filterNot({a: Char -> false})
2021-03-12 00:40:48,250 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:40:48,250 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:40:48,380 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:40:48,384 [main:117] - GENERATED CALL = (B().pNoInline()).name.substringAfterLast('腵', testBodyHtmlNoInline())
2021-03-12 00:40:48,384 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:40:48,384 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:40:48,384 [main:117] - GENERATED CALL = (B().pNoInline()).name.decapitalize()
2021-03-12 00:40:48,384 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:40:48,384 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:40:48,502 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:40:48,503 [main:117] - GENERATED CALL = (B().pNoInline()).name.plus("toydc")
2021-03-12 00:40:48,503 [main:61] - replacement of "This is some" of type String is "uqkjx"
2021-03-12 00:40:48,635 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:40:48,636 [main:66] - Compilation checking started
2021-03-12 00:40:49,142 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:40:49,146 [main:53] - replacing ("Command line arguments were:", String)
2021-03-12 00:40:49,147 [main:50] - replacing "Command line arguments were:" String
2021-03-12 00:40:49,147 [main:54] - Getting value of type String
2021-03-12 00:40:49,282 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:49,286 [main:58] - GENERATED VALUE OF TYPE String = "zkjzz"
2021-03-12 00:40:49,286 [main:61] - GENERATED IS CALL =false
2021-03-12 00:40:49,435 [main:67] - randomType = UShort
2021-03-12 00:40:49,563 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:40:49,606 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1b41163]
2021-03-12 00:40:49,606 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25cea1e]
2021-03-12 00:40:49,607 [main:78] - Generated call from random type = (23379.toUShort()).toLong().toString(bodyVar)
2021-03-12 00:40:49,607 [main:61] - replacement of "Command line arguments were:" of type String is (23379.toUShort()).toLong().toString(bodyVar)
2021-03-12 00:40:49,723 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:40:49,723 [main:66] - Compilation checking started
2021-03-12 00:40:50,261 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:40:50,265 [main:53] - replacing (0, Int)
2021-03-12 00:40:50,266 [main:50] - replacing 0 Int
2021-03-12 00:40:50,266 [main:54] - Getting value of type Int
2021-03-12 00:40:50,439 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:40:50,443 [main:58] - GENERATED VALUE OF TYPE Int = 1988584008
2021-03-12 00:40:50,443 [main:61] - GENERATED IS CALL =false
2021-03-12 00:40:50,748 [main:67] - randomType = UByte?
2021-03-12 00:40:50,868 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:40:50,899 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@317d45a4]
2021-03-12 00:40:50,899 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@600e6539]
2021-03-12 00:40:50,900 [main:78] - Generated call from random type = (46.toUByte())?.toShort().toInt()
2021-03-12 00:40:50,900 [main:106] - GETTING Int from String
2021-03-12 00:40:50,916 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1b70796e]]
2021-03-12 00:40:50,917 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:40:51,058 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:51,062 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1b70796e]
2021-03-12 00:40:51,062 [main:117] - GENERATED CALL = (testHtmlNoInline()).compareTo("exbhp").shr(htmlVal)
2021-03-12 00:40:51,063 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c372496]]
2021-03-12 00:40:51,063 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c372496]
2021-03-12 00:40:51,063 [main:117] - GENERATED CALL = (testHtmlNoInline()).length.countLeadingZeroBits()
2021-03-12 00:40:51,063 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b075304]]
2021-03-12 00:40:51,063 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:40:51,063 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b075304]
2021-03-12 00:40:51,193 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:40:51,197 [main:117] - GENERATED CALL = (testHtmlNoInline()).compareTo(TextElement("utmeo").text).times(-54)
2021-03-12 00:40:51,197 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@74b3c38a]]
2021-03-12 00:40:51,197 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@74b3c38a]
2021-03-12 00:40:51,197 [main:117] - GENERATED CALL = (testHtmlNoInline()).length.takeLowestOneBit()
2021-03-12 00:40:51,197 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41953942]]
2021-03-12 00:40:51,197 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41953942]
2021-03-12 00:40:51,329 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 00:40:51,333 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:40:51,337 [main:117] - GENERATED CALL = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
2021-03-12 00:40:51,337 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@96b2690]]
2021-03-12 00:40:51,337 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@96b2690]
2021-03-12 00:40:51,459 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:40:51,462 [main:117] - GENERATED CALL = (testHtmlNoInline()).length.minus(84)
2021-03-12 00:40:51,463 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@132eba2c]]
2021-03-12 00:40:51,463 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@132eba2c]
2021-03-12 00:40:51,463 [main:117] - GENERATED CALL = (testHtmlNoInline()).length.rotateLeft(htmlVal)
2021-03-12 00:40:51,463 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@150203d4]]
2021-03-12 00:40:51,463 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@150203d4]
2021-03-12 00:40:51,604 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:40:51,608 [main:117] - GENERATED CALL = (testHtmlNoInline()).length.compareTo(-107)
2021-03-12 00:40:51,608 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fc00f92]]
2021-03-12 00:40:51,608 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:40:51,735 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:51,739 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fc00f92]
2021-03-12 00:40:51,870 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:40:51,873 [main:117] - GENERATED CALL = (testHtmlNoInline()).compareTo("dywyy").rem(-128)
2021-03-12 00:40:51,873 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]]
2021-03-12 00:40:51,874 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:40:51,874 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b13054f]
2021-03-12 00:40:51,874 [main:117] - GENERATED CALL = (testHtmlNoInline()).compareTo(testBodyNoInline()).takeHighestOneBit()
2021-03-12 00:40:51,874 [main:61] - replacement of 0 of type Int is (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
2021-03-12 00:40:51,995 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:40:51,995 [main:66] - Compilation checking started
2021-03-12 00:40:52,502 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:40:52,504 [main:53] - replacing ("1", String)
2021-03-12 00:40:52,504 [main:50] - replacing "1" String
2021-03-12 00:40:52,504 [main:54] - Getting value of type String
2021-03-12 00:40:52,668 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:52,672 [main:58] - GENERATED VALUE OF TYPE String = "bugbj"
2021-03-12 00:40:52,672 [main:61] - GENERATED IS CALL =false
2021-03-12 00:40:53,003 [main:67] - randomType = ArrayDeque<B?>
2021-03-12 00:40:53,123 [main:302] - generating value of type = ArrayDeque<B?> false depth = 0
2021-03-12 00:40:53,270 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<B?> = TODO()
2021-03-12 00:40:53,274 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<B?> = TODO()
2021-03-12 00:40:53,562 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:40:53,566 [main:95] - GENERATED = ArrayDeque<B?>(-1810434244)
2021-03-12 00:40:53,711 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@57b08190]
2021-03-12 00:40:53,711 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@50f80fd8]
2021-03-12 00:40:53,711 [main:78] - Generated call from random type = (ArrayDeque<B?>(-1810434244)).toArray().contentDeepToString()
2021-03-12 00:40:53,711 [main:106] - GETTING String from String
2021-03-12 00:40:53,727 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:40:53,727 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:40:53,867 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:40:53,871 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:40:53,875 [main:117] - GENERATED CALL = (TextElement("utmeo").text).filterNot({a: Char -> true})
2021-03-12 00:40:53,875 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]]
2021-03-12 00:40:53,875 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:40:54,003 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:40:54,007 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]
2021-03-12 00:40:54,007 [main:117] - GENERATED CALL = (TextElement("utmeo").text).get(1613682245).lowercase()
2021-03-12 00:40:54,007 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:40:54,007 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:40:54,141 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:40:54,144 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:40:54,148 [main:117] - GENERATED CALL = (TextElement("utmeo").text).takeWhile({a: Char -> true})
2021-03-12 00:40:54,148 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:40:54,148 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:40:54,269 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:40:54,273 [main:117] - GENERATED CALL = (TextElement("utmeo").text).length.toString(-648006680)
2021-03-12 00:40:54,273 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:40:54,273 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:40:54,273 [main:117] - GENERATED CALL = (TextElement("utmeo").text).trim()
2021-03-12 00:40:54,273 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:40:54,273 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:40:54,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:40:54,414 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:40:54,418 [main:117] - GENERATED CALL = (TextElement("utmeo").text).compareTo(testBodyNoInline()).toString(397161259)
2021-03-12 00:40:54,419 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:40:54,419 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:40:54,419 [main:117] - GENERATED CALL = (TextElement("utmeo").text).trimStart()
2021-03-12 00:40:54,419 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:40:54,419 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:40:54,556 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:40:54,560 [main:117] - GENERATED CALL = (TextElement("utmeo").text).substringBefore('斿', testAllInline())
2021-03-12 00:40:54,561 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]]
2021-03-12 00:40:54,561 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]
2021-03-12 00:40:54,693 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:40:54,697 [main:117] - GENERATED CALL = (TextElement("utmeo").text).replaceIndent("ijwjn")
2021-03-12 00:40:54,697 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]]
2021-03-12 00:40:54,697 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]
2021-03-12 00:40:54,818 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:40:54,821 [main:117] - GENERATED CALL = (TextElement("utmeo").text).drop(-1070009717)
2021-03-12 00:40:54,821 [main:61] - replacement of "1" of type String is (TextElement("utmeo").text).length.toString(-648006680)
2021-03-12 00:40:54,960 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:40:54,962 [main:53] - replacing (h1 { +"XML encoding with Kotlin" }, H1)
2021-03-12 00:40:54,962 [main:50] - replacing h1 { +"XML encoding with Kotlin" } H1
2021-03-12 00:40:54,962 [main:54] - Getting value of type H1
2021-03-12 00:40:55,091 [main:302] - generating value of type = H1 false depth = 0
2021-03-12 00:40:55,095 [main:112] - generating klass H1 text = class H1() : BodyTag("h1")
2021-03-12 00:40:55,227 [main:194] - Type params = []
2021-03-12 00:40:55,350 [main:58] - GENERATED VALUE OF TYPE H1 = H1()
2021-03-12 00:40:55,350 [main:61] - GENERATED IS CALL =true
2021-03-12 00:40:55,508 [main:67] - randomType = Float
2021-03-12 00:40:55,636 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:40:55,675 [main:106] - GETTING H1 from String
2021-03-12 00:40:55,709 [main:106] - GETTING H1 from Int
2021-03-12 00:40:55,748 [main:106] - GETTING H1 from Body
2021-03-12 00:40:55,828 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b], public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]]
2021-03-12 00:40:55,828 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]
2021-03-12 00:40:55,948 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:40:55,952 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:56,098 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:56,103 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:56,393 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:40:56,393 [main:95] - GENERATED = println("jhhpj")
2021-03-12 00:40:56,393 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:40:56,517 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:40:56,520 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:56,667 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:56,672 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:57,113 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:57,116 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:40:57,120 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:40:57,120 [main:95] - GENERATED = check(true, { "rjpwx"})
2021-03-12 00:40:57,121 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).p({ println("jhhpj")}).h1({ check(true, { "rjpwx"})})
2021-03-12 00:40:57,121 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]]
2021-03-12 00:40:57,121 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]
2021-03-12 00:40:57,260 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:40:57,264 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:57,399 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:57,404 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:57,690 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:40:57,690 [main:95] - GENERATED = print("fovuz")
2021-03-12 00:40:57,691 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).h1({ print("fovuz")})
2021-03-12 00:40:57,691 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28], public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in UL[SimpleFunctionDescriptorImpl@65ed116e]]
2021-03-12 00:40:57,691 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28]
2021-03-12 00:40:57,833 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:40:57,837 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:57,975 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:57,980 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:58,440 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:40:58,444 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:40:58,448 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:40:58,448 [main:95] - GENERATED = check(true, { "vnyyb"})
2021-03-12 00:40:58,448 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in UL[SimpleFunctionDescriptorImpl@65ed116e]
2021-03-12 00:40:58,578 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:40:58,581 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:58,720 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:58,724 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:40:59,031 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:40:59,035 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:40:59,172 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:59,177 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:40:59,644 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:40:59,647 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:40:59,651 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:40:59,651 [main:95] - GENERATED = check(false, { "pqzge"})
2021-03-12 00:40:59,652 [main:95] - GENERATED = contract({ check(false, { "pqzge"})})
2021-03-12 00:40:59,652 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).ul({ check(true, { "vnyyb"})}).h1({ contract({ check(false, { "pqzge"})})})
2021-03-12 00:40:59,652 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b], public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in B[SimpleFunctionDescriptorImpl@6c78cf7c]]
2021-03-12 00:40:59,652 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b]
2021-03-12 00:40:59,782 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:40:59,786 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:40:59,925 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:40:59,930 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:41:00,234 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:41:00,234 [main:95] - GENERATED = println("lsnak")
2021-03-12 00:41:00,234 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in B[SimpleFunctionDescriptorImpl@6c78cf7c]
2021-03-12 00:41:00,367 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:41:00,371 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:41:00,511 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:00,516 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:00,824 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:41:00,828 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:41:00,964 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:41:00,968 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:41:01,434 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:41:01,438 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:41:01,441 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:41:01,442 [main:95] - GENERATED = require(false, { "zrjws"})
2021-03-12 00:41:01,442 [main:95] - GENERATED = contract({ require(false, { "zrjws"})})
2021-03-12 00:41:01,442 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).b({ println("lsnak")}).h1({ contract({ require(false, { "zrjws"})})})
2021-03-12 00:41:01,442 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903], public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in H1[SimpleFunctionDescriptorImpl@13b0b6bf]]
2021-03-12 00:41:01,442 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]
2021-03-12 00:41:01,572 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:41:01,576 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:41:01,727 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:41:01,732 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:41:02,184 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:41:02,188 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:41:02,191 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:41:02,191 [main:95] - GENERATED = require(true, { "fucob"})
2021-03-12 00:41:02,192 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in H1[SimpleFunctionDescriptorImpl@13b0b6bf]
2021-03-12 00:41:02,323 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:41:02,327 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:41:02,454 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:41:02,459 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:41:02,760 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:41:02,764 [main:95] - GENERATED = check(true)
2021-03-12 00:41:02,764 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).h1({ require(true, { "fucob"})}).h1({ check(true)})
2021-03-12 00:41:02,764 [main:61] - replacement of h1 { +"XML encoding with Kotlin" } of type H1 is (HTML().bodyNoInline()).h1({ require(true, { "fucob"})}).h1({ check(true)})
2021-03-12 00:41:02,897 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:02,898 [main:53] - replacing (arg, String)
2021-03-12 00:41:02,898 [main:50] - replacing arg String
2021-03-12 00:41:02,898 [main:54] - Getting value of type String
2021-03-12 00:41:03,021 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:03,025 [main:58] - GENERATED VALUE OF TYPE String = "rlexa"
2021-03-12 00:41:03,025 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:03,201 [main:67] - randomType = ArrayList<UL>
2021-03-12 00:41:03,338 [main:302] - generating value of type = ArrayList<UL> false depth = 0
2021-03-12 00:41:03,475 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UL> = TODO()
2021-03-12 00:41:03,480 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UL> = TODO()
2021-03-12 00:41:03,612 [main:95] - GENERATED = arrayListOf<UL>()
2021-03-12 00:41:03,749 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:41:03,894 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:03,898 [main:78] - Generated call from random type = (arrayListOf<UL>()).modCount.toString(9293802)
2021-03-12 00:41:03,898 [main:61] - replacement of arg of type String is (arrayListOf<UL>()).modCount.toString(9293802)
2021-03-12 00:41:04,026 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:04,028 [main:53] - replacing (arg, String)
2021-03-12 00:41:04,028 [main:50] - replacing arg String
2021-03-12 00:41:04,028 [main:54] - Getting value of type String
2021-03-12 00:41:04,186 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:04,189 [main:58] - GENERATED VALUE OF TYPE String = "fnjfw"
2021-03-12 00:41:04,189 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:04,517 [main:67] - randomType = Map<Short, Title>
2021-03-12 00:41:04,518 [main:106] - GETTING String from Title
2021-03-12 00:41:04,567 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:41:04,567 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:41:04,698 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:41:04,702 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:04,714 [main:117] - GENERATED CALL = (Head().title()).name.takeWhile({a: Char -> false})
2021-03-12 00:41:04,714 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:41:04,714 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:41:04,840 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:41:04,844 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:04,848 [main:117] - GENERATED CALL = (Head().title()).name.filter({a: Char -> false})
2021-03-12 00:41:04,848 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Title[PropertyDescriptorImpl@50074a86], public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]]
2021-03-12 00:41:04,848 [main:149] - GENERATING call of type public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]
2021-03-12 00:41:04,848 [main:117] - GENERATED CALL = (Head().title()).attributes.get(TextElement("utmeo").text)
2021-03-12 00:41:04,848 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:41:04,848 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:41:04,848 [main:117] - GENERATED CALL = (Head().title()).name.trimEnd()
2021-03-12 00:41:04,848 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:41:04,848 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:41:04,849 [main:117] - GENERATED CALL = (Head().title()).name.toUpperCase()
2021-03-12 00:41:04,849 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:41:04,849 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:41:04,849 [main:117] - GENERATED CALL = (Head().title()).name.trimIndent()
2021-03-12 00:41:04,849 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:41:04,849 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:41:04,971 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:41:04,974 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:04,978 [main:117] - GENERATED CALL = (Head().title()).name.takeLastWhile({a: Char -> false})
2021-03-12 00:41:04,978 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:41:04,978 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:41:04,978 [main:117] - GENERATED CALL = (Head().title()).name.trimMargin(TODO().toString())
2021-03-12 00:41:04,979 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]]
2021-03-12 00:41:04,979 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]
2021-03-12 00:41:05,123 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:05,127 [main:117] - GENERATED CALL = (Head().title()).name.take(1155576752)
2021-03-12 00:41:05,127 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:41:05,127 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:41:05,256 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:05,393 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:05,397 [main:117] - GENERATED CALL = (Head().title()).name.replaceBefore('?', "neuug", A().href)
2021-03-12 00:41:05,397 [main:61] - replacement of arg of type String is (Head().title()).name.replaceBefore('?', "neuug", A().href)
2021-03-12 00:41:05,522 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:05,525 [main:53] - replacing ("fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} ", String)
2021-03-12 00:41:05,710 [main:50] - replacing "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} " String
2021-03-12 00:41:05,710 [main:54] - Getting value of type String
2021-03-12 00:41:05,849 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:05,853 [main:58] - GENERATED VALUE OF TYPE String = "ohcvw"
2021-03-12 00:41:05,853 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:05,867 [main:67] - randomType = H1
2021-03-12 00:41:05,995 [main:302] - generating value of type = H1 false depth = 0
2021-03-12 00:41:05,999 [main:112] - generating klass H1 text = class H1() : BodyTag("h1")
2021-03-12 00:41:06,132 [main:194] - Type params = []
2021-03-12 00:41:06,323 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:41:06,475 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:06,611 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:41:06,616 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:41:06,909 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:41:06,916 [main:95] - GENERATED = StringBuilder("uvrda")
2021-03-12 00:41:06,916 [main:78] - Generated call from random type = (H1()).name.removeSuffix(StringBuilder("uvrda"))
2021-03-12 00:41:06,916 [main:106] - GETTING String from String
2021-03-12 00:41:06,932 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:41:06,932 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:41:06,932 [main:117] - GENERATED CALL = (A().href).capitalize()
2021-03-12 00:41:06,932 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d9dd01]]
2021-03-12 00:41:06,932 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:41:07,078 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:07,213 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:07,217 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d9dd01]
2021-03-12 00:41:07,350 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:07,479 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:41:07,483 [main:117] - GENERATED CALL = (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)
2021-03-12 00:41:07,483 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:41:07,483 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:41:07,483 [main:117] - GENERATED CALL = (A().href).trimStart()
2021-03-12 00:41:07,483 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:41:07,483 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:41:07,623 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:07,755 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:07,893 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:41:07,897 [main:117] - GENERATED CALL = (A().href).replaceFirst('⮣', '갅', false)
2021-03-12 00:41:07,897 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:41:07,897 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:41:08,019 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:08,023 [main:117] - GENERATED CALL = (A().href).length.toString(1492188815)
2021-03-12 00:41:08,023 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:41:08,023 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:41:08,164 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:08,299 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:41:08,304 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:41:08,593 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:41:08,597 [main:95] - GENERATED = StringBuilder("hlzvd")
2021-03-12 00:41:08,597 [main:117] - GENERATED CALL = (A().href).removeSurrounding(StringBuilder("hlzvd"))
2021-03-12 00:41:08,597 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]]
2021-03-12 00:41:08,597 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:41:08,738 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:08,742 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]
2021-03-12 00:41:08,742 [main:117] - GENERATED CALL = (A().href).get(-1553932802).lowercase()
2021-03-12 00:41:08,742 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]]
2021-03-12 00:41:08,742 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:41:08,872 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:09,009 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:09,013 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]
2021-03-12 00:41:09,139 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:09,289 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:41:09,293 [main:117] - GENERATED CALL = (A().href).subSequence(132453230, -1382984440).commonSuffixWith("xftfm", true)
2021-03-12 00:41:09,294 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:41:09,294 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:41:09,423 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:09,561 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:09,689 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:09,842 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:41:09,847 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:41:10,143 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:41:10,146 [main:95] - GENERATED = StringBuilder("pzqfb")
2021-03-12 00:41:10,147 [main:117] - GENERATED CALL = (A().href).replaceRange(1903696780, 1454662273, StringBuilder("pzqfb"))
2021-03-12 00:41:10,147 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:41:10,147 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:41:10,272 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:10,276 [main:117] - GENERATED CALL = (A().href).substringBefore('', testHtmlNoInline())
2021-03-12 00:41:10,276 [main:61] - replacement of "fail 1: ${(B()).name.filter({a: Char -> false})}\nbut expected\n${expected} " of type String is (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)
2021-03-12 00:41:10,417 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:10,417 [main:66] - Compilation checking started
2021-03-12 00:41:10,961 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:41:10,965 [main:53] - replacing (Head(), Head)
2021-03-12 00:41:10,965 [main:50] - replacing Head() Head
2021-03-12 00:41:10,966 [main:54] - Getting value of type Head
2021-03-12 00:41:11,124 [main:302] - generating value of type = Head false depth = 0
2021-03-12 00:41:11,128 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}
2021-03-12 00:41:11,255 [main:194] - Type params = []
2021-03-12 00:41:11,386 [main:58] - GENERATED VALUE OF TYPE Head = Head()
2021-03-12 00:41:11,386 [main:61] - GENERATED IS CALL =true
2021-03-12 00:41:11,546 [main:67] - randomType = UL?
2021-03-12 00:41:11,689 [main:302] - generating value of type = UL false depth = 0
2021-03-12 00:41:11,693 [main:112] - generating klass UL text = class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}
2021-03-12 00:41:11,821 [main:194] - Type params = []
2021-03-12 00:41:12,052 [main:106] - GETTING Head from LI
2021-03-12 00:41:12,139 [main:106] - GETTING Head from String
2021-03-12 00:41:12,156 [main:106] - GETTING Head from Body
2021-03-12 00:41:12,214 [main:106] - GETTING Head from String
2021-03-12 00:41:12,214 [main:106] - GETTING Head from String
2021-03-12 00:41:12,215 [main:106] - GETTING Head from Head
2021-03-12 00:41:12,252 [main:61] - replacement of Head() of type Head is Head()
2021-03-12 00:41:12,390 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:41:12,393 [main:53] - replacing ("$indent$text\n", String)
2021-03-12 00:41:12,393 [main:50] - replacing "$indent$text\n" String
2021-03-12 00:41:12,393 [main:54] - Getting value of type String
2021-03-12 00:41:12,520 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:12,523 [main:58] - GENERATED VALUE OF TYPE String = "zrltv"
2021-03-12 00:41:12,524 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:12,538 [main:67] - randomType = Element
2021-03-12 00:41:12,670 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:41:12,673 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:41:12,959 [main:106] - GETTING String from P
2021-03-12 00:41:13,029 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:41:13,029 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:41:13,167 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:13,171 [main:117] - GENERATED CALL = (B().pNoInline()).name.substringBefore('슮', testHtmlNoInline())
2021-03-12 00:41:13,171 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:41:13,171 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:41:13,295 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:41:13,298 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:13,302 [main:117] - GENERATED CALL = (B().pNoInline()).name.dropLastWhile({a: Char -> true})
2021-03-12 00:41:13,302 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]]
2021-03-12 00:41:13,302 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]
2021-03-12 00:41:13,422 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:13,564 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:13,568 [main:117] - GENERATED CALL = (B().pNoInline()).name.removeRange(1699162362, -1841330310)
2021-03-12 00:41:13,569 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:41:13,569 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:41:13,569 [main:117] - GENERATED CALL = (B().pNoInline()).name.toLowerCase()
2021-03-12 00:41:13,569 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:41:13,569 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:41:13,696 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:13,833 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:13,838 [main:117] - GENERATED CALL = (B().pNoInline()).name.substringAfter('蟜', "fffno")
2021-03-12 00:41:13,838 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:41:13,838 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:41:13,960 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:13,963 [main:117] - GENERATED CALL = (B().pNoInline()).name.replaceAfterLast('盫', A().href, testBodyNoInline())
2021-03-12 00:41:13,964 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f], public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681]]
2021-03-12 00:41:13,964 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f]
2021-03-12 00:41:14,104 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:41:14,107 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:41:14,242 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:41:14,247 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:41:14,531 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:41:14,535 [main:95] - GENERATED = check(false)
2021-03-12 00:41:14,535 [main:117] - GENERATED CALL = (B().pNoInline()).p({ check(false)}).name
2021-03-12 00:41:14,535 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:41:14,535 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:41:14,674 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:14,678 [main:117] - GENERATED CALL = (B().pNoInline()).name.replaceAfter('ブ', A().href, indent)
2021-03-12 00:41:14,678 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final val name: kotlin.String defined in H1[PropertyDescriptorImpl@e65af9a]]
2021-03-12 00:41:14,678 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:41:14,805 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:41:14,809 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:41:14,949 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:41:14,953 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:41:15,266 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:41:15,267 [main:95] - GENERATED = print("ykvfc")
2021-03-12 00:41:15,267 [main:117] - GENERATED CALL = (B().pNoInline()).h1({ print("ykvfc")}).name
2021-03-12 00:41:15,267 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:41:15,267 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:41:15,394 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:15,532 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:15,536 [main:117] - GENERATED CALL = (B().pNoInline()).name.replaceBeforeLast('ࠤ', testBodyNoInline(), "lvafx")
2021-03-12 00:41:15,536 [main:61] - replacement of "$indent$text\n" of type String is (B().pNoInline()).name.dropLastWhile({a: Char -> true})
2021-03-12 00:41:15,660 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:15,660 [main:66] - Compilation checking started
2021-03-12 00:41:15,994 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append((B().pNoInline()).name.dropLastWhile({a: Char -> true}))
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:41:15,997 [main:53] - replacing ("href", String)
2021-03-12 00:41:15,997 [main:50] - replacing "href" String
2021-03-12 00:41:15,997 [main:54] - Getting value of type String
2021-03-12 00:41:16,138 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:16,141 [main:58] - GENERATED VALUE OF TYPE String = "qoydv"
2021-03-12 00:41:16,141 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:16,149 [main:67] - randomType = Char
2021-03-12 00:41:16,279 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:16,306 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@31067c66]
2021-03-12 00:41:16,437 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:16,441 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:41:16,564 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:16,568 [main:78] - Generated call from random type = ('?').compareTo('䵹').toString(-187193818)
2021-03-12 00:41:16,569 [main:106] - GETTING String from Title
2021-03-12 00:41:16,607 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:41:16,607 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:41:16,746 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:16,879 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:16,883 [main:117] - GENERATED CALL = (Head().title()).name.replaceAfter('', A().href, "siqbs")
2021-03-12 00:41:16,883 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:41:16,883 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:41:16,884 [main:117] - GENERATED CALL = (Head().title()).name.decapitalize()
2021-03-12 00:41:16,884 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:41:16,884 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:41:17,023 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:41:17,027 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:17,031 [main:117] - GENERATED CALL = (Head().title()).name.filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:41:17,031 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:41:17,031 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:41:17,155 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:41:17,159 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:17,163 [main:117] - GENERATED CALL = (Head().title()).name.filterNot({a: Char -> true})
2021-03-12 00:41:17,163 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Title[PropertyDescriptorImpl@50074a86], public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]]
2021-03-12 00:41:17,163 [main:149] - GENERATING call of type public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]
2021-03-12 00:41:17,163 [main:117] - GENERATED CALL = (Head().title()).attributes.get(testAllInline())
2021-03-12 00:41:17,163 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:41:17,163 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:41:17,304 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:41:17,307 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:17,311 [main:117] - GENERATED CALL = (Head().title()).name.takeWhile({a: Char -> false})
2021-03-12 00:41:17,312 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:41:17,312 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:41:17,442 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:17,449 [main:117] - GENERATED CALL = (Head().title()).name.removePrefix("chmkf")
2021-03-12 00:41:17,450 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:41:17,450 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:41:17,582 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:41:17,583 [main:117] - GENERATED CALL = (Head().title()).name.plus("efxxu")
2021-03-12 00:41:17,583 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:41:17,583 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:41:17,583 [main:117] - GENERATED CALL = (Head().title()).name.toLowerCase()
2021-03-12 00:41:17,583 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:41:17,583 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:41:17,708 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:41:17,712 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:17,717 [main:117] - GENERATED CALL = (Head().title()).name.dropLastWhile({a: Char -> false})
2021-03-12 00:41:17,717 [main:61] - replacement of "href" of type String is (Head().title()).name.filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:41:17,854 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:17,854 [main:66] - Compilation checking started
2021-03-12 00:41:18,212 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes[(Head().title()).name.filterIndexed({a: Int, b: Char -> false})] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:41:18,215 [main:53] - replacing (html, HTML)
2021-03-12 00:41:18,215 [main:50] - replacing html HTML
2021-03-12 00:41:18,215 [main:54] - Getting value of type HTML
2021-03-12 00:41:18,334 [main:302] - generating value of type = HTML false depth = 0
2021-03-12 00:41:18,338 [main:112] - generating klass HTML text = class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}
2021-03-12 00:41:18,478 [main:194] - Type params = []
2021-03-12 00:41:18,607 [main:58] - GENERATED VALUE OF TYPE HTML = HTML()
2021-03-12 00:41:18,607 [main:61] - GENERATED IS CALL =true
2021-03-12 00:41:18,621 [main:67] - randomType = TextElement
2021-03-12 00:41:18,757 [main:302] - generating value of type = TextElement false depth = 0
2021-03-12 00:41:18,760 [main:112] - generating klass TextElement text = class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}
2021-03-12 00:41:18,883 [main:194] - Type params = []
2021-03-12 00:41:19,037 [main:302] - generating value of type = String true depth = 2
2021-03-12 00:41:19,056 [main:106] - GETTING HTML from H1
2021-03-12 00:41:19,135 [main:106] - GETTING HTML from B
2021-03-12 00:41:19,204 [main:106] - GETTING HTML from LI
2021-03-12 00:41:19,287 [main:106] - GETTING HTML from String
2021-03-12 00:41:19,308 [main:106] - GETTING HTML from Head
2021-03-12 00:41:19,360 [main:106] - GETTING HTML from UL
2021-03-12 00:41:19,450 [main:106] - GETTING HTML from String
2021-03-12 00:41:19,451 [main:106] - GETTING HTML from Title
2021-03-12 00:41:19,495 [main:106] - GETTING HTML from HTML
2021-03-12 00:41:19,534 [main:61] - replacement of html of type HTML is html({ repeat(1590980469, {a: Int -> println("skriq")})})
2021-03-12 00:41:19,669 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:41:19,670 [main:66] - Compilation checking started
2021-03-12 00:41:20,207 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:41:20,209 [main:53] - replacing ({ +"XML encoding with Kotlin" }, [@kotlin.ExtensionFunctionType] Function1<Title, Unit>)
2021-03-12 00:41:20,209 [main:50] - replacing { +"XML encoding with Kotlin" } [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:41:20,209 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:41:20,350 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Title, Unit> false depth = 0
2021-03-12 00:41:20,354 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:41:20,496 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:41:20,501 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:41:20,790 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:41:20,794 [main:95] - GENERATED = check(true)
2021-03-12 00:41:20,794 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Title, Unit> = { check(true)}
2021-03-12 00:41:20,794 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:22,315 [main:67] - randomType = Function2<Set<String?>, Short?, Map<Short, MutableMap<ULong, Title>>?>
2021-03-12 00:41:22,319 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Title
2021-03-12 00:41:22,378 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from P
2021-03-12 00:41:22,450 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:41:22,472 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from HTML
2021-03-12 00:41:22,533 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from H1
2021-03-12 00:41:22,614 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Head
2021-03-12 00:41:22,673 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from B
2021-03-12 00:41:22,746 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:41:22,750 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from HTML
2021-03-12 00:41:22,754 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Body
2021-03-12 00:41:22,817 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Body
2021-03-12 00:41:22,821 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:41:22,825 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:41:22,829 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:41:22,833 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:41:22,837 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:41:22,841 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from P
2021-03-12 00:41:22,844 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from UL
2021-03-12 00:41:22,907 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from LI
2021-03-12 00:41:22,965 [main:61] - replacement of { +"XML encoding with Kotlin" } of type [@kotlin.ExtensionFunctionType] Function1<Title, Unit> is { check(true)}
2021-03-12 00:41:23,102 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:41:23,105 [main:53] - replacing (text, String)
2021-03-12 00:41:23,105 [main:50] - replacing text String
2021-03-12 00:41:23,105 [main:54] - Getting value of type String
2021-03-12 00:41:23,234 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:23,237 [main:58] - GENERATED VALUE OF TYPE String = "gejii"
2021-03-12 00:41:23,237 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:23,549 [main:67] - randomType = ArrayList<ULong>
2021-03-12 00:41:23,691 [main:302] - generating value of type = ArrayList<ULong> false depth = 0
2021-03-12 00:41:23,829 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: ULong): ArrayList<ULong> = TODO()
2021-03-12 00:41:23,835 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: ULong): ArrayList<ULong> = TODO()
2021-03-12 00:41:23,976 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 00:41:23,979 [main:95] - GENERATED = arrayListOf<ULong>(3493381501629235550.toULong())
2021-03-12 00:41:24,150 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:41:24,293 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:24,297 [main:78] - Generated call from random type = (arrayListOf<ULong>(3493381501629235550.toULong())).size.toString(337209164)
2021-03-12 00:41:24,297 [main:106] - GETTING String from String
2021-03-12 00:41:24,319 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:41:24,319 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:41:24,319 [main:117] - GENERATED CALL = (testBodyNoInline()).reversed()
2021-03-12 00:41:24,319 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22578dad]]
2021-03-12 00:41:24,319 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:41:24,461 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:24,610 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:24,614 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22578dad]
2021-03-12 00:41:24,739 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:41:24,887 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 00:41:24,892 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 00:41:25,185 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:41:25,189 [main:95] - GENERATED = Regex("prman")
2021-03-12 00:41:25,315 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 00:41:25,319 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:41:25,326 [main:117] - GENERATED CALL = (testBodyNoInline()).subSequence(-737759295, -941086894).replace(Regex("prman"), {a: MatchResult -> "quhot"})
2021-03-12 00:41:25,326 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:41:25,326 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:41:25,326 [main:117] - GENERATED CALL = (testBodyNoInline()).lowercase()
2021-03-12 00:41:25,326 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:41:25,326 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:41:25,464 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:25,468 [main:117] - GENERATED CALL = (testBodyNoInline()).replaceBefore('ɐ', testHtmlNoInline(), testBodyNoInline())
2021-03-12 00:41:25,469 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:41:25,469 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:41:25,597 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:41:25,743 [main:43] - GENERATING CALL OF fun <T> mutableListOf(): Iterable<Int> = TODO()
2021-03-12 00:41:25,748 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(): Iterable<Int> = TODO()
2021-03-12 00:41:25,877 [main:95] - GENERATED = mutableListOf<Int>()
2021-03-12 00:41:25,878 [main:117] - GENERATED CALL = (testBodyNoInline()).slice(mutableListOf<Int>())
2021-03-12 00:41:25,878 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:41:25,878 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:41:26,017 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:26,160 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:41:26,164 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:41:26,453 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:41:26,457 [main:95] - GENERATED = StringBuilder(-2028498551)
2021-03-12 00:41:26,457 [main:117] - GENERATED CALL = (testBodyNoInline()).removeSuffix(StringBuilder(-2028498551))
2021-03-12 00:41:26,457 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:41:26,457 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:41:26,599 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:26,734 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:26,873 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:41:26,877 [main:117] - GENERATED CALL = (testBodyNoInline()).replaceFirst('鬑', 'ㄗ', true)
2021-03-12 00:41:26,877 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:41:26,877 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:41:26,877 [main:117] - GENERATED CALL = (testBodyNoInline()).trimMargin(testBodyHtmlNoInline())
2021-03-12 00:41:26,878 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:41:26,878 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:41:27,002 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:27,152 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:27,156 [main:117] - GENERATED CALL = (testBodyNoInline()).replaceBeforeLast('ᔦ', "ebgni", testBodyHtmlNoInline())
2021-03-12 00:41:27,157 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:41:27,157 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:41:27,287 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:27,425 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:27,434 [main:117] - GENERATED CALL = (testBodyNoInline()).padStart(2090498769, '␻')
2021-03-12 00:41:27,434 [main:61] - replacement of text of type String is (testBodyNoInline()).lowercase()
2021-03-12 00:41:27,557 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:27,558 [main:66] - Compilation checking started
2021-03-12 00:41:28,051 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:41:28,053 [main:53] - replacing (testHtmlNoInline(), String)
2021-03-12 00:41:28,053 [main:50] - replacing testHtmlNoInline() String
2021-03-12 00:41:28,053 [main:54] - Getting value of type String
2021-03-12 00:41:28,196 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:28,200 [main:58] - GENERATED VALUE OF TYPE String = "tonlg"
2021-03-12 00:41:28,200 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:28,368 [main:67] - randomType = LI?
2021-03-12 00:41:28,503 [main:302] - generating value of type = LI false depth = 0
2021-03-12 00:41:28,506 [main:112] - generating klass LI text = class LI() : BodyTag("li")
2021-03-12 00:41:28,631 [main:194] - Type params = []
2021-03-12 00:41:28,886 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:41:29,026 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:29,157 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:29,282 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:29,289 [main:78] - Generated call from random type = (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())
2021-03-12 00:41:29,289 [main:106] - GETTING String from String
2021-03-12 00:41:29,310 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d9dd01]]
2021-03-12 00:41:29,310 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d9dd01]
2021-03-12 00:41:29,457 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:29,597 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:41:29,601 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).commonPrefixWith("ssykf", false)
2021-03-12 00:41:29,601 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:41:29,601 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:41:29,740 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:29,747 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).removeSurrounding("hafte")
2021-03-12 00:41:29,747 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:41:29,747 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:41:29,747 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).toLowerCase()
2021-03-12 00:41:29,747 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:41:29,747 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:41:29,872 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:30,019 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:30,155 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:30,159 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).replaceAfterLast('ꇈ', "xtpcf", "mmelv")
2021-03-12 00:41:30,159 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:41:30,159 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:41:30,297 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:41:30,431 [main:43] - GENERATING CALL OF fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-12 00:41:30,436 [main:61] - WITHOUT TYPE PARAMS = fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-12 00:41:30,907 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:41:30,911 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Int> false depth = 3
2021-03-12 00:41:30,914 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:41:30,918 [main:95] - GENERATED = List<Int>(-1286360611, {a: Int -> 2075334954})
2021-03-12 00:41:30,919 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).slice(List<Int>(-1286360611, {a: Int -> 2075334954}))
2021-03-12 00:41:30,919 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]]
2021-03-12 00:41:30,919 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]
2021-03-12 00:41:30,919 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).replaceIndent(testHtmlNoInline())
2021-03-12 00:41:30,919 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:41:30,919 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:41:31,044 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:31,194 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:31,198 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).padStart(-345763862, '')
2021-03-12 00:41:31,198 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:41:31,198 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:41:31,330 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:31,473 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:31,602 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:41:31,605 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).replaceFirst('', 'ﱪ', false)
2021-03-12 00:41:31,606 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]]
2021-03-12 00:41:31,606 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:41:31,751 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:31,755 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).substringBeforeLast('녮', TODO().toString())
2021-03-12 00:41:31,756 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2455d93]]
2021-03-12 00:41:31,756 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:41:31,891 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:31,895 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2455d93]
2021-03-12 00:41:31,895 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).get(-840512541).titlecase()
2021-03-12 00:41:31,895 [main:61] - replacement of testHtmlNoInline() of type String is (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())
2021-03-12 00:41:32,034 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:32,035 [main:66] - Compilation checking started
2021-03-12 00:41:32,538 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:41:32,540 [main:53] - replacing (expected != testBodyHtmlNoInline(), Boolean)
2021-03-12 00:41:32,540 [main:50] - replacing expected != testBodyHtmlNoInline() Boolean
2021-03-12 00:41:32,540 [main:54] - Getting value of type Boolean
2021-03-12 00:41:32,703 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:41:32,707 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:41:32,707 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:32,861 [main:67] - randomType = Float
2021-03-12 00:41:32,995 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:41:33,041 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6fdcd379]
2021-03-12 00:41:33,041 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@268f8cc2]
2021-03-12 00:41:33,167 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:41:33,167 [main:78] - Generated call from random type = (0.8722271f).toLong().equals("owmnc")
2021-03-12 00:41:33,168 [main:106] - GETTING Boolean from String
2021-03-12 00:41:33,185 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718f9919]]
2021-03-12 00:41:33,185 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:41:33,326 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:33,461 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:33,465 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718f9919]
2021-03-12 00:41:33,466 [main:117] - GENERATED CALL = (href).subSequence(-1310919528, -202156717).isEmpty()
2021-03-12 00:41:33,466 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38c43ab3]]
2021-03-12 00:41:33,466 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38c43ab3]
2021-03-12 00:41:33,466 [main:117] - GENERATED CALL = (href).toBoolean()
2021-03-12 00:41:33,466 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75fb8732]]
2021-03-12 00:41:33,466 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:41:33,601 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:33,732 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:33,736 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75fb8732]
2021-03-12 00:41:33,877 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:33,882 [main:117] - GENERATED CALL = (href).subSequence(1204242052, -1651101053).hasSurrogatePairAt(-908485849)
2021-03-12 00:41:33,882 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9e4ab2]]
2021-03-12 00:41:33,882 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:41:34,015 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:34,170 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:34,174 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9e4ab2]
2021-03-12 00:41:34,174 [main:117] - GENERATED CALL = (href).subSequence(-1710665177, 1265914868).isNotBlank()
2021-03-12 00:41:34,174 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718f9919]]
2021-03-12 00:41:34,174 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718f9919]
2021-03-12 00:41:34,175 [main:117] - GENERATED CALL = (href).isEmpty()
2021-03-12 00:41:34,175 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@113f5a4d]]
2021-03-12 00:41:34,175 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:41:34,301 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:34,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:34,451 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@113f5a4d]
2021-03-12 00:41:34,583 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:41:34,586 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:34,591 [main:117] - GENERATED CALL = (href).subSequence(-1019357108, -1290329962).all({a: Char -> false})
2021-03-12 00:41:34,591 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@113f5a4d]]
2021-03-12 00:41:34,591 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@113f5a4d]
2021-03-12 00:41:34,728 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:41:34,732 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:34,735 [main:117] - GENERATED CALL = (href).all({a: Char -> false})
2021-03-12 00:41:34,736 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443342e3]]
2021-03-12 00:41:34,736 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:41:34,859 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:34,985 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:34,988 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443342e3]
2021-03-12 00:41:34,989 [main:117] - GENERATED CALL = (href).subSequence(-1144269755, 1112011195).isNotEmpty()
2021-03-12 00:41:34,989 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25d227bf]]
2021-03-12 00:41:34,989 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:41:34,989 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@25d227bf]
2021-03-12 00:41:35,134 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:41:35,134 [main:117] - GENERATED CALL = (href).compareTo(href).equals("gxgvv")
2021-03-12 00:41:35,134 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63454004]]
2021-03-12 00:41:35,135 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:41:35,280 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:35,428 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:35,432 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63454004]
2021-03-12 00:41:35,562 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:35,705 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:35,842 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:35,981 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:36,110 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:41:36,114 [main:117] - GENERATED CALL = (href).subSequence(599658446, -967542594).regionMatches(514234026, "ukmsz", 107672247, 565986900, true)
2021-03-12 00:41:36,114 [main:61] - replacement of expected != testBodyHtmlNoInline() of type Boolean is (href).compareTo(href).equals("gxgvv")
2021-03-12 00:41:36,234 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:36,234 [main:66] - Compilation checking started
2021-03-12 00:41:36,579 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((href).compareTo(href).equals("gxgvv")) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:41:36,581 [main:53] - replacing (attributes, HashMap<String, String>)
2021-03-12 00:41:36,581 [main:50] - replacing attributes HashMap<String, String>
2021-03-12 00:41:36,581 [main:54] - Getting value of type HashMap<String, String>
2021-03-12 00:41:36,729 [main:302] - generating value of type = HashMap<String, String> false depth = 0
2021-03-12 00:41:36,868 [main:43] - GENERATING CALL OF fun <V> stringMapOf(pairs: Pair<String, String>): HashMap<Strg, Strg> = TODO()
2021-03-12 00:41:36,873 [main:61] - WITHOUT TYPE PARAMS = fun <V> stringMapOf(pairs: Pair<String, String>): HashMap<Strg, Strg> = TODO()
2021-03-12 00:41:37,016 [main:302] - generating value of type = Pair<String, String> false depth = 3
2021-03-12 00:41:37,150 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: String): Pair<String, String> = TODO()
2021-03-12 00:41:37,155 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: String): Pair<String, String> = TODO()
2021-03-12 00:41:37,311 [main:302] - generating value of type = String true depth = 6
2021-03-12 00:41:37,315 [main:302] - generating value of type = String true depth = 6
2021-03-12 00:41:37,319 [main:95] - GENERATED = Pair<String, String>("cvzbr", "pdmyy")
2021-03-12 00:41:37,319 [main:95] - GENERATED = stringMapOf<String>(Pair<String, String>("cvzbr", "pdmyy"))
2021-03-12 00:41:37,319 [main:58] - GENERATED VALUE OF TYPE HashMap<String, String> = stringMapOf<String>(Pair<String, String>("cvzbr", "pdmyy"))
2021-03-12 00:41:37,319 [main:61] - GENERATED IS CALL =true
2021-03-12 00:41:37,334 [main:67] - randomType = P
2021-03-12 00:41:37,466 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:41:37,470 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:41:37,604 [main:194] - Type params = []
2021-03-12 00:41:37,810 [main:78] - Generated call from random type = (P()).attributes
2021-03-12 00:41:37,877 [main:106] - GETTING HashMap<String, String> from String
2021-03-12 00:41:37,901 [main:106] - GETTING HashMap<String, String> from P
2021-03-12 00:41:37,957 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in P[PropertyDescriptorImpl@266183d2]]
2021-03-12 00:41:37,957 [main:117] - GENERATED CALL = (B().pNoInline()).attributes
2021-03-12 00:41:37,957 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f], public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in P[PropertyDescriptorImpl@266183d2]]
2021-03-12 00:41:37,957 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f]
2021-03-12 00:41:38,102 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:41:38,105 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:41:38,243 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:41:38,248 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:41:38,543 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:41:38,544 [main:95] - GENERATED = print("pbhsk")
2021-03-12 00:41:38,544 [main:117] - GENERATED CALL = (B().pNoInline()).p({ print("pbhsk")}).attributes
2021-03-12 00:41:38,544 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9], public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in UL[PropertyDescriptorImpl@5794aeae]]
2021-03-12 00:41:38,544 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]
2021-03-12 00:41:38,692 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:41:38,696 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:41:38,834 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:38,839 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:39,315 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:41:39,319 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:41:39,323 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:41:39,461 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:41:39,466 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:41:39,940 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:41:39,944 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:41:39,948 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:41:39,948 [main:95] - GENERATED = check(true, { "ythya"})
2021-03-12 00:41:39,948 [main:95] - GENERATED = repeat(-1726920692, {a: Int -> check(true, { "ythya"})})
2021-03-12 00:41:39,949 [main:117] - GENERATED CALL = (B().pNoInline()).ul({ repeat(-1726920692, {a: Int -> check(true, { "ythya"})})}).attributes
2021-03-12 00:41:39,949 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4], public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in B[PropertyDescriptorImpl@2b31fe92]]
2021-03-12 00:41:39,949 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:41:40,081 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:41:40,085 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:41:40,227 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:41:40,232 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:41:40,702 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:41:40,706 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:41:40,710 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:41:40,710 [main:95] - GENERATED = check(true, { "osdcc"})
2021-03-12 00:41:40,711 [main:117] - GENERATED CALL = (B().pNoInline()).b({ check(true, { "osdcc"})}).attributes
2021-03-12 00:41:40,711 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in H1[PropertyDescriptorImpl@51d854d1]]
2021-03-12 00:41:40,711 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:41:40,844 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:41:40,847 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:41:40,978 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:40,983 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:41,289 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:41:41,293 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:41:41,435 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:41,439 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:41,744 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 00:41:41,748 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:41:41,885 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:41,890 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:42,324 [main:302] - generating value of type = Int true depth = 12
2021-03-12 00:41:42,327 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-12 00:41:42,331 [main:302] - generating value of type = Unit false depth = 13
2021-03-12 00:41:42,490 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:41:42,495 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:41:42,793 [main:95] - GENERATED = println(null)
2021-03-12 00:41:42,793 [main:95] - GENERATED = repeat(-407625138, {a: Int -> println(null)})
2021-03-12 00:41:42,795 [main:95] - GENERATED = contract({ repeat(-407625138, {a: Int -> println(null)})})
2021-03-12 00:41:42,795 [main:95] - GENERATED = contract({ contract({ repeat(-407625138, {a: Int -> println(null)})})})
2021-03-12 00:41:42,795 [main:117] - GENERATED CALL = (B().pNoInline()).h1({ contract({ contract({ repeat(-407625138, {a: Int -> println(null)})})})}).attributes
2021-03-12 00:41:42,795 [main:61] - replacement of attributes of type HashMap<String, String> is stringMapOf<String>(Pair<String, String>("cvzbr", "pdmyy"))
2021-03-12 00:41:42,921 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:41:42,924 [main:53] - replacing ("h1", String)
2021-03-12 00:41:42,924 [main:50] - replacing "h1" String
2021-03-12 00:41:42,924 [main:54] - Getting value of type String
2021-03-12 00:41:43,045 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:43,049 [main:58] - GENERATED VALUE OF TYPE String = "pxkaa"
2021-03-12 00:41:43,049 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:43,056 [main:67] - randomType = String
2021-03-12 00:41:43,196 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:43,225 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:41:43,356 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:41:43,360 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:43,364 [main:78] - Generated call from random type = ("vtkbw").filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:41:43,365 [main:106] - GETTING String from HTML
2021-03-12 00:41:43,438 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:41:43,439 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:41:43,439 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.trimStart()
2021-03-12 00:41:43,439 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:41:43,439 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:41:43,562 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:43,566 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.takeLast(667337864)
2021-03-12 00:41:43,566 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:41:43,566 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:41:43,566 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.toLowerCase()
2021-03-12 00:41:43,566 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:41:43,566 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:41:43,689 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:43,827 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:43,962 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:43,969 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps")
2021-03-12 00:41:43,969 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:41:43,969 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:41:44,107 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:41:44,107 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.plus("ujgel")
2021-03-12 00:41:44,107 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:41:44,107 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:41:44,230 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:44,356 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:44,360 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceBefore('欴', testBodyHtmlNoInline(), "rcgag")
2021-03-12 00:41:44,360 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:41:44,360 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:41:44,360 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.reversed()
2021-03-12 00:41:44,361 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:41:44,361 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:41:44,361 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.decapitalize()
2021-03-12 00:41:44,361 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:41:44,361 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:41:44,498 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:44,634 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:44,776 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:41:44,780 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replace('쪅', '肗', true)
2021-03-12 00:41:44,780 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:41:44,781 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:41:44,907 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:41:44,911 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:44,915 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.dropLastWhile({a: Char -> false})
2021-03-12 00:41:44,915 [main:61] - replacement of "h1" of type String is (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps")
2021-03-12 00:41:45,037 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:45,037 [main:66] - Compilation checking started
2021-03-12 00:41:45,541 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:41:45,543 [main:53] - replacing (args, Array<String>)
2021-03-12 00:41:45,543 [main:50] - replacing args Array<String>
2021-03-12 00:41:45,543 [main:54] - Getting value of type Array<String>
2021-03-12 00:41:45,698 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-12 00:41:45,837 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-12 00:41:45,842 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-12 00:41:46,311 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:41:46,315 [main:302] - generating value of type = Function1<Int, String> false depth = 3
2021-03-12 00:41:46,319 [main:302] - generating value of type = String true depth = 4
2021-03-12 00:41:46,323 [main:95] - GENERATED = Array<String>(741408068, {a: Int -> "odqbh"})
2021-03-12 00:41:46,323 [main:58] - GENERATED VALUE OF TYPE Array<String> = Array<String>(741408068, {a: Int -> "odqbh"})
2021-03-12 00:41:46,323 [main:61] - GENERATED IS CALL =true
2021-03-12 00:41:46,676 [main:67] - randomType = Function2<B, Element, ULong>
2021-03-12 00:41:46,677 [main:106] - GETTING Array<String> from P
2021-03-12 00:41:46,773 [main:106] - GETTING Array<String> from H1
2021-03-12 00:41:46,835 [main:106] - GETTING Array<String> from HTML
2021-03-12 00:41:46,876 [main:106] - GETTING Array<String> from String
2021-03-12 00:41:46,893 [main:106] - GETTING Array<String> from HTML
2021-03-12 00:41:46,894 [main:106] - GETTING Array<String> from String
2021-03-12 00:41:46,895 [main:106] - GETTING Array<String> from Title
2021-03-12 00:41:46,933 [main:106] - GETTING Array<String> from String
2021-03-12 00:41:46,934 [main:106] - GETTING Array<String> from String
2021-03-12 00:41:46,935 [main:106] - GETTING Array<String> from LI
2021-03-12 00:41:46,993 [main:106] - GETTING Array<String> from String
2021-03-12 00:41:46,994 [main:106] - GETTING Array<String> from String
2021-03-12 00:41:46,995 [main:106] - GETTING Array<String> from P
2021-03-12 00:41:46,996 [main:106] - GETTING Array<String> from String
2021-03-12 00:41:46,997 [main:106] - GETTING Array<String> from Body
2021-03-12 00:41:47,056 [main:106] - GETTING Array<String> from Body
2021-03-12 00:41:47,057 [main:106] - GETTING Array<String> from Head
2021-03-12 00:41:47,100 [main:106] - GETTING Array<String> from B
2021-03-12 00:41:47,157 [main:106] - GETTING Array<String> from UL
2021-03-12 00:41:47,214 [main:61] - replacement of args of type Array<String> is Array<String>(741408068, {a: Int -> "odqbh"})
2021-03-12 00:41:47,362 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:41:47,366 [main:53] - replacing (0, Int)
2021-03-12 00:41:47,366 [main:50] - replacing 0 Int
2021-03-12 00:41:47,366 [main:54] - Getting value of type Int
2021-03-12 00:41:47,499 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:47,503 [main:58] - GENERATED VALUE OF TYPE Int = 1268856741
2021-03-12 00:41:47,503 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:48,962 [main:67] - randomType = Function1<P, Pair<Title, Function1<UL, LinkedHashSet<Function2<HTML, List<Map<Tag, Byte>>, P>>>>>
2021-03-12 00:41:48,963 [main:106] - GETTING Int from UL
2021-03-12 00:41:49,071 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]]
2021-03-12 00:41:49,071 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]
2021-03-12 00:41:49,071 [main:117] - GENERATED CALL = (B().ul()).name.toInt()
2021-03-12 00:41:49,071 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in UL[PropertyDescriptorImpl@da3b2b], protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@6913a175]]
2021-03-12 00:41:49,071 [main:117] - GENERATED CALL = (B().ul()).children.modCount
2021-03-12 00:41:49,071 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708]]
2021-03-12 00:41:49,072 [main:117] - GENERATED CALL = (B().ul()).name.length
2021-03-12 00:41:49,072 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in UL[PropertyDescriptorImpl@da3b2b], public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]]
2021-03-12 00:41:49,072 [main:149] - GENERATING call of type public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]
2021-03-12 00:41:49,207 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:41:49,211 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:41:49,535 [main:302] - generating value of type = TextElement false depth = 2
2021-03-12 00:41:49,539 [main:112] - generating klass TextElement text = class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}
2021-03-12 00:41:49,697 [main:194] - Type params = []
2021-03-12 00:41:49,840 [main:302] - generating value of type = String true depth = 4
2021-03-12 00:41:49,844 [main:117] - GENERATED CALL = (B().ul()).children.indexOf(TextElement("gynuz"))
2021-03-12 00:41:49,844 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in UL[DeserializedSimpleFunctionDescriptor@5492237], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]]
2021-03-12 00:41:49,844 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in UL[DeserializedSimpleFunctionDescriptor@5492237]
2021-03-12 00:41:49,999 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:41:49,999 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]
2021-03-12 00:41:50,143 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:41:50,147 [main:117] - GENERATED CALL = (B().ul()).equals("hcdjc").compareTo(true)
2021-03-12 00:41:50,147 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in UL[PropertyDescriptorImpl@5794aeae], public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@aaaf6a9]]
2021-03-12 00:41:50,147 [main:117] - GENERATED CALL = (B().ul()).attributes.size
2021-03-12 00:41:50,147 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in UL[PropertyDescriptorImpl@da3b2b], public open val size: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@3c464ee3]]
2021-03-12 00:41:50,148 [main:117] - GENERATED CALL = (B().ul()).children.size
2021-03-12 00:41:50,148 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]]
2021-03-12 00:41:50,148 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]
2021-03-12 00:41:50,295 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:41:50,299 [main:117] - GENERATED CALL = (B().ul()).name.compareTo(testBodyHtmlNoInline(), false)
2021-03-12 00:41:50,299 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in UL[PropertyDescriptorImpl@da3b2b], public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]]
2021-03-12 00:41:50,299 [main:149] - GENERATING call of type public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]
2021-03-12 00:41:50,431 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:41:50,435 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:41:50,735 [main:117] - GENERATED CALL = (B().ul()).children.lastIndexOf(TODO())
2021-03-12 00:41:50,735 [main:61] - replacement of 0 of type Int is (B().ul()).equals("hcdjc").compareTo(true)
2021-03-12 00:41:50,870 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:50,871 [main:66] - Compilation checking started
2021-03-12 00:41:51,284 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = (B().ul()).equals("hcdjc").compareTo(true)
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:41:51,287 [main:53] - replacing (LI(), LI)
2021-03-12 00:41:51,287 [main:50] - replacing LI() LI
2021-03-12 00:41:51,287 [main:54] - Getting value of type LI
2021-03-12 00:41:51,433 [main:302] - generating value of type = LI false depth = 0
2021-03-12 00:41:51,437 [main:112] - generating klass LI text = class LI() : BodyTag("li")
2021-03-12 00:41:51,573 [main:194] - Type params = []
2021-03-12 00:41:51,717 [main:58] - GENERATED VALUE OF TYPE LI = LI()
2021-03-12 00:41:51,718 [main:61] - GENERATED IS CALL =true
2021-03-12 00:41:51,875 [main:67] - randomType = Byte
2021-03-12 00:41:52,027 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:41:52,089 [main:106] - GETTING LI from Head
2021-03-12 00:41:52,161 [main:106] - GETTING LI from LI
2021-03-12 00:41:52,265 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in LI[SimpleFunctionDescriptorImpl@6056149b], public final inline fun li(init: LI.() -> kotlin.Unit): LI defined in UL[SimpleFunctionDescriptorImpl@7131eef0]]
2021-03-12 00:41:52,266 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in LI[SimpleFunctionDescriptorImpl@6056149b]
2021-03-12 00:41:52,408 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:41:52,412 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:41:52,554 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:52,558 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:53,070 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:41:53,075 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:41:53,079 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:41:53,233 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:53,238 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:41:53,560 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 00:41:53,564 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:41:53,707 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:41:53,711 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:41:54,190 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:41:54,194 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-12 00:41:54,198 [main:302] - generating value of type = Any false depth = 13
2021-03-12 00:41:54,198 [main:95] - GENERATED = check(false, { "ybtrr"})
2021-03-12 00:41:54,198 [main:95] - GENERATED = contract({ check(false, { "ybtrr"})})
2021-03-12 00:41:54,199 [main:95] - GENERATED = repeat(1155916409, {a: Int -> contract({ check(false, { "ybtrr"})})})
2021-03-12 00:41:54,199 [main:149] - GENERATING call of type public final inline fun li(init: LI.() -> kotlin.Unit): LI defined in UL[SimpleFunctionDescriptorImpl@7131eef0]
2021-03-12 00:41:54,199 [main:117] - GENERATED CALL = (UL().li()).ul({ repeat(1155916409, {a: Int -> contract({ check(false, { "ybtrr"})})})}).li(init)
2021-03-12 00:41:54,199 [main:61] - replacement of LI() of type LI is (UL().li()).ul({ repeat(1155916409, {a: Int -> contract({ check(false, { "ybtrr"})})})}).li(init)
2021-03-12 00:41:54,342 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:54,342 [main:66] - Compilation checking started
2021-03-12 00:41:54,719 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag((UL().li()).ul({ repeat(1155916409, {a: Int -> contract({ check(false, { "ybtrr"})})})}).li(init), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag("a") {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:41:54,722 [main:53] - replacing ("a", String)
2021-03-12 00:41:54,722 [main:50] - replacing "a" String
2021-03-12 00:41:54,722 [main:54] - Getting value of type String
2021-03-12 00:41:54,873 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:54,877 [main:58] - GENERATED VALUE OF TYPE String = "vchbf"
2021-03-12 00:41:54,877 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:56,028 [main:67] - randomType = Map<Float?, Triple<Double, Long?, Short>>
2021-03-12 00:41:56,028 [main:106] - GETTING String from String
2021-03-12 00:41:56,046 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:41:56,046 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:41:56,187 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:56,327 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:56,476 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:41:56,480 [main:117] - GENERATED CALL = (TextElement("utmeo").text).replaceFirst('ݼ', '鹿', true)
2021-03-12 00:41:56,480 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:41:56,480 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:41:56,608 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:41:56,613 [main:117] - GENERATED CALL = (TextElement("utmeo").text).substringBefore('', TODO().toString())
2021-03-12 00:41:56,613 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:41:56,613 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:41:56,613 [main:117] - GENERATED CALL = (TextElement("utmeo").text).reversed()
2021-03-12 00:41:56,613 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:41:56,613 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:41:56,739 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:41:56,889 [main:43] - GENERATING CALL OF fun <T> mutableListOf(): Iterable<Int> = TODO()
2021-03-12 00:41:56,894 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(): Iterable<Int> = TODO()
2021-03-12 00:41:57,035 [main:95] - GENERATED = mutableListOf<Int>()
2021-03-12 00:41:57,035 [main:117] - GENERATED CALL = (TextElement("utmeo").text).slice(mutableListOf<Int>())
2021-03-12 00:41:57,035 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:41:57,035 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:41:57,177 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:41:57,184 [main:117] - GENERATED CALL = (TextElement("utmeo").text).removePrefix("vtxol")
2021-03-12 00:41:57,184 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:41:57,184 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:41:57,313 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:41:57,317 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:57,321 [main:117] - GENERATED CALL = (TextElement("utmeo").text).filterIndexed({a: Int, b: Char -> true})
2021-03-12 00:41:57,321 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:41:57,321 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:41:57,321 [main:117] - GENERATED CALL = (TextElement("utmeo").text).toUpperCase()
2021-03-12 00:41:57,322 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:41:57,322 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:41:57,445 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:41:57,449 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:57,453 [main:117] - GENERATED CALL = (TextElement("utmeo").text).filterNot({a: Char -> false})
2021-03-12 00:41:57,453 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:41:57,453 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:41:57,453 [main:117] - GENERATED CALL = (TextElement("utmeo").text).prependIndent(testHtmlNoInline())
2021-03-12 00:41:57,453 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:41:57,453 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:41:57,596 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:41:57,600 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:57,604 [main:117] - GENERATED CALL = (TextElement("utmeo").text).dropLastWhile({a: Char -> true})
2021-03-12 00:41:57,604 [main:61] - replacement of "a" of type String is (TextElement("utmeo").text).prependIndent(testHtmlNoInline())
2021-03-12 00:41:57,738 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:41:57,738 [main:66] - Compilation checking started
2021-03-12 00:41:58,316 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:41:58,318 [main:53] - replacing ("3", String)
2021-03-12 00:41:58,318 [main:50] - replacing "3" String
2021-03-12 00:41:58,318 [main:54] - Getting value of type String
2021-03-12 00:41:58,472 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:41:58,476 [main:58] - GENERATED VALUE OF TYPE String = "oxvsi"
2021-03-12 00:41:58,476 [main:61] - GENERATED IS CALL =false
2021-03-12 00:41:58,492 [main:67] - randomType = Title
2021-03-12 00:41:58,624 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:41:58,628 [main:112] - generating klass Title text = class Title() : TagWithText((Body())?.name.trim())
2021-03-12 00:41:58,766 [main:194] - Type params = []
2021-03-12 00:41:58,959 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:41:59,102 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:41:59,106 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:41:59,110 [main:78] - Generated call from random type = (Title()).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 00:41:59,110 [main:106] - GETTING String from String
2021-03-12 00:41:59,131 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]]
2021-03-12 00:41:59,131 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:41:59,263 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:59,267 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]
2021-03-12 00:41:59,268 [main:117] - GENERATED CALL = (testBodyNoInline()).get(-1789179891).lowercase()
2021-03-12 00:41:59,268 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]]
2021-03-12 00:41:59,268 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:41:59,410 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:59,547 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:41:59,551 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]
2021-03-12 00:41:59,679 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:41:59,835 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:41:59,840 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:42:00,297 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:42:00,301 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 00:42:00,305 [main:95] - GENERATED = Regex("jxouc", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 00:42:00,306 [main:117] - GENERATED CALL = (testBodyNoInline()).subSequence(1354457872, -2088691727).replaceFirst(Regex("jxouc", kotlin.text.RegexOption.IGNORE_CASE), testBodyNoInline())
2021-03-12 00:42:00,306 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]]
2021-03-12 00:42:00,306 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]
2021-03-12 00:42:00,452 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:00,457 [main:117] - GENERATED CALL = (testBodyNoInline()).substring(-1529236694)
2021-03-12 00:42:00,457 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]]
2021-03-12 00:42:00,457 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]
2021-03-12 00:42:00,593 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:00,738 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:00,742 [main:117] - GENERATED CALL = (testBodyNoInline()).padEnd(-1900514849, '搜')
2021-03-12 00:42:00,742 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]]
2021-03-12 00:42:00,743 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:42:00,872 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:01,001 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:01,005 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]
2021-03-12 00:42:01,153 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:01,157 [main:117] - GENERATED CALL = (testBodyNoInline()).subSequence(-379074185, 1302380098).repeat(866411546)
2021-03-12 00:42:01,158 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]]
2021-03-12 00:42:01,158 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]
2021-03-12 00:42:01,292 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:01,446 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:01,449 [main:117] - GENERATED CALL = (testBodyNoInline()).removeRange(699813312, 1838860971)
2021-03-12 00:42:01,450 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]]
2021-03-12 00:42:01,450 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]
2021-03-12 00:42:01,577 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:42:01,714 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:42:01,718 [main:117] - GENERATED CALL = (testBodyNoInline()).commonSuffixWith("kulwx", false)
2021-03-12 00:42:01,718 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]]
2021-03-12 00:42:01,719 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:42:01,864 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:02,000 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:02,005 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]
2021-03-12 00:42:02,145 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:42:02,277 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:42:02,282 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:42:02,597 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:42:02,604 [main:95] - GENERATED = StringBuilder("efais")
2021-03-12 00:42:02,738 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:42:02,742 [main:117] - GENERATED CALL = (testBodyNoInline()).subSequence(1405635032, -1981242394).commonSuffixWith(StringBuilder("efais"), false)
2021-03-12 00:42:02,742 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:42:02,742 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:42:02,742 [main:117] - GENERATED CALL = (testBodyNoInline()).trimStart()
2021-03-12 00:42:02,742 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:42:02,742 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:42:02,742 [main:117] - GENERATED CALL = (testBodyNoInline()).prependIndent(testBodyNoInline())
2021-03-12 00:42:02,742 [main:61] - replacement of "3" of type String is (testBodyNoInline()).padEnd(-1900514849, '搜')
2021-03-12 00:42:02,881 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:42:02,883 [main:53] - replacing ("$bodyVar", String)
2021-03-12 00:42:02,883 [main:50] - replacing "$bodyVar" String
2021-03-12 00:42:02,883 [main:54] - Getting value of type String
2021-03-12 00:42:03,010 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:03,014 [main:58] - GENERATED VALUE OF TYPE String = "iedkr"
2021-03-12 00:42:03,014 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:03,541 [main:67] - randomType = Pair<P, ArrayDeque<UByte>>
2021-03-12 00:42:03,669 [main:302] - generating value of type = Pair<P, ArrayDeque<UByte>> false depth = 0
2021-03-12 00:42:03,826 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: P, second: ArrayDeque<UByte>): Pair<P, ArrayDeque<UByte>> = TODO()
2021-03-12 00:42:03,831 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: P, second: ArrayDeque<UByte>): Pair<P, ArrayDeque<UByte>> = TODO()
2021-03-12 00:42:03,971 [main:302] - generating value of type = P false depth = 3
2021-03-12 00:42:03,975 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:42:04,122 [main:194] - Type params = []
2021-03-12 00:42:04,250 [main:302] - generating value of type = ArrayDeque<UByte> false depth = 3
2021-03-12 00:42:04,381 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UByte> = TODO()
2021-03-12 00:42:04,386 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UByte> = TODO()
2021-03-12 00:42:04,711 [main:302] - generating value of type = Int true depth = 6
2021-03-12 00:42:04,715 [main:95] - GENERATED = ArrayDeque<UByte>(1397193461)
2021-03-12 00:42:04,715 [main:95] - GENERATED = Pair<P, ArrayDeque<UByte>>(P(), ArrayDeque<UByte>(1397193461))
2021-03-12 00:42:04,735 [main:78] - Generated call from random type = (Pair<P, ArrayDeque<UByte>>(P(), ArrayDeque<UByte>(1397193461))).first.name
2021-03-12 00:42:04,736 [main:106] - GETTING String from P
2021-03-12 00:42:04,812 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:42:04,813 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:42:04,813 [main:117] - GENERATED CALL = (B().p()).name.trim()
2021-03-12 00:42:04,813 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:42:04,813 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:42:04,941 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:05,072 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:05,076 [main:117] - GENERATED CALL = (B().p()).name.substringAfter('ƴ', "bddvz")
2021-03-12 00:42:05,076 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:42:05,076 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:42:05,076 [main:117] - GENERATED CALL = (B().p()).name.toUpperCase()
2021-03-12 00:42:05,076 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]]
2021-03-12 00:42:05,076 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:42:05,223 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:05,359 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:05,364 [main:117] - GENERATED CALL = (B().p()).name.substringBeforeLast('﷔', "gtdpo")
2021-03-12 00:42:05,364 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:42:05,364 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:42:05,503 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:05,507 [main:117] - GENERATED CALL = (B().p()).name.substringAfterLast('', testHtmlNoInline())
2021-03-12 00:42:05,508 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:42:05,508 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:42:05,508 [main:117] - GENERATED CALL = (B().p()).name.concat(testBodyHtmlNoInline())
2021-03-12 00:42:05,508 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:42:05,508 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:42:05,633 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:42:05,637 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:42:05,641 [main:117] - GENERATED CALL = (B().p()).name.takeLastWhile({a: Char -> true})
2021-03-12 00:42:05,641 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:42:05,641 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:42:05,764 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:05,768 [main:117] - GENERATED CALL = (B().p()).name.replaceBeforeLast('埄', A().href, TODO().toString())
2021-03-12 00:42:05,768 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:42:05,768 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:42:05,913 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:42:06,053 [main:43] - GENERATING CALL OF fun <T> emptySet(): Iterable<Int> = TODO()
2021-03-12 00:42:06,058 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySet(): Iterable<Int> = TODO()
2021-03-12 00:42:06,206 [main:95] - GENERATED = emptySet<Int>()
2021-03-12 00:42:06,206 [main:117] - GENERATED CALL = (B().p()).name.slice(emptySet<Int>())
2021-03-12 00:42:06,206 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:42:06,206 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:42:06,332 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:06,336 [main:117] - GENERATED CALL = (B().p()).name.replaceAfterLast('鿲', testBodyNoInline(), testHtmlNoInline())
2021-03-12 00:42:06,336 [main:61] - replacement of "$bodyVar" of type String is (B().p()).name.concat(testBodyHtmlNoInline())
2021-03-12 00:42:06,459 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:42:06,462 [main:53] - replacing (bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }, Body)
2021-03-12 00:42:06,463 [main:50] - replacing bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                } Body
2021-03-12 00:42:06,463 [main:54] - Getting value of type Body
2021-03-12 00:42:06,605 [main:302] - generating value of type = Body false depth = 0
2021-03-12 00:42:06,608 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:42:06,740 [main:194] - Type params = []
2021-03-12 00:42:06,880 [main:58] - GENERATED VALUE OF TYPE Body = Body()
2021-03-12 00:42:06,880 [main:61] - GENERATED IS CALL =true
2021-03-12 00:42:09,206 [main:67] - randomType = ArrayDeque<Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>>
2021-03-12 00:42:09,355 [main:302] - generating value of type = ArrayDeque<Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>> false depth = 0
2021-03-12 00:42:09,500 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>>): ArrayDeque<Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>> = TODO()
2021-03-12 00:42:09,660 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>>): ArrayDeque<Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>> = TODO()
2021-03-12 00:42:10,001 [main:302] - generating value of type = Collection<Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>> false depth = 3
2021-03-12 00:42:10,153 [main:43] - GENERATING CALL OF fun <T> setOf(elements: Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>): Collection<Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>> = TODO()
2021-03-12 00:42:10,158 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>): Collection<Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>> = TODO()
2021-03-12 00:42:10,306 [main:302] - generating value of type = Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>> false depth = 6
2021-03-12 00:42:10,310 [main:302] - generating value of type = Function1<Long, ArrayList<Set<Byte>>?> false depth = 7
2021-03-12 00:42:10,314 [main:302] - generating value of type = ArrayList<Set<Byte>> false depth = 8
2021-03-12 00:42:10,450 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Set<Byte>> = TODO()
2021-03-12 00:42:10,455 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Set<Byte>> = TODO()
2021-03-12 00:42:10,586 [main:95] - GENERATED = arrayListOf<Set<Byte>>()
2021-03-12 00:42:10,586 [main:95] - GENERATED = setOf<Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>>({a: Float?, b: ArrayList<Function2<Double, Head, TagWithText>>? -> {a: Long -> arrayListOf<Set<Byte>>()}})
2021-03-12 00:42:10,587 [main:95] - GENERATED = ArrayDeque<Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>>(setOf<Function2<Float?, ArrayList<Function2<Double, Head, TagWithText>>?, Function1<Long, ArrayList<Set<Byte>>?>>>({a: Float?, b: ArrayList<Function2<Double, Head, TagWithText>>? -> {a: Long -> arrayListOf<Set<Byte>>()}}))
2021-03-12 00:42:11,019 [main:106] - GETTING Body from String
2021-03-12 00:42:11,039 [main:106] - GETTING Body from String
2021-03-12 00:42:11,040 [main:106] - GETTING Body from Head
2021-03-12 00:42:11,082 [main:106] - GETTING Body from P
2021-03-12 00:42:11,143 [main:106] - GETTING Body from UL
2021-03-12 00:42:11,202 [main:106] - GETTING Body from P
2021-03-12 00:42:11,202 [main:106] - GETTING Body from Body
2021-03-12 00:42:11,259 [main:61] - replacement of bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                } of type Body is HTML().bodyNoInline()
2021-03-12 00:42:11,413 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:42:11,413 [main:66] - Compilation checking started
2021-03-12 00:42:11,750 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                HTML().bodyNoInline()
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:42:11,752 [main:53] - replacing ({ +(B().b()).name.drop(-1541158138) }, [@kotlin.ExtensionFunctionType] Function1<A, Unit>)
2021-03-12 00:42:11,752 [main:50] - replacing { +(B().b()).name.drop(-1541158138) } [@kotlin.ExtensionFunctionType] Function1<A, Unit>
2021-03-12 00:42:11,752 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<A, Unit>
2021-03-12 00:42:11,879 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<A, Unit> false depth = 0
2021-03-12 00:42:11,883 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:42:12,036 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:42:12,041 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:42:12,354 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:42:12,354 [main:95] - GENERATED = println("cmyqf")
2021-03-12 00:42:12,355 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<A, Unit> = { println("cmyqf")}
2021-03-12 00:42:12,355 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:12,506 [main:67] - randomType = Byte
2021-03-12 00:42:12,631 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:42:12,669 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from HTML
2021-03-12 00:42:12,713 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from HTML
2021-03-12 00:42:12,717 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:42:12,738 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:42:12,741 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from Head
2021-03-12 00:42:12,785 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from Int
2021-03-12 00:42:12,819 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:42:12,822 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from Body
2021-03-12 00:42:12,886 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from B
2021-03-12 00:42:12,947 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from LI
2021-03-12 00:42:13,009 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from UL
2021-03-12 00:42:13,074 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from H1
2021-03-12 00:42:13,136 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from P
2021-03-12 00:42:13,210 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:42:13,214 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:42:13,218 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from P
2021-03-12 00:42:13,222 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:42:13,226 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from Body
2021-03-12 00:42:13,230 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from Title
2021-03-12 00:42:13,271 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:42:13,272 [main:61] - replacement of { +(B().b()).name.drop(-1541158138) } of type [@kotlin.ExtensionFunctionType] Function1<A, Unit> is { println("cmyqf")}
2021-03-12 00:42:13,412 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:42:13,414 [main:53] - replacing ({
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }, StringBuilder)
2021-03-12 00:42:13,414 [main:50] - replacing {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    } StringBuilder
2021-03-12 00:42:13,414 [main:54] - Getting value of type StringBuilder
2021-03-12 00:42:13,549 [main:302] - generating value of type = StringBuilder false depth = 0
2021-03-12 00:42:13,696 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): StringBuilder = TODO()
2021-03-12 00:42:13,701 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): StringBuilder = TODO()
2021-03-12 00:42:13,982 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:42:13,989 [main:95] - GENERATED = StringBuilder("wkgjb")
2021-03-12 00:42:13,989 [main:58] - GENERATED VALUE OF TYPE StringBuilder = StringBuilder("wkgjb")
2021-03-12 00:42:13,989 [main:61] - GENERATED IS CALL =true
2021-03-12 00:42:14,158 [main:67] - randomType = Double
2021-03-12 00:42:14,293 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:42:14,339 [main:106] - GETTING StringBuilder from UL
2021-03-12 00:42:14,420 [main:106] - GETTING StringBuilder from P
2021-03-12 00:42:14,516 [main:106] - GETTING StringBuilder from String
2021-03-12 00:42:14,546 [main:106] - GETTING StringBuilder from Head
2021-03-12 00:42:14,608 [main:106] - GETTING StringBuilder from String
2021-03-12 00:42:14,610 [main:106] - GETTING StringBuilder from Body
2021-03-12 00:42:14,691 [main:106] - GETTING StringBuilder from String
2021-03-12 00:42:14,692 [main:106] - GETTING StringBuilder from String
2021-03-12 00:42:14,692 [main:106] - GETTING StringBuilder from Body
2021-03-12 00:42:14,693 [main:106] - GETTING StringBuilder from LI
2021-03-12 00:42:14,754 [main:106] - GETTING StringBuilder from HTML
2021-03-12 00:42:14,794 [main:106] - GETTING StringBuilder from String
2021-03-12 00:42:14,795 [main:106] - GETTING StringBuilder from H1
2021-03-12 00:42:14,857 [main:106] - GETTING StringBuilder from P
2021-03-12 00:42:14,857 [main:106] - GETTING StringBuilder from String
2021-03-12 00:42:14,858 [main:106] - GETTING StringBuilder from String
2021-03-12 00:42:14,858 [main:106] - GETTING StringBuilder from StringBuilder
2021-03-12 00:42:14,876 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.appendLine(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@471f4f58]]
2021-03-12 00:42:14,876 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.appendLine(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@471f4f58]
2021-03-12 00:42:14,876 [main:117] - GENERATED CALL = (builder).appendLine()
2021-03-12 00:42:14,876 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.setRange(startIndex: kotlin.Int, endIndex: kotlin.Int, value: kotlin.String): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79a80607]]
2021-03-12 00:42:14,876 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.setRange(startIndex: kotlin.Int, endIndex: kotlin.Int, value: kotlin.String): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79a80607]
2021-03-12 00:42:15,018 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:15,158 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:15,163 [main:117] - GENERATED CALL = (builder).setRange(396820455, 542506130, testAllInline())
2021-03-12 00:42:15,163 [main:113] - Case = [public final fun reverse(): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@65aab57c]]
2021-03-12 00:42:15,163 [main:149] - GENERATING call of type public final fun reverse(): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@65aab57c]
2021-03-12 00:42:15,163 [main:117] - GENERATED CALL = (builder).reverse()
2021-03-12 00:42:15,163 [main:113] - Case = [@kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1172c11a]]
2021-03-12 00:42:15,163 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1172c11a]
2021-03-12 00:42:15,307 [main:117] - GENERATED CALL = (builder).append(null)
2021-03-12 00:42:15,307 [main:113] - Case = [@kotlin.SinceKotlin public inline fun kotlin.text.StringBuilder.clear(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d708f70]]
2021-03-12 00:42:15,307 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun kotlin.text.StringBuilder.clear(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d708f70]
2021-03-12 00:42:15,307 [main:117] - GENERATED CALL = (builder).clear()
2021-03-12 00:42:15,307 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.appendRange(value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a17085]]
2021-03-12 00:42:15,307 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.appendRange(value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a17085]
2021-03-12 00:42:15,435 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 00:42:15,569 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:42:15,574 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:42:15,729 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:42:15,733 [main:95] - GENERATED = charArrayOf('')
2021-03-12 00:42:15,868 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:16,012 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:16,016 [main:117] - GENERATED CALL = (builder).appendRange(charArrayOf(''), 25910564, -504497686)
2021-03-12 00:42:16,016 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.insertRange(index: kotlin.Int, value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7201a76b]]
2021-03-12 00:42:16,016 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.insertRange(index: kotlin.Int, value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7201a76b]
2021-03-12 00:42:16,146 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:16,277 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 00:42:16,425 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:42:16,430 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:42:16,571 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:42:16,575 [main:95] - GENERATED = charArrayOf('ℨ')
2021-03-12 00:42:16,718 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:16,852 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:16,856 [main:117] - GENERATED CALL = (builder).insertRange(-2033296010, charArrayOf('ℨ'), 1338896006, 1115643673)
2021-03-12 00:42:16,856 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43d48f61]]
2021-03-12 00:42:16,856 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43d48f61]
2021-03-12 00:42:16,983 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:17,131 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:17,135 [main:117] - GENERATED CALL = (builder).deleteRange(-128977566, -629163904)
2021-03-12 00:42:17,135 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteAt(index: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ee1941]]
2021-03-12 00:42:17,135 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteAt(index: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ee1941]
2021-03-12 00:42:17,272 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:17,276 [main:117] - GENERATED CALL = (builder).deleteAt(-1676768435)
2021-03-12 00:42:17,276 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun insert(index: kotlin.Int, value: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@59d7592c]]
2021-03-12 00:42:17,277 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun insert(index: kotlin.Int, value: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@59d7592c]
2021-03-12 00:42:17,419 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:17,550 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:42:17,550 [main:117] - GENERATED CALL = (builder).insert(-1910172590, "nioqi")
2021-03-12 00:42:17,550 [main:61] - replacement of {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    } of type StringBuilder is StringBuilder("wkgjb")
2021-03-12 00:42:17,676 [main:33] - Trying to replace BLOCK on Element(CALL_EXPRESSION)
2021-03-12 00:42:17,676 [main:66] - Compilation checking started
2021-03-12 00:42:17,682 [main:71] - Wrong syntax or breaks conditions
2021-03-12 00:42:17,683 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) StringBuilder("wkgjb")
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:42:17,685 [main:53] - replacing ("2", String)
2021-03-12 00:42:17,685 [main:50] - replacing "2" String
2021-03-12 00:42:17,685 [main:54] - Getting value of type String
2021-03-12 00:42:17,831 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:17,835 [main:58] - GENERATED VALUE OF TYPE String = "zsigd"
2021-03-12 00:42:17,835 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:17,852 [main:67] - randomType = A
2021-03-12 00:42:17,988 [main:302] - generating value of type = A false depth = 0
2021-03-12 00:42:17,992 [main:112] - generating klass A text = class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}
2021-03-12 00:42:18,135 [main:194] - Type params = []
2021-03-12 00:42:18,360 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:42:18,505 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:18,642 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:18,786 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:42:18,790 [main:78] - Generated call from random type = (A()).name.replaceFirst('鸄', '릏', false)
2021-03-12 00:42:18,791 [main:106] - GETTING String from String
2021-03-12 00:42:18,817 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:42:18,817 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:42:18,945 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:18,949 [main:117] - GENERATED CALL = (testAllInline()).length.toString(-1305025896)
2021-03-12 00:42:18,949 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:42:18,949 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:42:18,949 [main:117] - GENERATED CALL = (testAllInline()).trimStart()
2021-03-12 00:42:18,949 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:42:18,949 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:42:19,075 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:19,079 [main:117] - GENERATED CALL = (testAllInline()).trimMargin("qzkdy")
2021-03-12 00:42:19,079 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:42:19,079 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:42:19,222 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:42:19,226 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:42:19,230 [main:117] - GENERATED CALL = (testAllInline()).filterNot({a: Char -> false})
2021-03-12 00:42:19,231 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]]
2021-03-12 00:42:19,231 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:42:19,364 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:19,368 [main:117] - GENERATED CALL = (testAllInline()).dropLast(522938104)
2021-03-12 00:42:19,368 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]]
2021-03-12 00:42:19,368 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:42:19,510 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:19,514 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]
2021-03-12 00:42:19,514 [main:117] - GENERATED CALL = (testAllInline()).get(754540733).uppercase()
2021-03-12 00:42:19,514 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:42:19,514 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:42:19,514 [main:117] - GENERATED CALL = (testAllInline()).toUpperCase()
2021-03-12 00:42:19,514 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:42:19,514 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:42:19,641 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:19,645 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:42:19,771 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:19,775 [main:117] - GENERATED CALL = (testAllInline()).compareTo("uhyqi").toString(664352368)
2021-03-12 00:42:19,775 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:42:19,775 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:42:19,776 [main:117] - GENERATED CALL = (testAllInline()).trimEnd()
2021-03-12 00:42:19,776 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:42:19,776 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:42:19,922 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:42:19,926 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:42:19,930 [main:117] - GENERATED CALL = (testAllInline()).dropLastWhile({a: Char -> true})
2021-03-12 00:42:19,930 [main:61] - replacement of "2" of type String is (testAllInline()).trimStart()
2021-03-12 00:42:20,065 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:42:20,066 [main:66] - Compilation checking started
2021-03-12 00:42:20,638 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:42:20,639 [main:53] - replacing (initTag(Body(), { require(false)}), Body)
2021-03-12 00:42:20,639 [main:50] - replacing initTag(Body(), { require(false)}) Body
2021-03-12 00:42:20,639 [main:54] - Getting value of type Body
2021-03-12 00:42:20,821 [main:302] - generating value of type = Body false depth = 0
2021-03-12 00:42:20,826 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:42:20,962 [main:194] - Type params = []
2021-03-12 00:42:21,103 [main:58] - GENERATED VALUE OF TYPE Body = Body()
2021-03-12 00:42:21,103 [main:61] - GENERATED IS CALL =true
2021-03-12 00:42:21,423 [main:67] - randomType = HashMap<Long, Short>
2021-03-12 00:42:21,594 [main:302] - generating value of type = HashMap<Long, Short> false depth = 0
2021-03-12 00:42:21,735 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Long, Short>): HashMap<Long, Short> = TODO()
2021-03-12 00:42:21,740 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Long, Short>): HashMap<Long, Short> = TODO()
2021-03-12 00:42:21,888 [main:302] - generating value of type = Pair<Long, Short> false depth = 3
2021-03-12 00:42:22,024 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long, second: Short): Pair<Long, Short> = TODO()
2021-03-12 00:42:22,029 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long, second: Short): Pair<Long, Short> = TODO()
2021-03-12 00:42:22,162 [main:302] - generating value of type = Long true depth = 6
2021-03-12 00:42:22,165 [main:302] - generating value of type = Short true depth = 6
2021-03-12 00:42:22,169 [main:95] - GENERATED = Pair<Long, Short>(2164646951976209952, -12352)
2021-03-12 00:42:22,169 [main:95] - GENERATED = hashMapOf<Long, Short>(Pair<Long, Short>(2164646951976209952, -12352))
2021-03-12 00:42:22,261 [main:106] - GETTING Body from String
2021-03-12 00:42:22,277 [main:106] - GETTING Body from String
2021-03-12 00:42:22,278 [main:106] - GETTING Body from P
2021-03-12 00:42:22,344 [main:106] - GETTING Body from B
2021-03-12 00:42:22,402 [main:106] - GETTING Body from String
2021-03-12 00:42:22,402 [main:106] - GETTING Body from P
2021-03-12 00:42:22,402 [main:106] - GETTING Body from Body
2021-03-12 00:42:22,459 [main:61] - replacement of initTag(Body(), { require(false)}) of type Body is Body()
2021-03-12 00:42:22,603 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:42:22,605 [main:53] - replacing (h1 { +"XML encoding with Kotlin" }, H1)
2021-03-12 00:42:22,605 [main:50] - replacing h1 { +"XML encoding with Kotlin" } H1
2021-03-12 00:42:22,605 [main:54] - Getting value of type H1
2021-03-12 00:42:22,741 [main:302] - generating value of type = H1 false depth = 0
2021-03-12 00:42:22,745 [main:112] - generating klass H1 text = class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
2021-03-12 00:42:22,888 [main:194] - Type params = []
2021-03-12 00:42:23,017 [main:58] - GENERATED VALUE OF TYPE H1 = H1()
2021-03-12 00:42:23,017 [main:61] - GENERATED IS CALL =true
2021-03-12 00:42:23,025 [main:67] - randomType = Long
2021-03-12 00:42:23,155 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:42:23,194 [main:106] - GETTING H1 from HTML
2021-03-12 00:42:23,234 [main:113] - Case = [public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d], public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]]
2021-03-12 00:42:23,234 [main:149] - GENERATING call of type public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]
2021-03-12 00:42:23,380 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:42:23,384 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:42:23,391 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]
2021-03-12 00:42:23,526 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:42:23,530 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:42:23,675 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:42:23,680 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:42:24,153 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:42:24,157 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:42:24,161 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:42:24,161 [main:95] - GENERATED = require(true, { "whxqg"})
2021-03-12 00:42:24,162 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).body({ println()}).h1({ require(true, { "whxqg"})})
2021-03-12 00:42:24,162 [main:61] - replacement of h1 { +"XML encoding with Kotlin" } of type H1 is (htmlNoInline({ require(false)})).body({ println()}).h1({ require(true, { "whxqg"})})
2021-03-12 00:42:24,296 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:42:24,298 [main:53] - replacing ({ +"mixed" }, [@kotlin.ExtensionFunctionType] Function1<B, Unit>)
2021-03-12 00:42:24,298 [main:50] - replacing { +"mixed" } [@kotlin.ExtensionFunctionType] Function1<B, Unit>
2021-03-12 00:42:24,298 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<B, Unit>
2021-03-12 00:42:24,441 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:42:24,444 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:42:24,577 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:42:24,582 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:42:24,886 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:42:24,890 [main:95] - GENERATED = require(false)
2021-03-12 00:42:24,890 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<B, Unit> = { require(false)}
2021-03-12 00:42:24,890 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:24,905 [main:67] - randomType = Title
2021-03-12 00:42:25,039 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:42:25,042 [main:112] - generating klass Title text = class Title() : TagWithText((Body())?.name.trim())
2021-03-12 00:42:25,186 [main:194] - Type params = []
2021-03-12 00:42:25,383 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:42:25,409 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from LI
2021-03-12 00:42:25,471 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from Body
2021-03-12 00:42:25,533 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from Title
2021-03-12 00:42:25,574 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from Int
2021-03-12 00:42:25,607 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from P
2021-03-12 00:42:25,668 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from Head
2021-03-12 00:42:25,711 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from P
2021-03-12 00:42:25,715 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from HTML
2021-03-12 00:42:25,759 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:42:25,763 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:42:25,767 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from UL
2021-03-12 00:42:25,829 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:42:25,833 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:42:25,837 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from Body
2021-03-12 00:42:25,841 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from B
2021-03-12 00:42:25,903 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from H1
2021-03-12 00:42:25,979 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:42:25,983 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:42:25,987 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from HTML
2021-03-12 00:42:25,987 [main:61] - replacement of { +"mixed" } of type [@kotlin.ExtensionFunctionType] Function1<B, Unit> is { require(false)}
2021-03-12 00:42:26,131 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:42:26,133 [main:53] - replacing ("https://jetbrains.com/kotlin", String)
2021-03-12 00:42:26,133 [main:50] - replacing "https://jetbrains.com/kotlin" String
2021-03-12 00:42:26,134 [main:54] - Getting value of type String
2021-03-12 00:42:26,268 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:26,272 [main:58] - GENERATED VALUE OF TYPE String = "hzjsh"
2021-03-12 00:42:26,272 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:26,288 [main:67] - randomType = Element
2021-03-12 00:42:26,430 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:42:26,434 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:42:26,714 [main:106] - GETTING String from B
2021-03-12 00:42:26,771 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:42:26,771 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:42:26,917 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:27,056 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:27,061 [main:117] - GENERATED CALL = (B().b()).name.substringAfterLast('惠', "meinv")
2021-03-12 00:42:27,061 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:42:27,061 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:42:27,206 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:42:27,343 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:42:27,348 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:42:27,666 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:42:27,670 [main:95] - GENERATED = StringBuilder("kcsph")
2021-03-12 00:42:27,670 [main:117] - GENERATED CALL = (B().b()).name.replaceRange(bodyVar, bodyVar, StringBuilder("kcsph"))
2021-03-12 00:42:27,671 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]]
2021-03-12 00:42:27,671 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:42:27,804 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:27,809 [main:117] - GENERATED CALL = (B().b()).name.substringBeforeLast('惋', testBodyNoInline())
2021-03-12 00:42:27,809 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:42:27,809 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:42:27,953 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:42:27,957 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:42:27,961 [main:117] - GENERATED CALL = (B().b()).name.takeWhile({a: Char -> true})
2021-03-12 00:42:27,961 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:42:27,961 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:42:28,091 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:28,095 [main:117] - GENERATED CALL = (B().b()).name.substringAfter('苣', TODO().toString())
2021-03-12 00:42:28,095 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:42:28,095 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:42:28,095 [main:117] - GENERATED CALL = (B().b()).name.toUpperCase()
2021-03-12 00:42:28,095 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in B[SimpleFunctionDescriptorImpl@6c78cf7c], public final val name: kotlin.String defined in H1[PropertyDescriptorImpl@e65af9a]]
2021-03-12 00:42:28,095 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in B[SimpleFunctionDescriptorImpl@6c78cf7c]
2021-03-12 00:42:28,224 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:42:28,228 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:42:28,382 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:42:28,388 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:42:28,849 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:42:28,853 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:42:28,857 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:42:28,858 [main:95] - GENERATED = require(false, { "gqglp"})
2021-03-12 00:42:28,858 [main:117] - GENERATED CALL = (B().b()).h1({ require(false, { "gqglp"})}).name
2021-03-12 00:42:28,858 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in B[PropertyDescriptorImpl@2b31fe92], public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]]
2021-03-12 00:42:28,858 [main:149] - GENERATING call of type public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]
2021-03-12 00:42:28,989 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:28,993 [main:117] - GENERATED CALL = (B().b()).attributes.put("kdlek", TODO().toString())
2021-03-12 00:42:28,993 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:42:28,993 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:42:29,140 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:42:29,148 [main:117] - GENERATED CALL = (B().b()).name.removePrefix(StringBuilder())
2021-03-12 00:42:29,148 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:42:29,148 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:42:29,283 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:29,431 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:29,566 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:42:29,570 [main:117] - GENERATED CALL = (B().b()).name.replaceFirst('딩', '⣏', true)
2021-03-12 00:42:29,570 [main:61] - replacement of "https://jetbrains.com/kotlin" of type String is (B().b()).name.replaceRange(bodyVar, bodyVar, StringBuilder("kcsph"))
2021-03-12 00:42:29,699 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:42:29,700 [main:53] - replacing ({ +"XML encoding with Kotlin" }, [@kotlin.ExtensionFunctionType] Function1<H1, Unit>)
2021-03-12 00:42:29,701 [main:50] - replacing { +"XML encoding with Kotlin" } [@kotlin.ExtensionFunctionType] Function1<H1, Unit>
2021-03-12 00:42:29,701 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<H1, Unit>
2021-03-12 00:42:29,846 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:42:29,850 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:42:29,992 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:42:30,002 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:42:30,516 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:42:30,520 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:42:30,524 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:42:30,663 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:42:30,668 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:42:31,119 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:42:31,123 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:42:31,127 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:42:31,291 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:42:31,296 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:42:31,766 [main:302] - generating value of type = Int true depth = 12
2021-03-12 00:42:31,770 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-12 00:42:31,774 [main:302] - generating value of type = Unit false depth = 13
2021-03-12 00:42:31,905 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:42:31,910 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:42:32,445 [main:302] - generating value of type = Boolean true depth = 16
2021-03-12 00:42:32,445 [main:385] - Cant generate call of fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:42:32,445 [main:95] - GENERATED = repeat(-1577311696, {a: Int -> })
2021-03-12 00:42:32,445 [main:95] - GENERATED = repeat(1978852189, {a: Int -> repeat(-1577311696, {a: Int -> })})
2021-03-12 00:42:32,446 [main:95] - GENERATED = repeat(533831612, {a: Int -> repeat(1978852189, {a: Int -> repeat(-1577311696, {a: Int -> })})})
2021-03-12 00:42:32,446 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<H1, Unit> = { repeat(533831612, {a: Int -> repeat(1978852189, {a: Int -> repeat(-1577311696, {a: Int -> })})})}
2021-03-12 00:42:32,446 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:32,618 [main:67] - randomType = Collection<Boolean>
2021-03-12 00:42:32,623 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from LI
2021-03-12 00:42:32,699 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from B
2021-03-12 00:42:32,783 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from Body
2021-03-12 00:42:32,846 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:42:32,867 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from UL
2021-03-12 00:42:32,929 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from H1
2021-03-12 00:42:32,990 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from Body
2021-03-12 00:42:32,994 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from Title
2021-03-12 00:42:33,035 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from P
2021-03-12 00:42:33,099 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:42:33,103 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from HTML
2021-03-12 00:42:33,159 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:42:33,163 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from HTML
2021-03-12 00:42:33,167 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from P
2021-03-12 00:42:33,171 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:42:33,174 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:42:33,178 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from Head
2021-03-12 00:42:33,222 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:42:33,226 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:42:33,226 [main:61] - replacement of { +"XML encoding with Kotlin" } of type [@kotlin.ExtensionFunctionType] Function1<H1, Unit> is { repeat(533831612, {a: Int -> repeat(1978852189, {a: Int -> repeat(-1577311696, {a: Int -> })})})}
2021-03-12 00:42:33,362 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:42:33,363 [main:53] - replacing (stringMapOf<String>(Pair<String, String>("cvzbr", "pdmyy"))["href"], String?)
2021-03-12 00:42:33,363 [main:50] - replacing stringMapOf<String>(Pair<String, String>("cvzbr", "pdmyy"))["href"] String?
2021-03-12 00:42:33,364 [main:54] - Getting value of type String?
2021-03-12 00:42:33,497 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:33,501 [main:58] - GENERATED VALUE OF TYPE String? = "plbwx"
2021-03-12 00:42:33,501 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:33,516 [main:67] - randomType = Title
2021-03-12 00:42:33,659 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:42:33,662 [main:112] - generating klass Title text = class Title() : TagWithText((Body())?.name.trim())
2021-03-12 00:42:33,790 [main:194] - Type params = []
2021-03-12 00:42:33,966 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:42:34,105 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:42:34,109 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:42:34,113 [main:78] - Generated call from random type = (Title()).name.dropLastWhile({a: Char -> false})
2021-03-12 00:42:34,113 [main:106] - GETTING String? from String
2021-03-12 00:42:34,134 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]]
2021-03-12 00:42:34,134 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]
2021-03-12 00:42:34,134 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.uppercase()
2021-03-12 00:42:34,134 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]]
2021-03-12 00:42:34,134 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:42:34,266 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:34,412 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:34,416 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]
2021-03-12 00:42:34,550 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:34,555 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.subSequence(2016160428, 46019204).repeat(1992665404)
2021-03-12 00:42:34,555 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]]
2021-03-12 00:42:34,555 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]
2021-03-12 00:42:34,682 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:34,686 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.take(-875173449)
2021-03-12 00:42:34,686 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:42:34,686 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:42:34,827 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:34,965 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:34,969 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.substringBefore('瑨', "avoxt")
2021-03-12 00:42:34,970 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:42:34,970 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:42:34,970 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.trimEnd()
2021-03-12 00:42:34,970 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:42:34,970 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:42:34,970 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.trimMargin(testAllInline())
2021-03-12 00:42:34,970 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:42:34,970 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:42:35,117 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:35,250 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:35,410 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:35,414 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.replaceBefore('ꬣ', "ijchq", "oikvz")
2021-03-12 00:42:35,414 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:42:35,414 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:42:35,414 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.capitalize()
2021-03-12 00:42:35,414 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]]
2021-03-12 00:42:35,415 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:42:35,565 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:35,572 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.substringBeforeLast('녺', testBodyHtmlNoInline())
2021-03-12 00:42:35,572 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:42:35,572 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:42:35,573 [main:117] - GENERATED CALL = (TextElement("utmeo").text)?.reversed()
2021-03-12 00:42:35,573 [main:61] - replacement of stringMapOf<String>(Pair<String, String>("cvzbr", "pdmyy"))["href"] of type String? is (TextElement("utmeo").text)?.uppercase()
2021-03-12 00:42:35,722 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:42:35,724 [main:53] - replacing ("Kotlin", String)
2021-03-12 00:42:35,724 [main:50] - replacing "Kotlin" String
2021-03-12 00:42:35,724 [main:54] - Getting value of type String
2021-03-12 00:42:35,866 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:35,870 [main:58] - GENERATED VALUE OF TYPE String = "qgliq"
2021-03-12 00:42:35,870 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:36,619 [main:67] - randomType = Triple<Boolean, LinkedHashMap<String?, Element>, LI?>?
2021-03-12 00:42:36,747 [main:302] - generating value of type = Triple<Boolean, LinkedHashMap<String?, Element>, LI?> false depth = 0
2021-03-12 00:42:36,903 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Boolean, second: LinkedHashMap<String?, Element>, third: LI?): Triple<Boolean, LinkedHashMap<String?, Element>, LI?> = TODO()
2021-03-12 00:42:36,908 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Boolean, second: LinkedHashMap<String?, Element>, third: LI?): Triple<Boolean, LinkedHashMap<String?, Element>, LI?> = TODO()
2021-03-12 00:42:37,049 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 00:42:37,053 [main:302] - generating value of type = LinkedHashMap<String?, Element> false depth = 3
2021-03-12 00:42:37,197 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): LinkedHashMap<String?, Element> = TODO()
2021-03-12 00:42:37,202 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): LinkedHashMap<String?, Element> = TODO()
2021-03-12 00:42:37,347 [main:95] - GENERATED = LinkedHashMap<String?, Element>()
2021-03-12 00:42:37,347 [main:302] - generating value of type = LI false depth = 3
2021-03-12 00:42:37,351 [main:112] - generating klass LI text = class LI() : BodyTag("li")
2021-03-12 00:42:37,481 [main:194] - Type params = []
2021-03-12 00:42:37,633 [main:95] - GENERATED = Triple<Boolean, LinkedHashMap<String?, Element>, LI?>(false, LinkedHashMap<String?, Element>(), LI())
2021-03-12 00:42:37,665 [main:78] - Generated call from random type = (Triple<Boolean, LinkedHashMap<String?, Element>, LI?>(false, LinkedHashMap<String?, Element>(), LI()))?.third?.name!!
2021-03-12 00:42:37,666 [main:106] - GETTING String from Body
2021-03-12 00:42:37,744 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:42:37,744 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:42:37,744 [main:117] - GENERATED CALL = (HTML().body()).name.trimIndent()
2021-03-12 00:42:37,745 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Body[PropertyDescriptorImpl@51249017], public open fun remove(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@1834528b]]
2021-03-12 00:42:37,745 [main:149] - GENERATING call of type public open fun remove(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@1834528b]
2021-03-12 00:42:37,745 [main:117] - GENERATED CALL = (HTML().body()).attributes.remove(TODO().toString())
2021-03-12 00:42:37,745 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:42:37,745 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:42:37,880 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:38,029 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:38,162 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:42:38,166 [main:117] - GENERATED CALL = (HTML().body()).name.replaceFirst('놄', '婦', false)
2021-03-12 00:42:38,166 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:42:38,166 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:42:38,291 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:42:38,295 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:42:38,298 [main:117] - GENERATED CALL = (HTML().body()).name.takeLastWhile({a: Char -> false})
2021-03-12 00:42:38,299 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:42:38,299 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:42:38,299 [main:117] - GENERATED CALL = (HTML().body()).name.capitalize()
2021-03-12 00:42:38,299 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:42:38,299 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:42:38,456 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:42:38,460 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:42:38,464 [main:117] - GENERATED CALL = (HTML().body()).name.filter({a: Char -> true})
2021-03-12 00:42:38,464 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:42:38,464 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:42:38,464 [main:117] - GENERATED CALL = (HTML().body()).name.decapitalize()
2021-03-12 00:42:38,464 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:42:38,464 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:42:38,598 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:42:38,602 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:42:38,607 [main:117] - GENERATED CALL = (HTML().body()).name.takeWhile({a: Char -> true})
2021-03-12 00:42:38,607 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:42:38,607 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:42:38,607 [main:117] - GENERATED CALL = (HTML().body()).name.takeLast(bodyVar)
2021-03-12 00:42:38,607 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:42:38,607 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:42:38,739 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:38,752 [main:117] - GENERATED CALL = (HTML().body()).name.trimMargin("sthgc")
2021-03-12 00:42:38,752 [main:61] - replacement of "Kotlin" of type String is (HTML().body()).name.takeLastWhile({a: Char -> false})
2021-03-12 00:42:38,879 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:42:38,882 [main:53] - replacing ("https://jetbrains.com/kotlin", String)
2021-03-12 00:42:38,882 [main:50] - replacing "https://jetbrains.com/kotlin" String
2021-03-12 00:42:38,882 [main:54] - Getting value of type String
2021-03-12 00:42:39,007 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:39,011 [main:58] - GENERATED VALUE OF TYPE String = "tdref"
2021-03-12 00:42:39,011 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:39,019 [main:67] - randomType = Long
2021-03-12 00:42:39,167 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:42:39,209 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67a831b1]
2021-03-12 00:42:39,209 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]
2021-03-12 00:42:39,209 [main:78] - Generated call from random type = (5383225257395473427).toChar().uppercase()
2021-03-12 00:42:39,209 [main:106] - GETTING String from String
2021-03-12 00:42:39,228 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22578dad]]
2021-03-12 00:42:39,228 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:42:39,229 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22578dad]
2021-03-12 00:42:39,360 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:42:39,505 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:42:39,509 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:42:39,967 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:42:39,971 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 00:42:39,975 [main:95] - GENERATED = Regex("rrtyb", kotlin.text.RegexOption.MULTILINE)
2021-03-12 00:42:40,110 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 00:42:40,114 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:42:40,121 [main:117] - GENERATED CALL = (TODO().toString()).subSequence(bodyVar, bodyVar).replace(Regex("rrtyb", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> "zigxb"})
2021-03-12 00:42:40,122 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:42:40,122 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:42:40,266 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:40,396 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:40,525 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:40,529 [main:117] - GENERATED CALL = (TODO().toString()).replaceAfterLast('鞎', "xbfnk", "htniq")
2021-03-12 00:42:40,529 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:42:40,529 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:42:40,671 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:40,675 [main:117] - GENERATED CALL = (TODO().toString()).substringBefore('ﶥ', testAllInline())
2021-03-12 00:42:40,676 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:42:40,676 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:42:40,808 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:40,812 [main:117] - GENERATED CALL = (TODO().toString()).substringAfter('龷', A().href)
2021-03-12 00:42:40,812 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:42:40,812 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:42:40,945 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:42:40,949 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:42:40,953 [main:117] - GENERATED CALL = (TODO().toString()).takeLastWhile({a: Char -> true})
2021-03-12 00:42:40,953 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]]
2021-03-12 00:42:40,953 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]
2021-03-12 00:42:40,953 [main:117] - GENERATED CALL = (TODO().toString()).repeat(bodyVar)
2021-03-12 00:42:40,953 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:42:40,953 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:42:40,953 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:42:40,954 [main:117] - GENERATED CALL = (TODO().toString()).compareTo(testHtmlNoInline()).toString(bodyVar)
2021-03-12 00:42:40,954 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:42:40,954 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:42:41,089 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:42:41,096 [main:117] - GENERATED CALL = (TODO().toString()).removeSuffix(StringBuilder())
2021-03-12 00:42:41,096 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:42:41,096 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:42:41,097 [main:117] - GENERATED CALL = (TODO().toString()).toUpperCase()
2021-03-12 00:42:41,097 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:42:41,097 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:42:41,227 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:42:41,234 [main:117] - GENERATED CALL = (TODO().toString()).removeSurrounding("sleyx")
2021-03-12 00:42:41,234 [main:61] - replacement of "https://jetbrains.com/kotlin" of type String is (TODO().toString()).replaceAfterLast('鞎', "xbfnk", "htniq")
2021-03-12 00:42:41,378 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:42:41,379 [main:53] - replacing ("This is some", String)
2021-03-12 00:42:41,379 [main:50] - replacing "This is some" String
2021-03-12 00:42:41,379 [main:54] - Getting value of type String
2021-03-12 00:42:41,512 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:41,516 [main:58] - GENERATED VALUE OF TYPE String = "sfctr"
2021-03-12 00:42:41,517 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:41,685 [main:67] - randomType = Double
2021-03-12 00:42:41,810 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:42:41,856 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3b542343]
2021-03-12 00:42:41,856 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25cea1e]
2021-03-12 00:42:41,981 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:41,985 [main:78] - Generated call from random type = (0.21990374002908175).toLong().toString(850001165)
2021-03-12 00:42:41,985 [main:61] - replacement of "This is some" of type String is (0.21990374002908175).toLong().toString(850001165)
2021-03-12 00:42:42,135 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:42:42,138 [main:53] - replacing (result.toString()!!, String)
2021-03-12 00:42:42,138 [main:50] - replacing result.toString()!! String
2021-03-12 00:42:42,138 [main:54] - Getting value of type String
2021-03-12 00:42:42,270 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:42,273 [main:58] - GENERATED VALUE OF TYPE String = "ytqcr"
2021-03-12 00:42:42,274 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:42,438 [main:67] - randomType = Byte
2021-03-12 00:42:42,563 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:42:42,609 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@75bd768b]
2021-03-12 00:42:42,610 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19ca6280]
2021-03-12 00:42:42,742 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:42,746 [main:78] - Generated call from random type = (120).toShort().toString(1103766636)
2021-03-12 00:42:42,747 [main:106] - GETTING String from LI
2021-03-12 00:42:42,808 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:42:42,808 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:42:42,952 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:42:42,956 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:42:42,960 [main:117] - GENERATED CALL = (UL().li()).name.takeLastWhile({a: Char -> true})
2021-03-12 00:42:42,960 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:42:42,960 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:42:42,960 [main:117] - GENERATED CALL = (UL().li()).name.decapitalize()
2021-03-12 00:42:42,960 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:42:42,961 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:42:43,095 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:43,099 [main:117] - GENERATED CALL = (UL().li()).name.substringBefore('㙺', testHtmlNoInline())
2021-03-12 00:42:43,099 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:42:43,099 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:42:43,234 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:42:43,246 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:42:43,250 [main:117] - GENERATED CALL = (UL().li()).name.takeWhile({a: Char -> true})
2021-03-12 00:42:43,250 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:42:43,250 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:42:43,377 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:43,509 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:43,513 [main:117] - GENERATED CALL = (UL().li()).name.substringAfterLast('ꒌ', "bephj")
2021-03-12 00:42:43,513 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:42:43,513 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:42:43,664 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:43,800 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:43,940 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:42:43,952 [main:117] - GENERATED CALL = (UL().li()).name.replaceFirst('䊻', '咝', false)
2021-03-12 00:42:43,952 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:42:43,952 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:42:43,952 [main:117] - GENERATED CALL = (UL().li()).name.capitalize()
2021-03-12 00:42:43,952 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:42:43,952 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:42:44,080 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:42:44,087 [main:117] - GENERATED CALL = (UL().li()).name.removeSurrounding("svomf")
2021-03-12 00:42:44,087 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:42:44,087 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:42:44,222 [main:117] - GENERATED CALL = (UL().li()).name.plus(null)
2021-03-12 00:42:44,222 [main:113] - Case = [public final val name: kotlin.String defined in LI[PropertyDescriptorImpl@3597529e], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:42:44,222 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:42:44,366 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:44,370 [main:117] - GENERATED CALL = (UL().li()).name.takeLast(2006604422)
2021-03-12 00:42:44,370 [main:61] - replacement of result.toString()!! of type String is (UL().li()).name.replaceFirst('䊻', '咝', false)
2021-03-12 00:42:44,503 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:42:44,503 [main:66] - Compilation checking started
2021-03-12 00:42:44,871 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return (UL().li()).name.replaceFirst('䊻', '咝', false)
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:42:44,874 [main:53] - replacing ({ +"some text" }, [@kotlin.ExtensionFunctionType] Function1<P, Unit>)
2021-03-12 00:42:44,874 [main:50] - replacing { +"some text" } [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:42:44,874 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:42:44,998 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:42:45,002 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:42:45,161 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:42:45,166 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:42:45,625 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:42:45,629 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:42:45,632 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:42:45,633 [main:95] - GENERATED = check(false, { "rwret"})
2021-03-12 00:42:45,633 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<P, Unit> = { check(false, { "rwret"})}
2021-03-12 00:42:45,633 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:46,321 [main:67] - randomType = Triple<Byte, Long, Double>
2021-03-12 00:42:46,450 [main:302] - generating value of type = Triple<Byte, Long, Double> false depth = 0
2021-03-12 00:42:46,583 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Byte, second: Long, third: Double): Triple<Byte, Long, Double> = TODO()
2021-03-12 00:42:46,588 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Byte, second: Long, third: Double): Triple<Byte, Long, Double> = TODO()
2021-03-12 00:42:46,753 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 00:42:46,757 [main:302] - generating value of type = Long true depth = 3
2021-03-12 00:42:46,761 [main:302] - generating value of type = Double true depth = 3
2021-03-12 00:42:46,765 [main:95] - GENERATED = Triple<Byte, Long, Double>(-64, 3884599911761278665, 0.6478879153885548)
2021-03-12 00:42:46,787 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Int
2021-03-12 00:42:46,834 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:42:46,860 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:42:46,865 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:42:46,918 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:42:46,922 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from B
2021-03-12 00:42:46,997 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:42:47,089 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from LI
2021-03-12 00:42:47,185 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Head
2021-03-12 00:42:47,260 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:42:47,264 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Title
2021-03-12 00:42:47,314 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:42:47,318 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from H1
2021-03-12 00:42:47,379 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from UL
2021-03-12 00:42:47,441 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:42:47,445 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:42:47,449 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:42:47,453 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Int
2021-03-12 00:42:47,457 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:42:47,460 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:42:47,527 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:42:47,528 [main:61] - replacement of { +"some text" } of type [@kotlin.ExtensionFunctionType] Function1<P, Unit> is { check(false, { "rwret"})}
2021-03-12 00:42:47,668 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:42:47,671 [main:53] - replacing ({
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    (B().p()).p({ require(false, { "ieybh"})}).p({ println("vvcyj")})
                    p { check(false, { "rwret"})}

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { contract({ println()})}
                        }
                    }
                }, [@kotlin.ExtensionFunctionType] Function1<Body, Unit>)
2021-03-12 00:42:47,671 [main:50] - replacing {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    (B().p()).p({ require(false, { "ieybh"})}).p({ println("vvcyj")})
                    p { check(false, { "rwret"})}

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { contract({ println()})}
                        }
                    }
                } [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:42:47,671 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:42:47,802 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:42:47,806 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:42:47,813 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Body, Unit> = { println()}
2021-03-12 00:42:47,813 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:48,165 [main:67] - randomType = Function2<Double, BodyTag, HTML>
2021-03-12 00:42:48,169 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:48,203 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:48,207 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:42:48,276 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from H1
2021-03-12 00:42:48,336 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:42:48,397 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Title
2021-03-12 00:42:48,438 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:42:48,483 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:42:48,487 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:42:48,491 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from LI
2021-03-12 00:42:48,553 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:48,557 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:48,561 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from B
2021-03-12 00:42:48,621 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:42:48,625 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Int
2021-03-12 00:42:48,659 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:48,663 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Head
2021-03-12 00:42:48,706 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:48,710 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from UL
2021-03-12 00:42:48,773 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:48,773 [main:61] - replacement of {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    (B().p()).p({ require(false, { "ieybh"})}).p({ println("vvcyj")})
                    p { check(false, { "rwret"})}

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { contract({ println()})}
                        }
                    }
                } of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit> is { println()}
2021-03-12 00:42:48,914 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:42:48,917 [main:53] - replacing ({
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                }, [@kotlin.ExtensionFunctionType] Function1<Head, Unit>)
2021-03-12 00:42:48,918 [main:50] - replacing {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                } [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:42:48,918 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:42:49,051 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Head, Unit> false depth = 0
2021-03-12 00:42:49,055 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:42:49,193 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:42:49,198 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:42:49,488 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:42:49,488 [main:95] - GENERATED = println("spfbo")
2021-03-12 00:42:49,488 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Head, Unit> = { println("spfbo")}
2021-03-12 00:42:49,488 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:49,813 [main:67] - randomType = Array<Byte>
2021-03-12 00:42:49,955 [main:302] - generating value of type = Array<Byte> false depth = 0
2021-03-12 00:42:50,089 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Byte): Array<Byte> = TODO()
2021-03-12 00:42:50,094 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Byte): Array<Byte> = TODO()
2021-03-12 00:42:50,227 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 00:42:50,231 [main:95] - GENERATED = arrayOf<Byte>(127)
2021-03-12 00:42:50,246 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:42:50,268 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Head
2021-03-12 00:42:50,311 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Body
2021-03-12 00:42:50,372 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:42:50,376 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:42:50,380 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:42:50,384 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:42:50,388 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from HTML
2021-03-12 00:42:50,432 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Body
2021-03-12 00:42:50,436 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Title
2021-03-12 00:42:50,478 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from H1
2021-03-12 00:42:50,538 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from UL
2021-03-12 00:42:50,600 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from P
2021-03-12 00:42:50,661 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from HTML
2021-03-12 00:42:50,665 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Array<String>
2021-03-12 00:42:50,680 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:42:50,684 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from LI
2021-03-12 00:42:50,746 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:42:50,750 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from P
2021-03-12 00:42:50,754 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from HTML
2021-03-12 00:42:50,758 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:42:50,762 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from B
2021-03-12 00:42:50,831 [main:61] - replacement of {
                    (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ require(true)}).title({ println()})
                } of type [@kotlin.ExtensionFunctionType] Function1<Head, Unit> is { println("spfbo")}
2021-03-12 00:42:50,975 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:42:50,975 [main:66] - Compilation checking started
2021-03-12 00:42:51,515 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:42:51,519 [main:53] - replacing ({
                    var bodyVar = 1
                    (htmlNoInline({ require(false)})).body({ println()}).h1({ require(true, { "whxqg"})})
                    p { +(UL().li()).name.replaceBefore('ẇ', testHtmlNoInline(), "yepco") }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        (B()).p({ require(false, { "pszxl"})}).b({ require(true)})
                        +"text. For more see the"
                        a(href = (TODO().toString()).replaceAfterLast('鞎', "xbfnk", "htniq")) { +(HTML().body()).name.takeLastWhile({a: Char -> false}) }
                        +"project"
                    }
                    p { println()}

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        (B().ul()).b({ require(true)}).ul({ require(true)})
                    }
                }, [@kotlin.ExtensionFunctionType] Function1<Body, Unit>)
2021-03-12 00:42:51,519 [main:50] - replacing {
                    var bodyVar = 1
                    (htmlNoInline({ require(false)})).body({ println()}).h1({ require(true, { "whxqg"})})
                    p { +(UL().li()).name.replaceBefore('ẇ', testHtmlNoInline(), "yepco") }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        (B()).p({ require(false, { "pszxl"})}).b({ require(true)})
                        +"text. For more see the"
                        a(href = (TODO().toString()).replaceAfterLast('鞎', "xbfnk", "htniq")) { +(HTML().body()).name.takeLastWhile({a: Char -> false}) }
                        +"project"
                    }
                    p { println()}

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        (B().ul()).b({ require(true)}).ul({ require(true)})
                    }
                } [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:42:51,519 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:42:51,656 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:42:51,659 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:42:51,809 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:42:51,814 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:42:52,264 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:42:52,267 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:42:52,271 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:42:52,271 [main:95] - GENERATED = check(true, { "mschp"})
2021-03-12 00:42:52,271 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Body, Unit> = { check(true, { "mschp"})}
2021-03-12 00:42:52,271 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:52,285 [main:67] - randomType = B
2021-03-12 00:42:52,408 [main:302] - generating value of type = B false depth = 0
2021-03-12 00:42:52,411 [main:112] - generating klass B text = class B() : BodyTag((A().href).plus("afzqs"))
2021-03-12 00:42:52,573 [main:194] - Type params = []
2021-03-12 00:42:52,784 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:52,806 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:52,811 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:42:52,893 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:52,897 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:52,901 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Title
2021-03-12 00:42:52,959 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:42:53,047 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:53,051 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from LI
2021-03-12 00:42:53,137 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:53,141 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:42:53,185 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:42:53,189 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from B
2021-03-12 00:42:53,251 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:42:53,256 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from H1
2021-03-12 00:42:53,318 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:42:53,322 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Head
2021-03-12 00:42:53,365 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from UL
2021-03-12 00:42:53,426 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:42:53,426 [main:61] - replacement of {
                    var bodyVar = 1
                    (htmlNoInline({ require(false)})).body({ println()}).h1({ require(true, { "whxqg"})})
                    p { +(UL().li()).name.replaceBefore('ẇ', testHtmlNoInline(), "yepco") }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        (B()).p({ require(false, { "pszxl"})}).b({ require(true)})
                        +"text. For more see the"
                        a(href = (TODO().toString()).replaceAfterLast('鞎', "xbfnk", "htniq")) { +(HTML().body()).name.takeLastWhile({a: Char -> false}) }
                        +"project"
                    }
                    p { println()}

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        (B().ul()).b({ require(true)}).ul({ require(true)})
                    }
                } of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit> is { check(true, { "mschp"})}
2021-03-12 00:42:53,565 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:42:53,567 [main:53] - replacing (body { check(true, { "mschp"})}, Body)
2021-03-12 00:42:53,567 [main:50] - replacing body { check(true, { "mschp"})} Body
2021-03-12 00:42:53,567 [main:54] - Getting value of type Body
2021-03-12 00:42:53,697 [main:302] - generating value of type = Body false depth = 0
2021-03-12 00:42:53,701 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:42:53,830 [main:194] - Type params = []
2021-03-12 00:42:53,976 [main:58] - GENERATED VALUE OF TYPE Body = Body()
2021-03-12 00:42:53,976 [main:61] - GENERATED IS CALL =true
2021-03-12 00:42:54,123 [main:67] - randomType = Float
2021-03-12 00:42:54,266 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:42:54,308 [main:106] - GETTING Body from Body
2021-03-12 00:42:54,379 [main:61] - replacement of body { check(true, { "mschp"})} of type Body is Body()
2021-03-12 00:42:54,511 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:42:54,513 [main:53] - replacing (expected, String)
2021-03-12 00:42:54,513 [main:50] - replacing expected String
2021-03-12 00:42:54,514 [main:54] - Getting value of type String
2021-03-12 00:42:54,648 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:54,651 [main:58] - GENERATED VALUE OF TYPE String = "aboge"
2021-03-12 00:42:54,652 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:54,807 [main:67] - randomType = HashSet<UShort>
2021-03-12 00:42:54,949 [main:302] - generating value of type = HashSet<UShort> false depth = 0
2021-03-12 00:42:55,086 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: UShort): HashSet<UShort> = TODO()
2021-03-12 00:42:55,090 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: UShort): HashSet<UShort> = TODO()
2021-03-12 00:42:55,227 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 00:42:55,231 [main:95] - GENERATED = hashSetOf<UShort>(20713.toUShort())
2021-03-12 00:42:55,400 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@444b4f57]
2021-03-12 00:42:55,400 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60ed5158]
2021-03-12 00:42:55,400 [main:78] - Generated call from random type = (hashSetOf<UShort>(20713.toUShort())).toArray().contentToString()
2021-03-12 00:42:55,401 [main:106] - GETTING String from Body
2021-03-12 00:42:55,483 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:42:55,483 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:42:55,605 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:55,748 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:55,881 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:42:55,885 [main:117] - GENERATED CALL = (HTML().body()).name.replaceFirst('叫', '麪', false)
2021-03-12 00:42:55,885 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:42:55,885 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:42:55,885 [main:117] - GENERATED CALL = (HTML().body()).name.trimEnd()
2021-03-12 00:42:55,886 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:42:55,886 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:42:56,015 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:56,157 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:56,161 [main:117] - GENERATED CALL = (HTML().body()).name.substringAfter('?', "bwgwe")
2021-03-12 00:42:56,161 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Body[PropertyDescriptorImpl@51249017], public open fun remove(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@1834528b]]
2021-03-12 00:42:56,161 [main:149] - GENERATING call of type public open fun remove(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@1834528b]
2021-03-12 00:42:56,162 [main:117] - GENERATED CALL = (HTML().body()).attributes.remove(A().href)
2021-03-12 00:42:56,162 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:42:56,162 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:42:56,287 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:56,434 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:56,438 [main:117] - GENERATED CALL = (HTML().body()).name.replaceBefore('ꓔ', "soexm", href)
2021-03-12 00:42:56,438 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]]
2021-03-12 00:42:56,438 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:42:56,570 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:56,574 [main:117] - GENERATED CALL = (HTML().body()).name.dropLast(1353855751)
2021-03-12 00:42:56,574 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:42:56,574 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:42:56,703 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:42:56,707 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:42:56,711 [main:117] - GENERATED CALL = (HTML().body()).name.takeWhile({a: Char -> true})
2021-03-12 00:42:56,711 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]]
2021-03-12 00:42:56,711 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]
2021-03-12 00:42:56,844 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:56,848 [main:117] - GENERATED CALL = (HTML().body()).name.substring(-890709712)
2021-03-12 00:42:56,848 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:42:56,848 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:42:56,975 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:57,100 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:57,103 [main:117] - GENERATED CALL = (HTML().body()).name.padStart(1556293448, 'ꔉ')
2021-03-12 00:42:57,103 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:42:57,103 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:42:57,242 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:42:57,378 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:57,513 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:42:57,517 [main:117] - GENERATED CALL = (HTML().body()).name.replaceBeforeLast('珅', "jgcof", "kfwmb")
2021-03-12 00:42:57,517 [main:61] - replacement of expected of type String is (HTML().body()).name.padStart(1556293448, 'ꔉ')
2021-03-12 00:42:57,648 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:42:57,648 [main:66] - Compilation checking started
2021-03-12 00:42:57,983 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${(HTML().body()).name.padStart(1556293448, 'ꔉ')} "

    return "OK"
}


2021-03-12 00:42:57,984 [main:53] - replacing (htmlVal, Int)
2021-03-12 00:42:57,984 [main:50] - replacing htmlVal Int
2021-03-12 00:42:57,984 [main:54] - Getting value of type Int
2021-03-12 00:42:58,125 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:42:58,128 [main:58] - GENERATED VALUE OF TYPE Int = 1811321940
2021-03-12 00:42:58,129 [main:61] - GENERATED IS CALL =false
2021-03-12 00:42:58,625 [main:67] - randomType = LinkedHashMap<Tag, Float>
2021-03-12 00:42:58,748 [main:302] - generating value of type = LinkedHashMap<Tag, Float> false depth = 0
2021-03-12 00:42:58,899 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Tag, Float>): LkedHashMap<Tag, Float> = TODO()
2021-03-12 00:42:58,904 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Tag, Float>): LkedHashMap<Tag, Float> = TODO()
2021-03-12 00:42:59,041 [main:302] - generating value of type = Pair<Tag, Float> false depth = 3
2021-03-12 00:42:59,180 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Tag, second: Float): Pair<Tag, Float> = TODO()
2021-03-12 00:42:59,185 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Tag, second: Float): Pair<Tag, Float> = TODO()
2021-03-12 00:42:59,328 [main:302] - generating value of type = Tag false depth = 6
2021-03-12 00:42:59,331 [main:112] - generating klass Tag text = abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}
2021-03-12 00:42:59,624 [main:302] - generating value of type = Float true depth = 6
2021-03-12 00:42:59,628 [main:95] - GENERATED = Pair<Tag, Float>(TODO(), 0.27740228f)
2021-03-12 00:42:59,628 [main:95] - GENERATED = linkedMapOf<Tag, Float>(Pair<Tag, Float>(TODO(), 0.27740228f))
2021-03-12 00:42:59,773 [main:149] - GENERATING call of type public open fun get(key: Tag): kotlin.Float? defined in kotlin.collections.LinkedHashMap[DeserializedSimpleFunctionDescriptor@2b5e7632]
2021-03-12 00:42:59,902 [main:302] - generating value of type = Tag false depth = 0
2021-03-12 00:42:59,906 [main:112] - generating klass Tag text = abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}
2021-03-12 00:43:00,180 [main:302] - generating value of type = TagWithText false depth = 2
2021-03-12 00:43:00,183 [main:112] - generating klass TagWithText text = abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}
2021-03-12 00:43:00,486 [main:302] - generating value of type = HTML false depth = 4
2021-03-12 00:43:00,490 [main:112] - generating klass HTML text = class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}
2021-03-12 00:43:00,619 [main:194] - Type params = []
2021-03-12 00:43:00,762 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@3d0f87fc]
2021-03-12 00:43:00,887 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:43:00,891 [main:78] - Generated call from random type = (linkedMapOf<Tag, Float>(Pair<Tag, Float>(TODO(), 0.27740228f))).get(HTML())?.compareTo(45)!!
2021-03-12 00:43:00,892 [main:106] - GETTING Int from B
2021-03-12 00:43:00,958 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708]]
2021-03-12 00:43:00,959 [main:117] - GENERATED CALL = (B().b()).name.length
2021-03-12 00:43:00,959 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@7fce2fe7], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]]
2021-03-12 00:43:00,959 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@7fce2fe7]
2021-03-12 00:43:01,100 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:43:01,100 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]
2021-03-12 00:43:01,231 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:43:01,235 [main:117] - GENERATED CALL = (B().b()).equals("qamvl").compareTo(false)
2021-03-12 00:43:01,235 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@6c844bea], public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]]
2021-03-12 00:43:01,235 [main:149] - GENERATING call of type public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]
2021-03-12 00:43:01,371 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:43:01,375 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:43:01,651 [main:117] - GENERATED CALL = (B().b()).children.lastIndexOf(TODO())
2021-03-12 00:43:01,651 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@6c844bea], protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@6913a175]]
2021-03-12 00:43:01,651 [main:117] - GENERATED CALL = (B().b()).children.modCount
2021-03-12 00:43:01,651 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@6c844bea], public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]]
2021-03-12 00:43:01,651 [main:149] - GENERATING call of type public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]
2021-03-12 00:43:01,771 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:43:01,775 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:43:02,077 [main:117] - GENERATED CALL = (B().b()).children.indexOf(TODO())
2021-03-12 00:43:02,077 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]]
2021-03-12 00:43:02,077 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]
2021-03-12 00:43:02,208 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:02,347 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:43:02,350 [main:117] - GENERATED CALL = (B().b()).name.compareTo("aidwo", false)
2021-03-12 00:43:02,351 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in B[PropertyDescriptorImpl@2b31fe92], public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@aaaf6a9]]
2021-03-12 00:43:02,351 [main:117] - GENERATED CALL = (B().b()).attributes.size
2021-03-12 00:43:02,351 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@6c844bea], public open val size: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@3c464ee3]]
2021-03-12 00:43:02,351 [main:117] - GENERATED CALL = (B().b()).children.size
2021-03-12 00:43:02,351 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]]
2021-03-12 00:43:02,351 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]
2021-03-12 00:43:02,351 [main:117] - GENERATED CALL = (B().b()).name.toInt()
2021-03-12 00:43:02,351 [main:61] - replacement of htmlVal of type Int is (B().b()).name.toInt()
2021-03-12 00:43:02,474 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:43:02,476 [main:53] - replacing ({ +"mixed" }, [@kotlin.ExtensionFunctionType] Function1<B, Unit>)
2021-03-12 00:43:02,476 [main:50] - replacing { +"mixed" } [@kotlin.ExtensionFunctionType] Function1<B, Unit>
2021-03-12 00:43:02,476 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<B, Unit>
2021-03-12 00:43:02,597 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:43:02,600 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:02,606 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<B, Unit> = { println()}
2021-03-12 00:43:02,607 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:02,614 [main:67] - randomType = Char
2021-03-12 00:43:02,753 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:02,782 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from Body
2021-03-12 00:43:02,860 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from LI
2021-03-12 00:43:02,935 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:43:02,959 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:43:02,964 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:43:02,968 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from P
2021-03-12 00:43:03,041 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from HTML
2021-03-12 00:43:03,114 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from Head
2021-03-12 00:43:03,171 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:43:03,175 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:43:03,179 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from UL
2021-03-12 00:43:03,270 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from Body
2021-03-12 00:43:03,274 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:43:03,278 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from B
2021-03-12 00:43:03,357 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from H1
2021-03-12 00:43:03,417 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from String
2021-03-12 00:43:03,421 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from HTML
2021-03-12 00:43:03,425 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from Title
2021-03-12 00:43:03,467 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<B, Unit> from P
2021-03-12 00:43:03,467 [main:61] - replacement of { +"mixed" } of type [@kotlin.ExtensionFunctionType] Function1<B, Unit> is { println()}
2021-03-12 00:43:03,620 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:43:03,623 [main:53] - replacing (testBodyNoInline(), String)
2021-03-12 00:43:03,623 [main:50] - replacing testBodyNoInline() String
2021-03-12 00:43:03,623 [main:54] - Getting value of type String
2021-03-12 00:43:03,759 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:03,763 [main:58] - GENERATED VALUE OF TYPE String = "ihwvz"
2021-03-12 00:43:03,763 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:03,937 [main:67] - randomType = Long?
2021-03-12 00:43:04,063 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:43:04,116 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67a831b1]
2021-03-12 00:43:04,116 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]
2021-03-12 00:43:04,116 [main:78] - Generated call from random type = (-2130240402675240442)?.toChar().lowercase()
2021-03-12 00:43:04,116 [main:61] - replacement of testBodyNoInline() of type String is (-2130240402675240442)?.toChar().lowercase()
2021-03-12 00:43:04,239 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:43:04,239 [main:66] - Compilation checking started
2021-03-12 00:43:04,738 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:43:04,740 [main:53] - replacing (head {
                    title { check(true)}
                }, Head)
2021-03-12 00:43:04,740 [main:50] - replacing head {
                    title { check(true)}
                } Head
2021-03-12 00:43:04,740 [main:54] - Getting value of type Head
2021-03-12 00:43:04,902 [main:302] - generating value of type = Head false depth = 0
2021-03-12 00:43:04,905 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}
2021-03-12 00:43:05,044 [main:194] - Type params = []
2021-03-12 00:43:05,177 [main:58] - GENERATED VALUE OF TYPE Head = Head()
2021-03-12 00:43:05,177 [main:61] - GENERATED IS CALL =true
2021-03-12 00:43:05,348 [main:67] - randomType = HashSet<UL>
2021-03-12 00:43:05,477 [main:302] - generating value of type = HashSet<UL> false depth = 0
2021-03-12 00:43:05,631 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<UL>): HashSet<UL> = TODO()
2021-03-12 00:43:05,636 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<UL>): HashSet<UL> = TODO()
2021-03-12 00:43:05,949 [main:302] - generating value of type = Collection<UL> false depth = 3
2021-03-12 00:43:06,084 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: UL): Collection<UL> = TODO()
2021-03-12 00:43:06,089 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: UL): Collection<UL> = TODO()
2021-03-12 00:43:06,223 [main:302] - generating value of type = UL false depth = 6
2021-03-12 00:43:06,227 [main:112] - generating klass UL text = class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}
2021-03-12 00:43:06,384 [main:194] - Type params = []
2021-03-12 00:43:06,517 [main:95] - GENERATED = setOfNotNull<UL>(UL())
2021-03-12 00:43:06,517 [main:95] - GENERATED = LinkedHashSet<UL>(setOfNotNull<UL>(UL()))
2021-03-12 00:43:06,650 [main:106] - GETTING Head from Body
2021-03-12 00:43:06,732 [main:106] - GETTING Head from Title
2021-03-12 00:43:06,792 [main:106] - GETTING Head from String
2021-03-12 00:43:06,817 [main:106] - GETTING Head from P
2021-03-12 00:43:06,903 [main:106] - GETTING Head from Head
2021-03-12 00:43:06,957 [main:61] - replacement of head {
                    title { check(true)}
                } of type Head is HTML().head()
2021-03-12 00:43:07,100 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:43:07,102 [main:53] - replacing ("XML encoding with Kotlin", String)
2021-03-12 00:43:07,102 [main:50] - replacing "XML encoding with Kotlin" String
2021-03-12 00:43:07,102 [main:54] - Getting value of type String
2021-03-12 00:43:07,234 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:07,238 [main:58] - GENERATED VALUE OF TYPE String = "inqjo"
2021-03-12 00:43:07,238 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:07,256 [main:67] - randomType = TagWithText
2021-03-12 00:43:07,400 [main:302] - generating value of type = TagWithText false depth = 0
2021-03-12 00:43:07,403 [main:112] - generating klass TagWithText text = abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}
2021-03-12 00:43:07,721 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:43:07,861 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:43:07,865 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:43:07,869 [main:78] - Generated call from random type = (TODO()).name.filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:43:07,869 [main:106] - GETTING String from Body
2021-03-12 00:43:07,944 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:43:07,944 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:43:07,944 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.decapitalize()
2021-03-12 00:43:07,944 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:43:07,944 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:43:08,077 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:08,081 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.padStart(htmlVal, '☑')
2021-03-12 00:43:08,081 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:43:08,081 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:43:08,220 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:08,349 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:08,352 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.replaceAfter('蓖', testBodyHtmlNoInline(), "sfukx")
2021-03-12 00:43:08,352 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]]
2021-03-12 00:43:08,352 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]
2021-03-12 00:43:08,353 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.replaceIndent(testAllInline())
2021-03-12 00:43:08,353 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:43:08,353 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:43:08,479 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:08,483 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.concat("zqrpc")
2021-03-12 00:43:08,483 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:43:08,483 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:43:08,625 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:08,763 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:08,899 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:43:08,903 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.replace('㴭', '', true)
2021-03-12 00:43:08,903 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:43:08,903 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:43:09,036 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:43:09,039 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:43:09,043 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.takeLastWhile({a: Char -> true})
2021-03-12 00:43:09,043 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:43:09,043 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:43:09,043 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.takeLast(htmlVal)
2021-03-12 00:43:09,043 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28], public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23]]
2021-03-12 00:43:09,044 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28]
2021-03-12 00:43:09,171 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:43:09,175 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:09,326 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:09,331 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:09,790 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:09,793 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:43:09,797 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:43:09,797 [main:95] - GENERATED = require(true, { "lqkyt"})
2021-03-12 00:43:09,797 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).ul({ require(true, { "lqkyt"})}).name
2021-03-12 00:43:09,797 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:43:09,798 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:43:09,925 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:43:09,933 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.removeSuffix(StringBuilder())
2021-03-12 00:43:09,933 [main:61] - replacement of "XML encoding with Kotlin" of type String is "inqjo"
2021-03-12 00:43:10,075 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:43:10,077 [main:53] - replacing ("a", String)
2021-03-12 00:43:10,077 [main:50] - replacing "a" String
2021-03-12 00:43:10,077 [main:54] - Getting value of type String
2021-03-12 00:43:10,212 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:10,215 [main:58] - GENERATED VALUE OF TYPE String = "gjrcv"
2021-03-12 00:43:10,215 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:10,223 [main:67] - randomType = Long
2021-03-12 00:43:10,354 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:43:10,401 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@67a831b1]
2021-03-12 00:43:10,401 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]
2021-03-12 00:43:10,401 [main:78] - Generated call from random type = (-5640372209406056864).toChar().uppercase()
2021-03-12 00:43:10,402 [main:106] - GETTING String from Head
2021-03-12 00:43:10,451 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]]
2021-03-12 00:43:10,452 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]
2021-03-12 00:43:10,576 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:43:10,579 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:43:10,583 [main:117] - GENERATED CALL = (HTML().head()).name.dropWhile({a: Char -> false})
2021-03-12 00:43:10,583 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:43:10,583 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:43:10,708 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:43:10,711 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:43:10,715 [main:117] - GENERATED CALL = (HTML().head()).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 00:43:10,715 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:43:10,715 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:43:10,856 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:43:10,860 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:43:10,864 [main:117] - GENERATED CALL = (HTML().head()).name.takeWhile({a: Char -> false})
2021-03-12 00:43:10,864 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:43:10,864 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:43:10,997 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:11,133 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:11,137 [main:117] - GENERATED CALL = (HTML().head()).name.padStart(1512475924, '㰆')
2021-03-12 00:43:11,137 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:43:11,137 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:43:11,137 [main:117] - GENERATED CALL = (HTML().head()).name.capitalize()
2021-03-12 00:43:11,137 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:43:11,137 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:43:11,270 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:11,398 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:11,525 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:43:11,529 [main:117] - GENERATED CALL = (HTML().head()).name.replaceFirst('痆', 'ﴹ', true)
2021-03-12 00:43:11,529 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]]
2021-03-12 00:43:11,529 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]
2021-03-12 00:43:11,671 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:43:11,675 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:43:11,678 [main:117] - GENERATED CALL = (HTML().head()).name.replaceFirstChar({a: Char -> '䘫'})
2021-03-12 00:43:11,679 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:43:11,679 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:43:11,812 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:43:11,949 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-12 00:43:11,954 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-12 00:43:12,094 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:43:12,098 [main:95] - GENERATED = setOfNotNull<Int>(160139200)
2021-03-12 00:43:12,098 [main:117] - GENERATED CALL = (HTML().head()).name.slice(setOfNotNull<Int>(160139200))
2021-03-12 00:43:12,099 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:43:12,099 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:43:12,223 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:12,227 [main:117] - GENERATED CALL = (HTML().head()).name.prependIndent("rsuwr")
2021-03-12 00:43:12,227 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:43:12,227 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:43:12,372 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:12,507 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:12,511 [main:117] - GENERATED CALL = (HTML().head()).name.replaceBefore('?', "wkbxd", TextElement("utmeo").text)
2021-03-12 00:43:12,511 [main:61] - replacement of "a" of type String is (-5640372209406056864).toChar().uppercase()
2021-03-12 00:43:12,643 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:43:12,646 [main:53] - replacing (p {
                        +"Command line arguments were:"
                        (B().ul()).b({ require(true)}).ul({ require(true)})
                    }, P)
2021-03-12 00:43:12,646 [main:50] - replacing p {
                        +"Command line arguments were:"
                        (B().ul()).b({ require(true)}).ul({ require(true)})
                    } P
2021-03-12 00:43:12,646 [main:54] - Getting value of type P
2021-03-12 00:43:12,787 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:43:12,791 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:43:12,915 [main:194] - Type params = []
2021-03-12 00:43:13,039 [main:58] - GENERATED VALUE OF TYPE P = P()
2021-03-12 00:43:13,039 [main:61] - GENERATED IS CALL =true
2021-03-12 00:43:13,046 [main:67] - randomType = String
2021-03-12 00:43:13,190 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:13,220 [main:106] - GETTING P from String
2021-03-12 00:43:13,240 [main:106] - GETTING P from B
2021-03-12 00:43:13,311 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]]
2021-03-12 00:43:13,311 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]
2021-03-12 00:43:13,442 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:13,446 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:13,589 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:13,594 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:14,042 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:43:14,046 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:43:14,049 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:43:14,191 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:14,196 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:14,494 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:43:14,498 [main:95] - GENERATED = require(false)
2021-03-12 00:43:14,498 [main:95] - GENERATED = repeat(1758217715, {a: Int -> require(false)})
2021-03-12 00:43:14,498 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]
2021-03-12 00:43:14,628 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:14,632 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:14,781 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:14,786 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:15,243 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:15,246 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:43:15,250 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:43:15,250 [main:95] - GENERATED = require(true, { "nddzy"})
2021-03-12 00:43:15,251 [main:117] - GENERATED CALL = (B().b()).p({ repeat(1758217715, {a: Int -> require(false)})}).pNoInline({ require(true, { "nddzy"})})
2021-03-12 00:43:15,251 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in B[SimpleFunctionDescriptorImpl@7d275aa2], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]]
2021-03-12 00:43:15,251 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in B[SimpleFunctionDescriptorImpl@7d275aa2]
2021-03-12 00:43:15,382 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:43:15,385 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:15,535 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:15,540 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:15,835 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:43:15,835 [main:95] - GENERATED = println("nsifl")
2021-03-12 00:43:15,840 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]
2021-03-12 00:43:15,976 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:15,980 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:16,116 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:16,121 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:16,601 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:43:16,605 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:43:16,608 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:43:16,742 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:16,747 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:17,059 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:43:17,063 [main:95] - GENERATED = check(true)
2021-03-12 00:43:17,063 [main:95] - GENERATED = repeat(1778058400, {a: Int -> check(true)})
2021-03-12 00:43:17,064 [main:117] - GENERATED CALL = (B().b()).ul({ println("nsifl")}).pNoInline({ repeat(1778058400, {a: Int -> check(true)})})
2021-03-12 00:43:17,064 [main:113] - Case = [public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]]
2021-03-12 00:43:17,064 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]
2021-03-12 00:43:17,197 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:17,201 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:17,339 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:17,343 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:17,641 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:17,645 [main:95] - GENERATED = require(true)
2021-03-12 00:43:17,645 [main:117] - GENERATED CALL = (B().b()).pNoInline({ require(true)})
2021-03-12 00:43:17,645 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in B[SimpleFunctionDescriptorImpl@7d275aa2], public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]]
2021-03-12 00:43:17,646 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in B[SimpleFunctionDescriptorImpl@7d275aa2]
2021-03-12 00:43:17,791 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:43:17,795 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:17,936 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:17,941 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:18,241 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:43:18,241 [main:95] - GENERATED = println("cjdbu")
2021-03-12 00:43:18,242 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]
2021-03-12 00:43:18,367 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:18,371 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:18,537 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:18,542 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:18,839 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:43:18,843 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:43:18,984 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:18,989 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:19,308 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 00:43:19,312 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:43:19,454 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:19,458 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:19,904 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:43:19,907 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-12 00:43:19,911 [main:302] - generating value of type = Any false depth = 13
2021-03-12 00:43:19,911 [main:95] - GENERATED = require(false, { "dhqiw"})
2021-03-12 00:43:19,911 [main:95] - GENERATED = contract({ require(false, { "dhqiw"})})
2021-03-12 00:43:19,911 [main:95] - GENERATED = contract({ contract({ require(false, { "dhqiw"})})})
2021-03-12 00:43:19,912 [main:117] - GENERATED CALL = (B().b()).ul({ println("cjdbu")}).p({ contract({ contract({ require(false, { "dhqiw"})})})})
2021-03-12 00:43:19,912 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in BodyTag[SimpleFunctionDescriptorImpl@6abc0ce3], public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]]
2021-03-12 00:43:19,912 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in BodyTag[SimpleFunctionDescriptorImpl@6abc0ce3]
2021-03-12 00:43:20,053 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:43:20,057 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:20,195 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:20,199 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:20,496 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:20,499 [main:95] - GENERATED = require(false)
2021-03-12 00:43:20,500 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]
2021-03-12 00:43:20,625 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:20,629 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:20,758 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:20,763 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:21,226 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:43:21,230 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:43:21,234 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:43:21,374 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:21,379 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:21,847 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:43:21,851 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:43:21,854 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:43:21,992 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:21,997 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:22,286 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:43:22,289 [main:95] - GENERATED = require(true)
2021-03-12 00:43:22,289 [main:95] - GENERATED = repeat(-1431500546, {a: Int -> require(true)})
2021-03-12 00:43:22,290 [main:95] - GENERATED = repeat(1297253168, {a: Int -> repeat(-1431500546, {a: Int -> require(true)})})
2021-03-12 00:43:22,290 [main:117] - GENERATED CALL = (B().b()).b({ require(false)}).p({ repeat(1297253168, {a: Int -> repeat(-1431500546, {a: Int -> require(true)})})})
2021-03-12 00:43:22,290 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in B[SimpleFunctionDescriptorImpl@6c78cf7c], public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]]
2021-03-12 00:43:22,290 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in B[SimpleFunctionDescriptorImpl@6c78cf7c]
2021-03-12 00:43:22,432 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:43:22,436 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:22,574 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:22,578 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:22,874 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:43:22,874 [main:95] - GENERATED = println("qjpsd")
2021-03-12 00:43:22,874 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]
2021-03-12 00:43:23,000 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:23,004 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:23,171 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:23,176 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:23,627 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:23,630 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:43:23,634 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:43:23,634 [main:95] - GENERATED = require(false, { "qaecj"})
2021-03-12 00:43:23,634 [main:117] - GENERATED CALL = (B().b()).h1({ println("qjpsd")}).p({ require(false, { "qaecj"})})
2021-03-12 00:43:23,634 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in B[SimpleFunctionDescriptorImpl@6c78cf7c], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]]
2021-03-12 00:43:23,634 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in B[SimpleFunctionDescriptorImpl@6c78cf7c]
2021-03-12 00:43:23,758 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:43:23,761 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:23,911 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:23,915 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:24,204 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:24,208 [main:95] - GENERATED = check(false)
2021-03-12 00:43:24,208 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]
2021-03-12 00:43:24,351 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:24,355 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:24,492 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:24,497 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:24,951 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:24,955 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:43:24,959 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:43:24,959 [main:95] - GENERATED = require(true, { "fskvb"})
2021-03-12 00:43:24,959 [main:117] - GENERATED CALL = (B().b()).h1({ check(false)}).pNoInline({ require(true, { "fskvb"})})
2021-03-12 00:43:24,959 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8], public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]]
2021-03-12 00:43:24,959 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]
2021-03-12 00:43:25,090 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:25,094 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:25,233 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:25,237 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:25,695 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:25,699 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:43:25,702 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:43:25,702 [main:95] - GENERATED = check(false, { "kgfvo"})
2021-03-12 00:43:25,703 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]
2021-03-12 00:43:25,832 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:25,836 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:25,843 [main:117] - GENERATED CALL = (B().b()).p({ check(false, { "kgfvo"})}).p({ println()})
2021-03-12 00:43:25,843 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]]
2021-03-12 00:43:25,843 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]
2021-03-12 00:43:25,977 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:25,980 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:26,112 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:26,117 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:26,414 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:26,418 [main:95] - GENERATED = check(true)
2021-03-12 00:43:26,418 [main:117] - GENERATED CALL = (B().b()).p({ check(true)})
2021-03-12 00:43:26,418 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in BodyTag[SimpleFunctionDescriptorImpl@6abc0ce3], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]]
2021-03-12 00:43:26,418 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in BodyTag[SimpleFunctionDescriptorImpl@6abc0ce3]
2021-03-12 00:43:26,549 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:43:26,553 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:26,689 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:26,693 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:26,996 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:43:26,997 [main:95] - GENERATED = print("jeurp")
2021-03-12 00:43:26,997 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]
2021-03-12 00:43:27,152 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:27,155 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:27,295 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:27,299 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:27,755 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:27,759 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:43:27,762 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:43:27,762 [main:95] - GENERATED = require(false, { "fshev"})
2021-03-12 00:43:27,763 [main:117] - GENERATED CALL = (B().b()).b({ print("jeurp")}).pNoInline({ require(false, { "fshev"})})
2021-03-12 00:43:27,763 [main:61] - replacement of p {
                        +"Command line arguments were:"
                        (B().ul()).b({ require(true)}).ul({ require(true)})
                    } of type P is (B().b()).b({ print("jeurp")}).pNoInline({ require(false, { "fshev"})})
2021-03-12 00:43:27,907 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:43:27,911 [main:53] - replacing ("https://jetbrains.com/kotlin", String)
2021-03-12 00:43:27,911 [main:50] - replacing "https://jetbrains.com/kotlin" String
2021-03-12 00:43:27,911 [main:54] - Getting value of type String
2021-03-12 00:43:28,042 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:28,046 [main:58] - GENERATED VALUE OF TYPE String = "jknkr"
2021-03-12 00:43:28,046 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:28,857 [main:67] - randomType = MutableMap<UInt?, Function1<UByte, Head>>
2021-03-12 00:43:28,858 [main:106] - GETTING String from P
2021-03-12 00:43:28,925 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:43:28,925 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:43:28,925 [main:117] - GENERATED CALL = (B().pNoInline()).name.trimEnd()
2021-03-12 00:43:28,925 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]]
2021-03-12 00:43:28,925 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:43:28,925 [main:117] - GENERATED CALL = (B().pNoInline()).name.dropLast(htmlVal)
2021-03-12 00:43:28,925 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:43:28,925 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:43:29,063 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:43:29,070 [main:117] - GENERATED CALL = (B().pNoInline()).name.removeSurrounding(StringBuilder())
2021-03-12 00:43:29,070 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681]]
2021-03-12 00:43:29,070 [main:117] - GENERATED CALL = (B().pNoInline()).name
2021-03-12 00:43:29,070 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:43:29,070 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:43:29,195 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:29,199 [main:117] - GENERATED CALL = (B().pNoInline()).name.replaceBeforeLast('훮', A().href, testAllInline())
2021-03-12 00:43:29,199 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:43:29,199 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:43:29,332 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:29,336 [main:117] - GENERATED CALL = (B().pNoInline()).name.takeLast(715807122)
2021-03-12 00:43:29,336 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:43:29,336 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:43:29,336 [main:117] - GENERATED CALL = (B().pNoInline()).name.decapitalize()
2021-03-12 00:43:29,336 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:43:29,336 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:43:29,336 [main:117] - GENERATED CALL = (B().pNoInline()).name.trimStart()
2021-03-12 00:43:29,336 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:43:29,336 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:43:29,336 [main:117] - GENERATED CALL = (B().pNoInline()).name.toUpperCase()
2021-03-12 00:43:29,336 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:43:29,336 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:43:29,479 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:29,483 [main:117] - GENERATED CALL = (B().pNoInline()).name.replaceBefore('?', TextElement("utmeo").text, testBodyHtmlNoInline())
2021-03-12 00:43:29,483 [main:61] - replacement of "https://jetbrains.com/kotlin" of type String is (B().pNoInline()).name.decapitalize()
2021-03-12 00:43:29,619 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:43:29,619 [main:66] - Compilation checking started
2021-03-12 00:43:29,989 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = (B().pNoInline()).name.decapitalize()) { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:43:29,990 [main:53] - replacing (initTag((Triple<Element, Long?, Head>(TODO(), -5659456947200053900, Head()))?.third.title({ require(false)}), { check(true)}), Title)
2021-03-12 00:43:29,991 [main:50] - replacing initTag((Triple<Element, Long?, Head>(TODO(), -5659456947200053900, Head()))?.third.title({ require(false)}), { check(true)}) Title
2021-03-12 00:43:29,991 [main:54] - Getting value of type Title
2021-03-12 00:43:30,118 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:43:30,121 [main:112] - generating klass Title text = class Title() : TagWithText((Body())?.name.trim())
2021-03-12 00:43:30,267 [main:194] - Type params = []
2021-03-12 00:43:30,398 [main:58] - GENERATED VALUE OF TYPE Title = Title()
2021-03-12 00:43:30,399 [main:61] - GENERATED IS CALL =true
2021-03-12 00:43:31,026 [main:67] - randomType = Function2<ULong, UByte, UInt>
2021-03-12 00:43:31,027 [main:106] - GETTING Title from UL
2021-03-12 00:43:31,105 [main:106] - GETTING Title from P
2021-03-12 00:43:31,178 [main:106] - GETTING Title from LI
2021-03-12 00:43:31,251 [main:106] - GETTING Title from HTML
2021-03-12 00:43:31,299 [main:113] - Case = [public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@50e2f4cc], public final inline fun title(init: Title.() -> kotlin.Unit): Title defined in Head[SimpleFunctionDescriptorImpl@78b65e8c]]
2021-03-12 00:43:31,299 [main:149] - GENERATING call of type public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@50e2f4cc]
2021-03-12 00:43:31,437 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Head, Unit> false depth = 0
2021-03-12 00:43:31,441 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:31,574 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:31,579 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:32,036 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:43:32,039 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:43:32,043 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:43:32,181 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:32,185 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:32,654 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:43:32,658 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:43:32,662 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:43:32,802 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:32,807 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:33,104 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 12
2021-03-12 00:43:33,108 [main:302] - generating value of type = Unit false depth = 13
2021-03-12 00:43:33,239 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:33,243 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:33,720 [main:302] - generating value of type = Int true depth = 16
2021-03-12 00:43:33,720 [main:385] - Cant generate call of fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:33,720 [main:95] - GENERATED = contract({ })
2021-03-12 00:43:33,720 [main:95] - GENERATED = repeat(-958315141, {a: Int -> contract({ })})
2021-03-12 00:43:33,720 [main:95] - GENERATED = repeat(1153828275, {a: Int -> repeat(-958315141, {a: Int -> contract({ })})})
2021-03-12 00:43:33,721 [main:149] - GENERATING call of type public final inline fun title(init: Title.() -> kotlin.Unit): Title defined in Head[SimpleFunctionDescriptorImpl@78b65e8c]
2021-03-12 00:43:33,863 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Title, Unit> false depth = 0
2021-03-12 00:43:33,867 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:34,022 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:34,028 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:34,333 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:43:34,333 [main:95] - GENERATED = println("pqquq")
2021-03-12 00:43:34,334 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ repeat(1153828275, {a: Int -> repeat(-958315141, {a: Int -> contract({ })})})}).title({ println("pqquq")})
2021-03-12 00:43:34,334 [main:61] - replacement of initTag((Triple<Element, Long?, Head>(TODO(), -5659456947200053900, Head()))?.third.title({ require(false)}), { check(true)}) of type Title is Title()
2021-03-12 00:43:34,463 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:43:34,465 [main:53] - replacing ("3", String)
2021-03-12 00:43:34,465 [main:50] - replacing "3" String
2021-03-12 00:43:34,465 [main:54] - Getting value of type String
2021-03-12 00:43:34,597 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:34,601 [main:58] - GENERATED VALUE OF TYPE String = "pfeze"
2021-03-12 00:43:34,601 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:34,770 [main:67] - randomType = LinkedHashSet<Title>
2021-03-12 00:43:34,894 [main:302] - generating value of type = LinkedHashSet<Title> false depth = 0
2021-03-12 00:43:35,023 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Title> = TODO()
2021-03-12 00:43:35,027 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Title> = TODO()
2021-03-12 00:43:35,179 [main:95] - GENERATED = linkedSetOf<Title>()
2021-03-12 00:43:35,334 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:43:35,471 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:35,475 [main:78] - Generated call from random type = (linkedSetOf<Title>()).size.toString(-377710344)
2021-03-12 00:43:35,475 [main:106] - GETTING String from String
2021-03-12 00:43:35,502 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d9dd01]]
2021-03-12 00:43:35,502 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:43:35,635 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:35,762 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:35,766 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39d9dd01]
2021-03-12 00:43:35,888 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:43:36,031 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:43:36,035 [main:117] - GENERATED CALL = (TextElement("utmeo").text).subSequence(306831232, 826527462).commonPrefixWith(StringBuilder(), false)
2021-03-12 00:43:36,035 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]]
2021-03-12 00:43:36,035 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:43:36,170 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:36,174 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]
2021-03-12 00:43:36,174 [main:117] - GENERATED CALL = (TextElement("utmeo").text).get(827359469).lowercase()
2021-03-12 00:43:36,174 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:43:36,174 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:43:36,307 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:43:36,308 [main:117] - GENERATED CALL = (TextElement("utmeo").text).plus("qcxhg")
2021-03-12 00:43:36,308 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:43:36,308 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:43:36,443 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:43:36,447 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:43:36,451 [main:117] - GENERATED CALL = (TextElement("utmeo").text).takeLastWhile({a: Char -> true})
2021-03-12 00:43:36,451 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:43:36,451 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:43:36,575 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:43:36,579 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:43:36,582 [main:117] - GENERATED CALL = (TextElement("utmeo").text).dropLastWhile({a: Char -> true})
2021-03-12 00:43:36,582 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:43:36,582 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:43:36,583 [main:117] - GENERATED CALL = (TextElement("utmeo").text).decapitalize()
2021-03-12 00:43:36,583 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]]
2021-03-12 00:43:36,583 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]
2021-03-12 00:43:36,705 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:36,708 [main:117] - GENERATED CALL = (TextElement("utmeo").text).take(-379080172)
2021-03-12 00:43:36,708 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:43:36,708 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:43:36,846 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:36,984 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:37,120 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:43:37,124 [main:117] - GENERATED CALL = (TextElement("utmeo").text).replaceFirst('⨒', '', true)
2021-03-12 00:43:37,124 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:43:37,124 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:43:37,124 [main:117] - GENERATED CALL = (TextElement("utmeo").text).concat(testAllInline())
2021-03-12 00:43:37,125 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:43:37,125 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:43:37,260 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:37,264 [main:117] - GENERATED CALL = (TextElement("utmeo").text).length.toString(860512843)
2021-03-12 00:43:37,264 [main:61] - replacement of "3" of type String is (TextElement("utmeo").text).plus("qcxhg")
2021-03-12 00:43:37,390 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:43:37,393 [main:53] - replacing ({
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            }, [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>)
2021-03-12 00:43:37,393 [main:50] - replacing {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            } [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:43:37,393 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<HTML, Unit>
2021-03-12 00:43:37,517 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> false depth = 0
2021-03-12 00:43:37,521 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:37,664 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:37,669 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:37,956 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:43:37,957 [main:95] - GENERATED = println("uxizm")
2021-03-12 00:43:37,957 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> = { println("uxizm")}
2021-03-12 00:43:37,957 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:38,126 [main:67] - randomType = Sequence<B>
2021-03-12 00:43:38,131 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from P
2021-03-12 00:43:38,219 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:43:38,249 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from B
2021-03-12 00:43:38,329 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from LI
2021-03-12 00:43:38,392 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from HTML
2021-03-12 00:43:38,435 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from UL
2021-03-12 00:43:38,497 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:43:38,501 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from HTML
2021-03-12 00:43:38,505 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:43:38,509 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Head
2021-03-12 00:43:38,552 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from H1
2021-03-12 00:43:38,614 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Body
2021-03-12 00:43:38,676 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:43:38,680 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:43:38,684 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Title
2021-03-12 00:43:38,726 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from HTML
2021-03-12 00:43:38,730 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:43:38,734 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Body
2021-03-12 00:43:38,738 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:43:38,742 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from String
2021-03-12 00:43:38,745 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from Array<String>
2021-03-12 00:43:38,760 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> from P
2021-03-12 00:43:38,760 [main:61] - replacement of {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }
            } of type [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> is { println("uxizm")}
2021-03-12 00:43:38,898 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:43:38,898 [main:66] - Compilation checking started
2021-03-12 00:43:39,398 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:43:39,401 [main:53] - replacing ({
                        +(UL().li()).name.filterNot({a: Char -> true})
                        b { require(false)}
                        +(TODO().toString()).length.toString(bodyVar)
                        a(href = "https://jetbrains.com/kotlin") { println("cmyqf")}
                        +"project"
                    }, [@kotlin.ExtensionFunctionType] Function1<P, Unit>)
2021-03-12 00:43:39,401 [main:50] - replacing {
                        +(UL().li()).name.filterNot({a: Char -> true})
                        b { require(false)}
                        +(TODO().toString()).length.toString(bodyVar)
                        a(href = "https://jetbrains.com/kotlin") { println("cmyqf")}
                        +"project"
                    } [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:43:39,401 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:43:39,546 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:39,549 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:39,555 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<P, Unit> = { println()}
2021-03-12 00:43:39,555 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:39,560 [main:67] - randomType = Long
2021-03-12 00:43:39,699 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:43:39,760 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:43:39,835 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:43:39,869 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:43:39,874 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:43:39,949 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:43:39,954 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:43:39,958 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:43:39,962 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Head
2021-03-12 00:43:40,011 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from B
2021-03-12 00:43:40,099 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Int
2021-03-12 00:43:40,147 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:43:40,239 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:43:40,243 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Title
2021-03-12 00:43:40,303 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:43:40,307 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:43:40,311 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:43:40,315 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from H1
2021-03-12 00:43:40,386 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:43:40,390 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from LI
2021-03-12 00:43:40,453 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from UL
2021-03-12 00:43:40,510 [main:61] - replacement of {
                        +(UL().li()).name.filterNot({a: Char -> true})
                        b { require(false)}
                        +(TODO().toString()).length.toString(bodyVar)
                        a(href = "https://jetbrains.com/kotlin") { println("cmyqf")}
                        +"project"
                    } of type [@kotlin.ExtensionFunctionType] Function1<P, Unit> is { println()}
2021-03-12 00:43:40,639 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:43:40,642 [main:53] - replacing (init, [@kotlin.ExtensionFunctionType] Function1<Body, Unit>)
2021-03-12 00:43:40,642 [main:50] - replacing init [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:43:40,642 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:43:40,764 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:43:40,766 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:40,894 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:40,897 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:41,170 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:43:41,172 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:43:41,294 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:41,297 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:41,720 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:43:41,723 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:43:41,725 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:43:41,726 [main:95] - GENERATED = check(true, { "fgfcs"})
2021-03-12 00:43:41,726 [main:95] - GENERATED = contract({ check(true, { "fgfcs"})})
2021-03-12 00:43:41,726 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Body, Unit> = { contract({ check(true, { "fgfcs"})})}
2021-03-12 00:43:41,726 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:41,731 [main:67] - randomType = String
2021-03-12 00:43:41,859 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:41,889 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:43:41,919 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:43:42,011 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:43:42,015 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from UL
2021-03-12 00:43:42,105 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from H1
2021-03-12 00:43:42,165 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from LI
2021-03-12 00:43:42,228 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:43:42,289 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:43:42,333 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:43:42,337 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:43:42,337 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:43:42,355 [main:61] - replacement of init of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit> is init
2021-03-12 00:43:42,483 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:43:42,485 [main:53] - replacing ("$(B().b()).name.toInt()", String)
2021-03-12 00:43:42,485 [main:50] - replacing "$(B().b()).name.toInt()" String
2021-03-12 00:43:42,485 [main:54] - Getting value of type String
2021-03-12 00:43:42,608 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:42,611 [main:58] - GENERATED VALUE OF TYPE String = "vylec"
2021-03-12 00:43:42,611 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:42,616 [main:67] - randomType = Int
2021-03-12 00:43:42,738 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:42,786 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@51d25f3]
2021-03-12 00:43:42,912 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:43:42,915 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25cea1e]
2021-03-12 00:43:43,033 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:43,036 [main:78] - Generated call from random type = (1238159365).div(-1584878120826922996).toString(1612051485)
2021-03-12 00:43:43,036 [main:106] - GETTING String from HTML
2021-03-12 00:43:43,104 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:43:43,104 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:43:43,238 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:43:43,240 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:43:43,243 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.takeWhile({a: Char -> true})
2021-03-12 00:43:43,243 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:43:43,243 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:43:43,365 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:43:43,491 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:43:43,495 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:43:43,767 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:43:43,770 [main:95] - GENERATED = StringBuilder(876628259)
2021-03-12 00:43:43,770 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.removeSuffix(StringBuilder(876628259))
2021-03-12 00:43:43,770 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]]
2021-03-12 00:43:43,770 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:43:43,887 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:43,890 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.substringBeforeLast('?', testAllInline())
2021-03-12 00:43:43,891 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]]
2021-03-12 00:43:43,891 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]
2021-03-12 00:43:44,025 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:44,156 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:44,159 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.removeRange(-113505107, 1327766514)
2021-03-12 00:43:44,159 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]]
2021-03-12 00:43:44,159 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]
2021-03-12 00:43:44,283 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:44,286 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.take(-1348620723)
2021-03-12 00:43:44,286 [main:113] - Case = [public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d], public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21]]
2021-03-12 00:43:44,286 [main:149] - GENERATING call of type public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]
2021-03-12 00:43:44,422 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:43:44,426 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:44,564 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:44,568 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:44,847 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:43:44,851 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:43:44,984 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:44,988 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:45,265 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 00:43:45,268 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:43:45,389 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:45,393 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:45,683 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:43:45,686 [main:95] - GENERATED = check(true)
2021-03-12 00:43:45,686 [main:95] - GENERATED = contract({ check(true)})
2021-03-12 00:43:45,686 [main:95] - GENERATED = contract({ contract({ check(true)})})
2021-03-12 00:43:45,687 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).body({ contract({ contract({ check(true)})})}).name
2021-03-12 00:43:45,687 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa]]
2021-03-12 00:43:45,687 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name
2021-03-12 00:43:45,687 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:43:45,687 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:43:45,808 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:45,934 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:46,066 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:43:46,190 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:43:46,193 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:43:46,502 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:43:46,505 [main:95] - GENERATED = StringBuilder(134347990)
2021-03-12 00:43:46,505 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.replaceRange(499695574, 1087081009, StringBuilder(134347990))
2021-03-12 00:43:46,505 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c366a13]]
2021-03-12 00:43:46,505 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c366a13]
2021-03-12 00:43:46,628 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:46,631 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.replaceIndentByMargin(testAllInline(), "pavrv")
2021-03-12 00:43:46,631 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:43:46,631 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:43:46,632 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.decapitalize()
2021-03-12 00:43:46,632 [main:61] - replacement of "$(B().b()).name.toInt()" of type String is (htmlNoInline({ require(false)})).name.decapitalize()
2021-03-12 00:43:46,753 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:43:46,755 [main:53] - replacing (stringMapOf<String>(Pair<String, String>("cvzbr", "pdmyy"))["href"], String?)
2021-03-12 00:43:46,755 [main:50] - replacing stringMapOf<String>(Pair<String, String>("cvzbr", "pdmyy"))["href"] String?
2021-03-12 00:43:46,755 [main:54] - Getting value of type String?
2021-03-12 00:43:46,876 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:46,887 [main:58] - GENERATED VALUE OF TYPE String? = "ujibn"
2021-03-12 00:43:46,888 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:46,898 [main:67] - randomType = Head
2021-03-12 00:43:47,013 [main:302] - generating value of type = Head false depth = 0
2021-03-12 00:43:47,015 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}
2021-03-12 00:43:47,132 [main:194] - Type params = []
2021-03-12 00:43:47,293 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]
2021-03-12 00:43:47,423 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:43:47,426 [main:78] - Generated call from random type = (Head()).name.substring(97221434)
2021-03-12 00:43:47,426 [main:61] - replacement of stringMapOf<String>(Pair<String, String>("cvzbr", "pdmyy"))["href"] of type String? is (Head()).name.substring(97221434)
2021-03-12 00:43:47,554 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:43:47,556 [main:53] - replacing ("project", String)
2021-03-12 00:43:47,556 [main:50] - replacing "project" String
2021-03-12 00:43:47,556 [main:54] - Getting value of type String
2021-03-12 00:43:47,677 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:47,679 [main:58] - GENERATED VALUE OF TYPE String = "wjppj"
2021-03-12 00:43:47,679 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:47,958 [main:67] - randomType = Set<UByte>
2021-03-12 00:43:47,959 [main:106] - GETTING String from Title
2021-03-12 00:43:48,012 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:43:48,012 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:43:48,127 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:48,261 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:48,384 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:43:48,387 [main:117] - GENERATED CALL = (Head().title()).name.replaceFirst('땒', '跎', false)
2021-03-12 00:43:48,387 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:43:48,387 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:43:48,509 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:48,512 [main:117] - GENERATED CALL = (Head().title()).name.substringAfter('湢', TODO().toString())
2021-03-12 00:43:48,512 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:43:48,512 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:43:48,643 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:43:48,760 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:48,763 [main:117] - GENERATED CALL = (Head().title()).name.replaceBeforeLast('㤰', "mjxjh", testHtmlNoInline())
2021-03-12 00:43:48,763 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:43:48,763 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:43:48,879 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:43:48,882 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:43:48,885 [main:117] - GENERATED CALL = (Head().title()).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 00:43:48,885 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:43:48,885 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:43:48,885 [main:117] - GENERATED CALL = (Head().title()).name.reversed()
2021-03-12 00:43:48,885 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:43:48,885 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:43:48,885 [main:117] - GENERATED CALL = (Head().title()).name.lowercase()
2021-03-12 00:43:48,885 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Title[PropertyDescriptorImpl@50074a86], public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]]
2021-03-12 00:43:48,885 [main:149] - GENERATING call of type public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]
2021-03-12 00:43:49,004 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:43:49,007 [main:117] - GENERATED CALL = (Head().title()).attributes.put("sacyg", testAllInline())
2021-03-12 00:43:49,007 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:43:49,007 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:43:49,007 [main:117] - GENERATED CALL = (Head().title()).name.toLowerCase()
2021-03-12 00:43:49,007 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Title[PropertyDescriptorImpl@50074a86], public open fun remove(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@1834528b]]
2021-03-12 00:43:49,007 [main:149] - GENERATING call of type public open fun remove(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@1834528b]
2021-03-12 00:43:49,007 [main:117] - GENERATED CALL = (Head().title()).attributes.remove(testHtmlNoInline())
2021-03-12 00:43:49,007 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:43:49,007 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:43:49,007 [main:117] - GENERATED CALL = (Head().title()).name.decapitalize()
2021-03-12 00:43:49,007 [main:61] - replacement of "project" of type String is (Head().title()).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 00:43:49,138 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:43:49,141 [main:53] - replacing (b { +"mixed" }, B)
2021-03-12 00:43:49,141 [main:50] - replacing b { +"mixed" } B
2021-03-12 00:43:49,141 [main:54] - Getting value of type B
2021-03-12 00:43:49,262 [main:302] - generating value of type = B false depth = 0
2021-03-12 00:43:49,264 [main:112] - generating klass B text = class B() : BodyTag((A().href).plus("afzqs"))
2021-03-12 00:43:49,384 [main:194] - Type params = []
2021-03-12 00:43:49,506 [main:58] - GENERATED VALUE OF TYPE B = B()
2021-03-12 00:43:49,515 [main:61] - GENERATED IS CALL =true
2021-03-12 00:43:49,777 [main:67] - randomType = UShort?
2021-03-12 00:43:49,912 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:43:49,949 [main:106] - GETTING B from String
2021-03-12 00:43:49,968 [main:106] - GETTING B from Body
2021-03-12 00:43:50,035 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28], public final inline fun b(init: B.() -> kotlin.Unit): B defined in UL[SimpleFunctionDescriptorImpl@4f322f9e]]
2021-03-12 00:43:50,036 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28]
2021-03-12 00:43:50,158 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:43:50,161 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:50,289 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:50,292 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:50,559 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:50,562 [main:95] - GENERATED = check(true)
2021-03-12 00:43:50,562 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in UL[SimpleFunctionDescriptorImpl@4f322f9e]
2021-03-12 00:43:50,676 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:43:50,678 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:50,814 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:50,817 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:51,230 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:51,232 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:43:51,235 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:43:51,235 [main:95] - GENERATED = check(false, { "hjhhz"})
2021-03-12 00:43:51,236 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).ul({ check(true)}).b({ check(false, { "hjhhz"})})
2021-03-12 00:43:51,236 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b]]
2021-03-12 00:43:51,236 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b]
2021-03-12 00:43:51,351 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:43:51,353 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:51,475 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:51,479 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:51,760 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:43:51,762 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:43:51,889 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:51,893 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:52,170 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:43:52,173 [main:95] - GENERATED = require(false)
2021-03-12 00:43:52,173 [main:95] - GENERATED = contract({ require(false)})
2021-03-12 00:43:52,173 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).b({ contract({ require(false)})})
2021-03-12 00:43:52,173 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b], public final inline fun b(init: B.() -> kotlin.Unit): B defined in B[SimpleFunctionDescriptorImpl@463aee87]]
2021-03-12 00:43:52,173 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b]
2021-03-12 00:43:52,292 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:43:52,294 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:52,433 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:52,437 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:43:52,852 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:43:52,854 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:43:52,857 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:43:52,857 [main:95] - GENERATED = require(true, { "xgsyw"})
2021-03-12 00:43:52,857 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in B[SimpleFunctionDescriptorImpl@463aee87]
2021-03-12 00:43:52,974 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:43:52,977 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:53,099 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:53,103 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:53,385 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:43:53,388 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:43:53,513 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:53,517 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:53,784 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 00:43:53,787 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:43:53,907 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:53,910 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:54,210 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 12
2021-03-12 00:43:54,213 [main:302] - generating value of type = Unit false depth = 13
2021-03-12 00:43:54,341 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:54,344 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:54,618 [main:302] - generating value of type = Boolean true depth = 16
2021-03-12 00:43:54,618 [main:385] - Cant generate call of fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:54,618 [main:95] - GENERATED = contract({ })
2021-03-12 00:43:54,618 [main:95] - GENERATED = contract({ contract({ })})
2021-03-12 00:43:54,618 [main:95] - GENERATED = contract({ contract({ contract({ })})})
2021-03-12 00:43:54,619 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).b({ require(true, { "xgsyw"})}).b({ contract({ contract({ contract({ })})})})
2021-03-12 00:43:54,619 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b], public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]]
2021-03-12 00:43:54,619 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]
2021-03-12 00:43:54,735 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:43:54,737 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:54,878 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:54,881 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:55,295 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:43:55,298 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:43:55,301 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:43:55,422 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:55,425 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:55,709 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:43:55,711 [main:95] - GENERATED = require(true)
2021-03-12 00:43:55,712 [main:95] - GENERATED = repeat(502402663, {a: Int -> require(true)})
2021-03-12 00:43:55,712 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:43:55,833 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:43:55,835 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:55,962 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:55,966 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:56,370 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:43:56,373 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:43:56,376 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:43:56,519 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:56,523 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:43:56,787 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:43:56,790 [main:95] - GENERATED = check(false)
2021-03-12 00:43:56,791 [main:95] - GENERATED = repeat(376468082, {a: Int -> check(false)})
2021-03-12 00:43:56,791 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).p({ repeat(502402663, {a: Int -> require(true)})}).b({ repeat(376468082, {a: Int -> check(false)})})
2021-03-12 00:43:56,791 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903], public final inline fun b(init: B.() -> kotlin.Unit): B defined in H1[SimpleFunctionDescriptorImpl@1a4a6d68]]
2021-03-12 00:43:56,791 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]
2021-03-12 00:43:56,921 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:43:56,923 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:57,043 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:57,047 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:57,495 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:43:57,497 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:43:57,500 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:43:57,626 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:57,629 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:43:58,028 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:43:58,031 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:43:58,033 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:43:58,186 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:58,190 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:58,458 [main:302] - generating value of type = Any false depth = 12
2021-03-12 00:43:58,458 [main:95] - GENERATED = println("xzguc")
2021-03-12 00:43:58,458 [main:95] - GENERATED = repeat(-1895009386, {a: Int -> println("xzguc")})
2021-03-12 00:43:58,458 [main:95] - GENERATED = repeat(515888308, {a: Int -> repeat(-1895009386, {a: Int -> println("xzguc")})})
2021-03-12 00:43:58,458 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in H1[SimpleFunctionDescriptorImpl@1a4a6d68]
2021-03-12 00:43:58,601 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:43:58,604 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:58,727 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:58,730 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:59,013 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:43:59,013 [main:95] - GENERATED = println("uwkri")
2021-03-12 00:43:59,014 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).h1({ repeat(515888308, {a: Int -> repeat(-1895009386, {a: Int -> println("xzguc")})})}).b({ println("uwkri")})
2021-03-12 00:43:59,014 [main:61] - replacement of b { +"mixed" } of type B is (HTML().bodyNoInline()).ul({ check(true)}).b({ check(false, { "hjhhz"})})
2021-03-12 00:43:59,136 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:43:59,138 [main:53] - replacing ({
                            for (arg in args)
                                LI()
                        }, [@kotlin.ExtensionFunctionType] Function1<UL, Unit>)
2021-03-12 00:43:59,138 [main:50] - replacing {
                            for (arg in args)
                                LI()
                        } [@kotlin.ExtensionFunctionType] Function1<UL, Unit>
2021-03-12 00:43:59,138 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<UL, Unit>
2021-03-12 00:43:59,260 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:43:59,262 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:43:59,417 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:59,421 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:43:59,682 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:43:59,683 [main:95] - GENERATED = print("dviot")
2021-03-12 00:43:59,683 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<UL, Unit> = { print("dviot")}
2021-03-12 00:43:59,683 [main:61] - GENERATED IS CALL =false
2021-03-12 00:43:59,834 [main:67] - randomType = Short
2021-03-12 00:43:59,955 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:44:00,002 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:44:00,027 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:44:00,031 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:44:00,035 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from HTML
2021-03-12 00:44:00,092 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Body
2021-03-12 00:44:00,164 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from H1
2021-03-12 00:44:00,250 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from P
2021-03-12 00:44:00,340 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from P
2021-03-12 00:44:00,344 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:44:00,349 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Head
2021-03-12 00:44:00,409 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:44:00,414 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:44:00,418 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Body
2021-03-12 00:44:00,422 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from B
2021-03-12 00:44:00,509 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Title
2021-03-12 00:44:00,550 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from UL
2021-03-12 00:44:00,613 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from HTML
2021-03-12 00:44:00,617 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:44:00,621 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from LI
2021-03-12 00:44:00,680 [main:61] - replacement of {
                            for (arg in args)
                                LI()
                        } of type [@kotlin.ExtensionFunctionType] Function1<UL, Unit> is { print("dviot")}
2021-03-12 00:44:00,812 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:44:00,814 [main:53] - replacing ("3", String)
2021-03-12 00:44:00,814 [main:50] - replacing "3" String
2021-03-12 00:44:00,814 [main:54] - Getting value of type String
2021-03-12 00:44:00,934 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:00,937 [main:58] - GENERATED VALUE OF TYPE String = "wxena"
2021-03-12 00:44:00,937 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:01,084 [main:67] - randomType = Set<Char>
2021-03-12 00:44:01,085 [main:106] - GETTING String from Title
2021-03-12 00:44:01,134 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:44:01,134 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:44:01,260 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:01,262 [main:117] - GENERATED CALL = (Head().title()).name.substringBefore('', testBodyNoInline())
2021-03-12 00:44:01,262 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]]
2021-03-12 00:44:01,262 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]
2021-03-12 00:44:01,378 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:01,381 [main:117] - GENERATED CALL = (Head().title()).name.drop(168944076)
2021-03-12 00:44:01,381 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:44:01,381 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:44:01,498 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:44:01,503 [main:117] - GENERATED CALL = (Head().title()).name.removePrefix("bmsfy")
2021-03-12 00:44:01,503 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:44:01,503 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:44:01,503 [main:117] - GENERATED CALL = (Head().title()).name.trimIndent()
2021-03-12 00:44:01,503 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:44:01,503 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:44:01,637 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:44:01,639 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:01,642 [main:117] - GENERATED CALL = (Head().title()).name.takeLastWhile({a: Char -> false})
2021-03-12 00:44:01,642 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]]
2021-03-12 00:44:01,642 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]
2021-03-12 00:44:01,764 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:44:01,766 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:44:01,769 [main:117] - GENERATED CALL = (Head().title()).name.replaceFirstChar({a: Char -> '?'})
2021-03-12 00:44:01,769 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:44:01,769 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:44:01,770 [main:117] - GENERATED CALL = (Head().title()).name.trim()
2021-03-12 00:44:01,770 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:44:01,770 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:44:01,891 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:02,024 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:02,057 [main:117] - GENERATED CALL = (Head().title()).name.substringAfter('䮝', "glbvm")
2021-03-12 00:44:02,057 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:44:02,057 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:44:02,058 [main:117] - GENERATED CALL = (Head().title()).name.capitalize()
2021-03-12 00:44:02,058 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:44:02,058 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:44:02,176 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:44:02,179 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:02,182 [main:117] - GENERATED CALL = (Head().title()).name.filterNot({a: Char -> true})
2021-03-12 00:44:02,182 [main:61] - replacement of "3" of type String is (Head().title()).name.filterNot({a: Char -> true})
2021-03-12 00:44:02,296 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:02,296 [main:66] - Compilation checking started
2021-03-12 00:44:02,592 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", (Head().title()).name.filterNot({a: Char -> true}))
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:44:02,594 [main:53] - replacing ({
                    title { +"XML encoding with Kotlin" }
                }, [@kotlin.ExtensionFunctionType] Function1<Head, Unit>)
2021-03-12 00:44:02,595 [main:50] - replacing {
                    title { +"XML encoding with Kotlin" }
                } [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:44:02,595 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:44:02,727 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Head, Unit> false depth = 0
2021-03-12 00:44:02,730 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:02,857 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:44:02,860 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:44:03,137 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:44:03,138 [main:95] - GENERATED = print("medux")
2021-03-12 00:44:03,138 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Head, Unit> = { print("medux")}
2021-03-12 00:44:03,138 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:03,143 [main:67] - randomType = Boolean
2021-03-12 00:44:03,259 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:44:03,277 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from P
2021-03-12 00:44:03,360 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Int
2021-03-12 00:44:03,409 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Body
2021-03-12 00:44:03,471 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:44:03,491 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from LI
2021-03-12 00:44:03,553 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:44:03,557 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Body
2021-03-12 00:44:03,561 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from B
2021-03-12 00:44:03,622 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:44:03,626 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from P
2021-03-12 00:44:03,630 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Head
2021-03-12 00:44:03,673 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Title
2021-03-12 00:44:03,714 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from HTML
2021-03-12 00:44:03,757 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:44:03,761 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:44:03,765 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from HTML
2021-03-12 00:44:03,769 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:44:03,773 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from UL
2021-03-12 00:44:03,836 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from H1
2021-03-12 00:44:03,898 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:44:03,898 [main:61] - replacement of {
                    title { +"XML encoding with Kotlin" }
                } of type [@kotlin.ExtensionFunctionType] Function1<Head, Unit> is { print("medux")}
2021-03-12 00:44:04,030 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:44:04,033 [main:53] - replacing (initTag(Head(), init), Head)
2021-03-12 00:44:04,033 [main:50] - replacing initTag(Head(), init) Head
2021-03-12 00:44:04,033 [main:54] - Getting value of type Head
2021-03-12 00:44:04,156 [main:302] - generating value of type = Head false depth = 0
2021-03-12 00:44:04,159 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}
2021-03-12 00:44:04,280 [main:194] - Type params = []
2021-03-12 00:44:04,402 [main:58] - GENERATED VALUE OF TYPE Head = Head()
2021-03-12 00:44:04,402 [main:61] - GENERATED IS CALL =true
2021-03-12 00:44:05,116 [main:67] - randomType = MutableMap<HashSet<UShort>, Short>?
2021-03-12 00:44:05,117 [main:106] - GETTING Head from Body
2021-03-12 00:44:05,187 [main:106] - GETTING Head from Head
2021-03-12 00:44:05,233 [main:61] - replacement of initTag(Head(), init) of type Head is HTML().head()
2021-03-12 00:44:05,362 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:05,362 [main:66] - Compilation checking started
2021-03-12 00:44:05,687 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = HTML().head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:44:05,689 [main:53] - replacing (title { check(true)}, Title)
2021-03-12 00:44:05,689 [main:50] - replacing title { check(true)} Title
2021-03-12 00:44:05,689 [main:54] - Getting value of type Title
2021-03-12 00:44:05,823 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:44:05,826 [main:112] - generating klass Title text = class Title() : TagWithText((Body())?.name.trim())
2021-03-12 00:44:05,947 [main:194] - Type params = []
2021-03-12 00:44:06,070 [main:58] - GENERATED VALUE OF TYPE Title = Title()
2021-03-12 00:44:06,070 [main:61] - GENERATED IS CALL =true
2021-03-12 00:44:06,075 [main:67] - randomType = Char
2021-03-12 00:44:06,198 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:06,252 [main:106] - GETTING Title from String
2021-03-12 00:44:06,290 [main:106] - GETTING Title from UL
2021-03-12 00:44:06,378 [main:106] - GETTING Title from String
2021-03-12 00:44:06,379 [main:106] - GETTING Title from String
2021-03-12 00:44:06,380 [main:106] - GETTING Title from HTML
2021-03-12 00:44:06,435 [main:113] - Case = [public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@50e2f4cc], public final inline fun title(init: Title.() -> kotlin.Unit): Title defined in Head[SimpleFunctionDescriptorImpl@78b65e8c]]
2021-03-12 00:44:06,435 [main:149] - GENERATING call of type public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@50e2f4cc]
2021-03-12 00:44:06,549 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Head, Unit> false depth = 0
2021-03-12 00:44:06,552 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:06,558 [main:149] - GENERATING call of type public final inline fun title(init: Title.() -> kotlin.Unit): Title defined in Head[SimpleFunctionDescriptorImpl@78b65e8c]
2021-03-12 00:44:06,691 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Title, Unit> false depth = 0
2021-03-12 00:44:06,693 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:06,820 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:06,824 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:07,234 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:44:07,237 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:44:07,241 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:44:07,361 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:44:07,365 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:44:07,794 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:44:07,797 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:44:07,799 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:44:07,799 [main:95] - GENERATED = check(false, { "xdcbd"})
2021-03-12 00:44:07,799 [main:95] - GENERATED = repeat(-1677441028, {a: Int -> check(false, { "xdcbd"})})
2021-03-12 00:44:07,800 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).head({ println()}).title({ repeat(-1677441028, {a: Int -> check(false, { "xdcbd"})})})
2021-03-12 00:44:07,800 [main:61] - replacement of title { check(true)} of type Title is Title()
2021-03-12 00:44:07,933 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:44:07,937 [main:53] - replacing ({ +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) }, [@kotlin.ExtensionFunctionType] Function1<A, Unit>)
2021-03-12 00:44:07,937 [main:50] - replacing { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) } [@kotlin.ExtensionFunctionType] Function1<A, Unit>
2021-03-12 00:44:07,937 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<A, Unit>
2021-03-12 00:44:08,054 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<A, Unit> false depth = 0
2021-03-12 00:44:08,057 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:08,178 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:08,181 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:08,473 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:44:08,476 [main:95] - GENERATED = require(true)
2021-03-12 00:44:08,476 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<A, Unit> = { require(true)}
2021-03-12 00:44:08,476 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:08,486 [main:67] - randomType = Tag
2021-03-12 00:44:08,607 [main:302] - generating value of type = Tag false depth = 0
2021-03-12 00:44:08,610 [main:112] - generating klass Tag text = abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}
2021-03-12 00:44:08,899 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:44:08,927 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from Title
2021-03-12 00:44:08,990 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from B
2021-03-12 00:44:09,070 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from Head
2021-03-12 00:44:09,113 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from P
2021-03-12 00:44:09,173 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from H1
2021-03-12 00:44:09,234 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from HTML
2021-03-12 00:44:09,280 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:44:09,284 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from P
2021-03-12 00:44:09,288 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from Body
2021-03-12 00:44:09,350 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from Int
2021-03-12 00:44:09,384 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:44:09,388 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from LI
2021-03-12 00:44:09,450 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:44:09,454 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from UL
2021-03-12 00:44:09,517 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from HTML
2021-03-12 00:44:09,521 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:44:09,525 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:44:09,529 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from Body
2021-03-12 00:44:09,533 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from Int
2021-03-12 00:44:09,537 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<A, Unit> from String
2021-03-12 00:44:09,537 [main:61] - replacement of { +(A().href).subSequence(-2145002176, htmlVal).commonSuffixWith("xldho", true) } of type [@kotlin.ExtensionFunctionType] Function1<A, Unit> is { require(true)}
2021-03-12 00:44:09,669 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:44:09,670 [main:53] - replacing (stringMapOf<String>(Pair<String, String>("cvzbr", "pdmyy"))["href"], String?)
2021-03-12 00:44:09,670 [main:50] - replacing stringMapOf<String>(Pair<String, String>("cvzbr", "pdmyy"))["href"] String?
2021-03-12 00:44:09,670 [main:54] - Getting value of type String?
2021-03-12 00:44:09,793 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:09,796 [main:58] - GENERATED VALUE OF TYPE String? = "oszsk"
2021-03-12 00:44:09,796 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:09,945 [main:67] - randomType = HTML?
2021-03-12 00:44:10,073 [main:302] - generating value of type = HTML false depth = 0
2021-03-12 00:44:10,075 [main:112] - generating klass HTML text = class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}
2021-03-12 00:44:10,190 [main:194] - Type params = []
2021-03-12 00:44:10,377 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:44:10,513 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:10,516 [main:78] - Generated call from random type = (HTML())?.name.substringBeforeLast('ᅈ', testHtmlNoInline())
2021-03-12 00:44:10,516 [main:106] - GETTING String? from String
2021-03-12 00:44:10,538 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:44:10,538 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:44:10,538 [main:117] - GENERATED CALL = (testHtmlNoInline())?.prependIndent(testBodyHtmlNoInline())
2021-03-12 00:44:10,538 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:44:10,538 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:44:10,538 [main:117] - GENERATED CALL = (testHtmlNoInline())?.reversed()
2021-03-12 00:44:10,538 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]]
2021-03-12 00:44:10,538 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]
2021-03-12 00:44:10,659 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:10,662 [main:117] - GENERATED CALL = (testHtmlNoInline())?.drop(-995874847)
2021-03-12 00:44:10,662 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]]
2021-03-12 00:44:10,662 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]
2021-03-12 00:44:10,662 [main:117] - GENERATED CALL = (testHtmlNoInline())?.replaceIndent(A().href)
2021-03-12 00:44:10,662 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]]
2021-03-12 00:44:10,662 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]
2021-03-12 00:44:10,784 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:44:10,786 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:10,789 [main:117] - GENERATED CALL = (testHtmlNoInline())?.dropWhile({a: Char -> false})
2021-03-12 00:44:10,789 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:44:10,789 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:44:10,789 [main:117] - GENERATED CALL = (testHtmlNoInline())?.toLowerCase()
2021-03-12 00:44:10,789 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74a0bf2d]]
2021-03-12 00:44:10,789 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:44:10,919 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:11,036 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:11,039 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74a0bf2d]
2021-03-12 00:44:11,153 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:11,269 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:11,272 [main:117] - GENERATED CALL = (testHtmlNoInline())?.subSequence(-2064833202, -1761300250).substring(1891391051, 486141046)
2021-03-12 00:44:11,272 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]]
2021-03-12 00:44:11,272 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]
2021-03-12 00:44:11,404 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:44:11,407 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:44:11,410 [main:117] - GENERATED CALL = (testHtmlNoInline())?.replaceFirstChar({a: Char -> '녍'})
2021-03-12 00:44:11,410 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]]
2021-03-12 00:44:11,410 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:44:11,530 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:11,533 [main:117] - GENERATED CALL = (testHtmlNoInline())?.dropLast(1487047836)
2021-03-12 00:44:11,533 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]]
2021-03-12 00:44:11,533 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]
2021-03-12 00:44:11,654 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:11,777 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:11,779 [main:117] - GENERATED CALL = (testHtmlNoInline())?.removeRange(-1363314986, -462381712)
2021-03-12 00:44:11,779 [main:61] - replacement of stringMapOf<String>(Pair<String, String>("cvzbr", "pdmyy"))["href"] of type String? is (testHtmlNoInline())?.dropLast(1487047836)
2021-03-12 00:44:11,906 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:44:11,908 [main:53] - replacing ("$(B().b()).name.toInt()", String)
2021-03-12 00:44:11,908 [main:50] - replacing "$(B().b()).name.toInt()" String
2021-03-12 00:44:11,908 [main:54] - Getting value of type String
2021-03-12 00:44:12,023 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:12,025 [main:58] - GENERATED VALUE OF TYPE String = "tkgjb"
2021-03-12 00:44:12,025 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:12,036 [main:67] - randomType = HTML
2021-03-12 00:44:12,150 [main:302] - generating value of type = HTML false depth = 0
2021-03-12 00:44:12,152 [main:112] - generating klass HTML text = class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}
2021-03-12 00:44:12,288 [main:194] - Type params = []
2021-03-12 00:44:12,460 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:44:12,583 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:44:12,725 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 00:44:12,729 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 00:44:12,995 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Int>, Unit> false depth = 3
2021-03-12 00:44:12,997 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 00:44:13,144 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:13,148 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:13,417 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 00:44:13,420 [main:95] - GENERATED = require(false)
2021-03-12 00:44:13,420 [main:95] - GENERATED = buildSet<Int>({ require(false)})
2021-03-12 00:44:13,421 [main:78] - Generated call from random type = (HTML()).name.slice(buildSet<Int>({ require(false)}))
2021-03-12 00:44:13,421 [main:106] - GETTING String from String
2021-03-12 00:44:13,448 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:44:13,448 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:44:13,581 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:13,703 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:13,823 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:44:13,829 [main:117] - GENERATED CALL = (TODO().toString()).replaceRange(-235952024, -305088233, "huowk")
2021-03-12 00:44:13,829 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:44:13,829 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:44:13,830 [main:117] - GENERATED CALL = (TODO().toString()).reversed()
2021-03-12 00:44:13,830 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:44:13,830 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:44:13,973 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:44:13,975 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:13,978 [main:117] - GENERATED CALL = (TODO().toString()).filterNot({a: Char -> false})
2021-03-12 00:44:13,978 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]]
2021-03-12 00:44:13,978 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]
2021-03-12 00:44:14,104 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:14,107 [main:117] - GENERATED CALL = (TODO().toString()).drop(1516531524)
2021-03-12 00:44:14,107 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:44:14,107 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:44:14,228 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:14,230 [main:117] - GENERATED CALL = (TODO().toString()).substringAfter('', TextElement("utmeo").text)
2021-03-12 00:44:14,231 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]]
2021-03-12 00:44:14,231 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:44:14,352 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:14,355 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]
2021-03-12 00:44:14,355 [main:117] - GENERATED CALL = (TODO().toString()).get(2113976710).uppercase()
2021-03-12 00:44:14,355 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]]
2021-03-12 00:44:14,355 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]
2021-03-12 00:44:14,478 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:14,481 [main:117] - GENERATED CALL = (TODO().toString()).repeat(63135590)
2021-03-12 00:44:14,481 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:44:14,481 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:44:14,596 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:14,713 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:14,716 [main:117] - GENERATED CALL = (TODO().toString()).replaceAfter('ﺔ', "fuqdb", testBodyNoInline())
2021-03-12 00:44:14,716 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]]
2021-03-12 00:44:14,716 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]
2021-03-12 00:44:14,716 [main:117] - GENERATED CALL = (TODO().toString()).uppercase()
2021-03-12 00:44:14,716 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:44:14,716 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:44:14,849 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:44:14,855 [main:117] - GENERATED CALL = (TODO().toString()).removeSurrounding("cvutx")
2021-03-12 00:44:14,855 [main:61] - replacement of "$(B().b()).name.toInt()" of type String is (TODO().toString()).drop(1516531524)
2021-03-12 00:44:14,977 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:14,979 [main:53] - replacing (arg, String)
2021-03-12 00:44:14,979 [main:50] - replacing arg String
2021-03-12 00:44:14,979 [main:54] - Getting value of type String
2021-03-12 00:44:15,103 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:15,106 [main:58] - GENERATED VALUE OF TYPE String = "vyovt"
2021-03-12 00:44:15,106 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:15,262 [main:67] - randomType = LinkedHashSet<Char>
2021-03-12 00:44:15,377 [main:302] - generating value of type = LinkedHashSet<Char> false depth = 0
2021-03-12 00:44:15,501 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Char> = TODO()
2021-03-12 00:44:15,504 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Char> = TODO()
2021-03-12 00:44:15,624 [main:95] - GENERATED = linkedSetOf<Char>()
2021-03-12 00:44:15,736 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@730cd523]
2021-03-12 00:44:15,736 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60ed5158]
2021-03-12 00:44:15,736 [main:78] - Generated call from random type = (linkedSetOf<Char>()).toArray().contentToString()
2021-03-12 00:44:15,736 [main:61] - replacement of arg of type String is (linkedSetOf<Char>()).toArray().contentToString()
2021-03-12 00:44:15,869 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:15,871 [main:53] - replacing ("this format can be used as an alternative markup to XML", String)
2021-03-12 00:44:15,871 [main:50] - replacing "this format can be used as an alternative markup to XML" String
2021-03-12 00:44:15,871 [main:54] - Getting value of type String
2021-03-12 00:44:15,992 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:15,994 [main:58] - GENERATED VALUE OF TYPE String = "nuksu"
2021-03-12 00:44:15,995 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:16,432 [main:67] - randomType = Map<UInt, Tag>
2021-03-12 00:44:16,433 [main:106] - GETTING String from P
2021-03-12 00:44:16,521 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:44:16,521 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:44:16,634 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:16,636 [main:117] - GENERATED CALL = (B().p()).name.prependIndent("xwlix")
2021-03-12 00:44:16,636 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:44:16,636 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:44:16,637 [main:117] - GENERATED CALL = (B().p()).name.capitalize()
2021-03-12 00:44:16,637 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]]
2021-03-12 00:44:16,637 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dc6c7d1]
2021-03-12 00:44:16,769 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:16,772 [main:117] - GENERATED CALL = (B().p()).name.substringBefore('샞', testBodyHtmlNoInline())
2021-03-12 00:44:16,772 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:44:16,772 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:44:16,897 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:44:16,899 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:16,902 [main:117] - GENERATED CALL = (B().p()).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 00:44:16,902 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f], public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681]]
2021-03-12 00:44:16,902 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f]
2021-03-12 00:44:17,024 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:17,027 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:17,153 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:44:17,157 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:44:17,423 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:44:17,423 [main:95] - GENERATED = print("wvfth")
2021-03-12 00:44:17,423 [main:117] - GENERATED CALL = (B().p()).p({ print("wvfth")}).name
2021-03-12 00:44:17,424 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:44:17,424 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:44:17,424 [main:117] - GENERATED CALL = (B().p()).name.trimStart()
2021-03-12 00:44:17,424 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:44:17,424 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:44:17,537 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:17,673 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:17,797 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:44:17,800 [main:117] - GENERATED CALL = (B().p()).name.replace('対', 'ᨗ', false)
2021-03-12 00:44:17,800 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:44:17,800 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:44:17,800 [main:117] - GENERATED CALL = (B().p()).name.reversed()
2021-03-12 00:44:17,800 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:44:17,800 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:44:17,800 [main:117] - GENERATED CALL = (B().p()).name.toUpperCase()
2021-03-12 00:44:17,800 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:44:17,800 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:44:17,923 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:18,047 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:18,050 [main:117] - GENERATED CALL = (B().p()).name.substringAfterLast('댭', "gejra")
2021-03-12 00:44:18,050 [main:61] - replacement of "this format can be used as an alternative markup to XML" of type String is "nuksu"
2021-03-12 00:44:18,173 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:44:18,175 [main:53] - replacing (p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { contract({ println()})}
                        }
                    }, P)
2021-03-12 00:44:18,175 [main:50] - replacing p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { contract({ println()})}
                        }
                    } P
2021-03-12 00:44:18,175 [main:54] - Getting value of type P
2021-03-12 00:44:18,292 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:44:18,294 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:44:18,415 [main:194] - Type params = []
2021-03-12 00:44:18,552 [main:58] - GENERATED VALUE OF TYPE P = P()
2021-03-12 00:44:18,553 [main:61] - GENERATED IS CALL =true
2021-03-12 00:44:18,691 [main:67] - randomType = Float
2021-03-12 00:44:18,814 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:44:18,851 [main:106] - GETTING P from H1
2021-03-12 00:44:18,919 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in BodyTag[SimpleFunctionDescriptorImpl@73f02f25], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]]
2021-03-12 00:44:18,920 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in BodyTag[SimpleFunctionDescriptorImpl@73f02f25]
2021-03-12 00:44:19,043 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:44:19,046 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:19,168 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:19,172 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:19,455 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:44:19,458 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:44:19,463 [main:95] - GENERATED = contract({ println()})
2021-03-12 00:44:19,464 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]
2021-03-12 00:44:19,587 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:19,590 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:19,715 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:19,719 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:19,995 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:44:19,998 [main:95] - GENERATED = require(false)
2021-03-12 00:44:19,998 [main:117] - GENERATED CALL = (B().h1()).h1({ contract({ println()})}).pNoInline({ require(false)})
2021-03-12 00:44:19,999 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in BodyTag[SimpleFunctionDescriptorImpl@73f02f25], public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]]
2021-03-12 00:44:19,999 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in BodyTag[SimpleFunctionDescriptorImpl@73f02f25]
2021-03-12 00:44:20,125 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:44:20,128 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:20,271 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:44:20,275 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:44:20,688 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:44:20,691 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:44:20,693 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:44:20,694 [main:95] - GENERATED = check(false, { "cjpzx"})
2021-03-12 00:44:20,694 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]
2021-03-12 00:44:20,809 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:20,812 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:20,963 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:20,966 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:21,256 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:44:21,259 [main:95] - GENERATED = require(false)
2021-03-12 00:44:21,259 [main:117] - GENERATED CALL = (B().h1()).h1({ check(false, { "cjpzx"})}).p({ require(false)})
2021-03-12 00:44:21,259 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in H1[SimpleFunctionDescriptorImpl@1a4a6d68], public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]]
2021-03-12 00:44:21,259 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in H1[SimpleFunctionDescriptorImpl@1a4a6d68]
2021-03-12 00:44:21,380 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:44:21,382 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:21,508 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:44:21,512 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:44:21,913 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:44:21,916 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:44:21,918 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:44:21,918 [main:95] - GENERATED = require(true, { "eycqy"})
2021-03-12 00:44:21,919 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]
2021-03-12 00:44:22,052 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:22,055 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:22,183 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:22,187 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:22,463 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:44:22,466 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:44:22,472 [main:95] - GENERATED = contract({ println()})
2021-03-12 00:44:22,472 [main:117] - GENERATED CALL = (B().h1()).b({ require(true, { "eycqy"})}).p({ contract({ println()})})
2021-03-12 00:44:22,472 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]]
2021-03-12 00:44:22,472 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]
2021-03-12 00:44:22,587 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:22,590 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:22,710 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:44:22,714 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:44:23,132 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:44:23,134 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:44:23,137 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:44:23,137 [main:95] - GENERATED = check(true, { "cmpyf"})
2021-03-12 00:44:23,137 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]
2021-03-12 00:44:23,257 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:23,260 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:23,394 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:23,397 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:23,778 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:44:23,781 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:44:23,783 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:44:23,928 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:23,932 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:24,347 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:44:24,351 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:44:24,355 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:44:24,486 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:24,489 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:24,739 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:44:24,742 [main:95] - GENERATED = check(true)
2021-03-12 00:44:24,742 [main:95] - GENERATED = repeat(-740543864, {a: Int -> check(true)})
2021-03-12 00:44:24,742 [main:95] - GENERATED = repeat(-999586315, {a: Int -> repeat(-740543864, {a: Int -> check(true)})})
2021-03-12 00:44:24,742 [main:117] - GENERATED CALL = (B().h1()).p({ check(true, { "cmpyf"})}).pNoInline({ repeat(-999586315, {a: Int -> repeat(-740543864, {a: Int -> check(true)})})})
2021-03-12 00:44:24,743 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec], public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]]
2021-03-12 00:44:24,743 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]
2021-03-12 00:44:24,877 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:24,880 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:25,007 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:25,011 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:25,284 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:44:25,287 [main:95] - GENERATED = check(true)
2021-03-12 00:44:25,287 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]
2021-03-12 00:44:25,402 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:25,405 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:25,525 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:25,529 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:25,816 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:44:25,819 [main:95] - GENERATED = check(false)
2021-03-12 00:44:25,820 [main:117] - GENERATED CALL = (B().h1()).p({ check(true)}).p({ check(false)})
2021-03-12 00:44:25,820 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]]
2021-03-12 00:44:25,820 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]
2021-03-12 00:44:25,942 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:25,945 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:26,073 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:26,077 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:26,345 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:44:26,347 [main:95] - GENERATED = require(false)
2021-03-12 00:44:26,348 [main:117] - GENERATED CALL = (B().h1()).p({ require(false)})
2021-03-12 00:44:26,348 [main:113] - Case = [public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]]
2021-03-12 00:44:26,348 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]
2021-03-12 00:44:26,464 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:26,467 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:26,586 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:26,589 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:26,873 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:44:26,876 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:44:27,006 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:27,010 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:27,414 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:44:27,416 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:44:27,419 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:44:27,425 [main:95] - GENERATED = repeat(1184666973, {a: Int -> println()})
2021-03-12 00:44:27,425 [main:95] - GENERATED = contract({ repeat(1184666973, {a: Int -> println()})})
2021-03-12 00:44:27,426 [main:117] - GENERATED CALL = (B().h1()).pNoInline({ contract({ repeat(1184666973, {a: Int -> println()})})})
2021-03-12 00:44:27,426 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in H1[SimpleFunctionDescriptorImpl@5a58b88c], public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]]
2021-03-12 00:44:27,426 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in H1[SimpleFunctionDescriptorImpl@5a58b88c]
2021-03-12 00:44:27,569 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:44:27,572 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:27,578 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]
2021-03-12 00:44:27,704 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:27,707 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:27,834 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:44:27,837 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:44:28,107 [main:95] - GENERATED = print(null)
2021-03-12 00:44:28,107 [main:117] - GENERATED CALL = (B().h1()).ul({ println()}).p({ print(null)})
2021-03-12 00:44:28,107 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in H1[SimpleFunctionDescriptorImpl@1a4a6d68], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]]
2021-03-12 00:44:28,107 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in H1[SimpleFunctionDescriptorImpl@1a4a6d68]
2021-03-12 00:44:28,223 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:44:28,226 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:28,232 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]
2021-03-12 00:44:28,346 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:28,348 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:28,490 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:28,494 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:44:28,780 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:44:28,783 [main:95] - GENERATED = require(true)
2021-03-12 00:44:28,783 [main:117] - GENERATED CALL = (B().h1()).b({ println()}).pNoInline({ require(true)})
2021-03-12 00:44:28,783 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in H1[SimpleFunctionDescriptorImpl@5a58b88c], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]]
2021-03-12 00:44:28,783 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in H1[SimpleFunctionDescriptorImpl@5a58b88c]
2021-03-12 00:44:28,914 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:44:28,917 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:29,058 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:29,062 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:29,348 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:44:29,351 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:44:29,357 [main:95] - GENERATED = contract({ println()})
2021-03-12 00:44:29,357 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]
2021-03-12 00:44:29,478 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:44:29,480 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:29,606 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:44:29,610 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:44:30,019 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:44:30,022 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:44:30,025 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:44:30,025 [main:95] - GENERATED = check(true, { "foldk"})
2021-03-12 00:44:30,025 [main:117] - GENERATED CALL = (B().h1()).ul({ contract({ println()})}).pNoInline({ check(true, { "foldk"})})
2021-03-12 00:44:30,025 [main:61] - replacement of p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { contract({ println()})}
                        }
                    } of type P is (B().h1()).pNoInline({ contract({ repeat(1184666973, {a: Int -> println()})})})
2021-03-12 00:44:30,140 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:30,142 [main:53] - replacing ("$bodyVar", String)
2021-03-12 00:44:30,142 [main:50] - replacing "$bodyVar" String
2021-03-12 00:44:30,142 [main:54] - Getting value of type String
2021-03-12 00:44:30,276 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:30,279 [main:58] - GENERATED VALUE OF TYPE String = "gyqbp"
2021-03-12 00:44:30,279 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:30,427 [main:67] - randomType = TextElement?
2021-03-12 00:44:30,549 [main:302] - generating value of type = TextElement false depth = 0
2021-03-12 00:44:30,552 [main:112] - generating klass TextElement text = class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}
2021-03-12 00:44:30,673 [main:194] - Type params = []
2021-03-12 00:44:30,798 [main:302] - generating value of type = String true depth = 2
2021-03-12 00:44:30,813 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]
2021-03-12 00:44:30,930 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:44:30,933 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:30,935 [main:78] - Generated call from random type = (TextElement("zwads"))?.text.dropWhile({a: Char -> true})
2021-03-12 00:44:30,936 [main:106] - GETTING String from HTML
2021-03-12 00:44:31,003 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:44:31,003 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:44:31,003 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.trim()
2021-03-12 00:44:31,003 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:44:31,003 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:44:31,004 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.reversed()
2021-03-12 00:44:31,004 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:44:31,004 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:44:31,139 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:44:31,142 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:31,144 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.dropLastWhile({a: Char -> false})
2021-03-12 00:44:31,145 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:44:31,145 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:44:31,265 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:44:31,392 [main:43] - GENERATING CALL OF fun <T> listOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 00:44:31,396 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 00:44:31,523 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:44:31,526 [main:95] - GENERATED = listOf<Int>(-564761376)
2021-03-12 00:44:31,527 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.slice(listOf<Int>(-564761376))
2021-03-12 00:44:31,527 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]]
2021-03-12 00:44:31,527 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]
2021-03-12 00:44:31,651 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:31,768 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:31,771 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.removeRange(-1556129012, -817753421)
2021-03-12 00:44:31,771 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:44:31,771 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:44:31,889 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:44:31,891 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:31,894 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.takeLastWhile({a: Char -> true})
2021-03-12 00:44:31,894 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:44:31,894 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:44:32,028 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:44:32,034 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.removePrefix("sgztn")
2021-03-12 00:44:32,034 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]]
2021-03-12 00:44:32,034 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]
2021-03-12 00:44:32,164 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:44:32,167 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:44:32,169 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceFirstChar({a: Char -> '닧'})
2021-03-12 00:44:32,170 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:44:32,170 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:44:32,170 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.trimIndent()
2021-03-12 00:44:32,170 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:44:32,170 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:44:32,170 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.trimEnd()
2021-03-12 00:44:32,170 [main:61] - replacement of "$bodyVar" of type String is (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceFirstChar({a: Char -> '닧'})
2021-03-12 00:44:32,291 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:32,294 [main:53] - replacing ("html", String)
2021-03-12 00:44:32,294 [main:50] - replacing "html" String
2021-03-12 00:44:32,294 [main:54] - Getting value of type String
2021-03-12 00:44:32,416 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:32,418 [main:58] - GENERATED VALUE OF TYPE String = "jbjsk"
2021-03-12 00:44:32,418 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:32,429 [main:67] - randomType = HTML
2021-03-12 00:44:32,553 [main:302] - generating value of type = HTML false depth = 0
2021-03-12 00:44:32,556 [main:112] - generating klass HTML text = class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}
2021-03-12 00:44:32,670 [main:194] - Type params = []
2021-03-12 00:44:32,833 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:44:32,969 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:33,094 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:33,219 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:44:33,347 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:44:33,350 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:44:33,618 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:44:33,625 [main:95] - GENERATED = StringBuilder("txkut")
2021-03-12 00:44:33,625 [main:78] - Generated call from random type = (HTML()).name.replaceRange(1322836472, 328120856, StringBuilder("txkut"))
2021-03-12 00:44:33,625 [main:106] - GETTING String from String
2021-03-12 00:44:33,654 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:44:33,654 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:44:33,768 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:33,905 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:34,029 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:44:34,032 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).replace('窱', '⹶', false)
2021-03-12 00:44:34,032 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]]
2021-03-12 00:44:34,032 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:44:34,155 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:34,279 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:34,282 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]
2021-03-12 00:44:34,413 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:44:34,534 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:44:34,538 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:44:34,971 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:44:34,974 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 00:44:35,102 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-12 00:44:35,106 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-12 00:44:35,373 [main:302] - generating value of type = Int true depth = 6
2021-03-12 00:44:35,376 [main:95] - GENERATED = HashSet<RegexOption>(-2142180178)
2021-03-12 00:44:35,376 [main:95] - GENERATED = Regex("kbjjs", HashSet<RegexOption>(-2142180178))
2021-03-12 00:44:35,376 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).subSequence(-1663837428, 1601113661).replaceFirst(Regex("kbjjs", HashSet<RegexOption>(-2142180178)), testBodyHtmlNoInline())
2021-03-12 00:44:35,376 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:44:35,376 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:44:35,492 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:44:35,495 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:35,497 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).takeLastWhile({a: Char -> true})
2021-03-12 00:44:35,498 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:44:35,498 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:44:35,612 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:35,615 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).takeLast(1706023139)
2021-03-12 00:44:35,615 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]]
2021-03-12 00:44:35,615 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]
2021-03-12 00:44:35,749 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:35,875 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:35,878 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).padEnd(-1282048427, '厖')
2021-03-12 00:44:35,878 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:44:35,878 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:44:36,000 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:44:36,003 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:36,005 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).filterIndexed({a: Int, b: Char -> true})
2021-03-12 00:44:36,005 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:44:36,006 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:44:36,006 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).toLowerCase()
2021-03-12 00:44:36,006 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:44:36,006 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:44:36,006 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).trimStart()
2021-03-12 00:44:36,006 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:44:36,006 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:44:36,006 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).trimIndent()
2021-03-12 00:44:36,006 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]]
2021-03-12 00:44:36,006 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:44:36,130 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:36,133 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).dropLast(-1328165380)
2021-03-12 00:44:36,133 [main:61] - replacement of "html" of type String is testBodyHtmlNoInline()
2021-03-12 00:44:36,267 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(CALL_EXPRESSION)
2021-03-12 00:44:36,268 [main:66] - Compilation checking started
2021-03-12 00:44:36,718 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$(testBodyNoInline()).lowercase()\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:44:36,720 [main:53] - replacing ("this format can be used as an alternative markup to XML", String)
2021-03-12 00:44:36,720 [main:50] - replacing "this format can be used as an alternative markup to XML" String
2021-03-12 00:44:36,720 [main:54] - Getting value of type String
2021-03-12 00:44:36,863 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:36,866 [main:58] - GENERATED VALUE OF TYPE String = "sgsjy"
2021-03-12 00:44:36,866 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:37,299 [main:67] - randomType = MutableMap<Float, Double>
2021-03-12 00:44:37,300 [main:106] - GETTING String from P
2021-03-12 00:44:37,383 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:44:37,383 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:44:37,498 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:37,616 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:37,619 [main:117] - GENERATED CALL = (B().pNoInline()).name.padStart(765111358, '⑱')
2021-03-12 00:44:37,619 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:44:37,619 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:44:37,753 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:37,756 [main:117] - GENERATED CALL = (B().pNoInline()).name.substringAfterLast('獭', testAllInline())
2021-03-12 00:44:37,758 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:44:37,758 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:44:37,758 [main:117] - GENERATED CALL = (B().pNoInline()).name.toUpperCase()
2021-03-12 00:44:37,758 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:44:37,758 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:44:37,880 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:44:38,008 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 00:44:38,011 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 00:44:38,138 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:44:38,141 [main:95] - GENERATED = hashSetOf<Int>(-317490758)
2021-03-12 00:44:38,141 [main:117] - GENERATED CALL = (B().pNoInline()).name.slice(hashSetOf<Int>(-317490758))
2021-03-12 00:44:38,141 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c366a13]]
2021-03-12 00:44:38,141 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c366a13]
2021-03-12 00:44:38,266 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:38,269 [main:117] - GENERATED CALL = (B().pNoInline()).name.replaceIndentByMargin(testAllInline(), "wqpgp")
2021-03-12 00:44:38,269 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:44:38,269 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:44:38,269 [main:117] - GENERATED CALL = (B().pNoInline()).name.trim()
2021-03-12 00:44:38,269 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:44:38,269 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:44:38,269 [main:117] - GENERATED CALL = (B().pNoInline()).name.decapitalize()
2021-03-12 00:44:38,270 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]]
2021-03-12 00:44:38,270 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:44:38,386 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:38,389 [main:117] - GENERATED CALL = (B().pNoInline()).name.substringBeforeLast('䉵', testBodyHtmlNoInline())
2021-03-12 00:44:38,389 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:44:38,389 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:44:38,389 [main:117] - GENERATED CALL = (B().pNoInline()).name.toLowerCase()
2021-03-12 00:44:38,389 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]]
2021-03-12 00:44:38,389 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]
2021-03-12 00:44:38,506 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:38,509 [main:117] - GENERATED CALL = (B().pNoInline()).name.drop(1915730487)
2021-03-12 00:44:38,509 [main:61] - replacement of "this format can be used as an alternative markup to XML" of type String is (B().pNoInline()).name.drop(1915730487)
2021-03-12 00:44:38,645 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:38,648 [main:53] - replacing (builder.append("$indent$(testBodyNoInline()).lowercase()\n"), StringBuilder)
2021-03-12 00:44:38,648 [main:50] - replacing builder.append("$indent$(testBodyNoInline()).lowercase()\n") StringBuilder
2021-03-12 00:44:38,648 [main:54] - Getting value of type StringBuilder
2021-03-12 00:44:38,770 [main:302] - generating value of type = StringBuilder false depth = 0
2021-03-12 00:44:38,776 [main:58] - GENERATED VALUE OF TYPE StringBuilder = StringBuilder()
2021-03-12 00:44:38,776 [main:61] - GENERATED IS CALL =true
2021-03-12 00:44:38,787 [main:67] - randomType = Title
2021-03-12 00:44:38,908 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:44:38,911 [main:112] - generating klass Title text = class Title() : TagWithText((Body())?.name.trim())
2021-03-12 00:44:39,032 [main:194] - Type params = []
2021-03-12 00:44:39,226 [main:106] - GETTING StringBuilder from B
2021-03-12 00:44:39,309 [main:106] - GETTING StringBuilder from P
2021-03-12 00:44:39,396 [main:106] - GETTING StringBuilder from String
2021-03-12 00:44:39,412 [main:106] - GETTING StringBuilder from UL
2021-03-12 00:44:39,471 [main:106] - GETTING StringBuilder from H1
2021-03-12 00:44:39,529 [main:106] - GETTING StringBuilder from String
2021-03-12 00:44:39,530 [main:106] - GETTING StringBuilder from String
2021-03-12 00:44:39,530 [main:106] - GETTING StringBuilder from HTML
2021-03-12 00:44:39,572 [main:106] - GETTING StringBuilder from LI
2021-03-12 00:44:39,630 [main:106] - GETTING StringBuilder from Body
2021-03-12 00:44:39,691 [main:106] - GETTING StringBuilder from Title
2021-03-12 00:44:39,728 [main:106] - GETTING StringBuilder from Head
2021-03-12 00:44:39,767 [main:106] - GETTING StringBuilder from String
2021-03-12 00:44:39,768 [main:106] - GETTING StringBuilder from String
2021-03-12 00:44:39,769 [main:106] - GETTING StringBuilder from P
2021-03-12 00:44:39,770 [main:106] - GETTING StringBuilder from HTML
2021-03-12 00:44:39,771 [main:106] - GETTING StringBuilder from String
2021-03-12 00:44:39,772 [main:106] - GETTING StringBuilder from String
2021-03-12 00:44:39,772 [main:106] - GETTING StringBuilder from StringBuilder
2021-03-12 00:44:39,788 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.insertRange(index: kotlin.Int, value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7201a76b]]
2021-03-12 00:44:39,788 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.insertRange(index: kotlin.Int, value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7201a76b]
2021-03-12 00:44:39,926 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:40,050 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 00:44:40,176 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:44:40,180 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:44:40,307 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:44:40,310 [main:95] - GENERATED = charArrayOf('ڍ')
2021-03-12 00:44:40,434 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:40,551 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:40,554 [main:117] - GENERATED CALL = (builder).insertRange(210599079, charArrayOf('ڍ'), 1276285665, -1491339416)
2021-03-12 00:44:40,554 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun insert(index: kotlin.Int, value: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@59d7592c]]
2021-03-12 00:44:40,554 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun insert(index: kotlin.Int, value: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@59d7592c]
2021-03-12 00:44:40,675 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:40,815 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:44:40,815 [main:117] - GENERATED CALL = (builder).insert(-35242359, "cmyuf")
2021-03-12 00:44:40,815 [main:113] - Case = [public final fun reverse(): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@65aab57c]]
2021-03-12 00:44:40,815 [main:149] - GENERATING call of type public final fun reverse(): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@65aab57c]
2021-03-12 00:44:40,815 [main:117] - GENERATED CALL = (builder).reverse()
2021-03-12 00:44:40,815 [main:113] - Case = [@kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1172c11a]]
2021-03-12 00:44:40,815 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1172c11a]
2021-03-12 00:44:40,937 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:44:40,937 [main:117] - GENERATED CALL = (builder).append("xfgsh")
2021-03-12 00:44:40,937 [main:113] - Case = [@kotlin.SinceKotlin public inline fun kotlin.text.StringBuilder.clear(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d708f70]]
2021-03-12 00:44:40,937 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun kotlin.text.StringBuilder.clear(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d708f70]
2021-03-12 00:44:40,937 [main:117] - GENERATED CALL = (builder).clear()
2021-03-12 00:44:40,937 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.appendRange(value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a17085]]
2021-03-12 00:44:40,937 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.appendRange(value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56a17085]
2021-03-12 00:44:41,059 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 00:44:41,185 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:44:41,189 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:44:41,320 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:44:41,323 [main:95] - GENERATED = charArrayOf('쁭')
2021-03-12 00:44:41,439 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:41,558 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:41,561 [main:117] - GENERATED CALL = (builder).appendRange(charArrayOf('쁭'), 1079254444, -1599062203)
2021-03-12 00:44:41,561 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.setRange(startIndex: kotlin.Int, endIndex: kotlin.Int, value: kotlin.String): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79a80607]]
2021-03-12 00:44:41,561 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.setRange(startIndex: kotlin.Int, endIndex: kotlin.Int, value: kotlin.String): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79a80607]
2021-03-12 00:44:41,695 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:41,820 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:41,822 [main:117] - GENERATED CALL = (builder).setRange(-1581903767, -1309246624, testAllInline())
2021-03-12 00:44:41,822 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.appendLine(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@471f4f58]]
2021-03-12 00:44:41,823 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.appendLine(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@471f4f58]
2021-03-12 00:44:41,823 [main:117] - GENERATED CALL = (builder).appendLine()
2021-03-12 00:44:41,823 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteAt(index: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ee1941]]
2021-03-12 00:44:41,823 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteAt(index: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ee1941]
2021-03-12 00:44:41,946 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:41,948 [main:117] - GENERATED CALL = (builder).deleteAt(1903342592)
2021-03-12 00:44:41,949 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43d48f61]]
2021-03-12 00:44:41,949 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43d48f61]
2021-03-12 00:44:42,073 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:42,205 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:42,208 [main:117] - GENERATED CALL = (builder).deleteRange(875351578, -1359187677)
2021-03-12 00:44:42,208 [main:61] - replacement of builder.append("$indent$(testBodyNoInline()).lowercase()\n") of type StringBuilder is builder
2021-03-12 00:44:42,324 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:44:42,324 [main:66] - Compilation checking started
2021-03-12 00:44:42,765 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:44:42,767 [main:53] - replacing (htmlVal, Int)
2021-03-12 00:44:42,767 [main:50] - replacing htmlVal Int
2021-03-12 00:44:42,767 [main:54] - Getting value of type Int
2021-03-12 00:44:42,899 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:42,902 [main:58] - GENERATED VALUE OF TYPE Int = -815478589
2021-03-12 00:44:42,902 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:43,050 [main:67] - randomType = ArrayDeque<Int>
2021-03-12 00:44:43,170 [main:302] - generating value of type = ArrayDeque<Int> false depth = 0
2021-03-12 00:44:43,300 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Int> = TODO()
2021-03-12 00:44:43,306 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Int> = TODO()
2021-03-12 00:44:43,568 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:44:43,571 [main:95] - GENERATED = ArrayDeque<Int>(938630520)
2021-03-12 00:44:43,708 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e57b7ef]
2021-03-12 00:44:43,709 [main:78] - Generated call from random type = (ArrayDeque<Int>(938630520)).count()
2021-03-12 00:44:43,709 [main:106] - GETTING Int from Head
2021-03-12 00:44:43,748 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708]]
2021-03-12 00:44:43,748 [main:117] - GENERATED CALL = (HTML().head()).name.length
2021-03-12 00:44:43,748 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in Head[PropertyDescriptorImpl@7a1d8f47], public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]]
2021-03-12 00:44:43,748 [main:149] - GENERATING call of type public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]
2021-03-12 00:44:43,881 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:44:43,884 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:44:44,137 [main:117] - GENERATED CALL = (HTML().head()).children.indexOf(TODO())
2021-03-12 00:44:44,137 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in Head[PropertyDescriptorImpl@7a1d8f47], public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]]
2021-03-12 00:44:44,137 [main:149] - GENERATING call of type public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]
2021-03-12 00:44:44,257 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:44:44,259 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:44:44,537 [main:302] - generating value of type = Tag false depth = 2
2021-03-12 00:44:44,540 [main:112] - generating klass Tag text = abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}
2021-03-12 00:44:44,806 [main:117] - GENERATED CALL = (HTML().head()).children.lastIndexOf(TODO())
2021-03-12 00:44:44,806 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]]
2021-03-12 00:44:44,806 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]
2021-03-12 00:44:44,926 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:45,049 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:44:45,052 [main:117] - GENERATED CALL = (HTML().head()).name.compareTo("lzmdu", false)
2021-03-12 00:44:45,052 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in Head[PropertyDescriptorImpl@7a1d8f47], protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@6913a175]]
2021-03-12 00:44:45,052 [main:117] - GENERATED CALL = (HTML().head()).children.modCount
2021-03-12 00:44:45,052 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Head[DeserializedSimpleFunctionDescriptor@5a68a29a], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]]
2021-03-12 00:44:45,052 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Head[DeserializedSimpleFunctionDescriptor@5a68a29a]
2021-03-12 00:44:45,173 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:44:45,173 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]
2021-03-12 00:44:45,305 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:44:45,308 [main:117] - GENERATED CALL = (HTML().head()).equals("bsifv").compareTo(true)
2021-03-12 00:44:45,308 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in Head[PropertyDescriptorImpl@7a1d8f47], public open val size: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@3c464ee3]]
2021-03-12 00:44:45,308 [main:117] - GENERATED CALL = (HTML().head()).children.size
2021-03-12 00:44:45,308 [main:113] - Case = [public final val name: kotlin.String defined in Head[PropertyDescriptorImpl@44f4385d], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]]
2021-03-12 00:44:45,308 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]
2021-03-12 00:44:45,308 [main:117] - GENERATED CALL = (HTML().head()).name.toInt()
2021-03-12 00:44:45,308 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Head[PropertyDescriptorImpl@5ec6aa5d], public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@aaaf6a9]]
2021-03-12 00:44:45,309 [main:117] - GENERATED CALL = (HTML().head()).attributes.size
2021-03-12 00:44:45,309 [main:61] - replacement of htmlVal of type Int is (HTML().head()).children.size
2021-03-12 00:44:45,429 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:45,431 [main:53] - replacing ("$bodyVar", String)
2021-03-12 00:44:45,431 [main:50] - replacing "$bodyVar" String
2021-03-12 00:44:45,431 [main:54] - Getting value of type String
2021-03-12 00:44:45,545 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:45,548 [main:58] - GENERATED VALUE OF TYPE String = "hehxo"
2021-03-12 00:44:45,548 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:45,559 [main:67] - randomType = H1
2021-03-12 00:44:45,692 [main:302] - generating value of type = H1 false depth = 0
2021-03-12 00:44:45,695 [main:112] - generating klass H1 text = class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
2021-03-12 00:44:45,815 [main:194] - Type params = []
2021-03-12 00:44:46,009 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]
2021-03-12 00:44:46,009 [main:78] - Generated call from random type = (H1()).name.uppercase()
2021-03-12 00:44:46,010 [main:106] - GETTING String from Body
2021-03-12 00:44:46,083 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:44:46,083 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:44:46,205 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:46,208 [main:117] - GENERATED CALL = (HTML().body()).name.substringAfter('炗', TODO().toString())
2021-03-12 00:44:46,208 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903], public final val name: kotlin.String defined in H1[PropertyDescriptorImpl@e65af9a]]
2021-03-12 00:44:46,208 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]
2021-03-12 00:44:46,322 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:44:46,325 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:46,446 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:44:46,450 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:44:46,750 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:44:46,750 [main:95] - GENERATED = println("fbncr")
2021-03-12 00:44:46,750 [main:117] - GENERATED CALL = (HTML().body()).h1({ println("fbncr")}).name
2021-03-12 00:44:46,750 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:44:46,750 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:44:46,871 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:44:46,873 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:46,876 [main:117] - GENERATED CALL = (HTML().body()).name.takeLastWhile({a: Char -> false})
2021-03-12 00:44:46,876 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]]
2021-03-12 00:44:46,876 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]
2021-03-12 00:44:46,996 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:47,124 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:47,127 [main:117] - GENERATED CALL = (HTML().body()).name.padEnd(1150739813, '')
2021-03-12 00:44:47,127 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Body[PropertyDescriptorImpl@51249017], public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]]
2021-03-12 00:44:47,127 [main:149] - GENERATING call of type public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]
2021-03-12 00:44:47,243 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:47,246 [main:117] - GENERATED CALL = (HTML().body()).attributes.put("hvwed", testBodyNoInline())
2021-03-12 00:44:47,246 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:44:47,246 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:44:47,246 [main:117] - GENERATED CALL = (HTML().body()).name.trimIndent()
2021-03-12 00:44:47,246 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:44:47,246 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:44:47,361 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:47,496 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:47,618 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:44:47,620 [main:117] - GENERATED CALL = (HTML().body()).name.replaceFirst('앛', 'ꪟ', false)
2021-03-12 00:44:47,621 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:44:47,621 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:44:47,739 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:47,860 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:47,863 [main:117] - GENERATED CALL = (HTML().body()).name.replaceAfterLast('퉖', testBodyHtmlNoInline(), "wwuxd")
2021-03-12 00:44:47,863 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]]
2021-03-12 00:44:47,864 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]
2021-03-12 00:44:47,991 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:44:47,993 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:44:47,996 [main:117] - GENERATED CALL = (HTML().body()).name.replaceFirstChar({a: Char -> '嬊'})
2021-03-12 00:44:47,996 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:44:47,996 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:44:47,996 [main:117] - GENERATED CALL = (HTML().body()).name.prependIndent(TextElement("utmeo").text)
2021-03-12 00:44:47,996 [main:61] - replacement of "$bodyVar" of type String is (HTML().body()).name.replaceAfterLast('퉖', testBodyHtmlNoInline(), "wwuxd")
2021-03-12 00:44:48,111 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:48,113 [main:53] - replacing (head { print("medux")}, Head)
2021-03-12 00:44:48,113 [main:50] - replacing head { print("medux")} Head
2021-03-12 00:44:48,113 [main:54] - Getting value of type Head
2021-03-12 00:44:48,227 [main:302] - generating value of type = Head false depth = 0
2021-03-12 00:44:48,230 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}
2021-03-12 00:44:48,342 [main:194] - Type params = []
2021-03-12 00:44:48,480 [main:58] - GENERATED VALUE OF TYPE Head = Head()
2021-03-12 00:44:48,480 [main:61] - GENERATED IS CALL =true
2021-03-12 00:44:48,766 [main:67] - randomType = Sequence<LinkedHashSet<String>>
2021-03-12 00:44:48,767 [main:106] - GETTING Head from Body
2021-03-12 00:44:48,841 [main:106] - GETTING Head from Body
2021-03-12 00:44:48,842 [main:106] - GETTING Head from B
2021-03-12 00:44:48,924 [main:106] - GETTING Head from H1
2021-03-12 00:44:49,004 [main:106] - GETTING Head from String
2021-03-12 00:44:49,030 [main:106] - GETTING Head from String
2021-03-12 00:44:49,030 [main:106] - GETTING Head from Title
2021-03-12 00:44:49,086 [main:106] - GETTING Head from UL
2021-03-12 00:44:49,178 [main:106] - GETTING Head from P
2021-03-12 00:44:49,262 [main:106] - GETTING Head from String
2021-03-12 00:44:49,263 [main:106] - GETTING Head from LI
2021-03-12 00:44:49,321 [main:106] - GETTING Head from Int
2021-03-12 00:44:49,351 [main:106] - GETTING Head from HTML
2021-03-12 00:44:49,390 [main:113] - Case = [public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@50e2f4cc]]
2021-03-12 00:44:49,390 [main:149] - GENERATING call of type public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@50e2f4cc]
2021-03-12 00:44:49,521 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Head, Unit> false depth = 0
2021-03-12 00:44:49,524 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:44:49,649 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:49,653 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:44:49,920 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:44:49,923 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:44:50,052 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:44:50,056 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:44:50,474 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:44:50,477 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:44:50,480 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:44:50,480 [main:95] - GENERATED = check(false, { "phxvn"})
2021-03-12 00:44:50,480 [main:95] - GENERATED = contract({ check(false, { "phxvn"})})
2021-03-12 00:44:50,480 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ contract({ check(false, { "phxvn"})})})
2021-03-12 00:44:50,480 [main:61] - replacement of head { print("medux")} of type Head is (html({ repeat(1590980469, {a: Int -> println("skriq")})})).head({ contract({ check(false, { "phxvn"})})})
2021-03-12 00:44:50,603 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:50,604 [main:53] - replacing ("b", String)
2021-03-12 00:44:50,604 [main:50] - replacing "b" String
2021-03-12 00:44:50,604 [main:54] - Getting value of type String
2021-03-12 00:44:50,726 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:50,728 [main:58] - GENERATED VALUE OF TYPE String = "looya"
2021-03-12 00:44:50,729 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:50,739 [main:67] - randomType = P
2021-03-12 00:44:50,860 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:44:50,862 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:44:50,998 [main:194] - Type params = []
2021-03-12 00:44:51,217 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:44:51,218 [main:78] - Generated call from random type = (P()).name.trimStart()
2021-03-12 00:44:51,218 [main:106] - GETTING String from Title
2021-03-12 00:44:51,266 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:44:51,266 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:44:51,400 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:51,403 [main:117] - GENERATED CALL = (Head().title()).name.replaceBeforeLast('뛿', TextElement("utmeo").text, testBodyNoInline())
2021-03-12 00:44:51,404 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:44:51,404 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:44:51,526 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:51,651 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:51,774 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:44:51,777 [main:117] - GENERATED CALL = (Head().title()).name.replace('', '蜒', true)
2021-03-12 00:44:51,777 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:44:51,777 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:44:51,777 [main:117] - GENERATED CALL = (Head().title()).name.lowercase()
2021-03-12 00:44:51,777 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:44:51,777 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:44:51,908 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:51,911 [main:117] - GENERATED CALL = (Head().title()).name.replaceAfter('', testAllInline(), testHtmlNoInline())
2021-03-12 00:44:51,911 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:44:51,912 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:44:52,026 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:44:52,029 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:52,032 [main:117] - GENERATED CALL = (Head().title()).name.takeLastWhile({a: Char -> true})
2021-03-12 00:44:52,032 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:44:52,032 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:44:52,150 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:52,153 [main:117] - GENERATED CALL = (Head().title()).name.prependIndent("hgyts")
2021-03-12 00:44:52,153 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:44:52,153 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:44:52,291 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:52,419 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:52,422 [main:117] - GENERATED CALL = (Head().title()).name.replaceAfterLast('㢸', testAllInline(), "kothu")
2021-03-12 00:44:52,422 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:44:52,422 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:44:52,544 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:52,667 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:52,670 [main:117] - GENERATED CALL = (Head().title()).name.substringAfter('忪', "qvwcx")
2021-03-12 00:44:52,670 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:44:52,670 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:44:52,670 [main:117] - GENERATED CALL = (Head().title()).name.trimIndent()
2021-03-12 00:44:52,670 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:44:52,670 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:44:52,795 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:44:52,801 [main:117] - GENERATED CALL = (Head().title()).name.removeSurrounding("ituxz")
2021-03-12 00:44:52,801 [main:61] - replacement of "b" of type String is (Head().title()).name.lowercase()
2021-03-12 00:44:52,916 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:52,917 [main:53] - replacing (0, Int)
2021-03-12 00:44:52,920 [main:50] - replacing 0 Int
2021-03-12 00:44:52,920 [main:54] - Getting value of type Int
2021-03-12 00:44:53,035 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:53,038 [main:58] - GENERATED VALUE OF TYPE Int = -334758893
2021-03-12 00:44:53,038 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:53,908 [main:67] - randomType = Map<HashMap<Sequence<Char>, Char?>, Byte>?
2021-03-12 00:44:53,908 [main:106] - GETTING Int from HTML
2021-03-12 00:44:53,966 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in HTML[PropertyDescriptorImpl@34d285be], public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]]
2021-03-12 00:44:53,966 [main:149] - GENERATING call of type public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]
2021-03-12 00:44:54,098 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:44:54,101 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:44:54,352 [main:302] - generating value of type = Tag false depth = 2
2021-03-12 00:44:54,354 [main:112] - generating klass Tag text = abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}
2021-03-12 00:44:54,614 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).children.lastIndexOf(TODO())
2021-03-12 00:44:54,614 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]]
2021-03-12 00:44:54,614 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]
2021-03-12 00:44:54,729 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:44:54,732 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.compareTo(testBodyNoInline(), false)
2021-03-12 00:44:54,732 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in HTML[PropertyDescriptorImpl@34d285be], public open val size: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@3c464ee3]]
2021-03-12 00:44:54,733 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).children.size
2021-03-12 00:44:54,733 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]]
2021-03-12 00:44:54,733 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]
2021-03-12 00:44:54,733 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.toInt()
2021-03-12 00:44:54,733 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708]]
2021-03-12 00:44:54,733 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.length
2021-03-12 00:44:54,733 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in HTML[DeserializedSimpleFunctionDescriptor@f87e9ba], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]]
2021-03-12 00:44:54,733 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in HTML[DeserializedSimpleFunctionDescriptor@f87e9ba]
2021-03-12 00:44:54,848 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:44:54,848 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]
2021-03-12 00:44:54,986 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:44:54,989 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).equals("fhdbr").compareTo(true)
2021-03-12 00:44:54,989 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in HTML[PropertyDescriptorImpl@1de9a405], public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@aaaf6a9]]
2021-03-12 00:44:54,990 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).attributes.size
2021-03-12 00:44:54,990 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in HTML[PropertyDescriptorImpl@34d285be], protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@6913a175]]
2021-03-12 00:44:54,990 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).children.modCount
2021-03-12 00:44:54,990 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in HTML[PropertyDescriptorImpl@34d285be], public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]]
2021-03-12 00:44:54,990 [main:149] - GENERATING call of type public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]
2021-03-12 00:44:55,115 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:44:55,117 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:44:55,371 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).children.indexOf(TODO())
2021-03-12 00:44:55,372 [main:61] - replacement of 0 of type Int is (htmlNoInline({ require(false)})).children.indexOf(TODO())
2021-03-12 00:44:55,495 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:55,497 [main:53] - replacing ("XML encoding with Kotlin", String)
2021-03-12 00:44:55,497 [main:50] - replacing "XML encoding with Kotlin" String
2021-03-12 00:44:55,497 [main:54] - Getting value of type String
2021-03-12 00:44:55,611 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:55,613 [main:58] - GENERATED VALUE OF TYPE String = "fwikr"
2021-03-12 00:44:55,614 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:55,901 [main:67] - randomType = ArrayDeque<Short>
2021-03-12 00:44:56,023 [main:302] - generating value of type = ArrayDeque<Short> false depth = 0
2021-03-12 00:44:56,152 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Short>): ArrayDeque<Short> = TODO()
2021-03-12 00:44:56,156 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Short>): ArrayDeque<Short> = TODO()
2021-03-12 00:44:56,429 [main:302] - generating value of type = Collection<Short> false depth = 3
2021-03-12 00:44:56,549 [main:43] - GENERATING CALL OF fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Short): Collection<Short> = TODO()
2021-03-12 00:44:56,553 [main:61] - WITHOUT TYPE PARAMS = fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Short): Collection<Short> = TODO()
2021-03-12 00:44:56,984 [main:302] - generating value of type = Int true depth = 6
2021-03-12 00:44:56,987 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Short> false depth = 6
2021-03-12 00:44:56,989 [main:302] - generating value of type = Short true depth = 7
2021-03-12 00:44:56,992 [main:95] - GENERATED = List<Short>(-954165695, {a: Int -> -16567})
2021-03-12 00:44:56,992 [main:95] - GENERATED = ArrayDeque<Short>(List<Short>(-954165695, {a: Int -> -16567}))
2021-03-12 00:44:57,169 [main:149] - GENERATING call of type public final fun first(): kotlin.Short defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@581e2f89]
2021-03-12 00:44:57,169 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19ca6280]
2021-03-12 00:44:57,169 [main:78] - Generated call from random type = (ArrayDeque<Short>(List<Short>(-954165695, {a: Int -> -16567}))).first().toString(bodyVar)
2021-03-12 00:44:57,171 [main:106] - GETTING String from HTML
2021-03-12 00:44:57,234 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:44:57,234 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:44:57,234 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.trimEnd()
2021-03-12 00:44:57,234 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:44:57,234 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:44:57,359 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:57,361 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.substringAfter('餏', testBodyNoInline())
2021-03-12 00:44:57,362 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:44:57,362 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:44:57,362 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.trimMargin(testBodyNoInline())
2021-03-12 00:44:57,362 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:44:57,362 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:44:57,477 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:57,480 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.substringAfterLast('䞺', A().href)
2021-03-12 00:44:57,480 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:44:57,480 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:44:57,596 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:44:57,737 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:44:57,740 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:44:58,008 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:44:58,014 [main:95] - GENERATED = StringBuilder("xfbbb")
2021-03-12 00:44:58,015 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.removeSuffix(StringBuilder("xfbbb"))
2021-03-12 00:44:58,015 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:44:58,015 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:44:58,015 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.lowercase()
2021-03-12 00:44:58,015 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]]
2021-03-12 00:44:58,015 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:44:58,136 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:58,139 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.dropLast(1028154111)
2021-03-12 00:44:58,139 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:44:58,139 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:44:58,265 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:44:58,268 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.takeLast(1846600807)
2021-03-12 00:44:58,268 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:44:58,268 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:44:58,381 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:44:58,384 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:58,387 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.takeWhile({a: Char -> false})
2021-03-12 00:44:58,387 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:44:58,387 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:44:58,501 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:58,637 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:58,758 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:44:58,761 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).name.replace('癀', '礀', false)
2021-03-12 00:44:58,761 [main:61] - replacement of "XML encoding with Kotlin" of type String is (htmlNoInline({ require(false)})).name.trimMargin(testBodyNoInline())
2021-03-12 00:44:58,881 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:44:58,884 [main:53] - replacing ("project", String)
2021-03-12 00:44:58,884 [main:50] - replacing "project" String
2021-03-12 00:44:58,884 [main:54] - Getting value of type String
2021-03-12 00:44:59,003 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:59,006 [main:58] - GENERATED VALUE OF TYPE String = "rzftd"
2021-03-12 00:44:59,006 [main:61] - GENERATED IS CALL =false
2021-03-12 00:44:59,575 [main:67] - randomType = Sequence<Double?>?
2021-03-12 00:44:59,575 [main:106] - GETTING String from String
2021-03-12 00:44:59,597 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:44:59,597 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:44:59,718 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:44:59,720 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:44:59,723 [main:117] - GENERATED CALL = (A().href).dropLastWhile({a: Char -> true})
2021-03-12 00:44:59,723 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:44:59,723 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:44:59,843 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:44:59,967 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:44:59,969 [main:117] - GENERATED CALL = (A().href).substringAfter('?', "cwzkq")
2021-03-12 00:44:59,970 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:44:59,970 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:44:59,970 [main:117] - GENERATED CALL = (A().href).prependIndent(testAllInline())
2021-03-12 00:44:59,970 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]]
2021-03-12 00:44:59,970 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]
2021-03-12 00:45:00,096 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:00,099 [main:117] - GENERATED CALL = (A().href).padEnd(bodyVar, '䖓')
2021-03-12 00:45:00,099 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:45:00,099 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:45:00,213 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:00,329 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:00,466 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:45:00,469 [main:117] - GENERATED CALL = (A().href).replace('⬺', '', false)
2021-03-12 00:45:00,469 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7569a69c]]
2021-03-12 00:45:00,469 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:45:00,469 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7569a69c]
2021-03-12 00:45:00,469 [main:117] - GENERATED CALL = (A().href).get(bodyVar).plus(testBodyNoInline())
2021-03-12 00:45:00,469 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:45:00,469 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:45:00,589 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:00,711 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:00,833 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:45:00,836 [main:117] - GENERATED CALL = (A().href).replaceFirst('␆', '흣', true)
2021-03-12 00:45:00,836 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:45:00,836 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:45:00,966 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:01,083 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:45:01,086 [main:117] - GENERATED CALL = (A().href).replaceBefore('賃', "zibyf", testBodyHtmlNoInline())
2021-03-12 00:45:01,086 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]]
2021-03-12 00:45:01,086 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]
2021-03-12 00:45:01,086 [main:117] - GENERATED CALL = (A().href).uppercase()
2021-03-12 00:45:01,086 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]]
2021-03-12 00:45:01,086 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:45:01,086 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]
2021-03-12 00:45:01,086 [main:117] - GENERATED CALL = (A().href).subSequence(htmlVal, htmlVal).repeat(bodyVar)
2021-03-12 00:45:01,086 [main:61] - replacement of "project" of type String is A().href
2021-03-12 00:45:01,200 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:45:01,202 [main:53] - replacing (p { contract({ check(false, { "qpygj"})})}, P)
2021-03-12 00:45:01,202 [main:50] - replacing p { contract({ check(false, { "qpygj"})})} P
2021-03-12 00:45:01,202 [main:54] - Getting value of type P
2021-03-12 00:45:01,315 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:45:01,318 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:45:01,454 [main:194] - Type params = []
2021-03-12 00:45:01,574 [main:58] - GENERATED VALUE OF TYPE P = P()
2021-03-12 00:45:01,574 [main:61] - GENERATED IS CALL =true
2021-03-12 00:45:01,585 [main:67] - randomType = TextElement
2021-03-12 00:45:01,705 [main:302] - generating value of type = TextElement false depth = 0
2021-03-12 00:45:01,708 [main:112] - generating klass TextElement text = class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}
2021-03-12 00:45:01,827 [main:194] - Type params = []
2021-03-12 00:45:01,959 [main:302] - generating value of type = String true depth = 2
2021-03-12 00:45:01,974 [main:106] - GETTING P from String
2021-03-12 00:45:02,000 [main:106] - GETTING P from P
2021-03-12 00:45:02,086 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]]
2021-03-12 00:45:02,086 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:45:02,200 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:45:02,203 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:02,358 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:02,362 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:02,767 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:02,769 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:02,772 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:02,772 [main:95] - GENERATED = check(false, { "kribl"})
2021-03-12 00:45:02,772 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]
2021-03-12 00:45:02,899 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:02,901 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:03,021 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:03,024 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:03,307 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:45:03,308 [main:95] - GENERATED = print("nqcsv")
2021-03-12 00:45:03,308 [main:117] - GENERATED CALL = (B().pNoInline()).h1({ check(false, { "kribl"})}).pNoInline({ print("nqcsv")})
2021-03-12 00:45:03,308 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]]
2021-03-12 00:45:03,308 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f]
2021-03-12 00:45:03,432 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:03,434 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:03,563 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:03,567 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:03,973 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:03,976 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:03,978 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:03,978 [main:95] - GENERATED = require(false, { "olzoh"})
2021-03-12 00:45:03,979 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]
2021-03-12 00:45:04,095 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:04,097 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:04,236 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:04,240 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:04,651 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:04,654 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:04,656 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:04,656 [main:95] - GENERATED = check(true, { "nnuze"})
2021-03-12 00:45:04,657 [main:117] - GENERATED CALL = (B().pNoInline()).p({ require(false, { "olzoh"})}).pNoInline({ check(true, { "nnuze"})})
2021-03-12 00:45:04,657 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4], public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]]
2021-03-12 00:45:04,657 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:45:04,780 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:45:04,782 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:04,788 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]
2021-03-12 00:45:04,903 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:04,906 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:05,027 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:05,031 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:05,455 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:05,458 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:05,461 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:05,461 [main:95] - GENERATED = require(false, { "okstt"})
2021-03-12 00:45:05,461 [main:117] - GENERATED CALL = (B().pNoInline()).b({ println()}).p({ require(false, { "okstt"})})
2021-03-12 00:45:05,462 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9], public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]]
2021-03-12 00:45:05,462 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]
2021-03-12 00:45:05,584 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:45:05,587 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:05,714 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:05,717 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:05,969 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:45:05,970 [main:95] - GENERATED = print("osatf")
2021-03-12 00:45:05,970 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]
2021-03-12 00:45:06,105 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:06,108 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:06,237 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:06,240 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:06,650 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:06,652 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:06,655 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:06,655 [main:95] - GENERATED = check(true, { "zzlzk"})
2021-03-12 00:45:06,655 [main:117] - GENERATED CALL = (B().pNoInline()).ul({ print("osatf")}).p({ check(true, { "zzlzk"})})
2021-03-12 00:45:06,656 [main:113] - Case = [public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]]
2021-03-12 00:45:06,656 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]
2021-03-12 00:45:06,769 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:06,772 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:06,778 [main:117] - GENERATED CALL = (B().pNoInline()).pNoInline({ println()})
2021-03-12 00:45:06,778 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]]
2021-03-12 00:45:06,779 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]
2021-03-12 00:45:06,893 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:45:06,897 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:07,036 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:07,040 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:07,449 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:07,452 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:07,454 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:07,455 [main:95] - GENERATED = require(false, { "xdphd"})
2021-03-12 00:45:07,455 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]
2021-03-12 00:45:07,578 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:07,581 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:07,587 [main:117] - GENERATED CALL = (B().pNoInline()).ul({ require(false, { "xdphd"})}).pNoInline({ println()})
2021-03-12 00:45:07,587 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]]
2021-03-12 00:45:07,588 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]
2021-03-12 00:45:07,703 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:07,706 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:07,826 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:07,830 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:08,262 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:45:08,265 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:45:08,268 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:45:08,396 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:08,399 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:08,797 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:45:08,799 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:45:08,802 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:45:08,802 [main:95] - GENERATED = check(false, { "xbttw"})
2021-03-12 00:45:08,802 [main:95] - GENERATED = repeat(1981267418, {a: Int -> check(false, { "xbttw"})})
2021-03-12 00:45:08,802 [main:117] - GENERATED CALL = (B().pNoInline()).p({ repeat(1981267418, {a: Int -> check(false, { "xbttw"})})})
2021-03-12 00:45:08,803 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f], public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]]
2021-03-12 00:45:08,803 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f]
2021-03-12 00:45:08,938 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:08,941 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:08,947 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]
2021-03-12 00:45:09,070 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:09,073 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:09,200 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:09,204 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:09,608 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:09,610 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:09,613 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:09,613 [main:95] - GENERATED = require(true, { "xepha"})
2021-03-12 00:45:09,614 [main:117] - GENERATED CALL = (B().pNoInline()).p({ println()}).p({ require(true, { "xepha"})})
2021-03-12 00:45:09,614 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]]
2021-03-12 00:45:09,614 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:45:09,728 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:45:09,731 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:09,872 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:09,876 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:10,143 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:45:10,146 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:45:10,152 [main:95] - GENERATED = contract({ println()})
2021-03-12 00:45:10,152 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]
2021-03-12 00:45:10,273 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:10,275 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:10,406 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:10,410 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:10,823 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:10,826 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:10,828 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:10,828 [main:95] - GENERATED = check(false, { "unfpb"})
2021-03-12 00:45:10,829 [main:117] - GENERATED CALL = (B().pNoInline()).h1({ contract({ println()})}).p({ check(false, { "unfpb"})})
2021-03-12 00:45:10,829 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]]
2021-03-12 00:45:10,829 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:45:10,951 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:45:10,954 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:10,960 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]
2021-03-12 00:45:11,083 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:11,085 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:11,092 [main:117] - GENERATED CALL = (B().pNoInline()).b({ println()}).pNoInline({ println()})
2021-03-12 00:45:11,092 [main:61] - replacement of p { contract({ check(false, { "qpygj"})})} of type P is (B().pNoInline()).b({ println()}).pNoInline({ println()})
2021-03-12 00:45:11,211 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:45:11,213 [main:53] - replacing ({
                            for (arg in Array<String>(-1701606424, {a: Int -> "jdqmy"}))
                                (UL().li()).ul({ repeat(612284411, {a: Int -> require(true, { "eioox"})})}).li({ print("wgaif")})
                        }, [@kotlin.ExtensionFunctionType] Function1<UL, Unit>)
2021-03-12 00:45:11,213 [main:50] - replacing {
                            for (arg in Array<String>(-1701606424, {a: Int -> "jdqmy"}))
                                (UL().li()).ul({ repeat(612284411, {a: Int -> require(true, { "eioox"})})}).li({ print("wgaif")})
                        } [@kotlin.ExtensionFunctionType] Function1<UL, Unit>
2021-03-12 00:45:11,213 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<UL, Unit>
2021-03-12 00:45:11,344 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:45:11,347 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:11,473 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:11,476 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:11,758 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:11,761 [main:95] - GENERATED = check(true)
2021-03-12 00:45:11,761 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<UL, Unit> = { check(true)}
2021-03-12 00:45:11,761 [main:61] - GENERATED IS CALL =false
2021-03-12 00:45:12,041 [main:67] - randomType = Set<Byte>
2021-03-12 00:45:12,045 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:45:12,077 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from P
2021-03-12 00:45:12,164 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from HTML
2021-03-12 00:45:12,226 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from B
2021-03-12 00:45:12,316 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from P
2021-03-12 00:45:12,320 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Head
2021-03-12 00:45:12,385 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:45:12,389 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:45:12,393 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:45:12,397 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:45:12,402 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Title
2021-03-12 00:45:12,466 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:45:12,470 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from H1
2021-03-12 00:45:12,570 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Body
2021-03-12 00:45:12,635 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from LI
2021-03-12 00:45:12,697 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:45:12,701 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from UL
2021-03-12 00:45:12,763 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Body
2021-03-12 00:45:12,767 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from HTML
2021-03-12 00:45:12,767 [main:61] - replacement of {
                            for (arg in Array<String>(-1701606424, {a: Int -> "jdqmy"}))
                                (UL().li()).ul({ repeat(612284411, {a: Int -> require(true, { "eioox"})})}).li({ print("wgaif")})
                        } of type [@kotlin.ExtensionFunctionType] Function1<UL, Unit> is { check(true)}
2021-03-12 00:45:12,903 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:45:12,905 [main:53] - replacing (init, [@kotlin.ExtensionFunctionType] Function1<Head, Unit>)
2021-03-12 00:45:12,905 [main:50] - replacing init [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:45:12,905 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:45:13,027 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Head, Unit> false depth = 0
2021-03-12 00:45:13,030 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:13,157 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:13,160 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:13,431 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:13,434 [main:95] - GENERATED = require(true)
2021-03-12 00:45:13,434 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Head, Unit> = { require(true)}
2021-03-12 00:45:13,434 [main:61] - GENERATED IS CALL =false
2021-03-12 00:45:13,998 [main:67] - randomType = Function1<UShort?, Double>
2021-03-12 00:45:14,002 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from UL
2021-03-12 00:45:14,101 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Body
2021-03-12 00:45:14,199 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:45:14,231 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:45:14,235 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:45:14,239 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from HTML
2021-03-12 00:45:14,299 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Body
2021-03-12 00:45:14,304 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from HTML
2021-03-12 00:45:14,308 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from Title
2021-03-12 00:45:14,369 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from P
2021-03-12 00:45:14,454 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from B
2021-03-12 00:45:14,552 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:45:14,557 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:45:14,561 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from String
2021-03-12 00:45:14,565 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from LI
2021-03-12 00:45:14,670 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from H1
2021-03-12 00:45:14,728 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Head, Unit> from [@kotlin.ExtensionFunctionType] Function1<Head, Unit>
2021-03-12 00:45:14,745 [main:61] - replacement of init of type [@kotlin.ExtensionFunctionType] Function1<Head, Unit> is { require(true)}
2021-03-12 00:45:14,880 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:45:14,881 [main:66] - Compilation checking started
2021-03-12 00:45:15,395 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), { require(true)})

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:45:15,398 [main:53] - replacing (initTag(Head(), { require(true)}), Head)
2021-03-12 00:45:15,398 [main:50] - replacing initTag(Head(), { require(true)}) Head
2021-03-12 00:45:15,398 [main:54] - Getting value of type Head
2021-03-12 00:45:15,512 [main:302] - generating value of type = Head false depth = 0
2021-03-12 00:45:15,515 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}
2021-03-12 00:45:15,632 [main:194] - Type params = []
2021-03-12 00:45:15,749 [main:58] - GENERATED VALUE OF TYPE Head = Head()
2021-03-12 00:45:15,749 [main:61] - GENERATED IS CALL =true
2021-03-12 00:45:15,912 [main:67] - randomType = H1?
2021-03-12 00:45:16,034 [main:302] - generating value of type = H1 false depth = 0
2021-03-12 00:45:16,037 [main:112] - generating klass H1 text = class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
2021-03-12 00:45:16,159 [main:194] - Type params = []
2021-03-12 00:45:16,382 [main:106] - GETTING Head from String
2021-03-12 00:45:16,405 [main:106] - GETTING Head from LI
2021-03-12 00:45:16,491 [main:106] - GETTING Head from Body
2021-03-12 00:45:16,582 [main:106] - GETTING Head from String
2021-03-12 00:45:16,582 [main:106] - GETTING Head from String
2021-03-12 00:45:16,583 [main:106] - GETTING Head from HTML
2021-03-12 00:45:16,649 [main:113] - Case = [public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@50e2f4cc]]
2021-03-12 00:45:16,649 [main:149] - GENERATING call of type public final inline fun head(init: Head.() -> kotlin.Unit): Head defined in HTML[SimpleFunctionDescriptorImpl@50e2f4cc]
2021-03-12 00:45:16,650 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).head(init)
2021-03-12 00:45:16,650 [main:61] - replacement of initTag(Head(), { require(true)}) of type Head is Head()
2021-03-12 00:45:16,763 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:45:16,763 [main:66] - Compilation checking started
2021-03-12 00:45:17,198 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:45:17,199 [main:53] - replacing ("This is some", String)
2021-03-12 00:45:17,199 [main:50] - replacing "This is some" String
2021-03-12 00:45:17,200 [main:54] - Getting value of type String
2021-03-12 00:45:17,341 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:45:17,344 [main:58] - GENERATED VALUE OF TYPE String = "bumfs"
2021-03-12 00:45:17,344 [main:61] - GENERATED IS CALL =false
2021-03-12 00:45:17,642 [main:67] - randomType = LinkedHashMap<Int, HashSet<Title>>
2021-03-12 00:45:17,761 [main:302] - generating value of type = LinkedHashMap<Int, HashSet<Title>> false depth = 0
2021-03-12 00:45:17,890 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Int, HashSet<Title>> = TODO()
2021-03-12 00:45:17,893 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Int, HashSet<Title>> = TODO()
2021-03-12 00:45:18,012 [main:95] - GENERATED = linkedMapOf<Int, HashSet<Title>>()
2021-03-12 00:45:18,186 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:45:18,325 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:18,328 [main:78] - Generated call from random type = (linkedMapOf<Int, HashSet<Title>>()).size.toString(-2020074254)
2021-03-12 00:45:18,328 [main:106] - GETTING String from String
2021-03-12 00:45:18,355 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:45:18,355 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:45:18,478 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:18,602 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:18,605 [main:117] - GENERATED CALL = (TextElement("utmeo").text).padStart(-807498700, '퇋')
2021-03-12 00:45:18,605 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:45:18,605 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:45:18,605 [main:117] - GENERATED CALL = (TextElement("utmeo").text).trimStart()
2021-03-12 00:45:18,605 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:45:18,605 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:45:18,605 [main:117] - GENERATED CALL = (TextElement("utmeo").text).trim()
2021-03-12 00:45:18,605 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:45:18,605 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:45:18,730 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:45:18,730 [main:117] - GENERATED CALL = (TextElement("utmeo").text).plus("qcgfd")
2021-03-12 00:45:18,730 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]]
2021-03-12 00:45:18,730 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:45:18,855 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:18,858 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]
2021-03-12 00:45:18,858 [main:117] - GENERATED CALL = (TextElement("utmeo").text).get(988816370).lowercase()
2021-03-12 00:45:18,858 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]]
2021-03-12 00:45:18,858 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:45:18,972 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:18,974 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]
2021-03-12 00:45:18,974 [main:117] - GENERATED CALL = (TextElement("utmeo").text).get(1074510519).uppercase()
2021-03-12 00:45:18,975 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:45:18,975 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:45:19,093 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:19,096 [main:117] - GENERATED CALL = (TextElement("utmeo").text).replaceBeforeLast('믰', testHtmlNoInline(), A().href)
2021-03-12 00:45:19,096 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:45:19,096 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:45:19,210 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:19,349 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:19,476 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:45:19,479 [main:117] - GENERATED CALL = (TextElement("utmeo").text).replace('?', 'Ᏻ', true)
2021-03-12 00:45:19,479 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:45:19,479 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:45:19,479 [main:117] - GENERATED CALL = (TextElement("utmeo").text).capitalize()
2021-03-12 00:45:19,479 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:45:19,479 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:45:19,599 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:45:19,601 [main:117] - GENERATED CALL = (TextElement("utmeo").text).trimMargin("qzpix")
2021-03-12 00:45:19,601 [main:61] - replacement of "This is some" of type String is (TextElement("utmeo").text).get(1074510519).uppercase()
2021-03-12 00:45:19,722 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:45:19,725 [main:53] - replacing ({
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        (HTML().bodyNoInline()).ul({ check(true)}).b({ check(false, { "hjhhz"})})
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { require(true)}
                        +A().href
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                }, [@kotlin.ExtensionFunctionType] Function1<Body, Unit>)
2021-03-12 00:45:19,725 [main:50] - replacing {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        (HTML().bodyNoInline()).ul({ check(true)}).b({ check(false, { "hjhhz"})})
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { require(true)}
                        +A().href
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                } [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:45:19,725 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:45:19,851 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:45:19,853 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:19,972 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:19,976 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:20,389 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:20,392 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:20,395 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:20,395 [main:95] - GENERATED = check(false, { "gewjy"})
2021-03-12 00:45:20,395 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Body, Unit> = { check(false, { "gewjy"})}
2021-03-12 00:45:20,395 [main:61] - GENERATED IS CALL =false
2021-03-12 00:45:20,534 [main:67] - randomType = Byte
2021-03-12 00:45:20,655 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:45:20,702 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:45:20,727 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Title
2021-03-12 00:45:20,779 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:45:20,834 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Head
2021-03-12 00:45:20,902 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from H1
2021-03-12 00:45:20,989 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:45:20,993 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:45:21,085 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:45:21,181 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:45:21,185 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from B
2021-03-12 00:45:21,253 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:45:21,257 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from UL
2021-03-12 00:45:21,320 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from LI
2021-03-12 00:45:21,384 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:45:21,388 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:45:21,391 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:45:21,395 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:45:21,399 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:45:21,403 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:45:21,407 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Int
2021-03-12 00:45:21,437 [main:61] - replacement of {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"uqkjx"
                        (HTML().bodyNoInline()).ul({ check(true)}).b({ check(false, { "hjhhz"})})
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { require(true)}
                        +A().href
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +(23379.toUShort()).toLong().toString(bodyVar)
                        ul { check(false)}
                    }
                } of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit> is { check(false, { "gewjy"})}
2021-03-12 00:45:21,588 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:45:21,590 [main:53] - replacing ({ +arg; +(htmlNoInline({ require(false)})).name.decapitalize(); +(HTML().body()).name.replaceAfterLast('퉖', testBodyHtmlNoInline(), "wwuxd") }, [@kotlin.ExtensionFunctionType] Function1<LI, Unit>)
2021-03-12 00:45:21,590 [main:50] - replacing { +arg; +(htmlNoInline({ require(false)})).name.decapitalize(); +(HTML().body()).name.replaceAfterLast('퉖', testBodyHtmlNoInline(), "wwuxd") } [@kotlin.ExtensionFunctionType] Function1<LI, Unit>
2021-03-12 00:45:21,590 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<LI, Unit>
2021-03-12 00:45:21,720 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<LI, Unit> false depth = 0
2021-03-12 00:45:21,722 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:21,848 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:21,851 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:22,252 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:22,255 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:22,257 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:22,257 [main:95] - GENERATED = check(true, { "mdngk"})
2021-03-12 00:45:22,258 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<LI, Unit> = { check(true, { "mdngk"})}
2021-03-12 00:45:22,258 [main:61] - GENERATED IS CALL =false
2021-03-12 00:45:22,268 [main:67] - randomType = TagWithText
2021-03-12 00:45:22,382 [main:302] - generating value of type = TagWithText false depth = 0
2021-03-12 00:45:22,384 [main:112] - generating klass TagWithText text = abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}
2021-03-12 00:45:22,709 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Body
2021-03-12 00:45:22,798 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:22,823 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from LI
2021-03-12 00:45:22,900 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from H1
2021-03-12 00:45:22,976 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from P
2021-03-12 00:45:23,072 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from P
2021-03-12 00:45:23,076 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:23,080 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Body
2021-03-12 00:45:23,084 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:23,088 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Title
2021-03-12 00:45:23,154 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:23,161 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Head
2021-03-12 00:45:23,234 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from HTML
2021-03-12 00:45:23,305 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:23,309 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from B
2021-03-12 00:45:23,388 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from HTML
2021-03-12 00:45:23,392 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from UL
2021-03-12 00:45:23,454 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:23,458 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:23,458 [main:61] - replacement of { +arg; +(htmlNoInline({ require(false)})).name.decapitalize(); +(HTML().body()).name.replaceAfterLast('퉖', testBodyHtmlNoInline(), "wwuxd") } of type [@kotlin.ExtensionFunctionType] Function1<LI, Unit> is { check(true, { "mdngk"})}
2021-03-12 00:45:23,591 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:45:23,593 [main:53] - replacing ({
                        +"This is some"
                        b { println()}
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }, [@kotlin.ExtensionFunctionType] Function1<P, Unit>)
2021-03-12 00:45:23,595 [main:50] - replacing {
                        +"This is some"
                        b { println()}
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    } [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:45:23,595 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:45:23,718 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:23,721 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:23,848 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:23,851 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:24,252 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:24,255 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:24,258 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:24,258 [main:95] - GENERATED = require(true, { "whads"})
2021-03-12 00:45:24,258 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<P, Unit> = { require(true, { "whads"})}
2021-03-12 00:45:24,258 [main:61] - GENERATED IS CALL =false
2021-03-12 00:45:25,002 [main:67] - randomType = Function1<Head, Function1<MutableMap<Int, Double>, UShort>>
2021-03-12 00:45:25,006 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from B
2021-03-12 00:45:25,101 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:45:25,130 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:45:25,134 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:45:25,220 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:45:25,224 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:45:25,325 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from UL
2021-03-12 00:45:25,406 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:45:25,410 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from H1
2021-03-12 00:45:25,471 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:45:25,475 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:45:25,479 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:45:25,523 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Head
2021-03-12 00:45:25,565 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:45:25,569 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from LI
2021-03-12 00:45:25,631 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Title
2021-03-12 00:45:25,673 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:45:25,677 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:45:25,680 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:45:25,681 [main:61] - replacement of {
                        +"This is some"
                        b { println()}
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    } of type [@kotlin.ExtensionFunctionType] Function1<P, Unit> is { require(true, { "whads"})}
2021-03-12 00:45:25,813 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:45:25,814 [main:53] - replacing ("text. For more see the", String)
2021-03-12 00:45:25,814 [main:50] - replacing "text. For more see the" String
2021-03-12 00:45:25,814 [main:54] - Getting value of type String
2021-03-12 00:45:25,937 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:45:25,939 [main:58] - GENERATED VALUE OF TYPE String = "egjij"
2021-03-12 00:45:25,940 [main:61] - GENERATED IS CALL =false
2021-03-12 00:45:25,950 [main:67] - randomType = H1
2021-03-12 00:45:26,071 [main:302] - generating value of type = H1 false depth = 0
2021-03-12 00:45:26,074 [main:112] - generating klass H1 text = class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
2021-03-12 00:45:26,196 [main:194] - Type params = []
2021-03-12 00:45:26,415 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:45:26,530 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:26,533 [main:78] - Generated call from random type = (H1()).name.replaceBefore('㳊', TODO().toString(), TextElement("utmeo").text)
2021-03-12 00:45:26,534 [main:106] - GETTING String from HTML
2021-03-12 00:45:26,598 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in HTML[PropertyDescriptorImpl@1de9a405], public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]]
2021-03-12 00:45:26,598 [main:149] - GENERATING call of type public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]
2021-03-12 00:45:26,710 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:45:26,713 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).attributes.get("eflru")
2021-03-12 00:45:26,713 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:45:26,713 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:45:26,849 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:45:26,853 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.trimMargin("jngwd")
2021-03-12 00:45:26,853 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:45:26,853 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:45:26,977 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:45:26,980 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:45:26,983 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.takeWhile({a: Char -> true})
2021-03-12 00:45:26,983 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:45:26,983 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:45:27,105 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:45:27,230 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:45:27,233 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:45:27,500 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:45:27,506 [main:95] - GENERATED = StringBuilder("ectzj")
2021-03-12 00:45:27,506 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.removeSuffix(StringBuilder("ectzj"))
2021-03-12 00:45:27,506 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:45:27,506 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:45:27,507 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.lowercase()
2021-03-12 00:45:27,507 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]]
2021-03-12 00:45:27,507 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]
2021-03-12 00:45:27,507 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.uppercase()
2021-03-12 00:45:27,507 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:45:27,507 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:45:27,621 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:45:27,624 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:45:27,627 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.dropLastWhile({a: Char -> true})
2021-03-12 00:45:27,627 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]]
2021-03-12 00:45:27,627 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]
2021-03-12 00:45:27,741 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:45:27,744 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:45:27,746 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.dropWhile({a: Char -> true})
2021-03-12 00:45:27,746 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:45:27,746 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:45:27,890 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:27,893 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.takeLast(-1694404647)
2021-03-12 00:45:27,893 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]]
2021-03-12 00:45:27,893 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]
2021-03-12 00:45:28,013 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:45:28,015 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:45:28,018 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceFirstChar({a: Char -> '狮'})
2021-03-12 00:45:28,018 [main:61] - replacement of "text. For more see the" of type String is "egjij"
2021-03-12 00:45:28,137 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:45:28,139 [main:53] - replacing ("3", String)
2021-03-12 00:45:28,140 [main:50] - replacing "3" String
2021-03-12 00:45:28,140 [main:54] - Getting value of type String
2021-03-12 00:45:28,260 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:45:28,263 [main:58] - GENERATED VALUE OF TYPE String = "nncms"
2021-03-12 00:45:28,263 [main:61] - GENERATED IS CALL =false
2021-03-12 00:45:28,550 [main:67] - randomType = ArrayList<Set<Long>>
2021-03-12 00:45:28,664 [main:302] - generating value of type = ArrayList<Set<Long>> false depth = 0
2021-03-12 00:45:28,783 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Set<Long>> = TODO()
2021-03-12 00:45:28,786 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Set<Long>> = TODO()
2021-03-12 00:45:28,929 [main:95] - GENERATED = arrayListOf<Set<Long>>()
2021-03-12 00:45:29,107 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:45:29,225 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:29,228 [main:78] - Generated call from random type = (arrayListOf<Set<Long>>()).modCount.toString(-1228574544)
2021-03-12 00:45:29,229 [main:106] - GETTING String from Title
2021-03-12 00:45:29,276 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:45:29,276 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:45:29,395 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:45:29,398 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:45:29,401 [main:117] - GENERATED CALL = (Head().title()).name.filter({a: Char -> true})
2021-03-12 00:45:29,401 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:45:29,401 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:45:29,401 [main:117] - GENERATED CALL = (Head().title()).name.trimMargin(testHtmlNoInline())
2021-03-12 00:45:29,401 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:45:29,401 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:45:29,526 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:29,642 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:29,645 [main:117] - GENERATED CALL = (Head().title()).name.padStart(30461267, '⇪')
2021-03-12 00:45:29,645 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]]
2021-03-12 00:45:29,645 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:45:29,758 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:29,761 [main:117] - GENERATED CALL = (Head().title()).name.dropLast(-816721226)
2021-03-12 00:45:29,762 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:45:29,762 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:45:29,894 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:30,016 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:45:30,019 [main:117] - GENERATED CALL = (Head().title()).name.replaceAfter('', "aweck", testAllInline())
2021-03-12 00:45:30,019 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]]
2021-03-12 00:45:30,019 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]
2021-03-12 00:45:30,140 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:30,261 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:30,264 [main:117] - GENERATED CALL = (Head().title()).name.removeRange(-1291198257, 1404493684)
2021-03-12 00:45:30,264 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:45:30,265 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:45:30,265 [main:117] - GENERATED CALL = (Head().title()).name.prependIndent(testBodyHtmlNoInline())
2021-03-12 00:45:30,265 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:45:30,265 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:45:30,265 [main:117] - GENERATED CALL = (Head().title()).name.capitalize()
2021-03-12 00:45:30,265 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:45:30,265 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:45:30,393 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:30,396 [main:117] - GENERATED CALL = (Head().title()).name.replaceBeforeLast('켡', testHtmlNoInline(), testBodyHtmlNoInline())
2021-03-12 00:45:30,397 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:45:30,397 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:45:30,397 [main:117] - GENERATED CALL = (Head().title()).name.toLowerCase()
2021-03-12 00:45:30,397 [main:61] - replacement of "3" of type String is (Head().title()).name.capitalize()
2021-03-12 00:45:30,512 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:45:30,512 [main:66] - Compilation checking started
2021-03-12 00:45:30,826 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), (Head().title()).name.capitalize())
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:45:30,829 [main:53] - replacing (expected, String)
2021-03-12 00:45:30,829 [main:50] - replacing expected String
2021-03-12 00:45:30,829 [main:54] - Getting value of type String
2021-03-12 00:45:30,963 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:45:30,966 [main:58] - GENERATED VALUE OF TYPE String = "stvdl"
2021-03-12 00:45:30,966 [main:61] - GENERATED IS CALL =false
2021-03-12 00:45:30,977 [main:67] - randomType = Tag
2021-03-12 00:45:31,097 [main:302] - generating value of type = Tag false depth = 0
2021-03-12 00:45:31,100 [main:112] - generating klass Tag text = abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}
2021-03-12 00:45:31,377 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:45:31,511 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:45:31,518 [main:78] - Generated call from random type = (TODO()).name.removePrefix("mpnvv")
2021-03-12 00:45:31,518 [main:106] - GETTING String from Body
2021-03-12 00:45:31,603 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:45:31,603 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:45:31,717 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:31,833 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:45:31,835 [main:117] - GENERATED CALL = (HTML().body()).name.replaceAfterLast('敡', "dhenh", testHtmlNoInline())
2021-03-12 00:45:31,836 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:45:31,836 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:45:31,836 [main:117] - GENERATED CALL = (HTML().body()).name.toLowerCase()
2021-03-12 00:45:31,836 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:45:31,836 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:45:31,967 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:45:31,970 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:45:31,973 [main:117] - GENERATED CALL = (HTML().body()).name.filterNot({a: Char -> true})
2021-03-12 00:45:31,973 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:45:31,973 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:45:32,092 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:32,214 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:32,342 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:45:32,345 [main:117] - GENERATED CALL = (HTML().body()).name.replace('⋥', '눥', true)
2021-03-12 00:45:32,345 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903], public final val name: kotlin.String defined in H1[PropertyDescriptorImpl@e65af9a]]
2021-03-12 00:45:32,345 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]
2021-03-12 00:45:32,472 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:45:32,474 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:32,480 [main:117] - GENERATED CALL = (HTML().body()).h1({ println()}).name
2021-03-12 00:45:32,480 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:45:32,480 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:45:32,594 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:32,712 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:32,829 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:45:32,980 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:45:32,983 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:45:33,251 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:45:33,254 [main:95] - GENERATED = StringBuilder("fywkv")
2021-03-12 00:45:33,254 [main:117] - GENERATED CALL = (HTML().body()).name.replaceRange(1589293064, -2002297155, StringBuilder("fywkv"))
2021-03-12 00:45:33,254 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:45:33,254 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:45:33,375 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:33,502 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:45:33,505 [main:117] - GENERATED CALL = (HTML().body()).name.replaceAfter('᭫', "fyrxd", A().href)
2021-03-12 00:45:33,505 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b], public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2]]
2021-03-12 00:45:33,505 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b]
2021-03-12 00:45:33,619 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:45:33,621 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:33,740 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:33,743 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:34,190 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:45:34,190 [main:95] - GENERATED = println("oktms")
2021-03-12 00:45:34,190 [main:117] - GENERATED CALL = (HTML().body()).b({ println("oktms")}).name
2021-03-12 00:45:34,191 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:45:34,191 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:45:34,191 [main:117] - GENERATED CALL = (HTML().body()).name.lowercase()
2021-03-12 00:45:34,191 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:45:34,191 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:45:34,313 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:45:34,319 [main:117] - GENERATED CALL = (HTML().body()).name.removePrefix(StringBuilder())
2021-03-12 00:45:34,319 [main:61] - replacement of expected of type String is (HTML().body()).name.replace('⋥', '눥', true)
2021-03-12 00:45:34,441 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:45:34,441 [main:66] - Compilation checking started
2021-03-12 00:45:34,768 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${(HTML().body()).name.replace('⋥', '눥', true)} "

    return "OK"
}


2021-03-12 00:45:34,770 [main:53] - replacing (testBodyHtmlNoInline(), String)
2021-03-12 00:45:34,770 [main:50] - replacing testBodyHtmlNoInline() String
2021-03-12 00:45:34,770 [main:54] - Getting value of type String
2021-03-12 00:45:34,889 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:45:34,892 [main:58] - GENERATED VALUE OF TYPE String = "zlfkx"
2021-03-12 00:45:34,892 [main:61] - GENERATED IS CALL =false
2021-03-12 00:45:35,198 [main:67] - randomType = Sequence<Sequence<Element>>
2021-03-12 00:45:35,199 [main:106] - GETTING String from UL
2021-03-12 00:45:35,293 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:45:35,294 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:45:35,294 [main:117] - GENERATED CALL = (B().ul()).name.concat(testBodyNoInline())
2021-03-12 00:45:35,294 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]]
2021-03-12 00:45:35,294 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]
2021-03-12 00:45:35,416 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:45:35,419 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:45:35,421 [main:117] - GENERATED CALL = (B().ul()).name.dropWhile({a: Char -> true})
2021-03-12 00:45:35,421 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23]]
2021-03-12 00:45:35,422 [main:117] - GENERATED CALL = (B().ul()).name
2021-03-12 00:45:35,422 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]]
2021-03-12 00:45:35,422 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]
2021-03-12 00:45:35,549 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:35,552 [main:117] - GENERATED CALL = (B().ul()).name.take(-1119319721)
2021-03-12 00:45:35,552 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:45:35,552 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:45:35,665 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:45:35,668 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:45:35,671 [main:117] - GENERATED CALL = (B().ul()).name.filter({a: Char -> false})
2021-03-12 00:45:35,671 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:45:35,671 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:45:35,671 [main:117] - GENERATED CALL = (B().ul()).name.toLowerCase()
2021-03-12 00:45:35,671 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:45:35,671 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:45:35,671 [main:117] - GENERATED CALL = (B().ul()).name.trimMargin(A().href)
2021-03-12 00:45:35,671 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:45:35,671 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:45:35,788 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:45:35,790 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:45:35,793 [main:117] - GENERATED CALL = (B().ul()).name.takeWhile({a: Char -> true})
2021-03-12 00:45:35,794 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:45:35,794 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:45:35,909 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:45:35,909 [main:117] - GENERATED CALL = (B().ul()).name.plus("uviid")
2021-03-12 00:45:35,910 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:45:35,910 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:45:36,043 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:36,168 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:45:36,295 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:45:36,297 [main:117] - GENERATED CALL = (B().ul()).name.replace('ଗ', 'ꦍ', false)
2021-03-12 00:45:36,298 [main:61] - replacement of testBodyHtmlNoInline() of type String is (B().ul()).name.filter({a: Char -> false})
2021-03-12 00:45:36,419 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:45:36,420 [main:66] - Compilation checking started
2021-03-12 00:45:36,745 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder())) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${(B().ul()).name.filter({a: Char -> false})}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:45:36,747 [main:53] - replacing ({ +(0.9689009624430491)?.toShort().toString(227302773); +"$htmlVal"; +(html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceFirstChar({a: Char -> '닧'}) }, [@kotlin.ExtensionFunctionType] Function1<LI, Unit>)
2021-03-12 00:45:36,747 [main:50] - replacing { +(0.9689009624430491)?.toShort().toString(227302773); +"$htmlVal"; +(html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceFirstChar({a: Char -> '닧'}) } [@kotlin.ExtensionFunctionType] Function1<LI, Unit>
2021-03-12 00:45:36,747 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<LI, Unit>
2021-03-12 00:45:36,865 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<LI, Unit> false depth = 0
2021-03-12 00:45:36,868 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:37,007 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:37,011 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:37,281 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:45:37,281 [main:95] - GENERATED = print("qqvhy")
2021-03-12 00:45:37,281 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<LI, Unit> = { print("qqvhy")}
2021-03-12 00:45:37,281 [main:61] - GENERATED IS CALL =false
2021-03-12 00:45:37,292 [main:67] - randomType = Element
2021-03-12 00:45:37,412 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:45:37,415 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:45:37,678 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:37,707 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Body
2021-03-12 00:45:37,797 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from B
2021-03-12 00:45:37,879 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:37,883 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from LI
2021-03-12 00:45:37,946 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:37,950 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:37,953 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:37,957 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Body
2021-03-12 00:45:37,961 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Head
2021-03-12 00:45:38,004 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from HTML
2021-03-12 00:45:38,048 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from P
2021-03-12 00:45:38,110 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:38,114 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from String
2021-03-12 00:45:38,118 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from Title
2021-03-12 00:45:38,160 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from P
2021-03-12 00:45:38,164 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from HTML
2021-03-12 00:45:38,168 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from UL
2021-03-12 00:45:38,231 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<LI, Unit> from H1
2021-03-12 00:45:38,289 [main:61] - replacement of { +(0.9689009624430491)?.toShort().toString(227302773); +"$htmlVal"; +(html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceFirstChar({a: Char -> '닧'}) } of type [@kotlin.ExtensionFunctionType] Function1<LI, Unit> is { print("qqvhy")}
2021-03-12 00:45:38,420 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:45:38,422 [main:53] - replacing (p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { contract({ println()})}
                        }
                    }, P)
2021-03-12 00:45:38,422 [main:50] - replacing p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { contract({ println()})}
                        }
                    } P
2021-03-12 00:45:38,422 [main:54] - Getting value of type P
2021-03-12 00:45:38,543 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:45:38,546 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:45:38,667 [main:194] - Type params = []
2021-03-12 00:45:38,786 [main:58] - GENERATED VALUE OF TYPE P = P()
2021-03-12 00:45:38,786 [main:61] - GENERATED IS CALL =true
2021-03-12 00:45:39,105 [main:67] - randomType = Byte
2021-03-12 00:45:39,219 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:45:39,269 [main:106] - GETTING P from HTML
2021-03-12 00:45:39,308 [main:113] - Case = [public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d], public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]]
2021-03-12 00:45:39,308 [main:149] - GENERATING call of type public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]
2021-03-12 00:45:39,442 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:45:39,445 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:39,573 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:39,576 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:39,843 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:45:39,843 [main:95] - GENERATED = println("bbbqh")
2021-03-12 00:45:39,843 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]
2021-03-12 00:45:39,973 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:39,975 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:40,095 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:40,098 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:40,511 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:45:40,514 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:45:40,517 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:45:40,645 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:40,648 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:41,067 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:45:41,070 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:45:41,073 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:45:41,073 [main:95] - GENERATED = check(false, { "yyzir"})
2021-03-12 00:45:41,073 [main:95] - GENERATED = repeat(371351128, {a: Int -> check(false, { "yyzir"})})
2021-03-12 00:45:41,074 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).body({ println("bbbqh")}).p({ repeat(371351128, {a: Int -> check(false, { "yyzir"})})})
2021-03-12 00:45:41,074 [main:113] - Case = [public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@1df092da]]
2021-03-12 00:45:41,074 [main:149] - GENERATING call of type public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]
2021-03-12 00:45:41,194 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:45:41,196 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:41,315 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:41,319 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:41,599 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:45:41,600 [main:95] - GENERATED = println("nviuo")
2021-03-12 00:45:41,600 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@1df092da]
2021-03-12 00:45:41,719 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:41,721 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:41,845 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:41,848 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:42,254 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:42,257 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:42,259 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:42,259 [main:95] - GENERATED = require(false, { "nreyd"})
2021-03-12 00:45:42,260 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).body({ println("nviuo")}).pNoInline({ require(false, { "nreyd"})})
2021-03-12 00:45:42,260 [main:61] - replacement of p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { contract({ println()})}
                        }
                    } of type P is P()
2021-03-12 00:45:42,373 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:45:42,374 [main:53] - replacing (initTag(Body(), { require(false)}), Body)
2021-03-12 00:45:42,374 [main:50] - replacing initTag(Body(), { require(false)}) Body
2021-03-12 00:45:42,374 [main:54] - Getting value of type Body
2021-03-12 00:45:42,509 [main:302] - generating value of type = Body false depth = 0
2021-03-12 00:45:42,512 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:45:42,634 [main:194] - Type params = []
2021-03-12 00:45:42,756 [main:58] - GENERATED VALUE OF TYPE Body = Body()
2021-03-12 00:45:42,756 [main:61] - GENERATED IS CALL =true
2021-03-12 00:45:43,179 [main:67] - randomType = ArrayList<Set<Double>>
2021-03-12 00:45:43,293 [main:302] - generating value of type = ArrayList<Set<Double>> false depth = 0
2021-03-12 00:45:43,413 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Set<Double>> = TODO()
2021-03-12 00:45:43,416 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Set<Double>> = TODO()
2021-03-12 00:45:43,704 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:45:43,707 [main:95] - GENERATED = ArrayList<Set<Double>>(369807480)
2021-03-12 00:45:43,912 [main:106] - GETTING Body from Head
2021-03-12 00:45:43,971 [main:106] - GETTING Body from String
2021-03-12 00:45:43,991 [main:106] - GETTING Body from H1
2021-03-12 00:45:44,072 [main:106] - GETTING Body from String
2021-03-12 00:45:44,073 [main:106] - GETTING Body from P
2021-03-12 00:45:44,156 [main:106] - GETTING Body from String
2021-03-12 00:45:44,156 [main:106] - GETTING Body from LI
2021-03-12 00:45:44,250 [main:106] - GETTING Body from String
2021-03-12 00:45:44,250 [main:106] - GETTING Body from P
2021-03-12 00:45:44,251 [main:106] - GETTING Body from HTML
2021-03-12 00:45:44,316 [main:113] - Case = [public final fun bodyNoInline(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@22614b31]]
2021-03-12 00:45:44,316 [main:149] - GENERATING call of type public final fun bodyNoInline(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@22614b31]
2021-03-12 00:45:44,435 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:45:44,437 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:44,578 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:44,582 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:44,847 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:44,850 [main:95] - GENERATED = check(false)
2021-03-12 00:45:44,850 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).bodyNoInline({ check(false)})
2021-03-12 00:45:44,850 [main:113] - Case = [public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]]
2021-03-12 00:45:44,850 [main:149] - GENERATING call of type public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]
2021-03-12 00:45:44,975 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:45:44,979 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:45,111 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:45,115 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:45,367 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:45:45,370 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:45:45,375 [main:95] - GENERATED = contract({ println()})
2021-03-12 00:45:45,376 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).body({ contract({ println()})})
2021-03-12 00:45:45,376 [main:61] - replacement of initTag(Body(), { require(false)}) of type Body is (htmlNoInline({ require(false)})).bodyNoInline({ check(false)})
2021-03-12 00:45:45,488 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:45:45,489 [main:53] - replacing (args, Array<String>)
2021-03-12 00:45:45,489 [main:50] - replacing args Array<String>
2021-03-12 00:45:45,489 [main:54] - Getting value of type Array<String>
2021-03-12 00:45:45,621 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-12 00:45:45,747 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-12 00:45:45,750 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-12 00:45:45,877 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:45:45,880 [main:95] - GENERATED = arrayOf<String>("auzrb")
2021-03-12 00:45:45,880 [main:58] - GENERATED VALUE OF TYPE Array<String> = arrayOf<String>("auzrb")
2021-03-12 00:45:45,880 [main:61] - GENERATED IS CALL =true
2021-03-12 00:45:46,027 [main:67] - randomType = ArrayDeque<P>
2021-03-12 00:45:46,163 [main:302] - generating value of type = ArrayDeque<P> false depth = 0
2021-03-12 00:45:46,284 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<P>): ArrayDeque<P> = TODO()
2021-03-12 00:45:46,287 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<P>): ArrayDeque<P> = TODO()
2021-03-12 00:45:46,544 [main:302] - generating value of type = Collection<P> false depth = 3
2021-03-12 00:45:46,692 [main:43] - GENERATING CALL OF fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<P>.()->kotlin.Unit): Collection<P> = TODO()
2021-03-12 00:45:46,696 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<P>.()->kotlin.Unit): Collection<P> = TODO()
2021-03-12 00:45:47,110 [main:302] - generating value of type = Int true depth = 6
2021-03-12 00:45:47,113 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<P>, Unit> false depth = 6
2021-03-12 00:45:47,115 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 00:45:47,250 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:47,254 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:47,652 [main:302] - generating value of type = Boolean true depth = 10
2021-03-12 00:45:47,654 [main:302] - generating value of type = Function0<Any> false depth = 10
2021-03-12 00:45:47,657 [main:302] - generating value of type = Any false depth = 11
2021-03-12 00:45:47,657 [main:95] - GENERATED = require(true, { "ohcwc"})
2021-03-12 00:45:47,657 [main:95] - GENERATED = buildSet<P>(193949280, { require(true, { "ohcwc"})})
2021-03-12 00:45:47,657 [main:95] - GENERATED = ArrayDeque<P>(buildSet<P>(193949280, { require(true, { "ohcwc"})}))
2021-03-12 00:45:47,774 [main:106] - GETTING Array<String> from String
2021-03-12 00:45:47,791 [main:106] - GETTING Array<String> from Head
2021-03-12 00:45:47,829 [main:106] - GETTING Array<String> from String
2021-03-12 00:45:47,830 [main:106] - GETTING Array<String> from String
2021-03-12 00:45:47,831 [main:106] - GETTING Array<String> from B
2021-03-12 00:45:47,890 [main:106] - GETTING Array<String> from LI
2021-03-12 00:45:47,948 [main:106] - GETTING Array<String> from String
2021-03-12 00:45:47,949 [main:106] - GETTING Array<String> from String
2021-03-12 00:45:47,950 [main:106] - GETTING Array<String> from String
2021-03-12 00:45:47,950 [main:106] - GETTING Array<String> from Title
2021-03-12 00:45:47,989 [main:106] - GETTING Array<String> from Body
2021-03-12 00:45:48,049 [main:106] - GETTING Array<String> from P
2021-03-12 00:45:48,107 [main:106] - GETTING Array<String> from UL
2021-03-12 00:45:48,166 [main:106] - GETTING Array<String> from Body
2021-03-12 00:45:48,167 [main:106] - GETTING Array<String> from HTML
2021-03-12 00:45:48,212 [main:106] - GETTING Array<String> from P
2021-03-12 00:45:48,213 [main:106] - GETTING Array<String> from String
2021-03-12 00:45:48,214 [main:106] - GETTING Array<String> from HTML
2021-03-12 00:45:48,215 [main:106] - GETTING Array<String> from H1
2021-03-12 00:45:48,275 [main:61] - replacement of args of type Array<String> is arrayOf<String>("auzrb")
2021-03-12 00:45:48,410 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:45:48,412 [main:53] - replacing (h1 { +"XML encoding with Kotlin" }, H1)
2021-03-12 00:45:48,412 [main:50] - replacing h1 { +"XML encoding with Kotlin" } H1
2021-03-12 00:45:48,412 [main:54] - Getting value of type H1
2021-03-12 00:45:48,535 [main:302] - generating value of type = H1 false depth = 0
2021-03-12 00:45:48,537 [main:112] - generating klass H1 text = class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
2021-03-12 00:45:48,659 [main:194] - Type params = []
2021-03-12 00:45:48,781 [main:58] - GENERATED VALUE OF TYPE H1 = H1()
2021-03-12 00:45:48,781 [main:61] - GENERATED IS CALL =true
2021-03-12 00:45:48,934 [main:67] - randomType = Int?
2021-03-12 00:45:49,052 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:45:49,111 [main:106] - GETTING H1 from String
2021-03-12 00:45:49,137 [main:106] - GETTING H1 from Int
2021-03-12 00:45:49,189 [main:106] - GETTING H1 from String
2021-03-12 00:45:49,189 [main:106] - GETTING H1 from String
2021-03-12 00:45:49,190 [main:106] - GETTING H1 from Head
2021-03-12 00:45:49,249 [main:106] - GETTING H1 from HTML
2021-03-12 00:45:49,302 [main:113] - Case = [public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d], public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]]
2021-03-12 00:45:49,302 [main:149] - GENERATING call of type public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]
2021-03-12 00:45:49,436 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:45:49,439 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:49,567 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:49,570 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:49,837 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:49,840 [main:95] - GENERATED = check(false)
2021-03-12 00:45:49,840 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]
2021-03-12 00:45:49,969 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:45:49,971 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:50,093 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:50,096 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:50,351 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:45:50,354 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:45:50,500 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:50,503 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:50,770 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:45:50,773 [main:95] - GENERATED = check(true)
2021-03-12 00:45:50,773 [main:95] - GENERATED = contract({ check(true)})
2021-03-12 00:45:50,773 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).body({ check(false)}).h1({ contract({ check(true)})})
2021-03-12 00:45:50,773 [main:61] - replacement of h1 { +"XML encoding with Kotlin" } of type H1 is (html({ repeat(1590980469, {a: Int -> println("skriq")})})).body({ check(false)}).h1({ contract({ check(true)})})
2021-03-12 00:45:50,895 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:45:50,897 [main:53] - replacing (body { check(true, { "mschp"})}, Body)
2021-03-12 00:45:50,897 [main:50] - replacing body { check(true, { "mschp"})} Body
2021-03-12 00:45:50,897 [main:54] - Getting value of type Body
2021-03-12 00:45:51,017 [main:302] - generating value of type = Body false depth = 0
2021-03-12 00:45:51,028 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:45:51,145 [main:194] - Type params = []
2021-03-12 00:45:51,261 [main:58] - GENERATED VALUE OF TYPE Body = Body()
2021-03-12 00:45:51,261 [main:61] - GENERATED IS CALL =true
2021-03-12 00:45:51,401 [main:67] - randomType = ArrayList<Int>
2021-03-12 00:45:51,539 [main:302] - generating value of type = ArrayList<Int> false depth = 0
2021-03-12 00:45:51,668 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Int> = TODO()
2021-03-12 00:45:51,671 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Int> = TODO()
2021-03-12 00:45:51,799 [main:95] - GENERATED = arrayListOf<Int>()
2021-03-12 00:45:51,969 [main:106] - GETTING Body from String
2021-03-12 00:45:51,994 [main:106] - GETTING Body from String
2021-03-12 00:45:51,995 [main:106] - GETTING Body from String
2021-03-12 00:45:51,995 [main:106] - GETTING Body from B
2021-03-12 00:45:52,090 [main:106] - GETTING Body from HTML
2021-03-12 00:45:52,178 [main:113] - Case = [public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]]
2021-03-12 00:45:52,178 [main:149] - GENERATING call of type public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]
2021-03-12 00:45:52,293 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:45:52,295 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:52,415 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:52,418 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:52,701 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:52,704 [main:95] - GENERATED = check(false)
2021-03-12 00:45:52,704 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).body({ check(false)})
2021-03-12 00:45:52,705 [main:113] - Case = [public final fun bodyNoInline(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@22614b31]]
2021-03-12 00:45:52,705 [main:149] - GENERATING call of type public final fun bodyNoInline(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@22614b31]
2021-03-12 00:45:52,826 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:45:52,829 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:52,956 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:52,960 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:53,228 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:45:53,228 [main:95] - GENERATED = println("bbtts")
2021-03-12 00:45:53,229 [main:117] - GENERATED CALL = (htmlNoInline({ require(false)})).bodyNoInline({ println("bbtts")})
2021-03-12 00:45:53,229 [main:61] - replacement of body { check(true, { "mschp"})} of type Body is Body()
2021-03-12 00:45:53,342 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:45:53,343 [main:53] - replacing (p { require(true, { "whads"})}, P)
2021-03-12 00:45:53,343 [main:50] - replacing p { require(true, { "whads"})} P
2021-03-12 00:45:53,343 [main:54] - Getting value of type P
2021-03-12 00:45:53,457 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:45:53,459 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:45:53,597 [main:194] - Type params = []
2021-03-12 00:45:53,718 [main:58] - GENERATED VALUE OF TYPE P = P()
2021-03-12 00:45:53,718 [main:61] - GENERATED IS CALL =true
2021-03-12 00:45:53,729 [main:67] - randomType = B
2021-03-12 00:45:53,850 [main:302] - generating value of type = B false depth = 0
2021-03-12 00:45:53,853 [main:112] - generating klass B text = class B() : BodyTag((A().href).plus("afzqs"))
2021-03-12 00:45:53,974 [main:194] - Type params = []
2021-03-12 00:45:54,185 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@4f72c22f]
2021-03-12 00:45:54,299 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:54,302 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:54,421 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:54,425 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:54,840 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:45:54,843 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:45:54,846 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:45:54,970 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:54,974 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:55,244 [main:302] - generating value of type = Any false depth = 8
2021-03-12 00:45:55,244 [main:95] - GENERATED = println("ffyqj")
2021-03-12 00:45:55,244 [main:95] - GENERATED = repeat(1686952810, {a: Int -> println("ffyqj")})
2021-03-12 00:45:55,245 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@3aa45322]
2021-03-12 00:45:55,366 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:55,368 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:55,488 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:55,491 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:45:55,772 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:55,775 [main:95] - GENERATED = require(true)
2021-03-12 00:45:55,776 [main:78] - Generated call from random type = (B()).p({ repeat(1686952810, {a: Int -> println("ffyqj")})}).pNoInline({ require(true)})
2021-03-12 00:45:55,776 [main:106] - GETTING P from String
2021-03-12 00:45:55,804 [main:106] - GETTING P from Title
2021-03-12 00:45:55,865 [main:106] - GETTING P from String
2021-03-12 00:45:55,866 [main:106] - GETTING P from String
2021-03-12 00:45:55,866 [main:106] - GETTING P from String
2021-03-12 00:45:55,867 [main:106] - GETTING P from Body
2021-03-12 00:45:55,945 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b], public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]]
2021-03-12 00:45:55,945 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b]
2021-03-12 00:45:56,067 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:45:56,070 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:56,199 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:56,203 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:45:56,600 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:45:56,602 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:45:56,605 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:45:56,605 [main:95] - GENERATED = check(true, { "ftore"})
2021-03-12 00:45:56,605 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]
2021-03-12 00:45:56,719 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:56,721 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:56,861 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:56,865 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:57,265 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:45:57,268 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:45:57,271 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:45:57,404 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:57,407 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:57,789 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:45:57,791 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:45:57,794 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:45:57,944 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:57,947 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:45:58,209 [main:302] - generating value of type = Any false depth = 12
2021-03-12 00:45:58,209 [main:95] - GENERATED = println("yynox")
2021-03-12 00:45:58,209 [main:95] - GENERATED = repeat(-248797835, {a: Int -> println("yynox")})
2021-03-12 00:45:58,209 [main:95] - GENERATED = repeat(281169220, {a: Int -> repeat(-248797835, {a: Int -> println("yynox")})})
2021-03-12 00:45:58,210 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).b({ check(true, { "ftore"})}).p({ repeat(281169220, {a: Int -> repeat(-248797835, {a: Int -> println("yynox")})})})
2021-03-12 00:45:58,210 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]]
2021-03-12 00:45:58,210 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]
2021-03-12 00:45:58,329 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:45:58,331 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:45:58,456 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:58,459 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:58,866 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:45:58,869 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:45:58,871 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:45:59,015 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:59,020 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:59,285 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 00:45:59,288 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:45:59,412 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:59,416 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:59,813 [main:302] - generating value of type = Int true depth = 12
2021-03-12 00:45:59,816 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-12 00:45:59,818 [main:302] - generating value of type = Unit false depth = 13
2021-03-12 00:45:59,939 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:45:59,942 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:00,242 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 16
2021-03-12 00:46:00,242 [main:385] - Cant generate call of fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:00,242 [main:95] - GENERATED = repeat(865144254, {a: Int -> })
2021-03-12 00:46:00,242 [main:95] - GENERATED = contract({ repeat(865144254, {a: Int -> })})
2021-03-12 00:46:00,242 [main:95] - GENERATED = repeat(156135559, {a: Int -> contract({ repeat(865144254, {a: Int -> })})})
2021-03-12 00:46:00,243 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]
2021-03-12 00:46:00,362 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:00,365 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:00,489 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:00,493 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:00,773 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:00,776 [main:95] - GENERATED = require(true)
2021-03-12 00:46:00,776 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).p({ repeat(156135559, {a: Int -> contract({ repeat(865144254, {a: Int -> })})})}).pNoInline({ require(true)})
2021-03-12 00:46:00,776 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903], public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]]
2021-03-12 00:46:00,777 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]
2021-03-12 00:46:00,891 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:46:00,893 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:01,014 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:01,018 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:01,437 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:01,440 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:46:01,442 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:46:01,443 [main:95] - GENERATED = require(true, { "jpihf"})
2021-03-12 00:46:01,443 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]
2021-03-12 00:46:01,563 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:01,565 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:01,700 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:01,703 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:02,089 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:02,091 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:46:02,094 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:46:02,094 [main:95] - GENERATED = check(false, { "uwhte"})
2021-03-12 00:46:02,094 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).h1({ require(true, { "jpihf"})}).p({ check(false, { "uwhte"})})
2021-03-12 00:46:02,094 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]]
2021-03-12 00:46:02,094 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]
2021-03-12 00:46:02,227 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:02,229 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:02,355 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:02,358 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:02,777 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:02,780 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:46:02,783 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:46:02,783 [main:95] - GENERATED = check(true, { "gvxtc"})
2021-03-12 00:46:02,783 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).p({ check(true, { "gvxtc"})})
2021-03-12 00:46:02,783 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]]
2021-03-12 00:46:02,784 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]
2021-03-12 00:46:02,900 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:46:02,902 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:03,025 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:03,029 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:03,474 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:46:03,477 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:46:03,480 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:46:03,607 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:03,610 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:03,883 [main:302] - generating value of type = Any false depth = 8
2021-03-12 00:46:03,883 [main:95] - GENERATED = println("xzjjy")
2021-03-12 00:46:03,884 [main:95] - GENERATED = repeat(-415899815, {a: Int -> println("xzjjy")})
2021-03-12 00:46:03,884 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]
2021-03-12 00:46:03,999 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:04,001 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:04,123 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:04,127 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:04,546 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:46:04,549 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:46:04,552 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:46:04,679 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:04,683 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:05,092 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:46:05,095 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:46:05,097 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:46:05,219 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:05,222 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:05,511 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:46:05,514 [main:95] - GENERATED = require(false)
2021-03-12 00:46:05,515 [main:95] - GENERATED = repeat(1105041981, {a: Int -> require(false)})
2021-03-12 00:46:05,515 [main:95] - GENERATED = repeat(-2033010295, {a: Int -> repeat(1105041981, {a: Int -> require(false)})})
2021-03-12 00:46:05,515 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).h1({ repeat(-415899815, {a: Int -> println("xzjjy")})}).pNoInline({ repeat(-2033010295, {a: Int -> repeat(1105041981, {a: Int -> require(false)})})})
2021-03-12 00:46:05,516 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28], public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]]
2021-03-12 00:46:05,516 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28]
2021-03-12 00:46:05,637 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:46:05,639 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:05,766 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:05,770 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:06,180 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:06,182 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:46:06,185 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:46:06,185 [main:95] - GENERATED = require(false, { "idltw"})
2021-03-12 00:46:06,185 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]
2021-03-12 00:46:06,302 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:06,304 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:06,423 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:06,427 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:06,708 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:06,711 [main:95] - GENERATED = check(true)
2021-03-12 00:46:06,711 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).ul({ require(false, { "idltw"})}).p({ check(true)})
2021-03-12 00:46:06,711 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b], public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]]
2021-03-12 00:46:06,711 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]
2021-03-12 00:46:06,834 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:06,836 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:06,963 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:06,967 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:07,237 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:07,240 [main:95] - GENERATED = check(false)
2021-03-12 00:46:07,240 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]
2021-03-12 00:46:07,356 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:07,359 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:07,479 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:07,482 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:07,908 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:07,911 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:46:07,913 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:46:07,914 [main:95] - GENERATED = check(true, { "xaumf"})
2021-03-12 00:46:07,914 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).p({ check(false)}).p({ check(true, { "xaumf"})})
2021-03-12 00:46:07,914 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]]
2021-03-12 00:46:07,914 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28]
2021-03-12 00:46:08,037 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:46:08,039 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:08,175 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:08,179 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:08,565 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:08,567 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:46:08,570 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:46:08,570 [main:95] - GENERATED = check(true, { "rkyhk"})
2021-03-12 00:46:08,570 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]
2021-03-12 00:46:08,706 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:08,708 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:08,832 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:08,836 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:09,244 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:46:09,247 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:46:09,249 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:46:09,369 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:09,373 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:09,787 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:46:09,790 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:46:09,793 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:46:09,919 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:09,922 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:10,184 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:46:10,186 [main:95] - GENERATED = require(false)
2021-03-12 00:46:10,187 [main:95] - GENERATED = repeat(-412509195, {a: Int -> require(false)})
2021-03-12 00:46:10,187 [main:95] - GENERATED = repeat(-1878357553, {a: Int -> repeat(-412509195, {a: Int -> require(false)})})
2021-03-12 00:46:10,187 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).ul({ check(true, { "rkyhk"})}).pNoInline({ repeat(-1878357553, {a: Int -> repeat(-412509195, {a: Int -> require(false)})})})
2021-03-12 00:46:10,187 [main:113] - Case = [public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@1df092da]]
2021-03-12 00:46:10,187 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@1df092da]
2021-03-12 00:46:10,316 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:10,318 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:10,437 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:10,441 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:10,692 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:46:10,692 [main:95] - GENERATED = println("nyblp")
2021-03-12 00:46:10,692 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).pNoInline({ println("nyblp")})
2021-03-12 00:46:10,692 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]]
2021-03-12 00:46:10,692 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b]
2021-03-12 00:46:10,828 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:46:10,831 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:10,958 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:10,961 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:11,225 [main:95] - GENERATED = println(null)
2021-03-12 00:46:11,225 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]
2021-03-12 00:46:11,352 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:11,355 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:11,473 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:11,477 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:11,889 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:46:11,891 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:46:11,894 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:46:12,018 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:12,021 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:12,285 [main:302] - generating value of type = Any false depth = 8
2021-03-12 00:46:12,285 [main:95] - GENERATED = print("zannl")
2021-03-12 00:46:12,285 [main:95] - GENERATED = repeat(489147973, {a: Int -> print("zannl")})
2021-03-12 00:46:12,286 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).b({ println(null)}).pNoInline({ repeat(489147973, {a: Int -> print("zannl")})})
2021-03-12 00:46:12,286 [main:61] - replacement of p { require(true, { "whads"})} of type P is (HTML().bodyNoInline()).p({ repeat(156135559, {a: Int -> contract({ repeat(865144254, {a: Int -> })})})}).pNoInline({ require(true)})
2021-03-12 00:46:12,412 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:46:12,414 [main:53] - replacing ("project", String)
2021-03-12 00:46:12,414 [main:50] - replacing "project" String
2021-03-12 00:46:12,414 [main:54] - Getting value of type String
2021-03-12 00:46:12,527 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:12,530 [main:58] - GENERATED VALUE OF TYPE String = "ktujz"
2021-03-12 00:46:12,530 [main:61] - GENERATED IS CALL =false
2021-03-12 00:46:12,540 [main:67] - randomType = P
2021-03-12 00:46:12,654 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:46:12,656 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:46:12,770 [main:194] - Type params = []
2021-03-12 00:46:12,986 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:46:13,106 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:13,109 [main:78] - Generated call from random type = (P()).name.dropLast(210515477)
2021-03-12 00:46:13,110 [main:106] - GETTING String from P
2021-03-12 00:46:13,179 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:46:13,179 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:46:13,303 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:13,306 [main:117] - GENERATED CALL = (B().p()).name.takeLast(-1365743822)
2021-03-12 00:46:13,307 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]]
2021-03-12 00:46:13,307 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]
2021-03-12 00:46:13,307 [main:117] - GENERATED CALL = (B().p()).name.replaceIndent(testHtmlNoInline())
2021-03-12 00:46:13,307 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:46:13,307 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:46:13,307 [main:117] - GENERATED CALL = (B().p()).name.capitalize()
2021-03-12 00:46:13,307 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:46:13,307 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:46:13,447 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:46:13,451 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:46:13,454 [main:117] - GENERATED CALL = (B().p()).name.filterNot({a: Char -> false})
2021-03-12 00:46:13,454 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]]
2021-03-12 00:46:13,454 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]
2021-03-12 00:46:13,567 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:46:13,569 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:46:13,572 [main:117] - GENERATED CALL = (B().p()).name.replaceFirstChar({a: Char -> '?'})
2021-03-12 00:46:13,572 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in P[PropertyDescriptorImpl@266183d2], public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]]
2021-03-12 00:46:13,572 [main:149] - GENERATING call of type public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]
2021-03-12 00:46:13,573 [main:117] - GENERATED CALL = (B().p()).attributes.get(TODO().toString())
2021-03-12 00:46:13,573 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:46:13,573 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:46:13,686 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:13,803 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:13,943 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:46:13,946 [main:117] - GENERATED CALL = (B().p()).name.replace('⁞', '凜', true)
2021-03-12 00:46:13,946 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:46:13,946 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:46:13,946 [main:117] - GENERATED CALL = (B().p()).name.concat(testBodyHtmlNoInline())
2021-03-12 00:46:13,946 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:46:13,946 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:46:13,946 [main:117] - GENERATED CALL = (B().p()).name.lowercase()
2021-03-12 00:46:13,947 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:46:13,947 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:46:14,069 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:46:14,071 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:46:14,074 [main:117] - GENERATED CALL = (B().p()).name.takeLastWhile({a: Char -> true})
2021-03-12 00:46:14,074 [main:61] - replacement of "project" of type String is (B().p()).name.replaceIndent(testHtmlNoInline())
2021-03-12 00:46:14,195 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:46:14,197 [main:53] - replacing ({ +"XML encoding with Kotlin" }, [@kotlin.ExtensionFunctionType] Function1<H1, Unit>)
2021-03-12 00:46:14,197 [main:50] - replacing { +"XML encoding with Kotlin" } [@kotlin.ExtensionFunctionType] Function1<H1, Unit>
2021-03-12 00:46:14,197 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<H1, Unit>
2021-03-12 00:46:14,319 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:46:14,481 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:14,599 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:14,602 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:14,851 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:14,853 [main:95] - GENERATED = check(false)
2021-03-12 00:46:14,853 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<H1, Unit> = { check(false)}
2021-03-12 00:46:14,854 [main:61] - GENERATED IS CALL =false
2021-03-12 00:46:15,016 [main:67] - randomType = Element?
2021-03-12 00:46:15,136 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:46:15,138 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:46:15,397 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from HTML
2021-03-12 00:46:15,451 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:46:15,475 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from UL
2021-03-12 00:46:15,564 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from P
2021-03-12 00:46:15,651 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from P
2021-03-12 00:46:15,656 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:46:15,660 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from B
2021-03-12 00:46:15,748 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from HTML
2021-03-12 00:46:15,752 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:46:15,757 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:46:15,761 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from LI
2021-03-12 00:46:15,850 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:46:15,854 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from Head
2021-03-12 00:46:15,915 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from Body
2021-03-12 00:46:15,977 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:46:15,981 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from String
2021-03-12 00:46:15,985 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from Body
2021-03-12 00:46:15,989 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from H1
2021-03-12 00:46:16,050 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<H1, Unit> from Title
2021-03-12 00:46:16,089 [main:61] - replacement of { +"XML encoding with Kotlin" } of type [@kotlin.ExtensionFunctionType] Function1<H1, Unit> is { check(false)}
2021-03-12 00:46:16,224 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:46:16,226 [main:53] - replacing (expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder()), Boolean)
2021-03-12 00:46:16,226 [main:50] - replacing expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder()) Boolean
2021-03-12 00:46:16,226 [main:54] - Getting value of type Boolean
2021-03-12 00:46:16,346 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:46:16,348 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:46:16,349 [main:61] - GENERATED IS CALL =false
2021-03-12 00:46:16,354 [main:67] - randomType = Long
2021-03-12 00:46:16,473 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:46:16,508 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78eda778]
2021-03-12 00:46:16,508 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2a4d1343]
2021-03-12 00:46:16,508 [main:78] - Generated call from random type = (-9054301640137511805).toFloat().isNaN()
2021-03-12 00:46:16,509 [main:106] - GETTING Boolean from String
2021-03-12 00:46:16,527 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443342e3]]
2021-03-12 00:46:16,527 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:46:16,647 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:16,775 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:16,777 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443342e3]
2021-03-12 00:46:16,777 [main:117] - GENERATED CALL = (TODO().toString()).subSequence(-662652115, -920984330).isNotEmpty()
2021-03-12 00:46:16,778 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b81caca]]
2021-03-12 00:46:16,778 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:46:16,891 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:16,894 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b81caca]
2021-03-12 00:46:16,894 [main:117] - GENERATED CALL = (TODO().toString()).get(1337340176).isSurrogate()
2021-03-12 00:46:16,894 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718f9919]]
2021-03-12 00:46:16,894 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718f9919]
2021-03-12 00:46:16,894 [main:117] - GENERATED CALL = (TODO().toString()).isEmpty()
2021-03-12 00:46:16,894 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11251152]]
2021-03-12 00:46:16,894 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:46:17,007 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:17,126 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:17,128 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11251152]
2021-03-12 00:46:17,128 [main:117] - GENERATED CALL = (TODO().toString()).subSequence(89306368, 460040176).none()
2021-03-12 00:46:17,128 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75fb8732]]
2021-03-12 00:46:17,128 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75fb8732]
2021-03-12 00:46:17,264 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:17,267 [main:117] - GENERATED CALL = (TODO().toString()).hasSurrogatePairAt(1949625847)
2021-03-12 00:46:17,267 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd91795]]
2021-03-12 00:46:17,267 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:46:17,388 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:17,512 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:17,514 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd91795]
2021-03-12 00:46:17,635 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:17,759 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:46:17,762 [main:117] - GENERATED CALL = (TODO().toString()).subSequence(-474507886, -1887290594).contains('', false)
2021-03-12 00:46:17,762 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443342e3]]
2021-03-12 00:46:17,762 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443342e3]
2021-03-12 00:46:17,762 [main:117] - GENERATED CALL = (TODO().toString()).isNotEmpty()
2021-03-12 00:46:17,762 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd91795]]
2021-03-12 00:46:17,762 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd91795]
2021-03-12 00:46:17,888 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:18,006 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:46:18,009 [main:117] - GENERATED CALL = (TODO().toString()).contains('⌇', false)
2021-03-12 00:46:18,009 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12092c3f]]
2021-03-12 00:46:18,009 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:46:18,127 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:18,129 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12092c3f]
2021-03-12 00:46:18,130 [main:117] - GENERATED CALL = (TODO().toString()).get(-1905937561).isLowerCase()
2021-03-12 00:46:18,130 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6dd30df3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@747ef7e]]
2021-03-12 00:46:18,130 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6dd30df3]
2021-03-12 00:46:18,268 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:46:18,269 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@747ef7e]
2021-03-12 00:46:18,389 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:46:18,390 [main:117] - GENERATED CALL = (TODO().toString()).equals("cihcd").equals("blyig")
2021-03-12 00:46:18,390 [main:61] - replacement of expected != (LI())?.name.replaceRange(1257408996, 582249451, StringBuilder()) of type Boolean is (TODO().toString()).contains('⌇', false)
2021-03-12 00:46:18,513 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:46:18,513 [main:66] - Compilation checking started
2021-03-12 00:46:19,028 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:46:19,030 [main:53] - replacing ("Kotlin", String)
2021-03-12 00:46:19,030 [main:50] - replacing "Kotlin" String
2021-03-12 00:46:19,030 [main:54] - Getting value of type String
2021-03-12 00:46:19,151 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:19,153 [main:58] - GENERATED VALUE OF TYPE String = "glpen"
2021-03-12 00:46:19,153 [main:61] - GENERATED IS CALL =false
2021-03-12 00:46:19,320 [main:67] - randomType = H1?
2021-03-12 00:46:19,443 [main:302] - generating value of type = H1 false depth = 0
2021-03-12 00:46:19,446 [main:112] - generating klass H1 text = class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
2021-03-12 00:46:19,567 [main:194] - Type params = []
2021-03-12 00:46:19,779 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:46:19,780 [main:78] - Generated call from random type = (H1())?.name.capitalize()
2021-03-12 00:46:19,780 [main:106] - GETTING String from String
2021-03-12 00:46:19,798 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:46:19,798 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:46:19,923 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:46:20,045 [main:43] - GENERATING CALL OF fun <T> emptyList(): Iterable<Int> = TODO()
2021-03-12 00:46:20,049 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyList(): Iterable<Int> = TODO()
2021-03-12 00:46:20,172 [main:95] - GENERATED = emptyList<Int>()
2021-03-12 00:46:20,172 [main:117] - GENERATED CALL = (A().href).slice(emptyList<Int>())
2021-03-12 00:46:20,173 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]]
2021-03-12 00:46:20,173 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65e4532e]
2021-03-12 00:46:20,173 [main:117] - GENERATED CALL = (A().href).lowercase()
2021-03-12 00:46:20,173 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:46:20,173 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:46:20,285 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:46:20,288 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:46:20,290 [main:117] - GENERATED CALL = (A().href).filter({a: Char -> true})
2021-03-12 00:46:20,290 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]]
2021-03-12 00:46:20,290 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:46:20,290 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]
2021-03-12 00:46:20,291 [main:117] - GENERATED CALL = (A().href).get(bodyVar).uppercase()
2021-03-12 00:46:20,291 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]]
2021-03-12 00:46:20,291 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]
2021-03-12 00:46:20,426 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:20,428 [main:117] - GENERATED CALL = (A().href).substring(887253261)
2021-03-12 00:46:20,429 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:46:20,429 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:46:20,550 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:20,679 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:46:20,683 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:46:20,958 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:46:20,964 [main:95] - GENERATED = StringBuilder("hwsan")
2021-03-12 00:46:20,964 [main:117] - GENERATED CALL = (A().href).removeSuffix(StringBuilder("hwsan"))
2021-03-12 00:46:20,964 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:46:20,964 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:46:21,082 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:46:21,084 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:46:21,087 [main:117] - GENERATED CALL = (A().href).filterNot({a: Char -> false})
2021-03-12 00:46:21,087 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:46:21,087 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:46:21,087 [main:117] - GENERATED CALL = (A().href).capitalize()
2021-03-12 00:46:21,087 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:46:21,088 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:46:21,204 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:21,207 [main:117] - GENERATED CALL = (A().href).substringAfter('꯲', A().href)
2021-03-12 00:46:21,207 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:46:21,207 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:46:21,207 [main:117] - GENERATED CALL = (A().href).trimEnd()
2021-03-12 00:46:21,207 [main:61] - replacement of "Kotlin" of type String is (A().href).trimEnd()
2021-03-12 00:46:21,322 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:46:21,325 [main:53] - replacing ("p", String)
2021-03-12 00:46:21,325 [main:50] - replacing "p" String
2021-03-12 00:46:21,325 [main:54] - Getting value of type String
2021-03-12 00:46:21,462 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:21,464 [main:58] - GENERATED VALUE OF TYPE String = "ienzk"
2021-03-12 00:46:21,464 [main:61] - GENERATED IS CALL =false
2021-03-12 00:46:21,603 [main:67] - randomType = ULong
2021-03-12 00:46:21,723 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 00:46:21,757 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6f1cd6d]
2021-03-12 00:46:21,758 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25cea1e]
2021-03-12 00:46:21,880 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:21,883 [main:78] - Generated call from random type = (8872550977685943787.toULong()).toLong().toString(-1088153301)
2021-03-12 00:46:21,884 [main:106] - GETTING String from P
2021-03-12 00:46:21,978 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:46:21,978 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:46:22,095 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:22,101 [main:117] - GENERATED CALL = (B().p()).name.removeSurrounding("jsljy")
2021-03-12 00:46:22,101 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:46:22,102 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:46:22,102 [main:117] - GENERATED CALL = (B().p()).name.trim()
2021-03-12 00:46:22,102 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:46:22,102 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:46:22,217 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:46:22,220 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:46:22,222 [main:117] - GENERATED CALL = (B().p()).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 00:46:22,223 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final val name: kotlin.String defined in H1[PropertyDescriptorImpl@e65af9a]]
2021-03-12 00:46:22,223 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:46:22,337 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:46:22,340 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:22,502 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:22,505 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:22,772 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:22,775 [main:95] - GENERATED = check(false)
2021-03-12 00:46:22,775 [main:117] - GENERATED CALL = (B().p()).h1({ check(false)}).name
2021-03-12 00:46:22,775 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:46:22,775 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:46:22,899 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:23,037 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:46:23,040 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:46:23,290 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:46:23,410 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:46:23,413 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:46:23,708 [main:302] - generating value of type = String true depth = 6
2021-03-12 00:46:23,711 [main:95] - GENERATED = StringBuilder("qciqi")
2021-03-12 00:46:23,711 [main:95] - GENERATED = StringBuilder(StringBuilder("qciqi"))
2021-03-12 00:46:23,712 [main:117] - GENERATED CALL = (B().p()).name.removeSuffix(StringBuilder(StringBuilder("qciqi")))
2021-03-12 00:46:23,712 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:46:23,712 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:46:23,834 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:46:23,837 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:46:23,839 [main:117] - GENERATED CALL = (B().p()).name.dropLastWhile({a: Char -> false})
2021-03-12 00:46:23,839 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:46:23,840 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:46:23,962 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:23,965 [main:117] - GENERATED CALL = (B().p()).name.replaceBefore('昁', testBodyHtmlNoInline(), testBodyNoInline())
2021-03-12 00:46:23,966 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:46:23,966 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:46:24,097 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:24,103 [main:117] - GENERATED CALL = (B().p()).name.removePrefix("uedfn")
2021-03-12 00:46:24,103 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:46:24,103 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:46:24,103 [main:117] - GENERATED CALL = (B().p()).name.decapitalize()
2021-03-12 00:46:24,103 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:46:24,103 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:46:24,221 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:46:24,224 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:46:24,226 [main:117] - GENERATED CALL = (B().p()).name.filter({a: Char -> false})
2021-03-12 00:46:24,227 [main:61] - replacement of "p" of type String is "ienzk"
2021-03-12 00:46:24,343 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:46:24,343 [main:66] - Compilation checking started
2021-03-12 00:46:24,795 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:46:24,796 [main:53] - replacing (text, String)
2021-03-12 00:46:24,797 [main:50] - replacing text String
2021-03-12 00:46:24,797 [main:54] - Getting value of type String
2021-03-12 00:46:24,935 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:24,938 [main:58] - GENERATED VALUE OF TYPE String = "nulrf"
2021-03-12 00:46:24,938 [main:61] - GENERATED IS CALL =false
2021-03-12 00:46:25,080 [main:67] - randomType = UInt
2021-03-12 00:46:25,205 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:46:25,241 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@234b2401]
2021-03-12 00:46:25,363 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:25,366 [main:78] - Generated call from random type = (2069780996.toUInt()).toString(451449743)
2021-03-12 00:46:25,367 [main:106] - GETTING String from Title
2021-03-12 00:46:25,426 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]]
2021-03-12 00:46:25,426 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9335e83]
2021-03-12 00:46:25,426 [main:117] - GENERATED CALL = (Head().title()).name.toUpperCase()
2021-03-12 00:46:25,426 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Title[PropertyDescriptorImpl@50074a86], public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]]
2021-03-12 00:46:25,426 [main:149] - GENERATING call of type public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]
2021-03-12 00:46:25,548 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:25,551 [main:117] - GENERATED CALL = (Head().title()).attributes.get("mrdsf")
2021-03-12 00:46:25,551 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]]
2021-03-12 00:46:25,551 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:46:25,665 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:25,668 [main:117] - GENERATED CALL = (Head().title()).name.substringBeforeLast('㿖', testBodyHtmlNoInline())
2021-03-12 00:46:25,668 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:46:25,668 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:46:25,781 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:25,787 [main:117] - GENERATED CALL = (Head().title()).name.removePrefix("xhtgf")
2021-03-12 00:46:25,787 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:46:25,787 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:46:25,899 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:46:25,901 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:46:25,904 [main:117] - GENERATED CALL = (Head().title()).name.takeLastWhile({a: Char -> false})
2021-03-12 00:46:25,904 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:46:25,904 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:46:26,038 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:26,041 [main:117] - GENERATED CALL = (Head().title()).name.substringAfterLast('㼘', TextElement("utmeo").text)
2021-03-12 00:46:26,041 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]]
2021-03-12 00:46:26,041 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c639a7]
2021-03-12 00:46:26,161 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:26,163 [main:117] - GENERATED CALL = (Head().title()).name.replaceIndent("btsmi")
2021-03-12 00:46:26,164 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:46:26,164 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:46:26,283 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:26,407 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:26,410 [main:117] - GENERATED CALL = (Head().title()).name.replaceAfterLast('搽', "vwnuy", A().href)
2021-03-12 00:46:26,410 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@9d541c1], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:46:26,410 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:46:26,411 [main:117] - GENERATED CALL = (Head().title()).name.capitalize()
2021-03-12 00:46:26,411 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Title[PropertyDescriptorImpl@50074a86], public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]]
2021-03-12 00:46:26,411 [main:149] - GENERATING call of type public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]
2021-03-12 00:46:26,411 [main:117] - GENERATED CALL = (Head().title()).attributes.put(testBodyHtmlNoInline(), TextElement("utmeo").text)
2021-03-12 00:46:26,411 [main:61] - replacement of text of type String is (Head().title()).name.substringBeforeLast('㿖', testBodyHtmlNoInline())
2021-03-12 00:46:26,530 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:46:26,531 [main:53] - replacing (builder.append("$indent$(testBodyNoInline()).lowercase()\n"), StringBuilder)
2021-03-12 00:46:26,531 [main:50] - replacing builder.append("$indent$(testBodyNoInline()).lowercase()\n") StringBuilder
2021-03-12 00:46:26,531 [main:54] - Getting value of type StringBuilder
2021-03-12 00:46:26,654 [main:302] - generating value of type = StringBuilder false depth = 0
2021-03-12 00:46:26,773 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): StringBuilder = TODO()
2021-03-12 00:46:26,776 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): StringBuilder = TODO()
2021-03-12 00:46:27,022 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:46:27,024 [main:95] - GENERATED = StringBuilder("soqaw")
2021-03-12 00:46:27,024 [main:58] - GENERATED VALUE OF TYPE StringBuilder = StringBuilder("soqaw")
2021-03-12 00:46:27,025 [main:61] - GENERATED IS CALL =true
2021-03-12 00:46:27,187 [main:67] - randomType = P?
2021-03-12 00:46:27,309 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:46:27,312 [main:112] - generating klass P text = class P() : BodyTag("ienzk")
2021-03-12 00:46:27,433 [main:194] - Type params = []
2021-03-12 00:46:27,655 [main:106] - GETTING StringBuilder from String
2021-03-12 00:46:27,675 [main:106] - GETTING StringBuilder from String
2021-03-12 00:46:27,676 [main:106] - GETTING StringBuilder from B
2021-03-12 00:46:27,761 [main:106] - GETTING StringBuilder from P
2021-03-12 00:46:27,841 [main:106] - GETTING StringBuilder from HTML
2021-03-12 00:46:27,899 [main:106] - GETTING StringBuilder from H1
2021-03-12 00:46:27,992 [main:106] - GETTING StringBuilder from HTML
2021-03-12 00:46:27,993 [main:106] - GETTING StringBuilder from P
2021-03-12 00:46:27,994 [main:106] - GETTING StringBuilder from Head
2021-03-12 00:46:28,053 [main:106] - GETTING StringBuilder from String
2021-03-12 00:46:28,054 [main:106] - GETTING StringBuilder from Body
2021-03-12 00:46:28,126 [main:106] - GETTING StringBuilder from String
2021-03-12 00:46:28,127 [main:106] - GETTING StringBuilder from String
2021-03-12 00:46:28,127 [main:106] - GETTING StringBuilder from LI
2021-03-12 00:46:28,186 [main:106] - GETTING StringBuilder from String
2021-03-12 00:46:28,187 [main:106] - GETTING StringBuilder from UL
2021-03-12 00:46:28,246 [main:106] - GETTING StringBuilder from Body
2021-03-12 00:46:28,247 [main:106] - GETTING StringBuilder from String
2021-03-12 00:46:28,248 [main:106] - GETTING StringBuilder from Title
2021-03-12 00:46:28,285 [main:61] - replacement of builder.append("$indent$(testBodyNoInline()).lowercase()\n") of type StringBuilder is StringBuilder("soqaw")
2021-03-12 00:46:28,425 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:46:28,430 [main:53] - replacing (expected != testBodyHtmlNoInline(), Boolean)
2021-03-12 00:46:28,430 [main:50] - replacing expected != testBodyHtmlNoInline() Boolean
2021-03-12 00:46:28,430 [main:54] - Getting value of type Boolean
2021-03-12 00:46:28,551 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:46:28,554 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:46:28,554 [main:61] - GENERATED IS CALL =false
2021-03-12 00:46:28,564 [main:67] - randomType = Head
2021-03-12 00:46:28,685 [main:302] - generating value of type = Head false depth = 0
2021-03-12 00:46:28,688 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}
2021-03-12 00:46:28,809 [main:194] - Type params = []
2021-03-12 00:46:28,998 [main:149] - GENERATING call of type public open fun containsKey(key: kotlin.String): kotlin.Boolean defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@3d3f2d7c]
2021-03-12 00:46:28,999 [main:78] - Generated call from random type = (Head()).attributes.containsKey(testBodyHtmlNoInline())
2021-03-12 00:46:28,999 [main:61] - replacement of expected != testBodyHtmlNoInline() of type Boolean is (Head()).attributes.containsKey(testBodyHtmlNoInline())
2021-03-12 00:46:29,116 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:46:29,117 [main:66] - Compilation checking started
2021-03-12 00:46:29,586 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:46:29,588 [main:53] - replacing (p { println()}, P)
2021-03-12 00:46:29,588 [main:50] - replacing p { println()} P
2021-03-12 00:46:29,588 [main:54] - Getting value of type P
2021-03-12 00:46:29,734 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:46:29,737 [main:112] - generating klass P text = class P() : BodyTag("ienzk")
2021-03-12 00:46:29,864 [main:194] - Type params = []
2021-03-12 00:46:29,993 [main:58] - GENERATED VALUE OF TYPE P = P()
2021-03-12 00:46:29,993 [main:61] - GENERATED IS CALL =true
2021-03-12 00:46:30,445 [main:67] - randomType = Sequence<MutableMap<String, Boolean>>?
2021-03-12 00:46:30,445 [main:106] - GETTING P from P
2021-03-12 00:46:30,533 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]]
2021-03-12 00:46:30,533 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]
2021-03-12 00:46:30,649 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:30,652 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:30,794 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:30,798 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:31,210 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:46:31,213 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:46:31,216 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:46:31,222 [main:95] - GENERATED = repeat(354870560, {a: Int -> println()})
2021-03-12 00:46:31,223 [main:117] - GENERATED CALL = (B().p()).p({ repeat(354870560, {a: Int -> println()})})
2021-03-12 00:46:31,223 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]]
2021-03-12 00:46:31,223 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f]
2021-03-12 00:46:31,355 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:31,358 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:31,487 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:31,491 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:31,748 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:46:31,751 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:46:31,897 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:31,901 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:32,169 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:46:32,172 [main:95] - GENERATED = require(true)
2021-03-12 00:46:32,172 [main:95] - GENERATED = contract({ require(true)})
2021-03-12 00:46:32,173 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]
2021-03-12 00:46:32,295 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:32,298 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:32,434 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:32,438 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:32,718 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:32,721 [main:95] - GENERATED = check(true)
2021-03-12 00:46:32,721 [main:117] - GENERATED CALL = (B().p()).p({ contract({ require(true)})}).pNoInline({ check(true)})
2021-03-12 00:46:32,722 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]]
2021-03-12 00:46:32,722 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:46:32,837 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:46:32,839 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:32,980 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:32,984 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:33,251 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:46:33,252 [main:95] - GENERATED = print("teywo")
2021-03-12 00:46:33,252 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@67be6262]
2021-03-12 00:46:33,373 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:33,376 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:33,510 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:33,513 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:33,767 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:46:33,769 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:46:33,775 [main:95] - GENERATED = contract({ println()})
2021-03-12 00:46:33,775 [main:117] - GENERATED CALL = (B().p()).h1({ print("teywo")}).pNoInline({ contract({ println()})})
2021-03-12 00:46:33,776 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]]
2021-03-12 00:46:33,776 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]
2021-03-12 00:46:33,890 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:46:33,892 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:34,034 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:34,038 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:34,302 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:34,305 [main:95] - GENERATED = require(true)
2021-03-12 00:46:34,305 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@18fee560]
2021-03-12 00:46:34,426 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:34,429 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:34,555 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:34,559 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:34,816 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:46:34,817 [main:95] - GENERATED = println("uagcc")
2021-03-12 00:46:34,817 [main:117] - GENERATED CALL = (B().p()).ul({ require(true)}).pNoInline({ println("uagcc")})
2021-03-12 00:46:34,817 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]]
2021-03-12 00:46:34,817 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:46:34,931 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:46:34,933 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:35,052 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:35,055 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:35,347 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:46:35,348 [main:95] - GENERATED = print("nalnk")
2021-03-12 00:46:35,348 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@2c035145]
2021-03-12 00:46:35,467 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:35,470 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:35,596 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:35,600 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:35,994 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:46:35,997 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:46:35,999 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:46:36,005 [main:95] - GENERATED = repeat(-196955244, {a: Int -> println()})
2021-03-12 00:46:36,006 [main:117] - GENERATED CALL = (B().p()).b({ print("nalnk")}).pNoInline({ repeat(-196955244, {a: Int -> println()})})
2021-03-12 00:46:36,006 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9], public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]]
2021-03-12 00:46:36,006 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]
2021-03-12 00:46:36,121 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:46:36,124 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:36,265 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:36,269 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:36,531 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:36,534 [main:95] - GENERATED = require(false)
2021-03-12 00:46:36,534 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in UL[SimpleFunctionDescriptorImpl@6387551e]
2021-03-12 00:46:36,662 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:36,664 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:36,797 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:36,800 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:37,182 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:37,185 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:46:37,188 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:46:37,188 [main:95] - GENERATED = require(false, { "slhno"})
2021-03-12 00:46:37,188 [main:117] - GENERATED CALL = (B().p()).ul({ require(false)}).p({ require(false, { "slhno"})})
2021-03-12 00:46:37,189 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7], public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]]
2021-03-12 00:46:37,189 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in P[SimpleFunctionDescriptorImpl@57fbb8c7]
2021-03-12 00:46:37,324 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:46:37,327 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:37,452 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:37,456 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:37,871 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:46:37,873 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:46:37,876 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:46:37,997 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:38,001 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:38,424 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:46:38,427 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:46:38,430 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:46:38,430 [main:95] - GENERATED = require(false, { "hcnma"})
2021-03-12 00:46:38,430 [main:95] - GENERATED = repeat(1443233011, {a: Int -> require(false, { "hcnma"})})
2021-03-12 00:46:38,431 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in H1[SimpleFunctionDescriptorImpl@15a073ec]
2021-03-12 00:46:38,553 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:38,556 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:38,683 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:38,687 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:39,110 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:46:39,113 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:46:39,115 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:46:39,234 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:39,238 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:39,668 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:46:39,671 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:46:39,674 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:46:39,803 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:39,806 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:40,224 [main:302] - generating value of type = Int true depth = 12
2021-03-12 00:46:40,227 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-12 00:46:40,230 [main:302] - generating value of type = Unit false depth = 13
2021-03-12 00:46:40,350 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:40,354 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:40,653 [main:302] - generating value of type = Boolean true depth = 16
2021-03-12 00:46:40,653 [main:385] - Cant generate call of fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:40,653 [main:95] - GENERATED = repeat(343478725, {a: Int -> })
2021-03-12 00:46:40,654 [main:95] - GENERATED = repeat(1133174375, {a: Int -> repeat(343478725, {a: Int -> })})
2021-03-12 00:46:40,654 [main:95] - GENERATED = repeat(182321762, {a: Int -> repeat(1133174375, {a: Int -> repeat(343478725, {a: Int -> })})})
2021-03-12 00:46:40,655 [main:117] - GENERATED CALL = (B().p()).h1({ repeat(1443233011, {a: Int -> require(false, { "hcnma"})})}).p({ repeat(182321762, {a: Int -> repeat(1133174375, {a: Int -> repeat(343478725, {a: Int -> })})})})
2021-03-12 00:46:40,655 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4], public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]]
2021-03-12 00:46:40,655 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:46:40,777 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:46:40,780 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:40,908 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:40,912 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:41,177 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:41,180 [main:95] - GENERATED = check(false)
2021-03-12 00:46:41,180 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in B[SimpleFunctionDescriptorImpl@605daca8]
2021-03-12 00:46:41,323 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:41,326 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:41,449 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:41,452 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:46:41,874 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:46:41,877 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:46:41,880 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:46:42,009 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:42,012 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:42,425 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:46:42,427 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 00:46:42,430 [main:302] - generating value of type = Any false depth = 9
2021-03-12 00:46:42,430 [main:95] - GENERATED = require(true, { "vnniq"})
2021-03-12 00:46:42,430 [main:95] - GENERATED = repeat(-1683186622, {a: Int -> require(true, { "vnniq"})})
2021-03-12 00:46:42,431 [main:117] - GENERATED CALL = (B().p()).b({ check(false)}).p({ repeat(-1683186622, {a: Int -> require(true, { "vnniq"})})})
2021-03-12 00:46:42,431 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f], public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]]
2021-03-12 00:46:42,431 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in BodyTag[SimpleFunctionDescriptorImpl@488d49f]
2021-03-12 00:46:42,547 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:42,550 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:42,670 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:42,675 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:42,958 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:46:42,958 [main:95] - GENERATED = print("ssnhw")
2021-03-12 00:46:42,958 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@a37ecb0]
2021-03-12 00:46:43,079 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:43,081 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:43,209 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:43,212 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:43,481 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:46:43,482 [main:95] - GENERATED = println("dwysp")
2021-03-12 00:46:43,482 [main:117] - GENERATED CALL = (B().p()).p({ print("ssnhw")}).p({ println("dwysp")})
2021-03-12 00:46:43,482 [main:113] - Case = [public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]]
2021-03-12 00:46:43,482 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in P[SimpleFunctionDescriptorImpl@749df8e7]
2021-03-12 00:46:43,597 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:46:43,599 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:43,720 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:43,723 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:43,997 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:46:43,997 [main:95] - GENERATED = print("fnbvj")
2021-03-12 00:46:43,998 [main:117] - GENERATED CALL = (B().p()).pNoInline({ print("fnbvj")})
2021-03-12 00:46:43,998 [main:61] - replacement of p { println()} of type P is (B().p()).p({ repeat(354870560, {a: Int -> println()})})
2021-03-12 00:46:44,119 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:46:44,120 [main:53] - replacing ("2", String)
2021-03-12 00:46:44,120 [main:50] - replacing "2" String
2021-03-12 00:46:44,120 [main:54] - Getting value of type String
2021-03-12 00:46:44,242 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:44,244 [main:58] - GENERATED VALUE OF TYPE String = "ntapo"
2021-03-12 00:46:44,245 [main:61] - GENERATED IS CALL =false
2021-03-12 00:46:44,522 [main:67] - randomType = ArrayDeque<UShort>
2021-03-12 00:46:44,645 [main:302] - generating value of type = ArrayDeque<UShort> false depth = 0
2021-03-12 00:46:44,765 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UShort>): ArrayDeque<UShort> = TODO()
2021-03-12 00:46:44,768 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UShort>): ArrayDeque<UShort> = TODO()
2021-03-12 00:46:45,062 [main:302] - generating value of type = Collection<UShort> false depth = 3
2021-03-12 00:46:45,188 [main:43] - GENERATING CALL OF fun <T> setOf(elements: UShort): Collection<UShort> = TODO()
2021-03-12 00:46:45,191 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: UShort): Collection<UShort> = TODO()
2021-03-12 00:46:45,318 [main:302] - generating value of type = UShort true depth = 6
2021-03-12 00:46:45,320 [main:95] - GENERATED = setOf<UShort>(13796.toUShort())
2021-03-12 00:46:45,320 [main:95] - GENERATED = ArrayDeque<UShort>(setOf<UShort>(13796.toUShort()))
2021-03-12 00:46:45,468 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@53aa9e6e]
2021-03-12 00:46:45,589 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:45,718 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:46:45,721 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:46:45,974 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:46:45,976 [main:95] - GENERATED = StringBuilder(883776848)
2021-03-12 00:46:46,089 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:46,239 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:46,367 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:46:46,371 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:46:46,640 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:46:46,768 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:46:46,772 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:46:47,037 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 00:46:47,043 [main:95] - GENERATED = StringBuilder("ukqdw")
2021-03-12 00:46:47,044 [main:95] - GENERATED = StringBuilder(StringBuilder("ukqdw"))
2021-03-12 00:46:47,161 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:47,301 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:47,428 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:46:47,432 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:46:47,697 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:46:47,700 [main:95] - GENERATED = StringBuilder("xfjno")
2021-03-12 00:46:47,822 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 00:46:47,825 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:46:47,831 [main:78] - Generated call from random type = (ArrayDeque<UShort>(setOf<UShort>(13796.toUShort()))).joinToString(StringBuilder(883776848), "ybmys", StringBuilder(StringBuilder("ukqdw")), 1946573654, StringBuilder("xfjno"), {a: T -> "ngqfa"})
2021-03-12 00:46:47,831 [main:106] - GETTING String from String
2021-03-12 00:46:47,868 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:46:47,868 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:46:47,986 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:48,110 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:46:48,113 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:46:48,398 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:46:48,401 [main:95] - GENERATED = StringBuilder(1115300539)
2021-03-12 00:46:48,401 [main:117] - GENERATED CALL = (testBodyNoInline()).removePrefix(StringBuilder(1115300539))
2021-03-12 00:46:48,402 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]]
2021-03-12 00:46:48,402 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]
2021-03-12 00:46:48,525 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:48,652 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:46:48,655 [main:117] - GENERATED CALL = (testBodyNoInline()).commonSuffixWith("langl", false)
2021-03-12 00:46:48,655 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]]
2021-03-12 00:46:48,655 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]
2021-03-12 00:46:48,777 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:46:48,780 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:46:48,783 [main:117] - GENERATED CALL = (testBodyNoInline()).replaceFirstChar({a: Char -> '᭯'})
2021-03-12 00:46:48,783 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7569a69c]]
2021-03-12 00:46:48,783 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:46:48,906 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:48,908 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7569a69c]
2021-03-12 00:46:48,909 [main:117] - GENERATED CALL = (testBodyNoInline()).get(-1743512308).plus(testBodyHtmlNoInline())
2021-03-12 00:46:48,909 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]]
2021-03-12 00:46:48,909 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6019ad63]
2021-03-12 00:46:49,036 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:49,038 [main:117] - GENERATED CALL = (testBodyNoInline()).trimMargin("ntoyx")
2021-03-12 00:46:49,039 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:46:49,039 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:46:49,039 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:46:49,155 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:49,158 [main:117] - GENERATED CALL = (testBodyNoInline()).compareTo(TODO().toString()).toString(-262061170)
2021-03-12 00:46:49,158 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]]
2021-03-12 00:46:49,159 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:46:49,276 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:49,395 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:49,398 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]
2021-03-12 00:46:49,536 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:46:49,665 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:46:49,668 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:46:50,101 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:46:50,103 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 00:46:50,226 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 00:46:50,230 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 00:46:50,354 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 00:46:50,358 [main:95] - GENERATED = linkedSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 00:46:50,358 [main:95] - GENERATED = Regex("vlymf", linkedSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 00:46:50,358 [main:117] - GENERATED CALL = (testBodyNoInline()).subSequence(464240211, 932969307).replaceFirst(Regex("vlymf", linkedSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)), TODO().toString())
2021-03-12 00:46:50,358 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]]
2021-03-12 00:46:50,358 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]
2021-03-12 00:46:50,475 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:50,478 [main:117] - GENERATED CALL = (testBodyNoInline()).substring(98504450)
2021-03-12 00:46:50,478 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:46:50,478 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:46:50,619 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:50,745 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:50,869 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:50,998 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:46:51,002 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:46:51,277 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:46:51,400 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:46:51,403 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:46:51,655 [main:302] - generating value of type = String true depth = 6
2021-03-12 00:46:51,657 [main:95] - GENERATED = StringBuilder("kklzz")
2021-03-12 00:46:51,657 [main:95] - GENERATED = StringBuilder(StringBuilder("kklzz"))
2021-03-12 00:46:51,658 [main:117] - GENERATED CALL = (testBodyNoInline()).replaceRange(-464813878, -1804120558, StringBuilder(StringBuilder("kklzz")))
2021-03-12 00:46:51,658 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]]
2021-03-12 00:46:51,658 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]
2021-03-12 00:46:51,658 [main:117] - GENERATED CALL = (testBodyNoInline()).uppercase()
2021-03-12 00:46:51,658 [main:61] - replacement of "2" of type String is "ntapo"
2021-03-12 00:46:51,796 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:46:51,797 [main:53] - replacing (testHtmlNoInline(), String)
2021-03-12 00:46:51,797 [main:50] - replacing testHtmlNoInline() String
2021-03-12 00:46:51,797 [main:54] - Getting value of type String
2021-03-12 00:46:51,922 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:51,924 [main:58] - GENERATED VALUE OF TYPE String = "kndgl"
2021-03-12 00:46:51,925 [main:61] - GENERATED IS CALL =false
2021-03-12 00:46:52,070 [main:67] - randomType = Int?
2021-03-12 00:46:52,193 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:52,246 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@10c287b3]
2021-03-12 00:46:52,247 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@535eb92a]
2021-03-12 00:46:52,376 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:52,379 [main:78] - Generated call from random type = (-278596761)?.toByte().toString(1139314087)
2021-03-12 00:46:52,380 [main:106] - GETTING String from P
2021-03-12 00:46:52,476 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:46:52,476 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:46:52,593 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:52,596 [main:117] - GENERATED CALL = (B().pNoInline()).name.substringAfterLast('', TODO().toString())
2021-03-12 00:46:52,596 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:46:52,596 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:46:52,711 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:52,857 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:52,982 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:52,985 [main:117] - GENERATED CALL = (B().pNoInline()).name.replaceBefore('ꗅ', "pvobp", "cvyly")
2021-03-12 00:46:52,985 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]]
2021-03-12 00:46:52,985 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]
2021-03-12 00:46:53,106 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:53,109 [main:117] - GENERATED CALL = (B().pNoInline()).name.drop(1234230961)
2021-03-12 00:46:53,109 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:46:53,109 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:46:53,232 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:53,238 [main:117] - GENERATED CALL = (B().pNoInline()).name.removePrefix("irxrh")
2021-03-12 00:46:53,238 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in P[PropertyDescriptorImpl@266183d2], public open fun remove(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@1834528b]]
2021-03-12 00:46:53,238 [main:149] - GENERATING call of type public open fun remove(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@1834528b]
2021-03-12 00:46:53,238 [main:117] - GENERATED CALL = (B().pNoInline()).attributes.remove(testBodyHtmlNoInline())
2021-03-12 00:46:53,238 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:46:53,238 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:46:53,360 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:46:53,363 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:46:53,366 [main:117] - GENERATED CALL = (B().pNoInline()).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 00:46:53,366 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:46:53,366 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:46:53,494 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:46:53,497 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:46:53,500 [main:117] - GENERATED CALL = (B().pNoInline()).name.takeLastWhile({a: Char -> true})
2021-03-12 00:46:53,500 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:46:53,500 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:46:53,500 [main:117] - GENERATED CALL = (B().pNoInline()).name.trimStart()
2021-03-12 00:46:53,500 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:46:53,500 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:46:53,617 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:46:53,741 [main:43] - GENERATING CALL OF fun <E> buildList(builderAction: kotlin.collections.MutableList<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 00:46:53,744 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(builderAction: kotlin.collections.MutableList<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 00:46:54,038 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<Int>, Unit> false depth = 3
2021-03-12 00:46:54,041 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 00:46:54,166 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:54,170 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:46:54,432 [main:302] - generating value of type = Any false depth = 7
2021-03-12 00:46:54,433 [main:95] - GENERATED = print("ludke")
2021-03-12 00:46:54,433 [main:95] - GENERATED = buildList<Int>({ print("ludke")})
2021-03-12 00:46:54,433 [main:117] - GENERATED CALL = (B().pNoInline()).name.slice(buildList<Int>({ print("ludke")}))
2021-03-12 00:46:54,433 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:46:54,433 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:46:54,554 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:54,680 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:54,796 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:46:54,917 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:46:54,920 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:46:55,200 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:46:55,203 [main:95] - GENERATED = StringBuilder("edjyp")
2021-03-12 00:46:55,203 [main:117] - GENERATED CALL = (B().pNoInline()).name.replaceRange(807569947, -1145398739, StringBuilder("edjyp"))
2021-03-12 00:46:55,203 [main:61] - replacement of testHtmlNoInline() of type String is (B().pNoInline()).attributes.remove(testBodyHtmlNoInline())
2021-03-12 00:46:55,323 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:46:55,325 [main:53] - replacing ("$indent$(testBodyNoInline()).lowercase()\n", String)
2021-03-12 00:46:55,325 [main:50] - replacing "$indent$(testBodyNoInline()).lowercase()\n" String
2021-03-12 00:46:55,325 [main:54] - Getting value of type String
2021-03-12 00:46:55,445 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:55,448 [main:58] - GENERATED VALUE OF TYPE String = "mfxgr"
2021-03-12 00:46:55,448 [main:61] - GENERATED IS CALL =false
2021-03-12 00:46:55,453 [main:67] - randomType = Int
2021-03-12 00:46:55,574 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:55,615 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ca9cb57]
2021-03-12 00:46:55,615 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]
2021-03-12 00:46:55,615 [main:78] - Generated call from random type = (-1511842196).toChar().uppercase()
2021-03-12 00:46:55,616 [main:106] - GETTING String from P
2021-03-12 00:46:55,699 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in P[PropertyDescriptorImpl@266183d2], public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]]
2021-03-12 00:46:55,699 [main:149] - GENERATING call of type public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]
2021-03-12 00:46:55,699 [main:117] - GENERATED CALL = (B().p()).attributes.get(TextElement("utmeo").text)
2021-03-12 00:46:55,699 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:46:55,699 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:46:55,824 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:55,827 [main:117] - GENERATED CALL = (B().p()).name.replaceAfter('᳟', testAllInline(), A().href)
2021-03-12 00:46:55,827 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:46:55,827 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:46:55,828 [main:117] - GENERATED CALL = (B().p()).name.decapitalize()
2021-03-12 00:46:55,828 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:46:55,828 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:46:55,945 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:55,948 [main:117] - GENERATED CALL = (B().p()).name.substringAfter('舤', A().href)
2021-03-12 00:46:55,948 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:46:55,948 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:46:56,065 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:46:56,068 [main:117] - GENERATED CALL = (B().p()).name.takeLast(-986577213)
2021-03-12 00:46:56,068 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:46:56,068 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:46:56,185 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:46:56,188 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:46:56,190 [main:117] - GENERATED CALL = (B().p()).name.takeLastWhile({a: Char -> true})
2021-03-12 00:46:56,190 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:46:56,191 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:46:56,191 [main:117] - GENERATED CALL = (B().p()).name.reversed()
2021-03-12 00:46:56,191 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4], public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2]]
2021-03-12 00:46:56,191 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in P[SimpleFunctionDescriptorImpl@62b445e4]
2021-03-12 00:46:56,329 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:46:56,332 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:56,461 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:56,464 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:56,883 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:56,888 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:46:56,892 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:46:56,892 [main:95] - GENERATED = check(true, { "snyjx"})
2021-03-12 00:46:56,892 [main:117] - GENERATED CALL = (B().p()).b({ check(true, { "snyjx"})}).name
2021-03-12 00:46:56,892 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:46:56,892 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:46:57,019 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:46:57,022 [main:117] - GENERATED CALL = (B().p()).name.concat("uabps")
2021-03-12 00:46:57,022 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:46:57,022 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:46:57,139 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:57,258 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:46:57,401 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:46:57,404 [main:117] - GENERATED CALL = (B().p()).name.replaceFirst('', '謿', true)
2021-03-12 00:46:57,404 [main:61] - replacement of "$indent$(testBodyNoInline()).lowercase()\n" of type String is "mfxgr"
2021-03-12 00:46:57,526 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:46:57,527 [main:53] - replacing (initTag(Body(), { require(false)}), Body)
2021-03-12 00:46:57,527 [main:50] - replacing initTag(Body(), { require(false)}) Body
2021-03-12 00:46:57,527 [main:54] - Getting value of type Body
2021-03-12 00:46:57,649 [main:302] - generating value of type = Body false depth = 0
2021-03-12 00:46:57,651 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:46:57,774 [main:194] - Type params = []
2021-03-12 00:46:57,898 [main:58] - GENERATED VALUE OF TYPE Body = Body()
2021-03-12 00:46:57,898 [main:61] - GENERATED IS CALL =true
2021-03-12 00:46:58,061 [main:67] - randomType = HTML?
2021-03-12 00:46:58,178 [main:302] - generating value of type = HTML false depth = 0
2021-03-12 00:46:58,181 [main:112] - generating klass HTML text = class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}
2021-03-12 00:46:58,299 [main:194] - Type params = []
2021-03-12 00:46:58,466 [main:149] - GENERATING call of type public final fun bodyNoInline(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@46e0fd96]
2021-03-12 00:46:58,613 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:46:58,616 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:58,740 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:58,744 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:46:59,006 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:59,009 [main:95] - GENERATED = check(true)
2021-03-12 00:46:59,009 [main:78] - Generated call from random type = (HTML())?.bodyNoInline({ check(true)})
2021-03-12 00:46:59,010 [main:106] - GETTING Body from String
2021-03-12 00:46:59,029 [main:106] - GETTING Body from HTML
2021-03-12 00:46:59,078 [main:113] - Case = [public final fun bodyNoInline(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@22614b31]]
2021-03-12 00:46:59,078 [main:149] - GENERATING call of type public final fun bodyNoInline(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@22614b31]
2021-03-12 00:46:59,206 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:46:59,209 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:46:59,328 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:59,332 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:46:59,748 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:46:59,751 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:46:59,754 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:46:59,754 [main:95] - GENERATED = require(false, { "ncjqu"})
2021-03-12 00:46:59,755 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).bodyNoInline({ require(false, { "ncjqu"})})
2021-03-12 00:46:59,755 [main:113] - Case = [public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]]
2021-03-12 00:46:59,755 [main:149] - GENERATING call of type public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]
2021-03-12 00:46:59,877 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:46:59,880 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:00,006 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:47:00,010 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:47:00,424 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:47:00,427 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:47:00,430 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:47:00,430 [main:95] - GENERATED = check(false, { "kkuvq"})
2021-03-12 00:47:00,430 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).body({ check(false, { "kkuvq"})})
2021-03-12 00:47:00,430 [main:61] - replacement of initTag(Body(), { require(false)}) of type Body is Body()
2021-03-12 00:47:00,546 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:47:00,548 [main:53] - replacing (htmlVal, Int)
2021-03-12 00:47:00,548 [main:50] - replacing htmlVal Int
2021-03-12 00:47:00,548 [main:54] - Getting value of type Int
2021-03-12 00:47:00,665 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:47:00,668 [main:58] - GENERATED VALUE OF TYPE Int = 860030960
2021-03-12 00:47:00,668 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:00,799 [main:67] - randomType = Float
2021-03-12 00:47:00,939 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:47:00,981 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@27bda972]
2021-03-12 00:47:00,981 [main:78] - Generated call from random type = (0.45307124f).toBits()
2021-03-12 00:47:00,982 [main:106] - GETTING Int from B
2021-03-12 00:47:01,051 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@6c844bea], public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]]
2021-03-12 00:47:01,051 [main:149] - GENERATING call of type public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]
2021-03-12 00:47:01,172 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:47:01,175 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:47:01,432 [main:117] - GENERATED CALL = (B().b()).children.lastIndexOf(TODO())
2021-03-12 00:47:01,432 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]]
2021-03-12 00:47:01,432 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]
2021-03-12 00:47:01,432 [main:117] - GENERATED CALL = (B().b()).name.toInt()
2021-03-12 00:47:01,432 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@6c844bea], public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]]
2021-03-12 00:47:01,433 [main:149] - GENERATING call of type public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]
2021-03-12 00:47:01,557 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:47:01,560 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:47:01,800 [main:117] - GENERATED CALL = (B().b()).children.indexOf(TODO())
2021-03-12 00:47:01,801 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@6c844bea], public open val size: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@3c464ee3]]
2021-03-12 00:47:01,801 [main:117] - GENERATED CALL = (B().b()).children.size
2021-03-12 00:47:01,801 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@6c844bea], protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@6913a175]]
2021-03-12 00:47:01,801 [main:117] - GENERATED CALL = (B().b()).children.modCount
2021-03-12 00:47:01,801 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@7fce2fe7], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]]
2021-03-12 00:47:01,801 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@7fce2fe7]
2021-03-12 00:47:01,917 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:47:01,917 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]
2021-03-12 00:47:02,053 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:47:02,056 [main:117] - GENERATED CALL = (B().b()).equals("pvhwo").compareTo(false)
2021-03-12 00:47:02,056 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708]]
2021-03-12 00:47:02,056 [main:117] - GENERATED CALL = (B().b()).name.length
2021-03-12 00:47:02,056 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]]
2021-03-12 00:47:02,056 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]
2021-03-12 00:47:02,176 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:47:02,179 [main:117] - GENERATED CALL = (B().b()).name.compareTo(testBodyNoInline(), false)
2021-03-12 00:47:02,179 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in B[PropertyDescriptorImpl@2b31fe92], public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@aaaf6a9]]
2021-03-12 00:47:02,179 [main:117] - GENERATED CALL = (B().b()).attributes.size
2021-03-12 00:47:02,179 [main:61] - replacement of htmlVal of type Int is (B().b()).children.lastIndexOf(TODO())
2021-03-12 00:47:02,298 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:47:02,300 [main:53] - replacing (ul { check(false)}, UL)
2021-03-12 00:47:02,300 [main:50] - replacing ul { check(false)} UL
2021-03-12 00:47:02,300 [main:54] - Getting value of type UL
2021-03-12 00:47:02,420 [main:302] - generating value of type = UL false depth = 0
2021-03-12 00:47:02,422 [main:112] - generating klass UL text = class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}
2021-03-12 00:47:02,541 [main:194] - Type params = []
2021-03-12 00:47:02,674 [main:58] - GENERATED VALUE OF TYPE UL = UL()
2021-03-12 00:47:02,674 [main:61] - GENERATED IS CALL =true
2021-03-12 00:47:02,954 [main:67] - randomType = LinkedHashSet<Title>
2021-03-12 00:47:03,067 [main:302] - generating value of type = LinkedHashSet<Title> false depth = 0
2021-03-12 00:47:03,226 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<Title> = TODO()
2021-03-12 00:47:03,230 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<Title> = TODO()
2021-03-12 00:47:03,507 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:47:03,509 [main:95] - GENERATED = LinkedHashSet<Title>(1850248800)
2021-03-12 00:47:03,681 [main:106] - GETTING UL from String
2021-03-12 00:47:03,708 [main:106] - GETTING UL from Body
2021-03-12 00:47:03,805 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28], public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in UL[SimpleFunctionDescriptorImpl@3b7d9c92]]
2021-03-12 00:47:03,805 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28]
2021-03-12 00:47:03,922 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:47:03,925 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:04,048 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:04,051 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:04,338 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:47:04,341 [main:95] - GENERATED = check(true)
2021-03-12 00:47:04,342 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in UL[SimpleFunctionDescriptorImpl@3b7d9c92]
2021-03-12 00:47:04,464 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:47:04,467 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:04,595 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:04,599 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:04,868 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:47:04,871 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:47:05,010 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:05,014 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:05,273 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 00:47:05,275 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:47:05,430 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:05,434 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:05,703 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:47:05,706 [main:95] - GENERATED = check(false)
2021-03-12 00:47:05,706 [main:95] - GENERATED = contract({ check(false)})
2021-03-12 00:47:05,706 [main:95] - GENERATED = contract({ contract({ check(false)})})
2021-03-12 00:47:05,706 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).ul({ check(true)}).ul({ contract({ contract({ check(false)})})})
2021-03-12 00:47:05,707 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b], public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in B[SimpleFunctionDescriptorImpl@7d275aa2]]
2021-03-12 00:47:05,707 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@293fa69b]
2021-03-12 00:47:05,828 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:47:05,831 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:05,959 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:05,962 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:06,248 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:47:06,250 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:47:06,370 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:06,373 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:06,669 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 00:47:06,672 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:47:06,799 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:06,803 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:07,069 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:47:07,072 [main:95] - GENERATED = require(false)
2021-03-12 00:47:07,072 [main:95] - GENERATED = contract({ require(false)})
2021-03-12 00:47:07,072 [main:95] - GENERATED = contract({ contract({ require(false)})})
2021-03-12 00:47:07,072 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in B[SimpleFunctionDescriptorImpl@7d275aa2]
2021-03-12 00:47:07,192 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:47:07,195 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:07,201 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).b({ contract({ contract({ require(false)})})}).ul({ println()})
2021-03-12 00:47:07,201 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b], public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]]
2021-03-12 00:47:07,201 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]
2021-03-12 00:47:07,325 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:47:07,328 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:07,450 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:47:07,454 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:47:07,880 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:47:07,883 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:47:07,886 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:47:07,886 [main:95] - GENERATED = require(true, { "gzquk"})
2021-03-12 00:47:07,886 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in P[SimpleFunctionDescriptorImpl@17a05cb9]
2021-03-12 00:47:08,007 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:47:08,010 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:08,137 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:08,140 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:08,411 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:47:08,414 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:47:08,551 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:08,554 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:08,807 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:47:08,809 [main:95] - GENERATED = check(true)
2021-03-12 00:47:08,810 [main:95] - GENERATED = contract({ check(true)})
2021-03-12 00:47:08,810 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).p({ require(true, { "gzquk"})}).ul({ contract({ check(true)})})
2021-03-12 00:47:08,810 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903], public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in H1[SimpleFunctionDescriptorImpl@5a58b88c]]
2021-03-12 00:47:08,810 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@16771903]
2021-03-12 00:47:08,923 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:47:08,926 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:09,072 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:47:09,075 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:47:09,486 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:47:09,489 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:47:09,491 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:47:09,492 [main:95] - GENERATED = require(true, { "yplje"})
2021-03-12 00:47:09,492 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in H1[SimpleFunctionDescriptorImpl@5a58b88c]
2021-03-12 00:47:09,614 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:47:09,616 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:09,748 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:47:09,751 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:47:10,140 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:47:10,142 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:47:10,145 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:47:10,145 [main:95] - GENERATED = require(true, { "gdykp"})
2021-03-12 00:47:10,145 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).h1({ require(true, { "yplje"})}).ul({ require(true, { "gdykp"})})
2021-03-12 00:47:10,145 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28]]
2021-03-12 00:47:10,145 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@42287e28]
2021-03-12 00:47:10,283 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:47:10,286 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:10,411 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:10,415 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:10,680 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:47:10,683 [main:95] - GENERATED = check(true)
2021-03-12 00:47:10,683 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).ul({ check(true)})
2021-03-12 00:47:10,683 [main:61] - replacement of ul { check(false)} of type UL is (HTML().bodyNoInline()).ul({ check(true)}).ul({ contract({ contract({ check(false)})})})
2021-03-12 00:47:10,804 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:47:10,807 [main:53] - replacing (testBodyHtmlNoInline(), String)
2021-03-12 00:47:10,807 [main:50] - replacing testBodyHtmlNoInline() String
2021-03-12 00:47:10,807 [main:54] - Getting value of type String
2021-03-12 00:47:10,932 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:47:10,934 [main:58] - GENERATED VALUE OF TYPE String = "yvure"
2021-03-12 00:47:10,934 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:11,694 [main:67] - randomType = Function2<Set<MutableMap<Char, Int>>, Boolean?, Element>
2021-03-12 00:47:11,695 [main:106] - GETTING String from UL
2021-03-12 00:47:11,769 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:47:11,769 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:47:11,890 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:47:11,892 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:47:11,895 [main:117] - GENERATED CALL = (B().ul()).name.filter({a: Char -> true})
2021-03-12 00:47:11,895 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:47:11,896 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:47:11,896 [main:117] - GENERATED CALL = (B().ul()).name.prependIndent(A().href)
2021-03-12 00:47:11,896 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:47:11,896 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:47:11,896 [main:117] - GENERATED CALL = (B().ul()).name.trimIndent()
2021-03-12 00:47:11,896 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:47:11,896 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:47:12,022 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:47:12,024 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:47:12,027 [main:117] - GENERATED CALL = (B().ul()).name.filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:47:12,027 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:47:12,027 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:47:12,143 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:47:12,265 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:47:12,269 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:47:12,556 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:47:12,559 [main:95] - GENERATED = StringBuilder("xzwjq")
2021-03-12 00:47:12,559 [main:117] - GENERATED CALL = (B().ul()).name.removeSurrounding(StringBuilder("xzwjq"))
2021-03-12 00:47:12,559 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:47:12,560 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:47:12,560 [main:117] - GENERATED CALL = (B().ul()).name.concat(href)
2021-03-12 00:47:12,560 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:47:12,560 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:47:12,560 [main:117] - GENERATED CALL = (B().ul()).name.trim()
2021-03-12 00:47:12,560 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:47:12,560 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:47:12,684 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:47:12,811 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:47:12,939 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:47:12,942 [main:117] - GENERATED CALL = (B().ul()).name.replace('', '큻', true)
2021-03-12 00:47:12,942 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:47:12,942 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:47:13,065 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:47:13,068 [main:117] - GENERATED CALL = (B().ul()).name.replaceAfterLast('癸', testHtmlNoInline(), testBodyNoInline())
2021-03-12 00:47:13,068 [main:113] - Case = [public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@4a372c23], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:47:13,068 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:47:13,196 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:47:13,199 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:47:13,202 [main:117] - GENERATED CALL = (B().ul()).name.dropLastWhile({a: Char -> false})
2021-03-12 00:47:13,202 [main:61] - replacement of testBodyHtmlNoInline() of type String is (B().ul()).name.replaceAfterLast('癸', testHtmlNoInline(), testBodyNoInline())
2021-03-12 00:47:13,319 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:47:13,320 [main:66] - Compilation checking started
2021-03-12 00:47:13,644 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${(B().ul()).name.replaceAfterLast('癸', testHtmlNoInline(), testBodyNoInline())}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:13,646 [main:53] - replacing ("$bodyVar", String)
2021-03-12 00:47:13,646 [main:50] - replacing "$bodyVar" String
2021-03-12 00:47:13,646 [main:54] - Getting value of type String
2021-03-12 00:47:13,785 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:47:13,787 [main:58] - GENERATED VALUE OF TYPE String = "acheo"
2021-03-12 00:47:13,787 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:15,291 [main:67] - randomType = List<Function1<Head, ArrayList<MutableMap<LI, Function1<Boolean?, ArrayList<Byte>>>>?>>
2021-03-12 00:47:15,292 [main:106] - GETTING String from HTML
2021-03-12 00:47:15,360 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:47:15,361 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:47:15,485 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:47:15,488 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceBeforeLast('줪', TODO().toString(), testHtmlNoInline())
2021-03-12 00:47:15,489 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:47:15,489 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:47:15,616 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:47:15,740 [main:43] - GENERATING CALL OF fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 00:47:15,744 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 00:47:16,335 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:47:16,338 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<Int>, Unit> false depth = 3
2021-03-12 00:47:16,341 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 00:47:16,466 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:16,470 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:16,874 [main:302] - generating value of type = Int true depth = 7
2021-03-12 00:47:16,877 [main:302] - generating value of type = Function1<Int, Unit> false depth = 7
2021-03-12 00:47:16,880 [main:302] - generating value of type = Unit false depth = 8
2021-03-12 00:47:16,885 [main:95] - GENERATED = repeat(-542924587, {a: Int -> println()})
2021-03-12 00:47:16,886 [main:95] - GENERATED = buildList<Int>(-1152727658, { repeat(-542924587, {a: Int -> println()})})
2021-03-12 00:47:16,886 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.slice(buildList<Int>(-1152727658, { repeat(-542924587, {a: Int -> println()})}))
2021-03-12 00:47:16,886 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:47:16,886 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:47:16,886 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.trimEnd()
2021-03-12 00:47:16,886 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:47:16,886 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:47:17,000 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:47:17,006 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.removeSurrounding("hesly")
2021-03-12 00:47:17,006 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]]
2021-03-12 00:47:17,006 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]
2021-03-12 00:47:17,121 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:47:17,123 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.substring(-642800050)
2021-03-12 00:47:17,124 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]]
2021-03-12 00:47:17,124 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@590d88f8]
2021-03-12 00:47:17,237 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:47:17,240 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.take(-2031499517)
2021-03-12 00:47:17,240 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:47:17,240 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:47:17,376 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:47:17,379 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.takeLast(5210575)
2021-03-12 00:47:17,379 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in HTML[PropertyDescriptorImpl@1de9a405], public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]]
2021-03-12 00:47:17,379 [main:149] - GENERATING call of type public open fun get(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@11cc3915]
2021-03-12 00:47:17,499 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:47:17,502 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).attributes.get("gshkt")
2021-03-12 00:47:17,502 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]]
2021-03-12 00:47:17,502 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:47:17,622 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:47:17,625 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.dropLast(390306784)
2021-03-12 00:47:17,625 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@5344c2aa], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:47:17,625 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:47:17,744 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:47:17,744 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.plus("niqgd")
2021-03-12 00:47:17,744 [main:61] - replacement of "$bodyVar" of type String is (html({ repeat(1590980469, {a: Int -> println("skriq")})})).attributes.get("gshkt")
2021-03-12 00:47:17,863 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:47:17,864 [main:53] - replacing (Title(), Title)
2021-03-12 00:47:17,864 [main:50] - replacing Title() Title
2021-03-12 00:47:17,864 [main:54] - Getting value of type Title
2021-03-12 00:47:17,991 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:47:17,993 [main:112] - generating klass Title text = class Title() : TagWithText((Body())?.name.trim())
2021-03-12 00:47:18,109 [main:194] - Type params = []
2021-03-12 00:47:18,224 [main:58] - GENERATED VALUE OF TYPE Title = Title()
2021-03-12 00:47:18,224 [main:61] - GENERATED IS CALL =true
2021-03-12 00:47:18,234 [main:67] - randomType = Tag
2021-03-12 00:47:18,349 [main:302] - generating value of type = Tag false depth = 0
2021-03-12 00:47:18,351 [main:112] - generating klass Tag text = abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}
2021-03-12 00:47:18,617 [main:302] - generating value of type = TagWithText false depth = 2
2021-03-12 00:47:18,620 [main:112] - generating klass TagWithText text = abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}
2021-03-12 00:47:18,897 [main:106] - GETTING Title from H1
2021-03-12 00:47:18,964 [main:106] - GETTING Title from P
2021-03-12 00:47:19,032 [main:106] - GETTING Title from String
2021-03-12 00:47:19,050 [main:106] - GETTING Title from String
2021-03-12 00:47:19,051 [main:106] - GETTING Title from String
2021-03-12 00:47:19,052 [main:106] - GETTING Title from Body
2021-03-12 00:47:19,123 [main:106] - GETTING Title from String
2021-03-12 00:47:19,124 [main:106] - GETTING Title from String
2021-03-12 00:47:19,124 [main:106] - GETTING Title from String
2021-03-12 00:47:19,124 [main:106] - GETTING Title from Title
2021-03-12 00:47:19,171 [main:61] - replacement of Title() of type Title is Title()
2021-03-12 00:47:19,296 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:47:19,297 [main:53] - replacing (init, [@kotlin.ExtensionFunctionType] Function1<Body, Unit>)
2021-03-12 00:47:19,297 [main:50] - replacing init [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:47:19,297 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit>
2021-03-12 00:47:19,412 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:47:19,414 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:19,534 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:47:19,537 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:47:19,815 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:47:19,815 [main:95] - GENERATED = print("wemta")
2021-03-12 00:47:19,815 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Body, Unit> = { print("wemta")}
2021-03-12 00:47:19,815 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:19,952 [main:67] - randomType = Float
2021-03-12 00:47:20,073 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:47:20,111 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Head
2021-03-12 00:47:20,162 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Title
2021-03-12 00:47:20,211 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:47:20,234 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from LI
2021-03-12 00:47:20,305 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:47:20,356 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:47:20,442 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:47:20,526 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from H1
2021-03-12 00:47:20,613 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:47:20,617 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:47:20,621 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from HTML
2021-03-12 00:47:20,625 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from UL
2021-03-12 00:47:20,714 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from P
2021-03-12 00:47:20,718 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:47:20,722 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:47:20,726 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from Body
2021-03-12 00:47:20,730 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from B
2021-03-12 00:47:20,814 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:47:20,818 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Body, Unit> from String
2021-03-12 00:47:20,818 [main:61] - replacement of init of type [@kotlin.ExtensionFunctionType] Function1<Body, Unit> is { print("wemta")}
2021-03-12 00:47:20,953 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:47:20,955 [main:53] - replacing ({ +"inqjo" }, [@kotlin.ExtensionFunctionType] Function1<Title, Unit>)
2021-03-12 00:47:20,955 [main:50] - replacing { +"inqjo" } [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:47:20,955 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:47:21,074 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Title, Unit> false depth = 0
2021-03-12 00:47:21,077 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:21,201 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:47:21,204 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:47:21,467 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:47:21,467 [main:95] - GENERATED = print("ioxqh")
2021-03-12 00:47:21,467 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Title, Unit> = { print("ioxqh")}
2021-03-12 00:47:21,467 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:21,888 [main:67] - randomType = HashSet<LI?>?
2021-03-12 00:47:22,002 [main:302] - generating value of type = HashSet<LI?> false depth = 0
2021-03-12 00:47:22,147 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<LI?> = TODO()
2021-03-12 00:47:22,151 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<LI?> = TODO()
2021-03-12 00:47:22,276 [main:95] - GENERATED = hashSetOf<LI?>()
2021-03-12 00:47:22,416 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from H1
2021-03-12 00:47:22,488 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from P
2021-03-12 00:47:22,567 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:22,590 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:22,594 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from HTML
2021-03-12 00:47:22,647 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Title
2021-03-12 00:47:22,698 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:22,702 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Body
2021-03-12 00:47:22,791 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Body
2021-03-12 00:47:22,796 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from P
2021-03-12 00:47:22,800 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Head
2021-03-12 00:47:22,857 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:22,861 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:22,865 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from B
2021-03-12 00:47:22,957 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Int
2021-03-12 00:47:23,004 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from UL
2021-03-12 00:47:23,095 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from HTML
2021-03-12 00:47:23,099 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from LI
2021-03-12 00:47:23,181 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:23,185 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:23,185 [main:61] - replacement of { +"inqjo" } of type [@kotlin.ExtensionFunctionType] Function1<Title, Unit> is { print("ioxqh")}
2021-03-12 00:47:23,330 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:47:23,331 [main:53] - replacing ("3", String)
2021-03-12 00:47:23,331 [main:50] - replacing "3" String
2021-03-12 00:47:23,332 [main:54] - Getting value of type String
2021-03-12 00:47:23,452 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:47:23,454 [main:58] - GENERATED VALUE OF TYPE String = "zbkkg"
2021-03-12 00:47:23,454 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:23,465 [main:67] - randomType = String?
2021-03-12 00:47:23,588 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:47:23,619 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:47:23,750 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:47:23,750 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:47:23,872 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:47:23,874 [main:78] - Generated call from random type = ("vfjzb")?.plus("lpxuk").dropLast(699782165)
2021-03-12 00:47:23,875 [main:106] - GETTING String from Body
2021-03-12 00:47:23,977 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21]]
2021-03-12 00:47:23,978 [main:117] - GENERATED CALL = (HTML().body()).name
2021-03-12 00:47:23,978 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]]
2021-03-12 00:47:23,978 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3a96b2]
2021-03-12 00:47:23,978 [main:117] - GENERATED CALL = (HTML().body()).name.uppercase()
2021-03-12 00:47:23,978 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:47:23,978 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:47:24,096 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:47:24,216 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:47:24,338 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:47:24,341 [main:117] - GENERATED CALL = (HTML().body()).name.replaceBefore('疆', "gbnrr", "tpqgo")
2021-03-12 00:47:24,341 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]]
2021-03-12 00:47:24,341 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e860e46]
2021-03-12 00:47:24,479 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:47:24,485 [main:117] - GENERATED CALL = (HTML().body()).name.removePrefix("qdwzh")
2021-03-12 00:47:24,486 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:47:24,486 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:47:24,609 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:47:24,612 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:47:24,615 [main:117] - GENERATED CALL = (HTML().body()).name.takeWhile({a: Char -> true})
2021-03-12 00:47:24,615 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Body[PropertyDescriptorImpl@51249017], public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]]
2021-03-12 00:47:24,615 [main:149] - GENERATING call of type public open fun put(key: kotlin.String, value: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@28e91996]
2021-03-12 00:47:24,739 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:47:24,742 [main:117] - GENERATED CALL = (HTML().body()).attributes.put("hqqlz", testBodyNoInline())
2021-03-12 00:47:24,742 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]]
2021-03-12 00:47:24,742 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]
2021-03-12 00:47:24,867 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:47:24,870 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:47:24,872 [main:117] - GENERATED CALL = (HTML().body()).name.dropWhile({a: Char -> false})
2021-03-12 00:47:24,873 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:47:24,873 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:47:24,995 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:47:24,998 [main:117] - GENERATED CALL = (HTML().body()).name.substringAfterLast('몴', testAllInline())
2021-03-12 00:47:24,999 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:47:24,999 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:47:24,999 [main:117] - GENERATED CALL = (HTML().body()).name.trimStart()
2021-03-12 00:47:24,999 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@4ad90c21], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c366a13]]
2021-03-12 00:47:24,999 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c366a13]
2021-03-12 00:47:25,127 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:47:25,130 [main:117] - GENERATED CALL = (HTML().body()).name.replaceIndentByMargin(testAllInline(), "ypcxw")
2021-03-12 00:47:25,130 [main:61] - replacement of "3" of type String is (HTML().body()).name.replaceIndentByMargin(testAllInline(), "ypcxw")
2021-03-12 00:47:25,247 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:47:25,249 [main:53] - replacing (result.toString()!!, String)
2021-03-12 00:47:25,249 [main:50] - replacing result.toString()!! String
2021-03-12 00:47:25,249 [main:54] - Getting value of type String
2021-03-12 00:47:25,367 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:47:25,370 [main:58] - GENERATED VALUE OF TYPE String = "vosqa"
2021-03-12 00:47:25,370 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:25,509 [main:67] - randomType = Boolean?
2021-03-12 00:47:25,646 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:47:25,663 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]
2021-03-12 00:47:25,786 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:47:25,789 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:47:25,911 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:47:25,914 [main:78] - Generated call from random type = (true)?.compareTo(false).toString(-1240551722)
2021-03-12 00:47:26,072 [main:61] - replacement of result.toString()!! of type String is (true)?.compareTo(false).toString(-1240551722)
2021-03-12 00:47:26,193 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:47:26,193 [main:66] - Compilation checking started
2021-03-12 00:47:26,702 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:26,703 [main:53] - replacing ({ +"XML encoding with Kotlin" }, [@kotlin.ExtensionFunctionType] Function1<Title, Unit>)
2021-03-12 00:47:26,703 [main:50] - replacing { +"XML encoding with Kotlin" } [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:47:26,703 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Title, Unit>
2021-03-12 00:47:26,872 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Title, Unit> false depth = 0
2021-03-12 00:47:26,875 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:27,005 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:27,008 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:27,280 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:47:27,283 [main:95] - GENERATED = require(true)
2021-03-12 00:47:27,283 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Title, Unit> = { require(true)}
2021-03-12 00:47:27,283 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:27,293 [main:67] - randomType = Title
2021-03-12 00:47:27,417 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:47:27,420 [main:112] - generating klass Title text = class Title() : TagWithText((Body())?.name.trim())
2021-03-12 00:47:27,544 [main:194] - Type params = []
2021-03-12 00:47:27,725 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from P
2021-03-12 00:47:27,815 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:27,842 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:27,846 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from HTML
2021-03-12 00:47:27,901 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from UL
2021-03-12 00:47:27,963 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Body
2021-03-12 00:47:28,025 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Title
2021-03-12 00:47:28,067 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from H1
2021-03-12 00:47:28,128 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from P
2021-03-12 00:47:28,132 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from HTML
2021-03-12 00:47:28,136 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:28,140 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from B
2021-03-12 00:47:28,202 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:28,206 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from LI
2021-03-12 00:47:28,270 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Head
2021-03-12 00:47:28,314 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:28,318 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from Body
2021-03-12 00:47:28,322 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:28,326 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Title, Unit> from String
2021-03-12 00:47:28,326 [main:61] - replacement of { +"XML encoding with Kotlin" } of type [@kotlin.ExtensionFunctionType] Function1<Title, Unit> is { require(true)}
2021-03-12 00:47:28,462 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:47:28,463 [main:53] - replacing (0, Int)
2021-03-12 00:47:28,463 [main:50] - replacing 0 Int
2021-03-12 00:47:28,463 [main:54] - Getting value of type Int
2021-03-12 00:47:28,584 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:47:28,587 [main:58] - GENERATED VALUE OF TYPE Int = -1190075402
2021-03-12 00:47:28,587 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:28,597 [main:67] - randomType = TagWithText
2021-03-12 00:47:28,718 [main:302] - generating value of type = TagWithText false depth = 0
2021-03-12 00:47:28,720 [main:112] - generating klass TagWithText text = abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}
2021-03-12 00:47:29,005 [main:149] - GENERATING call of type public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@6ef42252]
2021-03-12 00:47:29,135 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:47:29,137 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:47:29,383 [main:78] - Generated call from random type = (TODO()).children.indexOf(TODO())
2021-03-12 00:47:29,383 [main:106] - GETTING Int from B
2021-03-12 00:47:29,467 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708]]
2021-03-12 00:47:29,467 [main:117] - GENERATED CALL = (B().b()).name.length
2021-03-12 00:47:29,467 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@7fce2fe7], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]]
2021-03-12 00:47:29,467 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@7fce2fe7]
2021-03-12 00:47:29,605 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:47:29,605 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]
2021-03-12 00:47:29,725 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:47:29,728 [main:117] - GENERATED CALL = (B().b()).equals("kyuru").compareTo(true)
2021-03-12 00:47:29,728 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@6c844bea], protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@6913a175]]
2021-03-12 00:47:29,728 [main:117] - GENERATED CALL = (B().b()).children.modCount
2021-03-12 00:47:29,728 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@6c844bea], public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]]
2021-03-12 00:47:29,728 [main:149] - GENERATING call of type public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@680b767f]
2021-03-12 00:47:29,850 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:47:29,853 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:47:30,108 [main:117] - GENERATED CALL = (B().b()).children.lastIndexOf(TODO())
2021-03-12 00:47:30,109 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in B[PropertyDescriptorImpl@2b31fe92], public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@aaaf6a9]]
2021-03-12 00:47:30,109 [main:117] - GENERATED CALL = (B().b()).attributes.size
2021-03-12 00:47:30,109 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@6c844bea], public open val size: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@3c464ee3]]
2021-03-12 00:47:30,109 [main:117] - GENERATED CALL = (B().b()).children.size
2021-03-12 00:47:30,109 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]]
2021-03-12 00:47:30,109 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]
2021-03-12 00:47:30,109 [main:117] - GENERATED CALL = (B().b()).name.toInt()
2021-03-12 00:47:30,109 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@84240e2], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]]
2021-03-12 00:47:30,109 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]
2021-03-12 00:47:30,239 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:47:30,243 [main:117] - GENERATED CALL = (B().b()).name.compareTo(testBodyHtmlNoInline(), true)
2021-03-12 00:47:30,243 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@6c844bea], public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]]
2021-03-12 00:47:30,243 [main:149] - GENERATING call of type public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45a82c4]
2021-03-12 00:47:30,359 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:47:30,362 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:47:30,603 [main:117] - GENERATED CALL = (B().b()).children.indexOf(TODO())
2021-03-12 00:47:30,603 [main:61] - replacement of 0 of type Int is (B().b()).name.length
2021-03-12 00:47:30,742 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:47:30,743 [main:53] - replacing (bodyVar, Int)
2021-03-12 00:47:30,743 [main:50] - replacing bodyVar Int
2021-03-12 00:47:30,743 [main:54] - Getting value of type Int
2021-03-12 00:47:30,866 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:47:30,869 [main:58] - GENERATED VALUE OF TYPE Int = -485281897
2021-03-12 00:47:30,869 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:31,307 [main:67] - randomType = Pair<Boolean?, Int?>
2021-03-12 00:47:31,440 [main:302] - generating value of type = Pair<Boolean?, Int?> false depth = 0
2021-03-12 00:47:31,594 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Boolean?, second: Int?): Pair<Boolean?, Int?> = TODO()
2021-03-12 00:47:31,597 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Boolean?, second: Int?): Pair<Boolean?, Int?> = TODO()
2021-03-12 00:47:31,721 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 00:47:31,724 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:47:31,727 [main:95] - GENERATED = Pair<Boolean?, Int?>(false, 1741187039)
2021-03-12 00:47:31,743 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31727375]
2021-03-12 00:47:31,858 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:47:31,861 [main:78] - Generated call from random type = (Pair<Boolean?, Int?>(false, 1741187039)).second?.plus(-82)!!
2021-03-12 00:47:31,861 [main:61] - replacement of bodyVar of type Int is (Pair<Boolean?, Int?>(false, 1741187039)).second?.plus(-82)!!
2021-03-12 00:47:31,999 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 00:47:32,000 [main:53] - replacing (p { println()}, P)
2021-03-12 00:47:32,000 [main:50] - replacing p { println()} P
2021-03-12 00:47:32,000 [main:54] - Getting value of type P
2021-03-12 00:47:32,124 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:47:32,127 [main:112] - generating klass P text = class P() : BodyTag("ienzk")
2021-03-12 00:47:32,250 [main:194] - Type params = []
2021-03-12 00:47:32,375 [main:58] - GENERATED VALUE OF TYPE P = P()
2021-03-12 00:47:32,375 [main:61] - GENERATED IS CALL =true
2021-03-12 00:47:32,943 [main:67] - randomType = Triple<Short, UInt, UByte>
2021-03-12 00:47:33,061 [main:302] - generating value of type = Triple<Short, UInt, UByte> false depth = 0
2021-03-12 00:47:33,222 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Short, second: UInt, third: UByte): Triple<Short, UInt, UByte> = TODO()
2021-03-12 00:47:33,226 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Short, second: UInt, third: UByte): Triple<Short, UInt, UByte> = TODO()
2021-03-12 00:47:33,355 [main:302] - generating value of type = Short true depth = 3
2021-03-12 00:47:33,357 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 00:47:33,360 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 00:47:33,363 [main:95] - GENERATED = Triple<Short, UInt, UByte>(29025, 1114740342.toUInt(), 80.toUByte())
2021-03-12 00:47:33,384 [main:106] - GETTING P from String
2021-03-12 00:47:33,411 [main:106] - GETTING P from HTML
2021-03-12 00:47:33,473 [main:113] - Case = [public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d], public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@1df092da]]
2021-03-12 00:47:33,474 [main:149] - GENERATING call of type public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]
2021-03-12 00:47:33,595 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:47:33,598 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:33,724 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:47:33,727 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:47:33,998 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:47:33,999 [main:95] - GENERATED = println("lcgpz")
2021-03-12 00:47:33,999 [main:149] - GENERATING call of type public final inline fun pNoInline(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@1df092da]
2021-03-12 00:47:34,114 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:47:34,117 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:34,236 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:34,240 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:34,664 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:47:34,666 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:47:34,669 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:47:34,795 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:34,798 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:47:35,219 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:47:35,222 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 00:47:35,225 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:47:35,345 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:47:35,349 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:47:35,640 [main:302] - generating value of type = Any false depth = 12
2021-03-12 00:47:35,640 [main:95] - GENERATED = println("dkoxc")
2021-03-12 00:47:35,640 [main:95] - GENERATED = repeat(-1317579725, {a: Int -> println("dkoxc")})
2021-03-12 00:47:35,640 [main:95] - GENERATED = repeat(-1160503662, {a: Int -> repeat(-1317579725, {a: Int -> println("dkoxc")})})
2021-03-12 00:47:35,641 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).body({ println("lcgpz")}).pNoInline({ repeat(-1160503662, {a: Int -> repeat(-1317579725, {a: Int -> println("dkoxc")})})})
2021-03-12 00:47:35,641 [main:113] - Case = [public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d], public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]]
2021-03-12 00:47:35,641 [main:149] - GENERATING call of type public final inline fun body(init: Body.() -> kotlin.Unit): Body defined in HTML[SimpleFunctionDescriptorImpl@1d8361d]
2021-03-12 00:47:35,762 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Body, Unit> false depth = 0
2021-03-12 00:47:35,765 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:35,891 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:47:35,895 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:47:36,312 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:47:36,315 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:47:36,318 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:47:36,319 [main:95] - GENERATED = require(false, { "vspyv"})
2021-03-12 00:47:36,319 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@bb5d54b]
2021-03-12 00:47:36,457 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:47:36,459 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:36,465 [main:117] - GENERATED CALL = (html({ repeat(1590980469, {a: Int -> println("skriq")})})).body({ require(false, { "vspyv"})}).p({ println()})
2021-03-12 00:47:36,465 [main:61] - replacement of p { println()} of type P is (html({ repeat(1590980469, {a: Int -> println("skriq")})})).body({ println("lcgpz")}).pNoInline({ repeat(-1160503662, {a: Int -> repeat(-1317579725, {a: Int -> println("dkoxc")})})})
2021-03-12 00:47:36,581 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:47:36,584 [main:53] - replacing ("OK", String)
2021-03-12 00:47:36,584 [main:50] - replacing "OK" String
2021-03-12 00:47:36,584 [main:54] - Getting value of type String
2021-03-12 00:47:36,700 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:47:36,703 [main:58] - GENERATED VALUE OF TYPE String = "eubbl"
2021-03-12 00:47:36,703 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:38,268 [main:67] - randomType = HashMap<Long, Function2<LinkedHashSet<Set<Byte>>, HashSet<Byte?>?, ArrayDeque<Double>>>
2021-03-12 00:47:38,389 [main:302] - generating value of type = HashMap<Long, Function2<LinkedHashSet<Set<Byte>>, HashSet<Byte?>?, ArrayDeque<Double>>> false depth = 0
2021-03-12 00:47:38,519 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Long, Function2<LkedHashSet<Set<Byte>>, HashSet<Byte?>?, ArrayDeque<Double>>> = TODO()
2021-03-12 00:47:38,523 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Long, Function2<LkedHashSet<Set<Byte>>, HashSet<Byte?>?, ArrayDeque<Double>>> = TODO()
2021-03-12 00:47:38,652 [main:95] - GENERATED = hashMapOf<Long, Function2<LinkedHashSet<Set<Byte>>, HashSet<Byte?>?, ArrayDeque<Double>>>()
2021-03-12 00:47:38,918 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:47:39,035 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:47:39,038 [main:78] - Generated call from random type = (hashMapOf<Long, Function2<LinkedHashSet<Set<Byte>>, HashSet<Byte?>?, ArrayDeque<Double>>>()).size.toString(-803970794)
2021-03-12 00:47:39,039 [main:106] - GETTING String from P
2021-03-12 00:47:39,121 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:47:39,121 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:47:39,233 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:47:39,236 [main:117] - GENERATED CALL = (B().pNoInline()).name.takeLast(1247663443)
2021-03-12 00:47:39,236 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:47:39,236 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:47:39,372 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:47:39,495 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:47:39,616 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:47:39,619 [main:117] - GENERATED CALL = (B().pNoInline()).name.replaceFirst('쒰', '', false)
2021-03-12 00:47:39,619 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681]]
2021-03-12 00:47:39,619 [main:117] - GENERATED CALL = (B().pNoInline()).name
2021-03-12 00:47:39,619 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:47:39,620 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:47:39,620 [main:117] - GENERATED CALL = (B().pNoInline()).name.decapitalize()
2021-03-12 00:47:39,620 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:47:39,620 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:47:39,620 [main:117] - GENERATED CALL = (B().pNoInline()).name.trim()
2021-03-12 00:47:39,620 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]]
2021-03-12 00:47:39,620 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]
2021-03-12 00:47:39,739 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:47:39,862 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:47:39,865 [main:117] - GENERATED CALL = (B().pNoInline()).name.padEnd(-53602650, '뾈')
2021-03-12 00:47:39,865 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]]
2021-03-12 00:47:39,865 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4205ebed]
2021-03-12 00:47:39,998 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:47:40,002 [main:117] - GENERATED CALL = (B().pNoInline()).name.replaceBefore('Ὃ', testAllInline(), TextElement("utmeo").text)
2021-03-12 00:47:40,002 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]]
2021-03-12 00:47:40,002 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20d517c5]
2021-03-12 00:47:40,003 [main:117] - GENERATED CALL = (B().pNoInline()).name.trimEnd()
2021-03-12 00:47:40,003 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:47:40,003 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:47:40,122 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:47:40,125 [main:117] - GENERATED CALL = (B().pNoInline()).name.replaceAfterLast('', TODO().toString(), testBodyNoInline())
2021-03-12 00:47:40,125 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@22bda681], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]]
2021-03-12 00:47:40,125 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@245bf8c1]
2021-03-12 00:47:40,244 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:47:40,364 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:47:40,368 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:47:40,646 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:47:40,649 [main:95] - GENERATED = StringBuilder(-469243748)
2021-03-12 00:47:40,649 [main:117] - GENERATED CALL = (B().pNoInline()).name.removeSurrounding(StringBuilder(-469243748))
2021-03-12 00:47:40,650 [main:61] - replacement of "OK" of type String is (B().pNoInline()).name.removeSurrounding(StringBuilder(-469243748))
2021-03-12 00:47:40,769 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:47:40,770 [main:66] - Compilation checking started
2021-03-12 00:47:41,124 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return (B().pNoInline()).name.removeSurrounding(StringBuilder(-469243748))
}


2021-03-12 00:47:41,126 [main:53] - replacing ({
                            for (arg in args)
                                li { contract({ println()})}
                        }, [@kotlin.ExtensionFunctionType] Function1<UL, Unit>)
2021-03-12 00:47:41,126 [main:50] - replacing {
                            for (arg in args)
                                li { contract({ println()})}
                        } [@kotlin.ExtensionFunctionType] Function1<UL, Unit>
2021-03-12 00:47:41,126 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<UL, Unit>
2021-03-12 00:47:41,257 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:47:41,259 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:41,380 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:41,383 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:47:41,641 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:47:41,644 [main:95] - GENERATED = check(false)
2021-03-12 00:47:41,644 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<UL, Unit> = { check(false)}
2021-03-12 00:47:41,644 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:41,655 [main:67] - randomType = A
2021-03-12 00:47:41,793 [main:302] - generating value of type = A false depth = 0
2021-03-12 00:47:41,795 [main:112] - generating klass A text = class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}
2021-03-12 00:47:41,916 [main:194] - Type params = []
2021-03-12 00:47:42,119 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:47:42,142 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Body
2021-03-12 00:47:42,215 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:47:42,219 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:47:42,223 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from B
2021-03-12 00:47:42,294 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from H1
2021-03-12 00:47:42,365 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:47:42,369 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from P
2021-03-12 00:47:42,452 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:47:42,456 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from HTML
2021-03-12 00:47:42,517 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:47:42,521 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from UL
2021-03-12 00:47:42,619 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from HTML
2021-03-12 00:47:42,623 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Head
2021-03-12 00:47:42,689 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from String
2021-03-12 00:47:42,693 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from LI
2021-03-12 00:47:42,792 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Title
2021-03-12 00:47:42,856 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from P
2021-03-12 00:47:42,860 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<UL, Unit> from Body
2021-03-12 00:47:42,861 [main:61] - replacement of {
                            for (arg in args)
                                li { contract({ println()})}
                        } of type [@kotlin.ExtensionFunctionType] Function1<UL, Unit> is { check(false)}
2021-03-12 00:47:43,001 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:47:43,003 [main:53] - replacing ({ +(A().href).replaceIndent("flxxf") }, [@kotlin.ExtensionFunctionType] Function1<P, Unit>)
2021-03-12 00:47:43,003 [main:50] - replacing { +(A().href).replaceIndent("flxxf") } [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:47:43,003 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<P, Unit>
2021-03-12 00:47:43,127 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:47:43,130 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:47:43,136 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<P, Unit> = { println()}
2021-03-12 00:47:43,136 [main:61] - GENERATED IS CALL =false
2021-03-12 00:47:43,594 [main:67] - randomType = HashMap<LinkedHashMap<String?, ULong>, Char>
2021-03-12 00:47:43,719 [main:302] - generating value of type = HashMap<LinkedHashMap<String?, ULong>, Char> false depth = 0
2021-03-12 00:47:43,844 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<LkedHashMap<Strg?, ULong>, Char> = TODO()
2021-03-12 00:47:43,847 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<LkedHashMap<Strg?, ULong>, Char> = TODO()
2021-03-12 00:47:43,971 [main:95] - GENERATED = hashMapOf<LinkedHashMap<String?, ULong>, Char>()
2021-03-12 00:47:44,121 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from H1
2021-03-12 00:47:44,183 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:47:44,243 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from P
2021-03-12 00:47:44,247 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Head
2021-03-12 00:47:44,290 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from LI
2021-03-12 00:47:44,352 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from UL
2021-03-12 00:47:44,415 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Title
2021-03-12 00:47:44,456 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:47:44,500 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:47:44,520 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:47:44,524 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:47:44,528 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:47:44,590 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:47:44,594 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:47:44,598 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from HTML
2021-03-12 00:47:44,602 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from B
2021-03-12 00:47:44,663 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:47:44,667 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from String
2021-03-12 00:47:44,671 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<P, Unit> from Body
2021-03-12 00:47:44,671 [main:61] - replacement of { +(A().href).replaceIndent("flxxf") } of type [@kotlin.ExtensionFunctionType] Function1<P, Unit> is { println()}
2021-03-12 00:47:44,809 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:47:44,936 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 00:47:45,060 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:47:45,060 [main:66] - Compilation checking started
2021-03-12 00:47:45,442 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(containsKey(testBodyHtmlNoInline()))})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(1590980469, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:45,442 [main:119] - TRYING TO REPLACE CONSTANT 1590980469
2021-03-12 00:47:45,604 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 00:47:45,604 [main:66] - Compilation checking started
2021-03-12 00:47:46,088 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:46,088 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 00:47:46,231 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:47:46,232 [main:66] - Compilation checking started
2021-03-12 00:47:46,581 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> add(tag)}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> -2056743029})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:46,582 [main:119] - TRYING TO REPLACE CONSTANT 1590980469
2021-03-12 00:47:46,707 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 00:47:46,707 [main:66] - Compilation checking started
2021-03-12 00:47:47,204 [main:119] - TRYING TO REPLACE CONSTANT 2056743029
2021-03-12 00:47:47,324 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:47:47,324 [main:66] - Compilation checking started
2021-03-12 00:47:47,764 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> 1488563694})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", false)

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:47,764 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 00:47:47,909 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 00:47:47,909 [main:66] - Compilation checking started
2021-03-12 00:47:48,429 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> 1488563694})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(-1488563694, 1888032817).commonPrefixWith("dghmx", expected != (-2130240402675240442)?.toChar().lowercase())

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:48,429 [main:119] - TRYING TO REPLACE CONSTANT 1888032817
2021-03-12 00:47:48,574 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 00:47:48,574 [main:66] - Compilation checking started
2021-03-12 00:47:49,061 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> 1488563694})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(-1488563694, 1893293632).commonPrefixWith("dghmx", expected != (-2130240402675240442)?.toChar().lowercase())

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:49,061 [main:119] - TRYING TO REPLACE CONSTANT 1488563694
2021-03-12 00:47:49,203 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:47:49,204 [main:66] - Compilation checking started
2021-03-12 00:47:49,771 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> 1488563694})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(1888032817, 1893293632).commonPrefixWith("dghmx", expected != (-2130240402675240442)?.toChar().lowercase())

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:49,771 [main:119] - TRYING TO REPLACE CONSTANT 1590980469
2021-03-12 00:47:49,901 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:47:49,901 [main:66] - Compilation checking started
2021-03-12 00:47:50,319 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-1893293632, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(sumBy({a: Char -> 1488563694}), {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> 1488563694})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(1888032817, 1893293632).commonPrefixWith("dghmx", expected != (-2130240402675240442)?.toChar().lowercase())

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:50,319 [main:119] - TRYING TO REPLACE CONSTANT 1893293632
2021-03-12 00:47:50,501 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 00:47:50,502 [main:66] - Compilation checking started
2021-03-12 00:47:51,025 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-548328558, -548328558, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> 1488563694})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(1888032817, 1893293632).commonPrefixWith("dghmx", expected != (-2130240402675240442)?.toChar().lowercase())

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:51,025 [main:119] - TRYING TO REPLACE CONSTANT 548328558
2021-03-12 00:47:51,193 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 00:47:51,193 [main:66] - Compilation checking started
2021-03-12 00:47:51,672 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-548328558, -1893293632, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> 1488563694})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains('⌇', false)) return (A().href).subSequence(1888032817, 1893293632).commonPrefixWith("dghmx", expected != (-2130240402675240442)?.toChar().lowercase())

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:51,672 [main:119] - TRYING TO REPLACE CONSTANT 1590980469
2021-03-12 00:47:51,835 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 00:47:51,836 [main:119] - TRYING TO REPLACE CONSTANT 2130240402675240442
2021-03-12 00:47:52,005 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 00:47:52,005 [main:66] - Compilation checking started
2021-03-12 00:47:52,519 [main:119] - TRYING TO REPLACE CONSTANT '⌇'
2021-03-12 00:47:52,645 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:47:52,645 [main:66] - Compilation checking started
2021-03-12 00:47:53,108 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-548328558, -1893293632, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> 1488563694})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains((-2130240402675240442)?.toChar(), false)) return (A().href).subSequence(1888032817, 1893293632).commonPrefixWith("dghmx", expected != (-2130240402675240442)?.toChar().lowercase())

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:53,108 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 00:47:53,289 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:47:53,290 [main:66] - Compilation checking started
2021-03-12 00:47:53,646 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-548328558, -1893293632, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> 1488563694})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains((-2130240402675240442)?.toChar(), containsKey(testBodyHtmlNoInline()))) return (A().href).subSequence(1888032817, 1893293632).commonPrefixWith("dghmx", expected != (-2130240402675240442)?.toChar().lowercase())

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:53,647 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 00:47:53,777 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:47:53,778 [main:66] - Compilation checking started
2021-03-12 00:47:54,168 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-548328558, -1893293632, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> 1488563694})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (add(tag))?.compareTo(false).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains((-2130240402675240442)?.toChar(), false)) return (A().href).subSequence(1888032817, 1893293632).commonPrefixWith("dghmx", expected != (-2130240402675240442)?.toChar().lowercase())

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:54,169 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 00:47:54,288 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:47:54,289 [main:66] - Compilation checking started
2021-03-12 00:47:54,622 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-548328558, -1893293632, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> 1488563694})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(children.add(tag)).toString(-1240551722)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains((-2130240402675240442)?.toChar(), false)) return (A().href).subSequence(1888032817, 1893293632).commonPrefixWith("dghmx", expected != (-2130240402675240442)?.toChar().lowercase())

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:54,622 [main:119] - TRYING TO REPLACE CONSTANT 1240551722
2021-03-12 00:47:54,766 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:47:54,766 [main:66] - Compilation checking started
2021-03-12 00:47:55,285 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText(testBodyHtmlNoInline()) {
    inline fun head(init: Head.() -> Unit) = Head()

    inline fun body(init: Body.() -> Unit) = Body()

    fun bodyNoInline(init: Body.() -> Unit) = initTag((htmlNoInline({ require(false)})).body(init), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = Title()
}

class Title() : TagWithText((Body())?.name.trim())

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag((A().href).plus("afzqs"))
class LI() : BodyTag("li")
class P() : BodyTag("ienzk")
class H1() : BodyTag((html({ repeat(1590980469, {a: Int -> println("skriq")})})).name.replaceRange(-548328558, -1893293632, "klvps"))
class A() : BodyTag((TextElement("utmeo").text).prependIndent(testHtmlNoInline())) {
    public var href: String
        get() = (href)?.lowercase()!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return HTML()
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = html({ repeat(-1893293632, {a: Int -> println("skriq")})})
    html.init()
    return html({ repeat(1590980469, {a: Int -> println("skriq")})})
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf((TextElement("ldtja")).text.filterIndexed({a: Int, b: Char -> false}), "2", "3")
    val result =
            html {
                val htmlVal = (testHtmlNoInline()).sumBy({a: Char -> 1488563694})
                head { println("spfbo")}
                Body()
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", (testAllInline()).trimStart(), "3")
    val result =
            htmlNoInline() { println("jycml")}

    return "fyxhc"!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html { println("uxizm")}

    return (true)?.compareTo(false).toString(1893293632)
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf<String>("oitsc")
    val result =
            html({ repeat(1590980469, {a: Int -> println("skriq")})})

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if ((TODO().toString()).contains((-2130240402675240442)?.toChar(), false)) return (A().href).subSequence(1888032817, 1893293632).commonPrefixWith("dghmx", expected != (-2130240402675240442)?.toChar().lowercase())

    if (expected != (-2130240402675240442)?.toChar().lowercase()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if ((Head()).attributes.containsKey(testBodyHtmlNoInline())) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:55,316 [main:66] - Compilation checking started
2021-03-12 00:47:55,695 [main:41] - AFTER TRY 0 res = 

import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}


2021-03-12 00:47:56,024 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:47:56,325 [main:112] - generating klass TextElement text = class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}
2021-03-12 00:47:56,464 [main:194] - Type params = []
2021-03-12 00:47:56,618 [main:302] - generating value of type = String true depth = 1
2021-03-12 00:47:56,622 [main:112] - generating klass Tag text = abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}
2021-03-12 00:47:56,902 [main:112] - generating klass TagWithText text = abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}
2021-03-12 00:47:57,213 [main:112] - generating klass HTML text = class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}
2021-03-12 00:47:57,355 [main:194] - Type params = []
2021-03-12 00:47:57,495 [main:112] - generating klass Head text = class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}
2021-03-12 00:47:57,635 [main:194] - Type params = []
2021-03-12 00:47:57,773 [main:112] - generating klass Title text = class Title() : TagWithText("title")
2021-03-12 00:47:57,917 [main:194] - Type params = []
2021-03-12 00:47:58,049 [main:112] - generating klass BodyTag text = abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}
2021-03-12 00:47:58,370 [main:302] - generating value of type = Body false depth = 1
2021-03-12 00:47:58,374 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:47:58,512 [main:194] - Type params = []
2021-03-12 00:47:58,652 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:47:58,789 [main:194] - Type params = []
2021-03-12 00:47:58,927 [main:112] - generating klass UL text = class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}
2021-03-12 00:47:59,072 [main:194] - Type params = []
2021-03-12 00:47:59,228 [main:112] - generating klass B text = class B() : BodyTag("b")
2021-03-12 00:47:59,366 [main:194] - Type params = []
2021-03-12 00:47:59,495 [main:112] - generating klass LI text = class LI() : BodyTag("li")
2021-03-12 00:47:59,654 [main:194] - Type params = []
2021-03-12 00:47:59,795 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:47:59,933 [main:194] - Type params = []
2021-03-12 00:48:00,074 [main:112] - generating klass H1 text = class H1() : BodyTag("h1")
2021-03-12 00:48:00,211 [main:194] - Type params = []
2021-03-12 00:48:00,353 [main:112] - generating klass A text = class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}
2021-03-12 00:48:00,483 [main:194] - Type params = []
2021-03-12 00:48:00,922 [main:43] - GENERATING CALL OF inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}
2021-03-12 00:48:00,926 [main:61] - WITHOUT TYPE PARAMS = inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}
2021-03-12 00:48:01,213 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> false depth = 1
2021-03-12 00:48:01,217 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:48:01,362 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:48:01,368 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:48:01,684 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 00:48:01,688 [main:95] - GENERATED = check(true)
2021-03-12 00:48:01,688 [main:95] - GENERATED = html({ check(true)})
2021-03-12 00:48:01,821 [main:43] - GENERATING CALL OF fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}
2021-03-12 00:48:01,825 [main:61] - WITHOUT TYPE PARAMS = fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}
2021-03-12 00:48:02,166 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<HTML, Unit> false depth = 1
2021-03-12 00:48:02,171 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 00:48:02,178 [main:95] - GENERATED = htmlNoInline({ println()})
2021-03-12 00:48:02,346 [main:43] - Try №0
2021-03-12 00:48:04,370 [main:69] - Trying to insert fun box242(): String {
    return Kla0().fu0()
}
2021-03-12 00:48:04,592 [main:66] - Compilation checking started
2021-03-12 00:48:05,770 [main:103] - Trying to change 142 nodes
2021-03-12 00:48:05,770 [main:107] - replacing (prope0, String)
2021-03-12 00:48:05,771 [main:50] - replacing prope0 String
2021-03-12 00:48:05,771 [main:54] - Getting value of type String
2021-03-12 00:48:05,990 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:05,995 [main:58] - GENERATED VALUE OF TYPE String = "bkrmu"
2021-03-12 00:48:05,995 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:06,438 [main:67] - randomType = HashSet<Char>
2021-03-12 00:48:06,629 [main:302] - generating value of type = HashSet<Char> false depth = 0
2021-03-12 00:48:06,816 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Char): HashSet<Char> = TODO()
2021-03-12 00:48:06,823 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Char): HashSet<Char> = TODO()
2021-03-12 00:48:07,012 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:48:07,018 [main:95] - GENERATED = linkedSetOf<Char>('ꇁ')
2021-03-12 00:48:07,120 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@481d80e0]
2021-03-12 00:48:07,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@50f80fd8]
2021-03-12 00:48:07,120 [main:78] - Generated call from random type = (linkedSetOf<Char>('ꇁ')).toArray().contentDeepToString()
2021-03-12 00:48:07,121 [main:106] - GETTING String from B
2021-03-12 00:48:07,185 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:48:07,185 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:48:07,395 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:07,401 [main:117] - GENERATED CALL = (Body().b()).name.replaceAfterLast('䅖', testBodyNoInline(), testAllInline())
2021-03-12 00:48:07,401 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]]
2021-03-12 00:48:07,401 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]
2021-03-12 00:48:07,585 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:48:07,591 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:48:07,596 [main:117] - GENERATED CALL = (Body().b()).name.dropWhile({a: Char -> false})
2021-03-12 00:48:07,596 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:48:07,597 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:48:07,597 [main:117] - GENERATED CALL = (Body().b()).name.trim()
2021-03-12 00:48:07,597 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:48:07,597 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:48:07,778 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:48:07,784 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:48:07,789 [main:117] - GENERATED CALL = (Body().b()).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 00:48:07,789 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:48:07,789 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:48:07,979 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:07,984 [main:117] - GENERATED CALL = (Body().b()).name.substringAfterLast('蒍', TODO().toString())
2021-03-12 00:48:07,984 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:48:07,985 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:48:08,161 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:08,341 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:08,510 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:48:08,723 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:48:08,730 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:48:09,134 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:48:09,142 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 00:48:09,143 [main:117] - GENERATED CALL = (Body().b()).name.replaceRange(1530817167, -1308792019, StringBuilder(StringBuilder()))
2021-03-12 00:48:09,143 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:48:09,143 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:48:09,329 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:09,508 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:09,514 [main:117] - GENERATED CALL = (Body().b()).name.replaceBeforeLast('麭', TODO().toString(), "xuekj")
2021-03-12 00:48:09,514 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:48:09,514 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:48:09,514 [main:117] - GENERATED CALL = (Body().b()).name.reversed()
2021-03-12 00:48:09,514 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c366a13]]
2021-03-12 00:48:09,514 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c366a13]
2021-03-12 00:48:09,686 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:09,691 [main:117] - GENERATED CALL = (Body().b()).name.replaceIndentByMargin("jfvvo", testAllInline())
2021-03-12 00:48:09,691 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:48:09,691 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:48:09,692 [main:117] - GENERATED CALL = (Body().b()).name.toLowerCase()
2021-03-12 00:48:09,692 [main:114] - replacement of prope0 of type String is (Body().b()).name.replaceIndentByMargin("jfvvo", testAllInline())
2021-03-12 00:48:09,893 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:48:09,893 [main:66] - Compilation checking started
2021-03-12 00:48:10,371 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $prope2 or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if ((Body().b()).name.replaceIndentByMargin("jfvvo", testAllInline()) != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $prope5 != $prope1"

        return "OK"
    }
}


2021-03-12 00:48:10,372 [main:107] - replacing (fu0(b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" }), String)
2021-03-12 00:48:10,373 [main:50] - replacing fu0(b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" }) String
2021-03-12 00:48:10,373 [main:54] - Getting value of type String
2021-03-12 00:48:10,579 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:10,585 [main:58] - GENERATED VALUE OF TYPE String = "rsawb"
2021-03-12 00:48:10,585 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:10,605 [main:67] - randomType = H1
2021-03-12 00:48:10,775 [main:302] - generating value of type = H1 false depth = 0
2021-03-12 00:48:10,781 [main:112] - generating klass H1 text = class H1() : BodyTag("h1")
2021-03-12 00:48:10,953 [main:194] - Type params = []
2021-03-12 00:48:11,254 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]
2021-03-12 00:48:11,435 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:11,441 [main:78] - Generated call from random type = (H1()).name.substring(43128240)
2021-03-12 00:48:11,441 [main:106] - GETTING String from String
2021-03-12 00:48:11,460 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:48:11,461 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:48:11,461 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).toLowerCase()
2021-03-12 00:48:11,461 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:48:11,461 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:48:11,643 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:11,832 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:11,838 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).substringAfter('◹', "wsmzf")
2021-03-12 00:48:11,838 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]]
2021-03-12 00:48:11,838 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:48:12,013 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:12,189 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:12,194 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]
2021-03-12 00:48:12,402 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:48:12,592 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:48:12,598 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:48:13,011 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:48:13,017 [main:95] - GENERATED = StringBuilder("hbyek")
2021-03-12 00:48:13,194 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:13,200 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).subSequence(489253778, 1152635955).commonSuffixWith(StringBuilder("hbyek"), true)
2021-03-12 00:48:13,200 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]]
2021-03-12 00:48:13,200 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:48:13,379 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:13,384 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ec95e8d]
2021-03-12 00:48:13,384 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).get(1691668913).lowercase()
2021-03-12 00:48:13,385 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:48:13,385 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:48:13,593 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:48:13,601 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).removeSuffix("evhzz")
2021-03-12 00:48:13,601 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:48:13,602 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:48:13,783 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:13,972 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:13,977 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).padStart(294376296, '鮰')
2021-03-12 00:48:13,977 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:48:13,978 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:48:14,167 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:48:14,167 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).plus("jrvgj")
2021-03-12 00:48:14,167 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22578dad]]
2021-03-12 00:48:14,167 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:48:14,339 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:14,524 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:14,530 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22578dad]
2021-03-12 00:48:14,693 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:48:14,904 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:48:14,910 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:48:15,532 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:48:15,537 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 00:48:15,543 [main:95] - GENERATED = Regex("zuqgi", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 00:48:15,713 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 00:48:15,719 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:48:15,727 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).subSequence(1939393165, -616731603).replace(Regex("zuqgi", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> "gomqz"})
2021-03-12 00:48:15,727 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:48:15,727 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:48:15,727 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).concat(expected)
2021-03-12 00:48:15,728 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]]
2021-03-12 00:48:15,728 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3724b414]
2021-03-12 00:48:15,897 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:15,902 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).dropLast(-1869705660)
2021-03-12 00:48:15,902 [main:114] - replacement of fu0(b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" }) of type String is (H1()).name.substring(43128240)
2021-03-12 00:48:16,108 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:48:16,108 [main:66] - Compilation checking started
2021-03-12 00:48:16,568 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.(H1()).name.substring(43128240)
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $prope2 or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $prope5 != $prope1"

        return "OK"
    }
}


2021-03-12 00:48:16,569 [main:107] - replacing ({ prope0 += "1_"; prope3 }, Function0<Long>)
2021-03-12 00:48:16,569 [main:50] - replacing { prope0 += "1_"; prope3 } Function0<Long>
2021-03-12 00:48:16,569 [main:54] - Getting value of type Function0<Long>
2021-03-12 00:48:16,763 [main:302] - generating value of type = Function0<Long> false depth = 0
2021-03-12 00:48:16,768 [main:302] - generating value of type = Long true depth = 1
2021-03-12 00:48:16,774 [main:58] - GENERATED VALUE OF TYPE Function0<Long> = { -2202240868162051870}
2021-03-12 00:48:16,774 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:17,008 [main:67] - randomType = Title?
2021-03-12 00:48:17,183 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:48:17,189 [main:112] - generating klass Title text = class Title() : TagWithText("title")
2021-03-12 00:48:17,404 [main:194] - Type params = []
2021-03-12 00:48:17,655 [main:106] - GETTING Function0<Long> from LI
2021-03-12 00:48:17,732 [main:106] - GETTING Function0<Long> from P
2021-03-12 00:48:17,803 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:48:17,823 [main:106] - GETTING Function0<Long> from Body
2021-03-12 00:48:17,896 [main:106] - GETTING Function0<Long> from UL
2021-03-12 00:48:17,967 [main:106] - GETTING Function0<Long> from Body
2021-03-12 00:48:17,968 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:48:17,969 [main:106] - GETTING Function0<Long> from B
2021-03-12 00:48:18,054 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:48:18,055 [main:106] - GETTING Function0<Long> from HTML
2021-03-12 00:48:18,116 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:48:18,117 [main:106] - GETTING Function0<Long> from Head
2021-03-12 00:48:18,178 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:48:18,179 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:48:18,180 [main:106] - GETTING Function0<Long> from H1
2021-03-12 00:48:18,279 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:48:18,280 [main:106] - GETTING Function0<Long> from P
2021-03-12 00:48:18,281 [main:106] - GETTING Function0<Long> from HTML
2021-03-12 00:48:18,282 [main:106] - GETTING Function0<Long> from Title
2021-03-12 00:48:18,342 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:48:18,343 [main:114] - replacement of { prope0 += "1_"; prope3 } of type Function0<Long> is { -2202240868162051870}
2021-03-12 00:48:18,513 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:48:18,514 [main:66] - Compilation checking started
2021-03-12 00:48:19,143 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $prope2 or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $prope5 != $prope1"

        return "OK"
    }
}


2021-03-12 00:48:19,144 [main:107] - replacing (prope2, String)
2021-03-12 00:48:19,144 [main:50] - replacing prope2 String
2021-03-12 00:48:19,144 [main:54] - Getting value of type String
2021-03-12 00:48:19,347 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:19,353 [main:58] - GENERATED VALUE OF TYPE String = "gthqh"
2021-03-12 00:48:19,353 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:19,363 [main:67] - randomType = Long
2021-03-12 00:48:19,542 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:48:19,582 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5880cc25]
2021-03-12 00:48:19,583 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25cea1e]
2021-03-12 00:48:19,764 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:19,769 [main:78] - Generated call from random type = (-6151951944150378243).toLong().toString(-1279908832)
2021-03-12 00:48:19,770 [main:106] - GETTING String from Title
2021-03-12 00:48:19,834 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@3c3715d6]]
2021-03-12 00:48:19,835 [main:117] - GENERATED CALL = (Head().title()).name
2021-03-12 00:48:19,835 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@3c3715d6], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:48:19,835 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:48:20,030 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:48:20,035 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:48:20,041 [main:117] - GENERATED CALL = (Head().title()).name.takeWhile({a: Char -> true})
2021-03-12 00:48:20,041 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@3c3715d6], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:48:20,041 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:48:20,214 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:48:20,220 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:48:20,225 [main:117] - GENERATED CALL = (Head().title()).name.takeLastWhile({a: Char -> true})
2021-03-12 00:48:20,225 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@3c3715d6], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]]
2021-03-12 00:48:20,225 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3abb0f5e]
2021-03-12 00:48:20,397 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:20,607 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:20,613 [main:117] - GENERATED CALL = (Head().title()).name.replaceAfterLast('', testBodyHtmlNoInline(), "ohfbm")
2021-03-12 00:48:20,613 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@3c3715d6], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:48:20,613 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:48:20,613 [main:117] - GENERATED CALL = (Head().title()).name.trimIndent()
2021-03-12 00:48:20,613 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@3c3715d6], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:48:20,613 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:48:20,790 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:48:20,790 [main:117] - GENERATED CALL = (Head().title()).name.plus("mmhnq")
2021-03-12 00:48:20,790 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@3c3715d6], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:48:20,790 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:48:20,790 [main:117] - GENERATED CALL = (Head().title()).name.capitalize()
2021-03-12 00:48:20,790 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@3c3715d6], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:48:20,791 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:48:20,791 [main:117] - GENERATED CALL = (Head().title()).name.toLowerCase()
2021-03-12 00:48:20,791 [main:113] - Case = [public final val name: kotlin.String defined in Title[PropertyDescriptorImpl@3c3715d6], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:48:20,791 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:48:20,972 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:21,152 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:21,157 [main:117] - GENERATED CALL = (Head().title()).name.replaceBeforeLast('ﭻ', "ziubl", testAllInline())
2021-03-12 00:48:21,157 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Title[PropertyDescriptorImpl@1660ddf4], public open fun remove(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@4625b29b]]
2021-03-12 00:48:21,158 [main:149] - GENERATING call of type public open fun remove(key: kotlin.String): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@4625b29b]
2021-03-12 00:48:21,158 [main:117] - GENERATED CALL = (Head().title()).attributes.remove(TextElement("qwxop").text)
2021-03-12 00:48:21,158 [main:114] - replacement of prope2 of type String is (Head().title()).name
2021-03-12 00:48:21,337 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:48:21,337 [main:66] - Compilation checking started
2021-03-12 00:48:21,988 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $prope5 != $prope1"

        return "OK"
    }
}


2021-03-12 00:48:21,989 [main:107] - replacing (prope0, String)
2021-03-12 00:48:21,989 [main:50] - replacing prope0 String
2021-03-12 00:48:21,989 [main:54] - Getting value of type String
2021-03-12 00:48:22,208 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:22,213 [main:58] - GENERATED VALUE OF TYPE String = "jkccm"
2021-03-12 00:48:22,213 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:22,651 [main:67] - randomType = Collection<Double?>
2021-03-12 00:48:22,651 [main:106] - GETTING String from String
2021-03-12 00:48:22,678 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]]
2021-03-12 00:48:22,678 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@683e4f8f]
2021-03-12 00:48:22,861 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:48:22,866 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:48:22,872 [main:117] - GENERATED CALL = (testAllInline()).takeLastWhile({a: Char -> true})
2021-03-12 00:48:22,872 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]]
2021-03-12 00:48:22,872 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37196b3e]
2021-03-12 00:48:23,046 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:48:23,235 [main:43] - GENERATING CALL OF fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-12 00:48:23,241 [main:61] - WITHOUT TYPE PARAMS = fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-12 00:48:23,883 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:48:23,889 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Int> false depth = 3
2021-03-12 00:48:23,894 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:48:23,899 [main:95] - GENERATED = MutableList<Int>(975537897, {a: Int -> 1253099489})
2021-03-12 00:48:23,900 [main:117] - GENERATED CALL = (testAllInline()).slice(MutableList<Int>(975537897, {a: Int -> 1253099489}))
2021-03-12 00:48:23,900 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:48:23,900 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:48:24,083 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:48:24,091 [main:117] - GENERATED CALL = (testAllInline()).removeSuffix("tipbs")
2021-03-12 00:48:24,091 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]]
2021-03-12 00:48:24,091 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56bd703]
2021-03-12 00:48:24,259 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:48:24,264 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:48:24,269 [main:117] - GENERATED CALL = (testAllInline()).filterNot({a: Char -> true})
2021-03-12 00:48:24,270 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]]
2021-03-12 00:48:24,270 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:48:24,437 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:24,646 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:24,651 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ab9e9e9]
2021-03-12 00:48:24,829 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:48:25,014 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:48:25,021 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:48:25,418 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:48:25,424 [main:95] - GENERATED = StringBuilder("xueip")
2021-03-12 00:48:25,601 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:25,607 [main:117] - GENERATED CALL = (testAllInline()).subSequence(1293365476, -1943017782).commonSuffixWith(StringBuilder("xueip"), true)
2021-03-12 00:48:25,607 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:48:25,607 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:48:25,774 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:25,779 [main:117] - GENERATED CALL = (testAllInline()).substringAfter('Ⴘ', TextElement("qwxop").text)
2021-03-12 00:48:25,779 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:48:25,779 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:48:25,977 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:25,982 [main:117] - GENERATED CALL = (testAllInline()).length.toString(-1120230496)
2021-03-12 00:48:25,983 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]]
2021-03-12 00:48:25,983 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]
2021-03-12 00:48:26,164 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:26,170 [main:117] - GENERATED CALL = (testAllInline()).substring(1333356175)
2021-03-12 00:48:26,170 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:48:26,170 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:48:26,170 [main:117] - GENERATED CALL = (testAllInline()).trim()
2021-03-12 00:48:26,170 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]]
2021-03-12 00:48:26,171 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:48:26,346 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:26,352 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]
2021-03-12 00:48:26,352 [main:117] - GENERATED CALL = (testAllInline()).get(-1769331883).uppercase()
2021-03-12 00:48:26,352 [main:114] - replacement of prope0 of type String is testAllInline()
2021-03-12 00:48:26,531 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:48:26,531 [main:66] - Compilation checking started
2021-03-12 00:48:26,949 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { testAllInline() += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $prope5 != $prope1"

        return "OK"
    }
}


2021-03-12 00:48:26,950 [main:107] - replacing (this.toInt(), Int)
2021-03-12 00:48:26,950 [main:50] - replacing this.toInt() Int
2021-03-12 00:48:26,950 [main:54] - Getting value of type Int
2021-03-12 00:48:27,114 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:27,119 [main:58] - GENERATED VALUE OF TYPE Int = -807715562
2021-03-12 00:48:27,119 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:27,130 [main:67] - randomType = Boolean
2021-03-12 00:48:27,333 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:27,351 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]
2021-03-12 00:48:27,532 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:27,538 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1b70796e]
2021-03-12 00:48:27,724 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:27,729 [main:78] - Generated call from random type = (true).compareTo(false).shr(352172949)
2021-03-12 00:48:27,730 [main:106] - GETTING Int from Body
2021-03-12 00:48:27,819 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in Body[PropertyDescriptorImpl@7ac3cc6b], protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@3962084]]
2021-03-12 00:48:27,819 [main:117] - GENERATED CALL = (HTML().body()).children.modCount
2021-03-12 00:48:27,819 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Body[PropertyDescriptorImpl@7f9ca93b], public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@b07f2f2]]
2021-03-12 00:48:27,819 [main:117] - GENERATED CALL = (HTML().body()).attributes.size
2021-03-12 00:48:27,819 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in Body[PropertyDescriptorImpl@7ac3cc6b], public open val size: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@4575857d]]
2021-03-12 00:48:27,819 [main:117] - GENERATED CALL = (HTML().body()).children.size
2021-03-12 00:48:27,819 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]]
2021-03-12 00:48:27,819 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]
2021-03-12 00:48:28,004 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:28,009 [main:117] - GENERATED CALL = (HTML().body()).name.compareTo(testBodyNoInline(), true)
2021-03-12 00:48:28,009 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in Body[PropertyDescriptorImpl@7ac3cc6b], public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4f1c1b05]]
2021-03-12 00:48:28,010 [main:149] - GENERATING call of type public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4f1c1b05]
2021-03-12 00:48:28,181 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:48:28,186 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:48:28,578 [main:117] - GENERATED CALL = (HTML().body()).children.lastIndexOf(TODO())
2021-03-12 00:48:28,578 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in Body[PropertyDescriptorImpl@7ac3cc6b], public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@13ad8cc3]]
2021-03-12 00:48:28,578 [main:149] - GENERATING call of type public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@13ad8cc3]
2021-03-12 00:48:28,756 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:48:28,761 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:48:29,142 [main:117] - GENERATED CALL = (HTML().body()).children.indexOf(TODO())
2021-03-12 00:48:29,142 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708]]
2021-03-12 00:48:29,142 [main:117] - GENERATED CALL = (HTML().body()).name.length
2021-03-12 00:48:29,142 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]]
2021-03-12 00:48:29,142 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]
2021-03-12 00:48:29,142 [main:117] - GENERATED CALL = (HTML().body()).name.toInt()
2021-03-12 00:48:29,142 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Body[DeserializedSimpleFunctionDescriptor@686a9ac5], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]]
2021-03-12 00:48:29,142 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Body[DeserializedSimpleFunctionDescriptor@686a9ac5]
2021-03-12 00:48:29,326 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:48:29,326 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]
2021-03-12 00:48:29,496 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:29,502 [main:117] - GENERATED CALL = (HTML().body()).equals("lkziy").compareTo(false)
2021-03-12 00:48:29,502 [main:114] - replacement of this.toInt() of type Int is (HTML().body()).name.compareTo(testBodyNoInline(), true)
2021-03-12 00:48:29,666 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:48:29,667 [main:66] - Compilation checking started
2021-03-12 00:48:30,061 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${(HTML().body()).name.compareTo(testBodyNoInline(), true)}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $prope5 != $prope1"

        return "OK"
    }
}


2021-03-12 00:48:30,062 [main:107] - replacing (prope0 != "0_1_L", Boolean)
2021-03-12 00:48:30,062 [main:50] - replacing prope0 != "0_1_L" Boolean
2021-03-12 00:48:30,062 [main:54] - Getting value of type Boolean
2021-03-12 00:48:30,275 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:30,281 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:48:30,281 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:31,167 [main:67] - randomType = Function1<UByte?, Short>
2021-03-12 00:48:31,168 [main:106] - GETTING Boolean from Body
2021-03-12 00:48:31,254 [main:113] - Case = [public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@23f35a25], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in P[DeserializedSimpleFunctionDescriptor@25d09f1e]]
2021-03-12 00:48:31,254 [main:149] - GENERATING call of type public final inline fun p(init: P.() -> kotlin.Unit): P defined in Body[SimpleFunctionDescriptorImpl@23f35a25]
2021-03-12 00:48:31,441 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<P, Unit> false depth = 0
2021-03-12 00:48:31,446 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:48:31,646 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:48:31,652 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:48:32,047 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:48:32,052 [main:95] - GENERATED = require(true)
2021-03-12 00:48:32,053 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in P[DeserializedSimpleFunctionDescriptor@25d09f1e]
2021-03-12 00:48:32,245 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:48:32,245 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).p({ require(true)}).equals("gzgiy")
2021-03-12 00:48:32,245 [main:113] - Case = [public final inline fun a(href: kotlin.String, init: A.() -> kotlin.Unit): kotlin.Unit defined in Body[SimpleFunctionDescriptorImpl@4344bfa4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@93d8058]]
2021-03-12 00:48:32,245 [main:149] - GENERATING call of type public final inline fun a(href: kotlin.String, init: A.() -> kotlin.Unit): kotlin.Unit defined in Body[SimpleFunctionDescriptorImpl@4344bfa4]
2021-03-12 00:48:32,413 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<A, Unit> false depth = 0
2021-03-12 00:48:32,418 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:48:32,596 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:48:32,602 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:48:33,224 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:48:33,229 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:48:33,234 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:48:33,235 [main:95] - GENERATED = check(true, { "gpzui"})
2021-03-12 00:48:33,235 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@93d8058]
2021-03-12 00:48:33,413 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:48:33,414 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).a(A().href, { check(true, { "gpzui"})}).equals("zzfql")
2021-03-12 00:48:33,414 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in Body[PropertyDescriptorImpl@7f9ca93b], public open fun containsKey(key: kotlin.String): kotlin.Boolean defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@76f5b6cf]]
2021-03-12 00:48:33,414 [main:149] - GENERATING call of type public open fun containsKey(key: kotlin.String): kotlin.Boolean defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@76f5b6cf]
2021-03-12 00:48:33,601 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:33,606 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).attributes.containsKey("hxsrr")
2021-03-12 00:48:33,606 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in Body[PropertyDescriptorImpl@7ac3cc6b], public open fun remove(element: Element): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@1eded14b]]
2021-03-12 00:48:33,606 [main:149] - GENERATING call of type public open fun remove(element: Element): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@1eded14b]
2021-03-12 00:48:33,779 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:48:33,784 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:48:34,145 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).children.remove(TODO())
2021-03-12 00:48:34,145 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Body[DeserializedSimpleFunctionDescriptor@686a9ac5]]
2021-03-12 00:48:34,145 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Body[DeserializedSimpleFunctionDescriptor@686a9ac5]
2021-03-12 00:48:34,339 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:48:34,339 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).equals("nnynh")
2021-03-12 00:48:34,339 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6dd30df3]]
2021-03-12 00:48:34,339 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6dd30df3]
2021-03-12 00:48:34,521 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:48:34,521 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.equals("wweiu")
2021-03-12 00:48:34,521 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in Body[PropertyDescriptorImpl@7ac3cc6b], public open fun addAll(index: kotlin.Int, elements: kotlin.collections.Collection<Element>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@53a2b6ca]]
2021-03-12 00:48:34,521 [main:149] - GENERATING call of type public open fun addAll(index: kotlin.Int, elements: kotlin.collections.Collection<Element>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@53a2b6ca]
2021-03-12 00:48:34,704 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:34,894 [main:302] - generating value of type = Collection<Element> false depth = 0
2021-03-12 00:48:35,081 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): Collection<Element> = TODO()
2021-03-12 00:48:35,088 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): Collection<Element> = TODO()
2021-03-12 00:48:35,269 [main:95] - GENERATED = LinkedHashSet<Element>()
2021-03-12 00:48:35,270 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).children.addAll(335594735, LinkedHashSet<Element>())
2021-03-12 00:48:35,270 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Body[DeserializedSimpleFunctionDescriptor@686a9ac5], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24a4a086]]
2021-03-12 00:48:35,270 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Body[DeserializedSimpleFunctionDescriptor@686a9ac5]
2021-03-12 00:48:35,439 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:48:35,439 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24a4a086]
2021-03-12 00:48:35,439 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).equals("rljiq").not()
2021-03-12 00:48:35,439 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38c43ab3]]
2021-03-12 00:48:35,439 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38c43ab3]
2021-03-12 00:48:35,440 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.toBoolean()
2021-03-12 00:48:35,440 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6656148c]]
2021-03-12 00:48:35,440 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6656148c]
2021-03-12 00:48:35,440 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.matches(testBodyHtmlNoInline())
2021-03-12 00:48:35,440 [main:114] - replacement of prope0 != "0_1_L" of type Boolean is (HTML().bodyNoInline()).p({ require(true)}).equals("gzgiy")
2021-03-12 00:48:35,628 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:48:35,629 [main:66] - Compilation checking started
2021-03-12 00:48:36,097 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if ((HTML().bodyNoInline()).p({ require(true)}).equals("gzgiy") || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $prope5 != $prope1"

        return "OK"
    }
}


2021-03-12 00:48:36,098 [main:107] - replacing ({ prope0 += "0_"; prope4 }, Function0<Int>)
2021-03-12 00:48:36,098 [main:50] - replacing { prope0 += "0_"; prope4 } Function0<Int>
2021-03-12 00:48:36,098 [main:54] - Getting value of type Function0<Int>
2021-03-12 00:48:36,283 [main:302] - generating value of type = Function0<Int> false depth = 0
2021-03-12 00:48:36,288 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:48:36,293 [main:58] - GENERATED VALUE OF TYPE Function0<Int> = { 391194199}
2021-03-12 00:48:36,294 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:36,314 [main:67] - randomType = A
2021-03-12 00:48:36,482 [main:302] - generating value of type = A false depth = 0
2021-03-12 00:48:36,487 [main:112] - generating klass A text = class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}
2021-03-12 00:48:36,656 [main:194] - Type params = []
2021-03-12 00:48:36,892 [main:106] - GETTING Function0<Int> from Body
2021-03-12 00:48:36,951 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:48:36,968 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:48:36,969 [main:106] - GETTING Function0<Int> from LI
2021-03-12 00:48:37,028 [main:106] - GETTING Function0<Int> from HTML
2021-03-12 00:48:37,073 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:48:37,074 [main:106] - GETTING Function0<Int> from Title
2021-03-12 00:48:37,112 [main:106] - GETTING Function0<Int> from P
2021-03-12 00:48:37,170 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:48:37,171 [main:106] - GETTING Function0<Int> from Body
2021-03-12 00:48:37,171 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:48:37,172 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:48:37,173 [main:106] - GETTING Function0<Int> from Head
2021-03-12 00:48:37,213 [main:106] - GETTING Function0<Int> from UL
2021-03-12 00:48:37,272 [main:106] - GETTING Function0<Int> from B
2021-03-12 00:48:37,329 [main:106] - GETTING Function0<Int> from P
2021-03-12 00:48:37,330 [main:106] - GETTING Function0<Int> from HTML
2021-03-12 00:48:37,331 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:48:37,332 [main:106] - GETTING Function0<Int> from H1
2021-03-12 00:48:37,391 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:48:37,391 [main:114] - replacement of { prope0 += "0_"; prope4 } of type Function0<Int> is { 391194199}
2021-03-12 00:48:37,583 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:48:37,583 [main:66] - Compilation checking started
2021-03-12 00:48:38,274 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $prope5 != $prope1"

        return "OK"
    }
}


2021-03-12 00:48:38,275 [main:107] - replacing (toInt(), Int)
2021-03-12 00:48:38,275 [main:50] - replacing toInt() Int
2021-03-12 00:48:38,275 [main:54] - Getting value of type Int
2021-03-12 00:48:38,443 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:38,448 [main:58] - GENERATED VALUE OF TYPE Int = -1354842612
2021-03-12 00:48:38,449 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:38,927 [main:67] - randomType = Function2<UByte, TextElement, Kla0>
2021-03-12 00:48:38,928 [main:106] - GETTING Int from HTML
2021-03-12 00:48:38,987 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in HTML[PropertyDescriptorImpl@4b30db55], public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@b07f2f2]]
2021-03-12 00:48:38,987 [main:117] - GENERATED CALL = (htmlNoInline({ println()})).attributes.size
2021-03-12 00:48:38,987 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in HTML[PropertyDescriptorImpl@7b4a0d5e], public open val size: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@4575857d]]
2021-03-12 00:48:38,988 [main:117] - GENERATED CALL = (htmlNoInline({ println()})).children.size
2021-03-12 00:48:38,988 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in HTML[PropertyDescriptorImpl@7b4a0d5e], public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4f1c1b05]]
2021-03-12 00:48:38,988 [main:149] - GENERATING call of type public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4f1c1b05]
2021-03-12 00:48:39,173 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:48:39,179 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:48:39,574 [main:302] - generating value of type = Tag false depth = 2
2021-03-12 00:48:39,579 [main:112] - generating klass Tag text = abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}
2021-03-12 00:48:39,929 [main:117] - GENERATED CALL = (htmlNoInline({ println()})).children.lastIndexOf(TODO())
2021-03-12 00:48:39,929 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in HTML[DeserializedSimpleFunctionDescriptor@4808d2b3], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]]
2021-03-12 00:48:39,929 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in HTML[DeserializedSimpleFunctionDescriptor@4808d2b3]
2021-03-12 00:48:40,093 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:48:40,093 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]
2021-03-12 00:48:40,282 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:40,287 [main:117] - GENERATED CALL = (htmlNoInline({ println()})).equals("tolje").compareTo(false)
2021-03-12 00:48:40,287 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708]]
2021-03-12 00:48:40,287 [main:117] - GENERATED CALL = (htmlNoInline({ println()})).name.length
2021-03-12 00:48:40,287 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]]
2021-03-12 00:48:40,287 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]
2021-03-12 00:48:40,461 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:40,467 [main:117] - GENERATED CALL = (htmlNoInline({ println()})).name.compareTo(A().href, true)
2021-03-12 00:48:40,467 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]]
2021-03-12 00:48:40,467 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]
2021-03-12 00:48:40,467 [main:117] - GENERATED CALL = (htmlNoInline({ println()})).name.toInt()
2021-03-12 00:48:40,467 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in HTML[PropertyDescriptorImpl@7b4a0d5e], protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@3962084]]
2021-03-12 00:48:40,467 [main:117] - GENERATED CALL = (htmlNoInline({ println()})).children.modCount
2021-03-12 00:48:40,467 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in HTML[PropertyDescriptorImpl@7b4a0d5e], public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@13ad8cc3]]
2021-03-12 00:48:40,468 [main:149] - GENERATING call of type public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@13ad8cc3]
2021-03-12 00:48:40,640 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:48:40,646 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:48:41,015 [main:117] - GENERATED CALL = (htmlNoInline({ println()})).children.indexOf(TODO())
2021-03-12 00:48:41,015 [main:114] - replacement of toInt() of type Int is (htmlNoInline({ println()})).children.modCount
2021-03-12 00:48:41,179 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:48:41,179 [main:66] - Compilation checking started
2021-03-12 00:48:41,581 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.(htmlNoInline({ println()})).children.modCount}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $prope5 != $prope1"

        return "OK"
    }
}


2021-03-12 00:48:41,582 [main:107] - replacing ("0_", String)
2021-03-12 00:48:41,582 [main:50] - replacing "0_" String
2021-03-12 00:48:41,582 [main:54] - Getting value of type String
2021-03-12 00:48:41,773 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:41,779 [main:58] - GENERATED VALUE OF TYPE String = "pnonf"
2021-03-12 00:48:41,779 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:42,009 [main:67] - randomType = Array<H1>
2021-03-12 00:48:42,184 [main:302] - generating value of type = Array<H1> false depth = 0
2021-03-12 00:48:42,368 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->H1): Array<H1> = TODO()
2021-03-12 00:48:42,383 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->H1): Array<H1> = TODO()
2021-03-12 00:48:42,966 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:48:42,971 [main:302] - generating value of type = Function1<Int, H1> false depth = 3
2021-03-12 00:48:42,976 [main:302] - generating value of type = H1 false depth = 4
2021-03-12 00:48:42,982 [main:112] - generating klass H1 text = class H1() : BodyTag("h1")
2021-03-12 00:48:43,183 [main:194] - Type params = []
2021-03-12 00:48:43,357 [main:95] - GENERATED = Array<H1>(1818707043, {a: Int -> H1()})
2021-03-12 00:48:43,370 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60ed5158]
2021-03-12 00:48:43,370 [main:78] - Generated call from random type = (Array<H1>(1818707043, {a: Int -> H1()})).contentToString()
2021-03-12 00:48:43,371 [main:106] - GETTING String from Body
2021-03-12 00:48:43,444 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]]
2021-03-12 00:48:43,444 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b04fb17]
2021-03-12 00:48:43,617 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:43,805 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:43,810 [main:117] - GENERATED CALL = (HTML().body()).name.removeRange(274475882, -1728492773)
2021-03-12 00:48:43,811 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@2270da37], public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6]]
2021-03-12 00:48:43,811 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@2270da37]
2021-03-12 00:48:43,978 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:48:43,983 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:48:44,156 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:48:44,162 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:48:44,565 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:48:44,565 [main:95] - GENERATED = println("bxbnk")
2021-03-12 00:48:44,565 [main:117] - GENERATED CALL = (HTML().body()).b({ println("bxbnk")}).name
2021-03-12 00:48:44,565 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]]
2021-03-12 00:48:44,565 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e326ec0]
2021-03-12 00:48:44,739 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:44,745 [main:117] - GENERATED CALL = (HTML().body()).name.substringBeforeLast('湊', testAllInline())
2021-03-12 00:48:44,745 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]]
2021-03-12 00:48:44,745 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fbda7d6]
2021-03-12 00:48:44,745 [main:117] - GENERATED CALL = (HTML().body()).name.concat(TODO().toString())
2021-03-12 00:48:44,745 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:48:44,745 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:48:44,919 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:48:45,104 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:48:45,111 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:48:45,495 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:48:45,500 [main:95] - GENERATED = StringBuilder(-879723355)
2021-03-12 00:48:45,500 [main:117] - GENERATED CALL = (HTML().body()).name.removeSuffix(StringBuilder(-879723355))
2021-03-12 00:48:45,501 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]]
2021-03-12 00:48:45,501 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee76fc0]
2021-03-12 00:48:45,667 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:48:45,672 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:48:45,677 [main:117] - GENERATED CALL = (HTML().body()).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 00:48:45,678 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]]
2021-03-12 00:48:45,678 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4370e18e]
2021-03-12 00:48:45,869 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:48:45,875 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:48:45,882 [main:117] - GENERATED CALL = (HTML().body()).name.dropLastWhile({a: Char -> true})
2021-03-12 00:48:45,882 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]]
2021-03-12 00:48:45,882 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c71029]
2021-03-12 00:48:45,882 [main:117] - GENERATED CALL = (HTML().body()).name.toLowerCase()
2021-03-12 00:48:45,882 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:48:45,883 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:48:46,056 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:48:46,057 [main:117] - GENERATED CALL = (HTML().body()).name.plus("lmqsr")
2021-03-12 00:48:46,057 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:48:46,057 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:48:46,233 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:46,238 [main:117] - GENERATED CALL = (HTML().body()).name.takeLast(955737519)
2021-03-12 00:48:46,238 [main:114] - replacement of "0_" of type String is (HTML().body()).name.dropLastWhile({a: Char -> true})
2021-03-12 00:48:46,413 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:48:46,413 [main:66] - Compilation checking started
2021-03-12 00:48:46,839 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += (HTML().body()).name.dropLastWhile({a: Char -> true}); prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $prope5 != $prope1"

        return "OK"
    }
}


2021-03-12 00:48:46,840 [main:107] - replacing (prope5, String)
2021-03-12 00:48:46,841 [main:50] - replacing prope5 String
2021-03-12 00:48:46,841 [main:54] - Getting value of type String
2021-03-12 00:48:47,004 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:47,009 [main:58] - GENERATED VALUE OF TYPE String = "zjsyl"
2021-03-12 00:48:47,009 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:47,030 [main:67] - randomType = P
2021-03-12 00:48:47,222 [main:302] - generating value of type = P false depth = 0
2021-03-12 00:48:47,228 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:48:47,405 [main:194] - Type params = []
2021-03-12 00:48:47,674 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:48:47,856 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:47,862 [main:78] - Generated call from random type = (P()).name.substringAfter('ￜ', A().href)
2021-03-12 00:48:47,862 [main:106] - GETTING String from HTML
2021-03-12 00:48:47,919 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]]
2021-03-12 00:48:47,919 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@581bd124]
2021-03-12 00:48:47,919 [main:117] - GENERATED CALL = (html({ check(true)})).name.reversed()
2021-03-12 00:48:47,919 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]]
2021-03-12 00:48:47,919 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24ab7521]
2021-03-12 00:48:48,088 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:48:48,093 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:48:48,099 [main:117] - GENERATED CALL = (html({ check(true)})).name.dropWhile({a: Char -> false})
2021-03-12 00:48:48,099 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]]
2021-03-12 00:48:48,099 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59a5c56e]
2021-03-12 00:48:48,275 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:48,478 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:48,484 [main:117] - GENERATED CALL = (html({ check(true)})).name.padStart(-385880069, '㪣')
2021-03-12 00:48:48,484 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:48:48,484 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:48:48,655 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:48,660 [main:117] - GENERATED CALL = (html({ check(true)})).name.takeLast(-1705025436)
2021-03-12 00:48:48,661 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c366a13]]
2021-03-12 00:48:48,661 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c366a13]
2021-03-12 00:48:48,661 [main:117] - GENERATED CALL = (html({ check(true)})).name.replaceIndentByMargin(var expected = testAllInline()
2021-03-12 00:48:48,661 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]]
2021-03-12 00:48:48,661 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebdfaf0]
2021-03-12 00:48:48,835 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:49,013 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:49,197 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:49,202 [main:117] - GENERATED CALL = (html({ check(true)})).name.replace('鴺', '', false)
2021-03-12 00:48:49,202 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:48:49,202 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:48:49,365 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:49,532 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:49,727 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:49,732 [main:117] - GENERATED CALL = (html({ check(true)})).name.replaceFirst('棜', 'ꔍ', false)
2021-03-12 00:48:49,733 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]]
2021-03-12 00:48:49,733 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280a86dd]
2021-03-12 00:48:49,908 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:48:49,914 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:48:49,919 [main:117] - GENERATED CALL = (html({ check(true)})).name.filter({a: Char -> true})
2021-03-12 00:48:49,919 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]]
2021-03-12 00:48:49,919 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bea516]
2021-03-12 00:48:50,093 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:48:50,098 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:48:50,104 [main:117] - GENERATED CALL = (html({ check(true)})).name.takeWhile({a: Char -> true})
2021-03-12 00:48:50,104 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]]
2021-03-12 00:48:50,104 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a76d533]
2021-03-12 00:48:50,276 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:50,458 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:50,463 [main:117] - GENERATED CALL = (html({ check(true)})).name.replaceAfter('腙', "ttqin", A().href)
2021-03-12 00:48:50,463 [main:114] - replacement of prope5 of type String is (html({ check(true)})).name.takeLast(-1705025436)
2021-03-12 00:48:50,628 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:48:50,628 [main:66] - Compilation checking started
2021-03-12 00:48:51,257 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:48:51,258 [main:107] - replacing (prope0, String)
2021-03-12 00:48:51,259 [main:50] - replacing prope0 String
2021-03-12 00:48:51,259 [main:54] - Getting value of type String
2021-03-12 00:48:51,468 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:51,473 [main:58] - GENERATED VALUE OF TYPE String = "nsyno"
2021-03-12 00:48:51,473 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:51,676 [main:67] - randomType = UInt
2021-03-12 00:48:51,851 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:48:51,891 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@8a61bc7]
2021-03-12 00:48:51,891 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58a132bb]
2021-03-12 00:48:52,078 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:52,084 [main:78] - Generated call from random type = (1528721349.toUInt()).toUShort().toString(-1599130405)
2021-03-12 00:48:52,084 [main:114] - replacement of prope0 of type String is (1528721349.toUInt()).toUShort().toString(-1599130405)
2021-03-12 00:48:52,247 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:48:52,247 [main:66] - Compilation checking started
2021-03-12 00:48:52,666 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { (1528721349.toUInt()).toUShort().toString(-1599130405) += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:48:52,668 [main:107] - replacing (prope5, String)
2021-03-12 00:48:52,668 [main:50] - replacing prope5 String
2021-03-12 00:48:52,668 [main:54] - Getting value of type String
2021-03-12 00:48:52,863 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:52,868 [main:58] - GENERATED VALUE OF TYPE String = "dqrun"
2021-03-12 00:48:52,868 [main:61] - GENERATED IS CALL =false
2021-03-12 00:48:52,890 [main:67] - randomType = TextElement
2021-03-12 00:48:53,070 [main:302] - generating value of type = TextElement false depth = 0
2021-03-12 00:48:53,076 [main:112] - generating klass TextElement text = class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}
2021-03-12 00:48:53,253 [main:194] - Type params = []
2021-03-12 00:48:53,432 [main:302] - generating value of type = String true depth = 2
2021-03-12 00:48:53,452 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:48:53,632 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:53,810 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:53,985 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:53,990 [main:78] - Generated call from random type = (TextElement("ycdcj")).text.replaceFirst('明', '遌', true)
2021-03-12 00:48:53,990 [main:106] - GETTING String from String
2021-03-12 00:48:54,007 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:48:54,007 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:48:54,220 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:48:54,226 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:48:54,409 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:54,414 [main:117] - GENERATED CALL = (expected).compareTo("rajmg").toString(-1210094715)
2021-03-12 00:48:54,414 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]]
2021-03-12 00:48:54,415 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5025bd5b]
2021-03-12 00:48:54,592 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:54,598 [main:117] - GENERATED CALL = (expected).replaceBeforeLast('', TODO().toString(), testBodyNoInline())
2021-03-12 00:48:54,598 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]]
2021-03-12 00:48:54,598 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c56cb6d]
2021-03-12 00:48:54,779 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:48:54,780 [main:117] - GENERATED CALL = (expected).plus("roynt")
2021-03-12 00:48:54,780 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22578dad]]
2021-03-12 00:48:54,780 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:48:54,959 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:55,136 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:55,142 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22578dad]
2021-03-12 00:48:55,313 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:48:55,520 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:48:55,527 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:48:56,179 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:48:56,184 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 00:48:56,362 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Set<RegexOption> = TODO()
2021-03-12 00:48:56,369 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Set<RegexOption> = TODO()
2021-03-12 00:48:56,552 [main:95] - GENERATED = hashSetOf<RegexOption>()
2021-03-12 00:48:56,552 [main:95] - GENERATED = Regex("fwxtl", hashSetOf<RegexOption>())
2021-03-12 00:48:56,715 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 00:48:56,720 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:48:56,729 [main:117] - GENERATED CALL = (expected).subSequence(1047611548, 1040829417).replace(Regex("fwxtl", hashSetOf<RegexOption>()), {a: MatchResult -> "ssygh"})
2021-03-12 00:48:56,729 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]]
2021-03-12 00:48:56,729 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:48:56,920 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:56,926 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a47c1a0]
2021-03-12 00:48:56,926 [main:117] - GENERATED CALL = (expected).get(996046420).uppercase()
2021-03-12 00:48:56,926 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]]
2021-03-12 00:48:56,926 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35ff73fc]
2021-03-12 00:48:56,926 [main:117] - GENERATED CALL = (expected).trimIndent()
2021-03-12 00:48:56,926 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]]
2021-03-12 00:48:56,926 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:48:57,103 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:57,286 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:57,292 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30535c7e]
2021-03-12 00:48:57,477 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:57,482 [main:117] - GENERATED CALL = (expected).subSequence(-1434015862, -1532857594).repeat(510567644)
2021-03-12 00:48:57,482 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:48:57,482 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:48:57,663 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:57,841 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:48:58,020 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:48:58,026 [main:117] - GENERATED CALL = (expected).replaceFirst('盧', '', false)
2021-03-12 00:48:58,026 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]]
2021-03-12 00:48:58,026 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:48:58,221 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:58,406 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:48:58,412 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@327e00bb]
2021-03-12 00:48:58,587 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:48:58,769 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:48:58,776 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:48:59,378 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:48:59,384 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 00:48:59,589 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-12 00:48:59,596 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-12 00:48:59,995 [main:302] - generating value of type = Int true depth = 6
2021-03-12 00:49:00,001 [main:95] - GENERATED = HashSet<RegexOption>(-1541650401)
2021-03-12 00:49:00,001 [main:95] - GENERATED = Regex("ehtds", HashSet<RegexOption>(-1541650401))
2021-03-12 00:49:00,182 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:49:00,188 [main:117] - GENERATED CALL = (expected).subSequence(-781303393, -1435875478).replaceFirst(Regex("ehtds", HashSet<RegexOption>(-1541650401)), "emhen")
2021-03-12 00:49:00,188 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:49:00,188 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:49:00,188 [main:117] - GENERATED CALL = (expected).decapitalize()
2021-03-12 00:49:00,188 [main:114] - replacement of prope5 of type String is (expected).subSequence(-1434015862, -1532857594).repeat(510567644)
2021-03-12 00:49:00,365 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:49:00,365 [main:66] - Compilation checking started
2021-03-12 00:49:00,784 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        (expected).subSequence(-1434015862, -1532857594).repeat(510567644) = 1.0.fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:49:00,785 [main:107] - replacing ({ prope0 += "0_"; prope4 }(), Int)
2021-03-12 00:49:00,786 [main:50] - replacing { prope0 += "0_"; prope4 }() Int
2021-03-12 00:49:00,786 [main:54] - Getting value of type Int
2021-03-12 00:49:00,975 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:00,980 [main:58] - GENERATED VALUE OF TYPE Int = -2112238043
2021-03-12 00:49:00,980 [main:61] - GENERATED IS CALL =false
2021-03-12 00:49:01,002 [main:67] - randomType = TagWithText
2021-03-12 00:49:01,181 [main:302] - generating value of type = TagWithText false depth = 0
2021-03-12 00:49:01,187 [main:112] - generating klass TagWithText text = abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}
2021-03-12 00:49:01,614 [main:78] - Generated call from random type = (TODO()).children.size
2021-03-12 00:49:01,615 [main:114] - replacement of { prope0 += "0_"; prope4 }() of type Int is (TODO()).children.size
2021-03-12 00:49:01,781 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:49:01,781 [main:66] - Compilation checking started
2021-03-12 00:49:02,198 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = (TODO()).children.size)
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:49:02,199 [main:107] - replacing (prope0 != prope2 || prope5 != prope1, Boolean)
2021-03-12 00:49:02,200 [main:50] - replacing prope0 != prope2 || prope5 != prope1 Boolean
2021-03-12 00:49:02,200 [main:54] - Getting value of type Boolean
2021-03-12 00:49:02,390 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:49:02,395 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:49:02,396 [main:61] - GENERATED IS CALL =false
2021-03-12 00:49:02,406 [main:67] - randomType = Int
2021-03-12 00:49:02,583 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:02,625 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2348370d]
2021-03-12 00:49:02,625 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4b04eb]
2021-03-12 00:49:02,800 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:49:02,801 [main:78] - Generated call from random type = (-1015441560).toDouble().equals("gpbgu")
2021-03-12 00:49:02,802 [main:106] - GETTING Boolean from B
2021-03-12 00:49:02,870 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in B[PropertyDescriptorImpl@1acc44ee], public open fun containsKey(key: kotlin.String): kotlin.Boolean defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@76f5b6cf]]
2021-03-12 00:49:02,871 [main:149] - GENERATING call of type public open fun containsKey(key: kotlin.String): kotlin.Boolean defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@76f5b6cf]
2021-03-12 00:49:02,871 [main:117] - GENERATED CALL = (Body().b()).attributes.containsKey(expected)
2021-03-12 00:49:02,871 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@70fac793], public open fun isEmpty(): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@48617325]]
2021-03-12 00:49:02,871 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@48617325]
2021-03-12 00:49:02,871 [main:117] - GENERATED CALL = (Body().b()).children.isEmpty()
2021-03-12 00:49:02,871 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@4e3e1f0f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@747ef7e]]
2021-03-12 00:49:02,871 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@4e3e1f0f]
2021-03-12 00:49:03,053 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:49:03,053 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@747ef7e]
2021-03-12 00:49:03,225 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:49:03,225 [main:117] - GENERATED CALL = (Body().b()).equals("pfeze").equals("rippt")
2021-03-12 00:49:03,225 [main:113] - Case = [public final operator fun kotlin.String.unaryPlus(): kotlin.Unit defined in TagWithText[SimpleFunctionDescriptorImpl@5f263557], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@93d8058]]
2021-03-12 00:49:03,225 [main:149] - GENERATING call of type public final operator fun kotlin.String.unaryPlus(): kotlin.Unit defined in TagWithText[SimpleFunctionDescriptorImpl@5f263557]
2021-03-12 00:49:03,225 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@93d8058]
2021-03-12 00:49:03,394 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:49:03,394 [main:117] - GENERATED CALL = (Body().b()).unaryPlus().equals("qwxpt")
2021-03-12 00:49:03,394 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in B[PropertyDescriptorImpl@1acc44ee], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@3904c6b8]]
2021-03-12 00:49:03,394 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@3904c6b8]
2021-03-12 00:49:03,560 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:49:03,560 [main:117] - GENERATED CALL = (Body().b()).attributes.equals("mipth")
2021-03-12 00:49:03,560 [main:113] - Case = [@kotlin.internal.LowPriorityInOverloadResolution @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun org.w3c.dom.Element.hasClass(cssClass: kotlin.String): kotlin.Boolean defined in kotlin.dom[DeserializedSimpleFunctionDescriptor@6ee6157c]]
2021-03-12 00:49:03,560 [main:149] - GENERATING call of type @kotlin.internal.LowPriorityInOverloadResolution @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun org.w3c.dom.Element.hasClass(cssClass: kotlin.String): kotlin.Boolean defined in kotlin.dom[DeserializedSimpleFunctionDescriptor@6ee6157c]
2021-03-12 00:49:03,560 [main:117] - GENERATED CALL = (Body().b()).hasClass(var expected = testAllInline()
2021-03-12 00:49:03,561 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@70fac793], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@627df628]]
2021-03-12 00:49:03,561 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@627df628]
2021-03-12 00:49:03,751 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:49:03,752 [main:117] - GENERATED CALL = (Body().b()).children.equals("pxdia")
2021-03-12 00:49:03,752 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in B[SimpleFunctionDescriptorImpl@6491d9a3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in UL[DeserializedSimpleFunctionDescriptor@394b529b]]
2021-03-12 00:49:03,752 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in B[SimpleFunctionDescriptorImpl@6491d9a3]
2021-03-12 00:49:03,926 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:49:03,931 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:49:04,116 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:49:04,122 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:49:04,709 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:49:04,715 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:49:04,720 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:49:04,720 [main:95] - GENERATED = require(false, { "wvrpi"})
2021-03-12 00:49:04,720 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in UL[DeserializedSimpleFunctionDescriptor@394b529b]
2021-03-12 00:49:04,888 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:49:04,888 [main:117] - GENERATED CALL = (Body().b()).ul({ require(false, { "wvrpi"})}).equals("hepcs")
2021-03-12 00:49:04,888 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in B[PropertyDescriptorImpl@1acc44ee], public open fun containsValue(value: kotlin.String): kotlin.Boolean defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@58d8bce4]]
2021-03-12 00:49:04,888 [main:149] - GENERATING call of type public open fun containsValue(value: kotlin.String): kotlin.Boolean defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@58d8bce4]
2021-03-12 00:49:04,888 [main:117] - GENERATED CALL = (Body().b()).attributes.containsValue(testBodyHtmlNoInline())
2021-03-12 00:49:04,888 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dba9c55]]
2021-03-12 00:49:04,888 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dba9c55]
2021-03-12 00:49:05,081 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:49:05,087 [main:117] - GENERATED CALL = (Body().b()).name.startsWith(expected, false)
2021-03-12 00:49:05,087 [main:114] - replacement of prope0 != prope2 || prope5 != prope1 of type Boolean is (Body().b()).attributes.equals("mipth")
2021-03-12 00:49:05,262 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:49:05,262 [main:66] - Compilation checking started
2021-03-12 00:49:05,776 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if ((Body().b()).attributes.equals("mipth")) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:49:05,777 [main:107] - replacing (1.0, Double)
2021-03-12 00:49:05,778 [main:50] - replacing 1.0 Double
2021-03-12 00:49:05,778 [main:54] - Getting value of type Double
2021-03-12 00:49:05,963 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:49:05,969 [main:58] - GENERATED VALUE OF TYPE Double = 0.03051724056737959
2021-03-12 00:49:05,969 [main:61] - GENERATED IS CALL =false
2021-03-12 00:49:05,990 [main:67] - randomType = UL
2021-03-12 00:49:06,158 [main:302] - generating value of type = UL false depth = 0
2021-03-12 00:49:06,163 [main:112] - generating klass UL text = class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}
2021-03-12 00:49:06,327 [main:194] - Type params = []
2021-03-12 00:49:06,602 [main:149] - GENERATING call of type public fun kotlin.String.toDouble(): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3efac979]
2021-03-12 00:49:06,602 [main:78] - Generated call from random type = (UL()).name.toDouble()
2021-03-12 00:49:06,603 [main:106] - GETTING Double from P
2021-03-12 00:49:06,672 [main:113] - Case = [public final val name: kotlin.String defined in P[PropertyDescriptorImpl@633642b9], public fun kotlin.String.toDouble(): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3efac979]]
2021-03-12 00:49:06,672 [main:149] - GENERATING call of type public fun kotlin.String.toDouble(): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3efac979]
2021-03-12 00:49:06,672 [main:117] - GENERATED CALL = (Body().p()).name.toDouble()
2021-03-12 00:49:06,672 [main:114] - replacement of 1.0 of type Double is (UL()).name.toDouble()
2021-03-12 00:49:06,847 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:49:06,847 [main:66] - Compilation checking started
2021-03-12 00:49:07,560 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = (UL()).name.toDouble().fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:49:07,562 [main:107] - replacing (prope0, String)
2021-03-12 00:49:07,563 [main:50] - replacing prope0 String
2021-03-12 00:49:07,563 [main:54] - Getting value of type String
2021-03-12 00:49:07,744 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:49:07,749 [main:58] - GENERATED VALUE OF TYPE String = "lukzd"
2021-03-12 00:49:07,749 [main:61] - GENERATED IS CALL =false
2021-03-12 00:49:08,234 [main:67] - randomType = HashMap<HTML?, Int>
2021-03-12 00:49:08,413 [main:302] - generating value of type = HashMap<HTML?, Int> false depth = 0
2021-03-12 00:49:08,608 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<HTML?, Int> = TODO()
2021-03-12 00:49:08,614 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<HTML?, Int> = TODO()
2021-03-12 00:49:08,790 [main:95] - GENERATED = hashMapOf<HTML?, Int>()
2021-03-12 00:49:08,922 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:49:09,096 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:09,102 [main:78] - Generated call from random type = (hashMapOf<HTML?, Int>()).size.toString(-804576678)
2021-03-12 00:49:09,102 [main:106] - GETTING String from Body
2021-03-12 00:49:09,165 [main:113] - Case = [public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@5e5a2836], public final val name: kotlin.String defined in H1[PropertyDescriptorImpl@523aef0f]]
2021-03-12 00:49:09,165 [main:149] - GENERATING call of type public final inline fun h1(init: H1.() -> kotlin.Unit): H1 defined in Body[SimpleFunctionDescriptorImpl@5e5a2836]
2021-03-12 00:49:09,362 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<H1, Unit> false depth = 0
2021-03-12 00:49:09,367 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:49:09,557 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:49:09,564 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:49:09,961 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:49:09,975 [main:95] - GENERATED = check(true)
2021-03-12 00:49:09,976 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).h1({ check(true)}).name
2021-03-12 00:49:09,976 [main:113] - Case = [public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@2270da37], public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6]]
2021-03-12 00:49:09,976 [main:149] - GENERATING call of type public final inline fun b(init: B.() -> kotlin.Unit): B defined in Body[SimpleFunctionDescriptorImpl@2270da37]
2021-03-12 00:49:10,151 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<B, Unit> false depth = 0
2021-03-12 00:49:10,156 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:49:10,337 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:49:10,344 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:49:10,746 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:49:10,752 [main:95] - GENERATED = require(false)
2021-03-12 00:49:10,753 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).b({ require(false)}).name
2021-03-12 00:49:10,753 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]]
2021-03-12 00:49:10,753 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10305e8a]
2021-03-12 00:49:10,753 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.trimStart()
2021-03-12 00:49:10,753 [main:113] - Case = [public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@7adfe0a8], public final val name: kotlin.String defined in UL[PropertyDescriptorImpl@25660650]]
2021-03-12 00:49:10,753 [main:149] - GENERATING call of type public final inline fun ul(init: UL.() -> kotlin.Unit): UL defined in Body[SimpleFunctionDescriptorImpl@7adfe0a8]
2021-03-12 00:49:10,934 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<UL, Unit> false depth = 0
2021-03-12 00:49:10,939 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:49:11,128 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:49:11,135 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:49:11,534 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:49:11,540 [main:95] - GENERATED = check(false)
2021-03-12 00:49:11,540 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).ul({ check(false)}).name
2021-03-12 00:49:11,540 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]]
2021-03-12 00:49:11,540 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2266735f]
2021-03-12 00:49:11,711 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:11,888 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:12,105 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:49:12,293 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:49:12,300 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:49:12,691 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:49:12,879 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:49:12,886 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:49:13,265 [main:302] - generating value of type = Int true depth = 6
2021-03-12 00:49:13,271 [main:95] - GENERATED = StringBuilder(-1350995764)
2021-03-12 00:49:13,271 [main:95] - GENERATED = StringBuilder(StringBuilder(-1350995764))
2021-03-12 00:49:13,271 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.replaceRange(-735196741, -337416341, StringBuilder(StringBuilder(-1350995764)))
2021-03-12 00:49:13,271 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]]
2021-03-12 00:49:13,271 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e18600]
2021-03-12 00:49:13,271 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.prependIndent(testBodyNoInline())
2021-03-12 00:49:13,271 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]]
2021-03-12 00:49:13,271 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56c69ff4]
2021-03-12 00:49:13,467 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:13,472 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.takeLast(-17667224)
2021-03-12 00:49:13,473 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]]
2021-03-12 00:49:13,473 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]
2021-03-12 00:49:13,655 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:13,661 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.drop(-150101516)
2021-03-12 00:49:13,661 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]]
2021-03-12 00:49:13,661 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@158c133c]
2021-03-12 00:49:13,839 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:14,024 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:49:14,029 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.padEnd(-2083759493, '—')
2021-03-12 00:49:14,030 [main:113] - Case = [public final val name: kotlin.String defined in Body[PropertyDescriptorImpl@2d1aa340], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]]
2021-03-12 00:49:14,030 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58f2fce7]
2021-03-12 00:49:14,030 [main:117] - GENERATED CALL = (HTML().bodyNoInline()).name.trim()
2021-03-12 00:49:14,030 [main:114] - replacement of prope0 of type String is (HTML().bodyNoInline()).h1({ check(true)}).name
2021-03-12 00:49:14,213 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:49:14,214 [main:66] - Compilation checking started
2021-03-12 00:49:14,623 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 1.0.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if ((HTML().bodyNoInline()).h1({ check(true)}).name != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = (UL()).name.toDouble().fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:49:14,624 [main:107] - replacing (1.0, Double)
2021-03-12 00:49:14,625 [main:50] - replacing 1.0 Double
2021-03-12 00:49:14,625 [main:54] - Getting value of type Double
2021-03-12 00:49:14,820 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:49:14,825 [main:58] - GENERATED VALUE OF TYPE Double = 0.29971528638387435
2021-03-12 00:49:14,826 [main:61] - GENERATED IS CALL =false
2021-03-12 00:49:15,975 [main:67] - randomType = Function2<Pair<UByte, Tag?>?, Title, BodyTag>
2021-03-12 00:49:15,976 [main:106] - GETTING Double from HTML
2021-03-12 00:49:16,016 [main:113] - Case = [public final val name: kotlin.String defined in HTML[PropertyDescriptorImpl@3ddff2f4], public fun kotlin.String.toDouble(): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3efac979]]
2021-03-12 00:49:16,016 [main:149] - GENERATING call of type public fun kotlin.String.toDouble(): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3efac979]
2021-03-12 00:49:16,016 [main:117] - GENERATED CALL = (html({ check(true)})).name.toDouble()
2021-03-12 00:49:16,016 [main:114] - replacement of 1.0 of type Double is 0.29971528638387435
2021-03-12 00:49:16,214 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-12 00:49:16,215 [main:66] - Compilation checking started
2021-03-12 00:49:16,963 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 0.29971528638387435.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = (UL()).name.toDouble().fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:49:16,965 [main:107] - replacing (prope0 != "0_1_L", Boolean)
2021-03-12 00:49:16,966 [main:50] - replacing prope0 != "0_1_L" Boolean
2021-03-12 00:49:16,966 [main:54] - Getting value of type Boolean
2021-03-12 00:49:17,156 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:49:17,162 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:49:17,162 [main:61] - GENERATED IS CALL =false
2021-03-12 00:49:17,377 [main:67] - randomType = Kla0?
2021-03-12 00:49:17,572 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 00:49:17,578 [main:112] - generating klass Kla0 text = class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 0.29971528638387435.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = (UL()).name.toDouble().fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if (prope0 != "0_1_L" || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}
2021-03-12 00:49:17,583 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@4a3ee13e]
2021-03-12 00:49:17,785 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:49:17,785 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7c5255b]
2021-03-12 00:49:17,969 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:49:17,975 [main:78] - Generated call from random type = (Kla0())?.equals("bxrak").xor(true)
2021-03-12 00:49:17,976 [main:106] - GETTING Boolean from String
2021-03-12 00:49:18,000 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9e4ab2]]
2021-03-12 00:49:18,000 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:49:18,180 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:18,367 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:18,373 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9e4ab2]
2021-03-12 00:49:18,373 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).subSequence(-524842496, -1315182658).isNotBlank()
2021-03-12 00:49:18,373 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60ee58d8]]
2021-03-12 00:49:18,373 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:49:18,542 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:18,547 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60ee58d8]
2021-03-12 00:49:18,548 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).get(548548606).isDefined()
2021-03-12 00:49:18,548 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@674e8a16]]
2021-03-12 00:49:18,548 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:49:18,715 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:18,721 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@674e8a16]
2021-03-12 00:49:18,721 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).get(880949528).isDigit()
2021-03-12 00:49:18,721 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc48814]]
2021-03-12 00:49:18,721 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:49:18,911 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:18,916 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc48814]
2021-03-12 00:49:18,916 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).get(-1208888528).isISOControl()
2021-03-12 00:49:18,916 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11251152]]
2021-03-12 00:49:18,916 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:49:19,096 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:19,278 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:19,284 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11251152]
2021-03-12 00:49:19,284 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).subSequence(1198197280, -1644825515).none()
2021-03-12 00:49:19,284 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dba9c55]]
2021-03-12 00:49:19,284 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dba9c55]
2021-03-12 00:49:19,460 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:49:19,465 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).startsWith(expected, false)
2021-03-12 00:49:19,465 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6dd30df3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@747ef7e]]
2021-03-12 00:49:19,465 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6dd30df3]
2021-03-12 00:49:19,653 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:49:19,654 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@747ef7e]
2021-03-12 00:49:19,822 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:49:19,822 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).equals("aubdn").equals("xaplx")
2021-03-12 00:49:19,822 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11251152]]
2021-03-12 00:49:19,822 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11251152]
2021-03-12 00:49:19,822 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).none()
2021-03-12 00:49:19,822 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6dd30df3], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b1003af]]
2021-03-12 00:49:19,823 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6dd30df3]
2021-03-12 00:49:19,990 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:49:19,991 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b1003af]
2021-03-12 00:49:20,184 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:49:20,190 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).equals("yimgu").and(true)
2021-03-12 00:49:20,190 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@672b7736]]
2021-03-12 00:49:20,190 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:49:20,368 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:20,549 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:20,555 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@672b7736]
2021-03-12 00:49:20,732 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:49:20,930 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:49:20,936 [main:117] - GENERATED CALL = (testBodyHtmlNoInline()).subSequence(1155728312, 1640081463).endsWith('置', true)
2021-03-12 00:49:20,936 [main:114] - replacement of prope0 != "0_1_L" of type Boolean is (testBodyHtmlNoInline()).equals("yimgu").and(true)
2021-03-12 00:49:21,106 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:49:21,107 [main:66] - Compilation checking started
2021-03-12 00:49:21,729 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 0.29971528638387435.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = (UL()).name.toDouble().fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if ((testBodyHtmlNoInline()).equals("yimgu").and(true) || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:49:21,730 [main:107] - replacing (fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }()), String)
2021-03-12 00:49:21,731 [main:50] - replacing fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }()) String
2021-03-12 00:49:21,731 [main:54] - Getting value of type String
2021-03-12 00:49:21,954 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:49:21,959 [main:58] - GENERATED VALUE OF TYPE String = "xjhoh"
2021-03-12 00:49:21,959 [main:61] - GENERATED IS CALL =false
2021-03-12 00:49:22,376 [main:67] - randomType = Byte?
2021-03-12 00:49:22,552 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:49:22,610 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@75bd768b]
2021-03-12 00:49:22,610 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19ca6280]
2021-03-12 00:49:22,777 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:22,783 [main:78] - Generated call from random type = (-21)?.toShort().toString(-393653696)
2021-03-12 00:49:22,783 [main:106] - GETTING String from String
2021-03-12 00:49:22,806 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]]
2021-03-12 00:49:22,806 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e962599]
2021-03-12 00:49:22,975 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:22,981 [main:117] - GENERATED CALL = (A().href).substring(872160905)
2021-03-12 00:49:22,981 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]]
2021-03-12 00:49:22,981 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72eeb169]
2021-03-12 00:49:23,147 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:49:23,343 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:49:23,527 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:49:23,533 [main:117] - GENERATED CALL = (A().href).replaceFirst('뀘', '෈', true)
2021-03-12 00:49:23,533 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]]
2021-03-12 00:49:23,533 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f87fcd8]
2021-03-12 00:49:23,709 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:23,715 [main:117] - GENERATED CALL = (A().href).drop(-297089315)
2021-03-12 00:49:23,715 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]]
2021-03-12 00:49:23,715 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@572e19fa]
2021-03-12 00:49:23,894 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:49:24,090 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:49:24,097 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:49:24,464 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:49:24,469 [main:95] - GENERATED = StringBuilder("pzbyo")
2021-03-12 00:49:24,469 [main:117] - GENERATED CALL = (A().href).removeSuffix(StringBuilder("pzbyo"))
2021-03-12 00:49:24,470 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]]
2021-03-12 00:49:24,470 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e35c086]
2021-03-12 00:49:24,661 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:24,667 [main:117] - GENERATED CALL = (A().href).length.toString(1996876834)
2021-03-12 00:49:24,667 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]]
2021-03-12 00:49:24,667 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e2277b0]
2021-03-12 00:49:24,844 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:49:24,850 [main:117] - GENERATED CALL = (A().href).substringAfter('㴩', testAllInline())
2021-03-12 00:49:24,850 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]]
2021-03-12 00:49:24,850 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72ff598a]
2021-03-12 00:49:25,026 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:49:25,031 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:49:25,037 [main:117] - GENERATED CALL = (A().href).replaceFirstChar({a: Char -> 'ꅘ'})
2021-03-12 00:49:25,037 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]]
2021-03-12 00:49:25,037 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@660c70da]
2021-03-12 00:49:25,219 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:49:25,415 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:49:25,420 [main:117] - GENERATED CALL = (A().href).substringAfterLast('杪', "gexhy")
2021-03-12 00:49:25,420 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]]
2021-03-12 00:49:25,420 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e3fe104]
2021-03-12 00:49:25,420 [main:117] - GENERATED CALL = (A().href).decapitalize()
2021-03-12 00:49:25,420 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]]
2021-03-12 00:49:25,421 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb89146]
2021-03-12 00:49:25,421 [main:117] - GENERATED CALL = (A().href).capitalize()
2021-03-12 00:49:25,421 [main:114] - replacement of fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }()) of type String is (A().href).substringAfter('㴩', testAllInline())
2021-03-12 00:49:25,589 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:49:25,590 [main:66] - Compilation checking started
2021-03-12 00:49:26,031 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 0.29971528638387435.fu0(b = { -2202240868162051870}(), a = { prope0 += "0_"; prope4 }(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = (UL()).name.toDouble().(A().href).substringAfter('㴩', testAllInline())
        if ((testBodyHtmlNoInline()).equals("yimgu").and(true) || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:49:26,032 [main:107] - replacing ({ prope0 += "0_"; prope4 }, Function0<Int>)
2021-03-12 00:49:26,033 [main:50] - replacing { prope0 += "0_"; prope4 } Function0<Int>
2021-03-12 00:49:26,033 [main:54] - Getting value of type Function0<Int>
2021-03-12 00:49:26,227 [main:302] - generating value of type = Function0<Int> false depth = 0
2021-03-12 00:49:26,233 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:49:26,238 [main:58] - GENERATED VALUE OF TYPE Function0<Int> = { 241209169}
2021-03-12 00:49:26,238 [main:61] - GENERATED IS CALL =false
2021-03-12 00:49:27,905 [main:67] - randomType = HashMap<P, Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>>
2021-03-12 00:49:28,085 [main:302] - generating value of type = HashMap<P, Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>> false depth = 0
2021-03-12 00:49:28,288 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<P, Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>>): HashMap<P, Function1<LkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>> = TODO()
2021-03-12 00:49:28,295 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<P, Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>>): HashMap<P, Function1<LkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>> = TODO()
2021-03-12 00:49:28,477 [main:302] - generating value of type = Pair<P, Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>> false depth = 3
2021-03-12 00:49:28,663 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: P, second: Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>): Pair<P, Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>> = TODO()
2021-03-12 00:49:28,670 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: P, second: Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>): Pair<P, Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>> = TODO()
2021-03-12 00:49:28,844 [main:302] - generating value of type = P false depth = 6
2021-03-12 00:49:28,850 [main:112] - generating klass P text = class P() : BodyTag("p")
2021-03-12 00:49:29,059 [main:194] - Type params = []
2021-03-12 00:49:29,237 [main:302] - generating value of type = Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>> false depth = 6
2021-03-12 00:49:29,243 [main:302] - generating value of type = HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag> false depth = 7
2021-03-12 00:49:29,431 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<ArrayList<Pair<Boolean, A?>>, BodyTag>): HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag> = TODO()
2021-03-12 00:49:29,438 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<ArrayList<Pair<Boolean, A?>>, BodyTag>): HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag> = TODO()
2021-03-12 00:49:29,624 [main:302] - generating value of type = Pair<ArrayList<Pair<Boolean, A?>>, BodyTag> false depth = 10
2021-03-12 00:49:29,824 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ArrayList<Pair<Boolean, A?>>, second: BodyTag): Pair<ArrayList<Pair<Boolean, A?>>, BodyTag> = TODO()
2021-03-12 00:49:29,832 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ArrayList<Pair<Boolean, A?>>, second: BodyTag): Pair<ArrayList<Pair<Boolean, A?>>, BodyTag> = TODO()
2021-03-12 00:49:30,034 [main:302] - generating value of type = ArrayList<Pair<Boolean, A?>> false depth = 13
2021-03-12 00:49:30,220 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Pair<Boolean, A?>> = TODO()
2021-03-12 00:49:30,227 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Pair<Boolean, A?>> = TODO()
2021-03-12 00:49:30,448 [main:95] - GENERATED = arrayListOf<Pair<Boolean, A?>>()
2021-03-12 00:49:30,448 [main:302] - generating value of type = BodyTag false depth = 13
2021-03-12 00:49:30,454 [main:112] - generating klass BodyTag text = abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}
2021-03-12 00:49:30,826 [main:302] - generating value of type = Body false depth = 15
2021-03-12 00:49:30,832 [main:112] - generating klass Body text = class Body() : BodyTag("body")
2021-03-12 00:49:31,014 [main:194] - Type params = []
2021-03-12 00:49:31,216 [main:95] - GENERATED = Pair<ArrayList<Pair<Boolean, A?>>, BodyTag>(arrayListOf<Pair<Boolean, A?>>(), Body())
2021-03-12 00:49:31,216 [main:95] - GENERATED = linkedMapOf<ArrayList<Pair<Boolean, A?>>, BodyTag>(Pair<ArrayList<Pair<Boolean, A?>>, BodyTag>(arrayListOf<Pair<Boolean, A?>>(), Body()))
2021-03-12 00:49:31,216 [main:95] - GENERATED = Pair<P, Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>>(P(), {a: LinkedHashSet<BodyTag> -> linkedMapOf<ArrayList<Pair<Boolean, A?>>, BodyTag>(Pair<ArrayList<Pair<Boolean, A?>>, BodyTag>(arrayListOf<Pair<Boolean, A?>>(), Body()))})
2021-03-12 00:49:31,217 [main:95] - GENERATED = hashMapOf<P, Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>>(Pair<P, Function1<LinkedHashSet<BodyTag>, HashMap<ArrayList<Pair<Boolean, A?>>, BodyTag>>>(P(), {a: LinkedHashSet<BodyTag> -> linkedMapOf<ArrayList<Pair<Boolean, A?>>, BodyTag>(Pair<ArrayList<Pair<Boolean, A?>>, BodyTag>(arrayListOf<Pair<Boolean, A?>>(), Body()))}))
2021-03-12 00:49:31,503 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:49:31,533 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:49:31,534 [main:106] - GETTING Function0<Int> from P
2021-03-12 00:49:31,611 [main:106] - GETTING Function0<Int> from Body
2021-03-12 00:49:31,669 [main:106] - GETTING Function0<Int> from Body
2021-03-12 00:49:31,670 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:49:31,671 [main:106] - GETTING Function0<Int> from HTML
2021-03-12 00:49:31,712 [main:106] - GETTING Function0<Int> from LI
2021-03-12 00:49:31,770 [main:106] - GETTING Function0<Int> from P
2021-03-12 00:49:31,771 [main:106] - GETTING Function0<Int> from H1
2021-03-12 00:49:31,829 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:49:31,830 [main:106] - GETTING Function0<Int> from Head
2021-03-12 00:49:31,869 [main:106] - GETTING Function0<Int> from B
2021-03-12 00:49:31,927 [main:106] - GETTING Function0<Int> from Title
2021-03-12 00:49:31,965 [main:106] - GETTING Function0<Int> from UL
2021-03-12 00:49:32,024 [main:106] - GETTING Function0<Int> from HTML
2021-03-12 00:49:32,025 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:49:32,025 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:49:32,026 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:49:32,027 [main:106] - GETTING Function0<Int> from String
2021-03-12 00:49:32,028 [main:114] - replacement of { prope0 += "0_"; prope4 } of type Function0<Int> is { 241209169}
2021-03-12 00:49:32,227 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:49:32,228 [main:66] - Compilation checking started
2021-03-12 00:49:32,922 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 0.29971528638387435.fu0(b = { -2202240868162051870}(), a = { 241209169}(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = (UL()).name.toDouble().fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if ((testBodyHtmlNoInline()).equals("yimgu").and(true) || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:49:32,924 [main:107] - replacing (toInt(), Int)
2021-03-12 00:49:32,924 [main:50] - replacing toInt() Int
2021-03-12 00:49:32,924 [main:54] - Getting value of type Int
2021-03-12 00:49:33,109 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:33,115 [main:58] - GENERATED VALUE OF TYPE Int = -493034077
2021-03-12 00:49:33,115 [main:61] - GENERATED IS CALL =false
2021-03-12 00:49:33,348 [main:67] - randomType = Title?
2021-03-12 00:49:33,545 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:49:33,550 [main:112] - generating klass Title text = class Title() : TagWithText("title")
2021-03-12 00:49:33,726 [main:194] - Type params = []
2021-03-12 00:49:33,988 [main:78] - Generated call from random type = (Title())?.children.size
2021-03-12 00:49:33,989 [main:106] - GETTING Int from B
2021-03-12 00:49:34,059 [main:113] - Case = [public final val attributes: kotlin.collections.HashMap<kotlin.String, kotlin.String> defined in B[PropertyDescriptorImpl@1acc44ee], public open val size: kotlin.Int defined in kotlin.collections.HashMap[DeserializedPropertyDescriptor@b07f2f2]]
2021-03-12 00:49:34,059 [main:117] - GENERATED CALL = (Body().b()).attributes.size
2021-03-12 00:49:34,059 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]]
2021-03-12 00:49:34,059 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5142cfe0]
2021-03-12 00:49:34,242 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:49:34,247 [main:117] - GENERATED CALL = (Body().b()).name.compareTo(TextElement("qwxop").text, true)
2021-03-12 00:49:34,247 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@70fac793], public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@13ad8cc3]]
2021-03-12 00:49:34,247 [main:149] - GENERATING call of type public open fun indexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@13ad8cc3]
2021-03-12 00:49:34,416 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:49:34,421 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:49:34,779 [main:117] - GENERATED CALL = (Body().b()).children.indexOf(TODO())
2021-03-12 00:49:34,780 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@4e3e1f0f], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]]
2021-03-12 00:49:34,780 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@4e3e1f0f]
2021-03-12 00:49:34,972 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:49:34,972 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e5782d7]
2021-03-12 00:49:35,152 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:49:35,158 [main:117] - GENERATED CALL = (Body().b()).equals("nkvdo").compareTo(false)
2021-03-12 00:49:35,158 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@70fac793], public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4f1c1b05]]
2021-03-12 00:49:35,158 [main:149] - GENERATING call of type public open fun lastIndexOf(element: Element): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4f1c1b05]
2021-03-12 00:49:35,336 [main:302] - generating value of type = Element false depth = 0
2021-03-12 00:49:35,341 [main:112] - generating klass Element text = abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}
2021-03-12 00:49:35,722 [main:117] - GENERATED CALL = (Body().b()).children.lastIndexOf(TODO())
2021-03-12 00:49:35,722 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]]
2021-03-12 00:49:35,722 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3baf8b]
2021-03-12 00:49:35,722 [main:117] - GENERATED CALL = (Body().b()).name.toInt()
2021-03-12 00:49:35,722 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@70fac793], protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@3962084]]
2021-03-12 00:49:35,722 [main:117] - GENERATED CALL = (Body().b()).children.modCount
2021-03-12 00:49:35,722 [main:113] - Case = [public final val name: kotlin.String defined in B[PropertyDescriptorImpl@2332ced6], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708]]
2021-03-12 00:49:35,723 [main:117] - GENERATED CALL = (Body().b()).name.length
2021-03-12 00:49:35,723 [main:113] - Case = [public final val children: kotlin.collections.ArrayList<Element> defined in B[PropertyDescriptorImpl@70fac793], public open val size: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@4575857d]]
2021-03-12 00:49:35,723 [main:117] - GENERATED CALL = (Body().b()).children.size
2021-03-12 00:49:35,723 [main:114] - replacement of toInt() of type Int is (Body().b()).children.size
2021-03-12 00:49:35,891 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:49:35,892 [main:66] - Compilation checking started
2021-03-12 00:49:36,301 [main:49] - Result = false
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.(Body().b()).children.size}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 0.29971528638387435.fu0(b = { -2202240868162051870}(), a = { 241209169}(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { prope0 += "1_"; prope3 }(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = (UL()).name.toDouble().fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if ((testBodyHtmlNoInline()).equals("yimgu").and(true) || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:49:36,302 [main:107] - replacing ({ prope0 += "1_"; prope3 }, Function0<Long>)
2021-03-12 00:49:36,303 [main:50] - replacing { prope0 += "1_"; prope3 } Function0<Long>
2021-03-12 00:49:36,303 [main:54] - Getting value of type Function0<Long>
2021-03-12 00:49:36,500 [main:302] - generating value of type = Function0<Long> false depth = 0
2021-03-12 00:49:36,506 [main:302] - generating value of type = Long true depth = 1
2021-03-12 00:49:36,511 [main:58] - GENERATED VALUE OF TYPE Function0<Long> = { -84079694424410919}
2021-03-12 00:49:36,511 [main:61] - GENERATED IS CALL =false
2021-03-12 00:49:36,533 [main:67] - randomType = Title
2021-03-12 00:49:36,724 [main:302] - generating value of type = Title false depth = 0
2021-03-12 00:49:36,729 [main:112] - generating klass Title text = class Title() : TagWithText("title")
2021-03-12 00:49:36,906 [main:194] - Type params = []
2021-03-12 00:49:37,143 [main:106] - GETTING Function0<Long> from Title
2021-03-12 00:49:37,201 [main:106] - GETTING Function0<Long> from H1
2021-03-12 00:49:37,282 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:49:37,309 [main:106] - GETTING Function0<Long> from P
2021-03-12 00:49:37,399 [main:106] - GETTING Function0<Long> from Body
2021-03-12 00:49:37,496 [main:106] - GETTING Function0<Long> from HTML
2021-03-12 00:49:37,566 [main:106] - GETTING Function0<Long> from UL
2021-03-12 00:49:37,663 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:49:37,664 [main:106] - GETTING Function0<Long> from P
2021-03-12 00:49:37,665 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:49:37,666 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:49:37,667 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:49:37,668 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:49:37,669 [main:106] - GETTING Function0<Long> from LI
2021-03-12 00:49:37,728 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:49:37,729 [main:106] - GETTING Function0<Long> from String
2021-03-12 00:49:37,730 [main:106] - GETTING Function0<Long> from Head
2021-03-12 00:49:37,769 [main:106] - GETTING Function0<Long> from B
2021-03-12 00:49:37,834 [main:106] - GETTING Function0<Long> from Body
2021-03-12 00:49:37,835 [main:106] - GETTING Function0<Long> from HTML
2021-03-12 00:49:37,835 [main:114] - replacement of { prope0 += "1_"; prope3 } of type Function0<Long> is { -84079694424410919}
2021-03-12 00:49:38,025 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:49:38,026 [main:66] - Compilation checking started
2021-03-12 00:49:38,725 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${this.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 0.29971528638387435.fu0(b = { -2202240868162051870}(), a = { 241209169}(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { -84079694424410919}(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = (UL()).name.toDouble().fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if ((testBodyHtmlNoInline()).equals("yimgu").and(true) || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:49:38,726 [main:107] - replacing (this, Double)
2021-03-12 00:49:38,726 [main:50] - replacing this Double
2021-03-12 00:49:38,726 [main:54] - Getting value of type Double
2021-03-12 00:49:38,897 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:49:38,902 [main:58] - GENERATED VALUE OF TYPE Double = 0.21431370068891087
2021-03-12 00:49:38,902 [main:61] - GENERATED IS CALL =false
2021-03-12 00:49:39,749 [main:67] - randomType = Function2<Byte, Float?, H1>
2021-03-12 00:49:39,750 [main:106] - GETTING Double from String
2021-03-12 00:49:39,778 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@498ca6e3]]
2021-03-12 00:49:39,778 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@498ca6e3]
2021-03-12 00:49:39,953 [main:302] - generating value of type = Function1<Char, Double> false depth = 0
2021-03-12 00:49:39,958 [main:302] - generating value of type = Double true depth = 1
2021-03-12 00:49:39,964 [main:117] - GENERATED CALL = (TextElement("qwxop").text).sumOf({a: Char -> 0.8292674229081661})
2021-03-12 00:49:39,964 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], public final operator fun times(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef08324]]
2021-03-12 00:49:39,964 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:49:39,964 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ef08324]
2021-03-12 00:49:40,146 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:49:40,152 [main:117] - GENERATED CALL = (TextElement("qwxop").text).compareTo(expected).times(0.8663869978388758)
2021-03-12 00:49:40,152 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.maxOf(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb22c5]]
2021-03-12 00:49:40,152 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:49:40,320 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:40,492 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:40,497 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.maxOf(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb22c5]
2021-03-12 00:49:40,661 [main:302] - generating value of type = Function1<Char, Double> false depth = 0
2021-03-12 00:49:40,667 [main:302] - generating value of type = Double true depth = 1
2021-03-12 00:49:40,672 [main:117] - GENERATED CALL = (TextElement("qwxop").text).subSequence(-44519860, -2130328962).maxOf({a: Char -> 0.09273773455207124})
2021-03-12 00:49:40,672 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11a7b5e9]]
2021-03-12 00:49:40,672 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:49:40,672 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11a7b5e9]
2021-03-12 00:49:40,862 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:49:40,868 [main:117] - GENERATED CALL = (TextElement("qwxop").text).compareTo(expected).div(0.032906144953062544)
2021-03-12 00:49:40,868 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4], public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1cd77371]]
2021-03-12 00:49:40,868 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7365feb4]
2021-03-12 00:49:41,041 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:41,047 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1cd77371]
2021-03-12 00:49:41,047 [main:117] - GENERATED CALL = (TextElement("qwxop").text).get(-1021566243).toDouble()
2021-03-12 00:49:41,047 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fc28a99]]
2021-03-12 00:49:41,047 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fc28a99]
2021-03-12 00:49:41,221 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:49:41,226 [main:117] - GENERATED CALL = (TextElement("qwxop").text).length.rem(0.11780111899738721)
2021-03-12 00:49:41,226 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fc28a99]]
2021-03-12 00:49:41,226 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@64dc24fb]
2021-03-12 00:49:41,226 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fc28a99]
2021-03-12 00:49:41,399 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:49:41,405 [main:117] - GENERATED CALL = (TextElement("qwxop").text).compareTo(testBodyNoInline()).rem(0.4021853681035902)
2021-03-12 00:49:41,405 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.maxOf(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb22c5]]
2021-03-12 00:49:41,405 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.maxOf(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32fb22c5]
2021-03-12 00:49:41,581 [main:302] - generating value of type = Function1<Char, Double> false depth = 0
2021-03-12 00:49:41,586 [main:302] - generating value of type = Double true depth = 1
2021-03-12 00:49:41,592 [main:117] - GENERATED CALL = (TextElement("qwxop").text).maxOf({a: Char -> 0.2791769691543148})
2021-03-12 00:49:41,592 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@498ca6e3]]
2021-03-12 00:49:41,592 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6e2b6de1]
2021-03-12 00:49:41,756 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:41,923 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:49:41,929 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Double): kotlin.Double defined in kotlin.text[DeserializedSimpleFunctionDescriptor@498ca6e3]
2021-03-12 00:49:42,089 [main:302] - generating value of type = Function1<Char, Double> false depth = 0
2021-03-12 00:49:42,094 [main:302] - generating value of type = Double true depth = 1
2021-03-12 00:49:42,100 [main:117] - GENERATED CALL = (TextElement("qwxop").text).subSequence(216100344, 627865992).sumOf({a: Char -> 0.852899254810338})
2021-03-12 00:49:42,100 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@41695708], public final operator fun minus(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d3ca4ea]]
2021-03-12 00:49:42,100 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d3ca4ea]
2021-03-12 00:49:42,286 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:49:42,291 [main:117] - GENERATED CALL = (TextElement("qwxop").text).length.minus(0.7835388631234214)
2021-03-12 00:49:42,291 [main:114] - replacement of this of type Double is 0.21431370068891087
2021-03-12 00:49:42,463 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(FLOAT_CONSTANT)
2021-03-12 00:49:42,463 [main:66] - Compilation checking started
2021-03-12 00:49:43,154 [main:53] - Result = true
Text:


import kotlin.collections.*
import kotlin.text.*
abstract class Element {
    abstract fun render(builder: StringBuilder, indent: String)

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

class TextElement(val text: String) : Element() {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

abstract class Tag(val name: String) : Element() {
    val children = ArrayList<Element>()
    val attributes = HashMap<String, String>()

    inline fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String? {
        val builder = StringBuilder()
        for (a in attributes.keys) {
            builder.append(" $a=\"${attributes[a]}\"")
        }
        return builder.toString()
    }
}

abstract class TagWithText(name: String) : Tag(name) {
    operator fun String.unaryPlus() {
        children.add(TextElement(this))
    }
}

class HTML() : TagWithText("html") {
    inline fun head(init: Head.() -> Unit) = initTag(Head(), init)

    inline fun body(init: Body.() -> Unit) = initTag(Body(), init)

    fun bodyNoInline(init: Body.() -> Unit) = initTag(Body(), init)
}

class Head() : TagWithText("head") {
    inline fun title(init: Title.() -> Unit) = initTag(Title(), init)
}

class Title() : TagWithText("title")

abstract class BodyTag(name: String) : TagWithText(name) {
    inline fun b(init: B.() -> Unit) = initTag(B(), init)
    inline fun p(init: P.() -> Unit) = initTag(P(), init)
    inline fun pNoInline(init: P.() -> Unit) = initTag(P(), init)
    inline fun h1(init: H1.() -> Unit) = initTag(H1(), init)
    inline fun ul(init: UL.() -> Unit) = initTag(UL(), init)
    inline fun a(href: String, init: A.() -> Unit) {
        val a = initTag(A(), init)
        a.href = href
    }
}

class Body() : BodyTag("body")
class UL() : BodyTag("ul") {
    inline fun li(init: LI.() -> Unit) = initTag(LI(), init)
}

class B() : BodyTag("b")
class LI() : BodyTag("li")
class P() : BodyTag("p")
class H1() : BodyTag("h1")
class A() : BodyTag("a") {
    public var href: String
        get() = attributes["href"]!!
        set(value) {
            attributes["href"] = value
        }
}

inline fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

fun htmlNoInline(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

//NO_CHECK_LAMBDA_INLINING

fun testAllInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline() {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                body {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            html {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun testBodyHtmlNoInline() : String {
    val args = arrayOf("1", "2", "3")
    val result =
            htmlNoInline {
                val htmlVal = 0
                head {
                    title { +"XML encoding with Kotlin" }
                }
                bodyNoInline {
                    var bodyVar = 1
                    h1 { +"XML encoding with Kotlin" }
                    p { +"this format can be used as an alternative markup to XML" }

                    // an element with attributes and text content
                    a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }

                    // mixed content
                    p {
                        +"This is some"
                        b { +"mixed" }
                        +"text. For more see the"
                        a(href = "https://jetbrains.com/kotlin") { +"Kotlin" }
                        +"project"
                    }
                    p { +"some text" }

                    // content generated from command-line arguments
                    p {
                        +"Command line arguments were:"
                        ul {
                            for (arg in args)
                                li { +arg; +"$htmlVal"; +"$bodyVar" }
                        }
                    }
                }
            }

    return result.toString()!!
}

fun box(): String {
    var expected = testAllInline();

    if (expected != testHtmlNoInline()) return "fail 1: ${testHtmlNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyNoInline()) return "fail 2: ${testBodyNoInline()}\nbut expected\n${expected} "

    if (expected != testBodyHtmlNoInline()) return "fail 3: ${testBodyHtmlNoInline()}\nbut expected\n${expected} "

    return "OK"
}

fun box242(): String {
    return Kla0().fu0()
}

class Kla0 {
    fun Double.fu0(a: Int, b: Long, c: () -> String): String {
        var expected = testAllInline()
return "${0.21431370068891087.toInt()}_${a}_${b}_${c()}"
    }


    fun fu0(): String {
        var expected = testAllInline()
var prope0 = "";
        val prope1 = "1_0_1_L"
        val prope2 = "1_0_L"
        var prope3 = 1L
        var prope4 = 0

        var prope5 = 0.29971528638387435.fu0(b = { -2202240868162051870}(), a = { 241209169}(), c = { prope0 += "L"; "L" })
        if (prope0 != prope2 || prope5 != prope1) return "fail 1: $prope0 != $(Head().title()).name or $prope5 != $prope1"

        prope0 = "";
        prope5 = 1.0.fu0(b = { -84079694424410919}(), c = { prope0 += "L"; "L" }, a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 2: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = 1.0.fu0(c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }(), a = { prope0 += "0_"; prope4 }())
        if (prope0 != prope2 || prope5 != prope1) return "fail 3: $prope0 != $prope2 or $prope5 != $prope1"


        prope0 = "";
        prope5 = (UL()).name.toDouble().fu0(a = { 391194199}(), c = { prope0 += "L"; "L" }, b = { prope0 += "1_"; prope3 }())
        if ((testBodyHtmlNoInline()).equals("yimgu").and(true) || prope5 != prope1) return "fail 4: $prope0 != 0_1_L or $(html({ check(true)})).name.takeLast(-1705025436) != $prope1"

        return "OK"
    }
}


2021-03-12 00:49:43,155 [main:107] - replacing (prope0, String)
2021-03-12 00:49:43,155 [main:50] - replacing prope0 String
2021-03-12 00:49:43,156 [main:54] - Getting value of type String
