2021-03-12 10:47:08,531 [main:66] - Compilation checking started
2021-03-12 10:47:09,787 [main:50] - replacing val foo: Test Test
2021-03-12 10:47:09,787 [main:54] - Getting value of type Test
2021-03-12 10:47:09,922 [main:302] - generating value of type = Test false depth = 0
2021-03-12 10:47:09,923 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:10,804 [main:302] - generating value of type = TestClass false depth = 2
2021-03-12 10:47:10,804 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:47:10,968 [main:194] - Type params = []
2021-03-12 10:47:11,130 [main:302] - generating value of type = Test false depth = 4
2021-03-12 10:47:11,131 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:11,378 [main:302] - generating value of type = Delegate false depth = 6
2021-03-12 10:47:11,380 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:47:11,385 [main:58] - GENERATED VALUE OF TYPE Test = TestClass(Delegate())
2021-03-12 10:47:11,385 [main:61] - GENERATED IS CALL =true
2021-03-12 10:47:11,732 [main:67] - randomType = UShort?
2021-03-12 10:47:11,853 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 10:47:12,051 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 10:47:12,052 [main:66] - Compilation checking started
2021-03-12 10:47:12,790 [main:53] - Result = true
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test = TestClass(Delegate())) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}
2021-03-12 10:47:13,010 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:13,232 [main:302] - generating value of type = TestClass false depth = 1
2021-03-12 10:47:13,233 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:47:13,335 [main:194] - Type params = []
2021-03-12 10:47:13,430 [main:302] - generating value of type = Test false depth = 3
2021-03-12 10:47:13,430 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:13,642 [main:302] - generating value of type = Delegate false depth = 5
2021-03-12 10:47:13,643 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:47:13,647 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:47:13,649 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:47:13,770 [main:194] - Type params = []
2021-03-12 10:47:13,904 [main:302] - generating value of type = Test false depth = 1
2021-03-12 10:47:13,905 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:14,188 [main:302] - generating value of type = TestClass false depth = 3
2021-03-12 10:47:14,189 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:47:14,280 [main:194] - Type params = []
2021-03-12 10:47:14,362 [main:302] - generating value of type = Test false depth = 5
2021-03-12 10:47:14,363 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:14,569 [main:302] - generating value of type = TestClass false depth = 7
2021-03-12 10:47:14,570 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:47:14,669 [main:194] - Type params = []
2021-03-12 10:47:14,759 [main:302] - generating value of type = Test false depth = 9
2021-03-12 10:47:14,759 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:14,972 [main:302] - generating value of type = TestClass false depth = 11
2021-03-12 10:47:14,973 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:47:15,068 [main:194] - Type params = []
2021-03-12 10:47:15,157 [main:302] - generating value of type = Test false depth = 13
2021-03-12 10:47:15,157 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:15,370 [main:302] - generating value of type = TestClass false depth = 15
2021-03-12 10:47:15,371 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:47:15,467 [main:194] - Type params = []
2021-03-12 10:47:15,548 [main:302] - generating value of type = Test false depth = 17
2021-03-12 10:47:15,795 [main:45] - Trying to change 8 nodes
2021-03-12 10:47:15,799 [main:53] - replacing (foo, Test)
2021-03-12 10:47:15,799 [main:50] - replacing foo Test
2021-03-12 10:47:15,799 [main:54] - Getting value of type Test
2021-03-12 10:47:15,897 [main:302] - generating value of type = Test false depth = 0
2021-03-12 10:47:15,897 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:16,068 [main:302] - generating value of type = Delegate false depth = 2
2021-03-12 10:47:16,068 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:47:16,069 [main:58] - GENERATED VALUE OF TYPE Test = Delegate()
2021-03-12 10:47:16,069 [main:61] - GENERATED IS CALL =true
2021-03-12 10:47:16,271 [main:67] - randomType = HashMap<UShort, TestClass>
2021-03-12 10:47:16,364 [main:302] - generating value of type = HashMap<UShort, TestClass> false depth = 0
2021-03-12 10:47:16,470 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<UShort, TestClass>): HashMap<UShort, TestClass> = TODO()
2021-03-12 10:47:16,472 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<UShort, TestClass>): HashMap<UShort, TestClass> = TODO()
2021-03-12 10:47:16,566 [main:302] - generating value of type = Pair<UShort, TestClass> false depth = 3
2021-03-12 10:47:16,659 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort, second: TestClass): Pair<UShort, TestClass> = TODO()
2021-03-12 10:47:16,662 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort, second: TestClass): Pair<UShort, TestClass> = TODO()
2021-03-12 10:47:16,767 [main:302] - generating value of type = UShort true depth = 6
2021-03-12 10:47:16,767 [main:302] - generating value of type = TestClass false depth = 6
2021-03-12 10:47:16,767 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:47:16,891 [main:194] - Type params = []
2021-03-12 10:47:16,977 [main:302] - generating value of type = Test false depth = 8
2021-03-12 10:47:16,978 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:17,161 [main:302] - generating value of type = Delegate false depth = 10
2021-03-12 10:47:17,161 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:47:17,163 [main:95] - GENERATED = Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate()))
2021-03-12 10:47:17,164 [main:95] - GENERATED = linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate())))
2021-03-12 10:47:17,355 [main:149] - GENERATING call of type public open fun get(key: kotlin.UShort): TestClass? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@25878b20]
2021-03-12 10:47:17,435 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 10:47:17,437 [main:78] - Generated call from random type = (linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate())))).get(29312.toUShort())?.foo!!
2021-03-12 10:47:17,437 [main:61] - replacement of foo of type Test is (linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate())))).get(29312.toUShort())?.foo!!
2021-03-12 10:47:17,555 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 10:47:17,556 [main:66] - Compilation checking started
2021-03-12 10:47:18,379 [main:53] - Result = true
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by (linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate())))).get(29312.toUShort())?.foo!!

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}


2021-03-12 10:47:18,381 [main:53] - replacing ("fail", String)
2021-03-12 10:47:18,382 [main:50] - replacing "fail" String
2021-03-12 10:47:18,382 [main:54] - Getting value of type String
2021-03-12 10:47:18,541 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:47:18,544 [main:58] - GENERATED VALUE OF TYPE String = "txkfk"
2021-03-12 10:47:18,544 [main:61] - GENERATED IS CALL =false
2021-03-12 10:47:18,546 [main:67] - randomType = TestClass
2021-03-12 10:47:18,673 [main:302] - generating value of type = TestClass false depth = 0
2021-03-12 10:47:18,673 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by (linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate())))).get(29312.toUShort())?.foo!!
2021-03-12 10:47:18,785 [main:194] - Type params = []
2021-03-12 10:47:18,954 [main:302] - generating value of type = Test false depth = 2
2021-03-12 10:47:18,954 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:19,213 [main:302] - generating value of type = TestClass false depth = 4
2021-03-12 10:47:19,213 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by (linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate())))).get(29312.toUShort())?.foo!!
2021-03-12 10:47:19,340 [main:194] - Type params = []
2021-03-12 10:47:19,450 [main:302] - generating value of type = Test false depth = 6
2021-03-12 10:47:19,451 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:19,662 [main:302] - generating value of type = Delegate false depth = 8
2021-03-12 10:47:19,662 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:47:19,687 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]
2021-03-12 10:47:19,791 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:47:19,792 [main:78] - Generated call from random type = (TestClass(TestClass(Delegate()))).test.plus("exrzv")
2021-03-12 10:47:19,792 [main:61] - replacement of "fail" of type String is (TestClass(TestClass(Delegate()))).test.plus("exrzv")
2021-03-12 10:47:19,914 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:47:19,915 [main:66] - Compilation checking started
2021-03-12 10:47:20,439 [main:53] - Result = true
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = (TestClass(TestClass(Delegate()))).test.plus("exrzv")

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by (linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate())))).get(29312.toUShort())?.foo!!

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}


2021-03-12 10:47:20,442 [main:53] - replacing ("K", String)
2021-03-12 10:47:20,442 [main:50] - replacing "K" String
2021-03-12 10:47:20,442 [main:54] - Getting value of type String
2021-03-12 10:47:20,561 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:47:20,561 [main:58] - GENERATED VALUE OF TYPE String = "yugfo"
2021-03-12 10:47:20,562 [main:61] - GENERATED IS CALL =false
2021-03-12 10:47:20,672 [main:67] - randomType = ArrayDeque<Delegate>
2021-03-12 10:47:20,791 [main:302] - generating value of type = ArrayDeque<Delegate> false depth = 0
2021-03-12 10:47:20,893 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Delegate> = TODO()
2021-03-12 10:47:20,895 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Delegate> = TODO()
2021-03-12 10:47:21,027 [main:95] - GENERATED = ArrayDeque<Delegate>()
2021-03-12 10:47:21,258 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@306e1ba2]
2021-03-12 10:47:21,357 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:47:21,460 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:47:21,462 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:47:21,675 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 10:47:21,680 [main:95] - GENERATED = StringBuilder("nrzou")
2021-03-12 10:47:21,800 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:47:21,921 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:47:22,028 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:22,132 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:47:22,240 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 10:47:22,240 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 10:47:22,247 [main:78] - Generated call from random type = (ArrayDeque<Delegate>()).joinToString(StringBuilder("nrzou"), "ejvna", "kghrc", 784520998, StringBuilder(), {a: T -> "pcvoe"})
2021-03-12 10:47:22,248 [main:106] - GETTING String from String
2021-03-12 10:47:22,284 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@db15af9]]
2021-03-12 10:47:22,285 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@db15af9]
2021-03-12 10:47:22,286 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).decapitalize()
2021-03-12 10:47:22,286 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cefea47]]
2021-03-12 10:47:22,287 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cefea47]
2021-03-12 10:47:22,386 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 10:47:22,520 [main:43] - GENERATING CALL OF fun <T> listOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 10:47:22,523 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 10:47:22,663 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:47:22,663 [main:95] - GENERATED = listOf<Int>(834800221)
2021-03-12 10:47:22,664 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).slice(listOf<Int>(834800221))
2021-03-12 10:47:22,665 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f31c80e]]
2021-03-12 10:47:22,665 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f31c80e]
2021-03-12 10:47:22,768 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:47:22,768 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:47:22,770 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).filterNot({a: Char -> false})
2021-03-12 10:47:22,770 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]]
2021-03-12 10:47:22,770 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]
2021-03-12 10:47:22,869 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:47:22,870 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).plus("scxzm")
2021-03-12 10:47:22,870 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b03beb4]]
2021-03-12 10:47:22,871 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b03beb4]
2021-03-12 10:47:22,969 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:22,971 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).take(-361102192)
2021-03-12 10:47:22,971 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a3a1062]]
2021-03-12 10:47:22,971 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a3a1062]
2021-03-12 10:47:22,972 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).trim()
2021-03-12 10:47:22,972 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31879b34]]
2021-03-12 10:47:22,972 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31879b34]
2021-03-12 10:47:22,973 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).toUpperCase()
2021-03-12 10:47:22,973 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@373f9623]]
2021-03-12 10:47:22,973 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@373f9623]
2021-03-12 10:47:23,096 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:23,098 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).dropLast(194963458)
2021-03-12 10:47:23,099 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b3d76]]
2021-03-12 10:47:23,099 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b3d76]
2021-03-12 10:47:23,221 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:47:23,222 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:47:23,223 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).takeLastWhile({a: Char -> false})
2021-03-12 10:47:23,224 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a70813d]]
2021-03-12 10:47:23,224 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a70813d]
2021-03-12 10:47:23,314 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:47:23,315 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:47:23,317 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).filterIndexed({a: Int, b: Char -> true})
2021-03-12 10:47:23,317 [main:61] - replacement of "K" of type String is (TestClass(Delegate()).testDelegated).decapitalize()
2021-03-12 10:47:23,406 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:47:23,406 [main:66] - Compilation checking started
2021-03-12 10:47:23,853 [main:53] - Result = true
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = (TestClass(TestClass(Delegate()))).test.plus("exrzv")

    override val testDelegated: String
        get() = (TestClass(Delegate()).testDelegated).decapitalize()
}

class TestClass(val foo: Test) : Test by (linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate())))).get(29312.toUShort())?.foo!!

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}


2021-03-12 10:47:23,855 [main:53] - replacing (testClass.test, String)
2021-03-12 10:47:23,855 [main:50] - replacing testClass.test String
2021-03-12 10:47:23,855 [main:54] - Getting value of type String
2021-03-12 10:47:23,972 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:47:23,973 [main:58] - GENERATED VALUE OF TYPE String = "gkyez"
2021-03-12 10:47:23,973 [main:61] - GENERATED IS CALL =false
2021-03-12 10:47:23,974 [main:67] - randomType = UShort
2021-03-12 10:47:24,097 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 10:47:24,152 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2d582872]
2021-03-12 10:47:24,263 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:47:24,264 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a8bc3dc]
2021-03-12 10:47:24,373 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:24,374 [main:78] - Generated call from random type = (19891.toUShort()).compareTo(113.toUByte()).toString(-1933892274)
2021-03-12 10:47:24,374 [main:106] - GETTING String from String
2021-03-12 10:47:24,410 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9bf309]]
2021-03-12 10:47:24,410 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9bf309]
2021-03-12 10:47:24,411 [main:117] - GENERATED CALL = (Delegate().testDelegated).capitalize()
2021-03-12 10:47:24,411 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@968e4c1]]
2021-03-12 10:47:24,411 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@968e4c1]
2021-03-12 10:47:24,519 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:24,521 [main:117] - GENERATED CALL = (Delegate().testDelegated).takeLast(-104091429)
2021-03-12 10:47:24,521 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8ffdd1]]
2021-03-12 10:47:24,521 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:47:24,621 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:24,622 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8ffdd1]
2021-03-12 10:47:24,623 [main:117] - GENERATED CALL = (Delegate().testDelegated).get(-186247535).titlecase()
2021-03-12 10:47:24,624 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b8c32c3]]
2021-03-12 10:47:24,624 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:47:24,717 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:24,719 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b8c32c3]
2021-03-12 10:47:24,720 [main:117] - GENERATED CALL = (Delegate().testDelegated).get(-110309812).uppercase()
2021-03-12 10:47:24,720 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c74afce]]
2021-03-12 10:47:24,720 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c74afce]
2021-03-12 10:47:24,721 [main:117] - GENERATED CALL = (Delegate().testDelegated).concat(testDelegated)
2021-03-12 10:47:24,721 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@657a617f]]
2021-03-12 10:47:24,721 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@657a617f]
2021-03-12 10:47:24,722 [main:117] - GENERATED CALL = (Delegate().testDelegated).toLowerCase()
2021-03-12 10:47:24,723 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a70813d]]
2021-03-12 10:47:24,724 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a70813d]
2021-03-12 10:47:24,822 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:47:24,823 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:47:24,825 [main:117] - GENERATED CALL = (Delegate().testDelegated).filterIndexed({a: Int, b: Char -> false})
2021-03-12 10:47:24,826 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ea5d0fe]]
2021-03-12 10:47:24,826 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ea5d0fe]
2021-03-12 10:47:24,972 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:47:24,975 [main:117] - GENERATED CALL = (Delegate().testDelegated).replaceAfterLast('?', Delegate().test, TestClass(Delegate()).testDelegated)
2021-03-12 10:47:24,975 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@373f9623]]
2021-03-12 10:47:24,975 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@373f9623]
2021-03-12 10:47:25,105 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:25,106 [main:117] - GENERATED CALL = (Delegate().testDelegated).dropLast(-1570365372)
2021-03-12 10:47:25,107 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@218a1f5d]]
2021-03-12 10:47:25,107 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@218a1f5d]
2021-03-12 10:47:25,208 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:25,311 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:47:25,312 [main:117] - GENERATED CALL = (Delegate().testDelegated).padStart(-1075285431, '')
2021-03-12 10:47:25,312 [main:61] - replacement of testClass.test of type String is (Delegate().testDelegated).get(-186247535).titlecase()
2021-03-12 10:47:25,412 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:47:25,413 [main:66] - Compilation checking started
2021-03-12 10:47:25,919 [main:53] - Result = true
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = (TestClass(TestClass(Delegate()))).test.plus("exrzv")

    override val testDelegated: String
        get() = (TestClass(Delegate()).testDelegated).decapitalize()
}

class TestClass(val foo: Test) : Test by (linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate())))).get(29312.toUShort())?.foo!!

fun box(): String {
    val testClass = TestClass(Delegate())
    return (Delegate().testDelegated).get(-186247535).titlecase() + testClass.testDelegated
}


2021-03-12 10:47:25,922 [main:53] - replacing ((Delegate().testDelegated).get(-186247535).titlecase() + testClass.testDelegated, String)
2021-03-12 10:47:25,922 [main:50] - replacing (Delegate().testDelegated).get(-186247535).titlecase() + testClass.testDelegated String
2021-03-12 10:47:25,922 [main:54] - Getting value of type String
2021-03-12 10:47:26,092 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:47:26,092 [main:58] - GENERATED VALUE OF TYPE String = "cngfc"
2021-03-12 10:47:26,093 [main:61] - GENERATED IS CALL =false
2021-03-12 10:47:26,221 [main:67] - randomType = Set<TestClass>
2021-03-12 10:47:26,221 [main:106] - GETTING String from String
2021-03-12 10:47:26,250 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144600d3]]
2021-03-12 10:47:26,251 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144600d3]
2021-03-12 10:47:26,346 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:47:26,450 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:47:26,453 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:47:26,686 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 10:47:26,803 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:47:26,805 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:47:27,009 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 10:47:27,014 [main:95] - GENERATED = StringBuilder("mfenb")
2021-03-12 10:47:27,015 [main:95] - GENERATED = StringBuilder(StringBuilder("mfenb"))
2021-03-12 10:47:27,106 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:47:27,108 [main:117] - GENERATED CALL = (Delegate().test).commonPrefixWith(StringBuilder(StringBuilder("mfenb")), false)
2021-03-12 10:47:27,108 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ce5352]]
2021-03-12 10:47:27,108 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ce5352]
2021-03-12 10:47:27,109 [main:117] - GENERATED CALL = (Delegate().test).lowercase()
2021-03-12 10:47:27,109 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d98d7d4]]
2021-03-12 10:47:27,109 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:47:27,233 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:27,348 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:27,349 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d98d7d4]
2021-03-12 10:47:27,455 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:27,456 [main:117] - GENERATED CALL = (Delegate().test).subSequence(1193157364, 69766437).repeat(-896542706)
2021-03-12 10:47:27,456 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b03beb4]]
2021-03-12 10:47:27,456 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b03beb4]
2021-03-12 10:47:27,552 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:27,553 [main:117] - GENERATED CALL = (Delegate().test).take(-624499817)
2021-03-12 10:47:27,554 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@657a617f]]
2021-03-12 10:47:27,554 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@657a617f]
2021-03-12 10:47:27,555 [main:117] - GENERATED CALL = (Delegate().test).toLowerCase()
2021-03-12 10:47:27,555 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b8c32c3]]
2021-03-12 10:47:27,555 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:47:27,686 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:27,687 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b8c32c3]
2021-03-12 10:47:27,688 [main:117] - GENERATED CALL = (Delegate().test).get(-2015375285).uppercase()
2021-03-12 10:47:27,688 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a906d2c]]
2021-03-12 10:47:27,688 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a906d2c]
2021-03-12 10:47:27,807 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:47:27,807 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:47:27,810 [main:117] - GENERATED CALL = (Delegate().test).dropLastWhile({a: Char -> true})
2021-03-12 10:47:27,810 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b837498]]
2021-03-12 10:47:27,811 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b837498]
2021-03-12 10:47:27,911 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:47:27,912 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:47:27,914 [main:117] - GENERATED CALL = (Delegate().test).takeWhile({a: Char -> false})
2021-03-12 10:47:27,914 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68c79bfc]]
2021-03-12 10:47:27,914 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68c79bfc]
2021-03-12 10:47:27,915 [main:117] - GENERATED CALL = (Delegate().test).replaceIndent(testDelegated)
2021-03-12 10:47:27,915 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a8bc3dc]]
2021-03-12 10:47:27,915 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:47:27,916 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a8bc3dc]
2021-03-12 10:47:28,015 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:28,017 [main:117] - GENERATED CALL = (Delegate().test).compareTo(Delegate().test).toString(-1768877629)
2021-03-12 10:47:28,017 [main:61] - replacement of (Delegate().testDelegated).get(-186247535).titlecase() + testClass.testDelegated of type String is (Delegate().test).take(-624499817)
2021-03-12 10:47:28,145 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:47:28,145 [main:66] - Compilation checking started
2021-03-12 10:47:28,627 [main:53] - Result = true
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = (TestClass(TestClass(Delegate()))).test.plus("exrzv")

    override val testDelegated: String
        get() = (TestClass(Delegate()).testDelegated).decapitalize()
}

class TestClass(val foo: Test) : Test by (linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate())))).get(29312.toUShort())?.foo!!

fun box(): String {
    val testClass = TestClass(Delegate())
    return (Delegate().test).take(-624499817)
}


2021-03-12 10:47:28,628 [main:53] - replacing ("fail", String)
2021-03-12 10:47:28,628 [main:50] - replacing "fail" String
2021-03-12 10:47:28,628 [main:54] - Getting value of type String
2021-03-12 10:47:28,724 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:47:28,724 [main:58] - GENERATED VALUE OF TYPE String = "klrdq"
2021-03-12 10:47:28,725 [main:61] - GENERATED IS CALL =false
2021-03-12 10:47:28,928 [main:67] - randomType = Set<TestClass>
2021-03-12 10:47:28,929 [main:106] - GETTING String from String
2021-03-12 10:47:28,967 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@db15af9]]
2021-03-12 10:47:28,967 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@db15af9]
2021-03-12 10:47:28,968 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).decapitalize()
2021-03-12 10:47:28,968 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d574b3]]
2021-03-12 10:47:28,968 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d574b3]
2021-03-12 10:47:29,068 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:47:29,192 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:47:29,194 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).replaceAfter('㿦', "oezfi", TestClass(Delegate()).testDelegated)
2021-03-12 10:47:29,195 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ea5d0fe]]
2021-03-12 10:47:29,195 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ea5d0fe]
2021-03-12 10:47:29,311 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:47:29,312 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).replaceAfterLast('⏻', Delegate().testDelegated, Delegate().test)
2021-03-12 10:47:29,312 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d98d7d4]]
2021-03-12 10:47:29,312 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d98d7d4]
2021-03-12 10:47:29,406 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:29,407 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).repeat(-1100197561)
2021-03-12 10:47:29,407 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c4af4df]]
2021-03-12 10:47:29,407 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c4af4df]
2021-03-12 10:47:29,408 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).prependIndent(TestClass(Delegate()).testDelegated)
2021-03-12 10:47:29,408 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c74afce]]
2021-03-12 10:47:29,408 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c74afce]
2021-03-12 10:47:29,409 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).concat(TestClass(Delegate()).testDelegated)
2021-03-12 10:47:29,409 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d98d7d4]]
2021-03-12 10:47:29,409 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:47:29,506 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:29,601 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:29,602 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d98d7d4]
2021-03-12 10:47:29,725 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:29,727 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).subSequence(-104444499, -1486473995).repeat(-1420343113)
2021-03-12 10:47:29,727 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58152cf2]]
2021-03-12 10:47:29,727 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58152cf2]
2021-03-12 10:47:29,843 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:47:29,844 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).substringBefore('圗', Delegate().test)
2021-03-12 10:47:29,844 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a906d2c]]
2021-03-12 10:47:29,845 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a906d2c]
2021-03-12 10:47:29,932 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:47:29,932 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:47:29,934 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).dropLastWhile({a: Char -> false})
2021-03-12 10:47:29,934 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df18c5b]]
2021-03-12 10:47:29,934 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df18c5b]
2021-03-12 10:47:29,934 [main:117] - GENERATED CALL = (TestClass(Delegate()).testDelegated).trimEnd()
2021-03-12 10:47:29,935 [main:61] - replacement of "fail" of type String is (TestClass(Delegate()).testDelegated).trimEnd()
2021-03-12 10:47:30,022 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:47:30,115 [main:119] - TRYING TO REPLACE CONSTANT 29312
2021-03-12 10:47:30,220 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 10:47:30,220 [main:66] - Compilation checking started
2021-03-12 10:47:30,513 [main:49] - Result = false
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = (TestClass(TestClass(Delegate()))).test.plus("exrzv")

    override val testDelegated: String
        get() = (TestClass(Delegate()).testDelegated).decapitalize()
}

class TestClass(val foo: Test) : Test by (linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate())))).get(-624499817.toUShort())?.foo!!

fun box(): String {
    val testClass = TestClass(Delegate())
    return (Delegate().test).take(-624499817)
}


2021-03-12 10:47:30,513 [main:119] - TRYING TO REPLACE CONSTANT 6361
2021-03-12 10:47:30,609 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 10:47:30,609 [main:66] - Compilation checking started
2021-03-12 10:47:30,908 [main:49] - Result = false
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = (TestClass(TestClass(Delegate()))).test.plus("exrzv")

    override val testDelegated: String
        get() = (TestClass(Delegate()).testDelegated).decapitalize()
}

class TestClass(val foo: Test) : Test by (linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(-624499817.toUShort(), TestClass(Delegate())))).get(29312.toUShort())?.foo!!

fun box(): String {
    val testClass = TestClass(Delegate())
    return (Delegate().test).take(-624499817)
}


2021-03-12 10:47:30,908 [main:119] - TRYING TO REPLACE CONSTANT 624499817
2021-03-12 10:47:31,021 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 10:47:31,021 [main:66] - Compilation checking started
2021-03-12 10:47:31,393 [main:53] - Result = true
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = (TestClass(TestClass(Delegate()))).test.plus("exrzv")

    override val testDelegated: String
        get() = (TestClass(Delegate()).testDelegated).decapitalize()
}

class TestClass(val foo: Test) : Test by (linkedMapOf<UShort, TestClass>(Pair<UShort, TestClass>(6361.toUShort(), TestClass(Delegate())))).get(29312.toUShort())?.foo!!

fun box(): String {
    val testClass = TestClass(Delegate())
    return (Delegate().test).take(6361)
}


2021-03-12 10:47:31,418 [main:41] - AFTER TRY 0 res = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}
2021-03-12 10:47:31,578 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:31,735 [main:302] - generating value of type = Delegate false depth = 1
2021-03-12 10:47:31,735 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:47:31,736 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:47:31,737 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:47:31,829 [main:194] - Type params = []
2021-03-12 10:47:31,906 [main:302] - generating value of type = Test false depth = 1
2021-03-12 10:47:31,906 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:32,062 [main:302] - generating value of type = TestClass false depth = 3
2021-03-12 10:47:32,062 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:47:32,148 [main:194] - Type params = []
2021-03-12 10:47:32,233 [main:302] - generating value of type = Test false depth = 5
2021-03-12 10:47:32,233 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:32,436 [main:302] - generating value of type = TestClass false depth = 7
2021-03-12 10:47:32,437 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:47:32,510 [main:194] - Type params = []
2021-03-12 10:47:32,583 [main:302] - generating value of type = Test false depth = 9
2021-03-12 10:47:32,583 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:47:32,768 [main:302] - generating value of type = Delegate false depth = 11
2021-03-12 10:47:32,769 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:47:32,943 [main:43] - Try №0
2021-03-12 10:47:41,725 [main:69] - Trying to insert fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}
2021-03-12 10:47:41,940 [main:66] - Compilation checking started
2021-03-12 10:47:42,890 [main:103] - Trying to change 64 nodes
2021-03-12 10:47:42,890 [main:107] - replacing (it, Char)
2021-03-12 10:47:42,891 [main:50] - replacing it Char
2021-03-12 10:47:42,891 [main:54] - Getting value of type Char
2021-03-12 10:47:43,027 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:47:43,028 [main:58] - GENERATED VALUE OF TYPE Char = '砧'
2021-03-12 10:47:43,028 [main:61] - GENERATED IS CALL =false
2021-03-12 10:47:43,184 [main:67] - randomType = Set<Test>
2021-03-12 10:47:43,185 [main:106] - GETTING Char from Test
2021-03-12 10:47:43,194 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]]
2021-03-12 10:47:43,194 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:47:43,389 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:43,391 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442)
2021-03-12 10:47:43,391 [main:114] - replacement of it of type Char is (TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442)
2021-03-12 10:47:43,574 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:47:43,575 [main:66] - Compilation checking started
2021-03-12 10:47:44,266 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast(it)

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast(it - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        if (prope3.size < 14) return
        print("check")
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / 10
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % 10 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    var fu1 = 0
    for (prope6 in 1..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    do {
        var prope6 = read();
        if (prope6 == -1) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:47:44,268 [main:107] - replacing (14, Int)
2021-03-12 10:47:44,270 [main:50] - replacing 14 Int
2021-03-12 10:47:44,270 [main:54] - Getting value of type Int
2021-03-12 10:47:44,427 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:44,429 [main:58] - GENERATED VALUE OF TYPE Int = -1678073752
2021-03-12 10:47:44,429 [main:61] - GENERATED IS CALL =false
2021-03-12 10:47:44,900 [main:67] - randomType = ArrayList<Float?>
2021-03-12 10:47:45,042 [main:302] - generating value of type = ArrayList<Float?> false depth = 0
2021-03-12 10:47:45,217 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Float?): ArrayList<Float?> = TODO()
2021-03-12 10:47:45,220 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Float?): ArrayList<Float?> = TODO()
2021-03-12 10:47:45,367 [main:302] - generating value of type = Float true depth = 3
2021-03-12 10:47:45,370 [main:95] - GENERATED = arrayListOf<Float?>(0.03851676f)
2021-03-12 10:47:45,591 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3a46b3c7]
2021-03-12 10:47:45,591 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2ab8fb0d]
2021-03-12 10:47:45,592 [main:78] - Generated call from random type = (arrayListOf<Float?>(0.03851676f)).toArray().contentDeepHashCode()
2021-03-12 10:47:45,593 [main:106] - GETTING Int from String
2021-03-12 10:47:45,627 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2148126c]]
2021-03-12 10:47:45,628 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2148126c]
2021-03-12 10:47:45,771 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 10:47:45,918 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 10:47:45,920 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 10:47:46,068 [main:302] - generating value of type = Char true depth = 3
2021-03-12 10:47:46,070 [main:95] - GENERATED = charArrayOf('虣')
2021-03-12 10:47:46,203 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:46,332 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:47:46,334 [main:117] - GENERATED CALL = (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)
2021-03-12 10:47:46,334 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4883c638]]
2021-03-12 10:47:46,335 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:47:46,462 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:47:46,463 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4883c638]
2021-03-12 10:47:46,618 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:46,619 [main:117] - GENERATED CALL = (Delegate().test).compareTo("iipum").ushr(-1168222992)
2021-03-12 10:47:46,620 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@361b25cf]]
2021-03-12 10:47:46,620 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:47:46,620 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@361b25cf]
2021-03-12 10:47:46,748 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:47:46,750 [main:117] - GENERATED CALL = (Delegate().test).compareTo(Delegate().testDelegated).times(-124)
2021-03-12 10:47:46,750 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7630471]]
2021-03-12 10:47:46,750 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:47:46,750 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7630471]
2021-03-12 10:47:46,870 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:46,996 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:46,998 [main:117] - GENERATED CALL = (Delegate().test).compareTo(Delegate().testDelegated).coerceIn(-547680131, 91968089)
2021-03-12 10:47:46,998 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7480b7cd]]
2021-03-12 10:47:46,998 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7480b7cd]
2021-03-12 10:47:47,113 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:47:47,115 [main:117] - GENERATED CALL = (Delegate().test).length.compareTo(120)
2021-03-12 10:47:47,115 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@576593bd]]
2021-03-12 10:47:47,115 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@576593bd]
2021-03-12 10:47:47,234 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:47,236 [main:117] - GENERATED CALL = (Delegate().test).length.coerceAtMost(-1788887391)
2021-03-12 10:47:47,236 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@70ed62]]
2021-03-12 10:47:47,236 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:47:47,358 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:47,360 [main:117] - GENERATED CALL = (Delegate().test).get(-109942855).code
2021-03-12 10:47:47,360 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@359f4427]]
2021-03-12 10:47:47,360 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@359f4427]
2021-03-12 10:47:47,474 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:47,477 [main:117] - GENERATED CALL = (Delegate().test).length.rotateRight(-1156705137)
2021-03-12 10:47:47,477 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50433c48]]
2021-03-12 10:47:47,477 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50433c48]
2021-03-12 10:47:47,621 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:47:47,785 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:47,907 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:47:47,910 [main:117] - GENERATED CALL = (Delegate().test).lastIndexOf('즘', 1794455999, true)
2021-03-12 10:47:47,910 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57361d3e]]
2021-03-12 10:47:47,911 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57361d3e]
2021-03-12 10:47:47,911 [main:117] - GENERATED CALL = (Delegate().test).count()
2021-03-12 10:47:47,911 [main:114] - replacement of 14 of type Int is (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)
2021-03-12 10:47:48,035 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:47:48,035 [main:66] - Compilation checking started
2021-03-12 10:47:48,693 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast(it)

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast(it - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print("check")
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / 10
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % 10 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    var fu1 = 0
    for (prope6 in 1..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    do {
        var prope6 = read();
        if (prope6 == -1) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:47:48,695 [main:107] - replacing (fu1, Int)
2021-03-12 10:47:48,696 [main:50] - replacing fu1 Int
2021-03-12 10:47:48,697 [main:54] - Getting value of type Int
2021-03-12 10:47:48,827 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:48,829 [main:58] - GENERATED VALUE OF TYPE Int = 756119530
2021-03-12 10:47:48,829 [main:61] - GENERATED IS CALL =false
2021-03-12 10:47:48,831 [main:67] - randomType = String
2021-03-12 10:47:48,962 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:47:49,000 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:47:49,135 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:49,137 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@45f6aaac]
2021-03-12 10:47:49,137 [main:78] - Generated call from random type = ("fwais").get(-823775692).toInt()
2021-03-12 10:47:49,138 [main:106] - GETTING Int from Test
2021-03-12 10:47:49,148 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a7d2e2a]]
2021-03-12 10:47:49,148 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a7d2e2a]
2021-03-12 10:47:49,303 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:47:49,305 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.compareTo(Delegate().testDelegated, true)
2021-03-12 10:47:49,305 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa5e6af]]
2021-03-12 10:47:49,305 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa5e6af]
2021-03-12 10:47:49,305 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.toInt()
2021-03-12 10:47:49,306 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@412c7b5e]]
2021-03-12 10:47:49,306 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]
2021-03-12 10:47:49,446 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:47:49,447 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@412c7b5e]
2021-03-12 10:47:49,574 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:47:49,578 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).equals("jhgxu").compareTo(false)
2021-03-12 10:47:49,578 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76]]
2021-03-12 10:47:49,578 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.length
2021-03-12 10:47:49,579 [main:114] - replacement of fu1 of type Int is (TestClass(TestClass(TestClass(Delegate()))).foo).test.length
2021-03-12 10:47:49,706 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:47:49,707 [main:66] - Compilation checking started
2021-03-12 10:47:50,099 [main:49] - Result = false
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast(it)

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast(it - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print("check")
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / 10
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % 10 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = 0
    for (prope6 in 1..size) {
        val prope5 = size - prope6
        (TestClass(TestClass(TestClass(Delegate()))).foo).test.length += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    do {
        var prope6 = read();
        if (prope6 == -1) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:47:50,100 [main:107] - replacing (1, Int)
2021-03-12 10:47:50,102 [main:50] - replacing 1 Int
2021-03-12 10:47:50,102 [main:54] - Getting value of type Int
2021-03-12 10:47:50,230 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:50,231 [main:58] - GENERATED VALUE OF TYPE Int = -662735597
2021-03-12 10:47:50,232 [main:61] - GENERATED IS CALL =false
2021-03-12 10:47:50,237 [main:67] - randomType = Delegate
2021-03-12 10:47:50,367 [main:302] - generating value of type = Delegate false depth = 0
2021-03-12 10:47:50,368 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:47:50,387 [main:78] - Generated call from random type = (Delegate()).test.length
2021-03-12 10:47:50,388 [main:106] - GETTING Int from TestClass
2021-03-12 10:47:50,406 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76]]
2021-03-12 10:47:50,406 [main:117] - GENERATED CALL = (testClass).test.length
2021-03-12 10:47:50,406 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a7d2e2a]]
2021-03-12 10:47:50,406 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a7d2e2a]
2021-03-12 10:47:50,537 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:47:50,539 [main:117] - GENERATED CALL = (testClass).test.compareTo(Delegate().test, true)
2021-03-12 10:47:50,539 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa5e6af]]
2021-03-12 10:47:50,540 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa5e6af]
2021-03-12 10:47:50,540 [main:117] - GENERATED CALL = (testClass).test.toInt()
2021-03-12 10:47:50,540 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@23f2a5db], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@412c7b5e]]
2021-03-12 10:47:50,540 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@23f2a5db]
2021-03-12 10:47:50,665 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:47:50,666 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@412c7b5e]
2021-03-12 10:47:50,785 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:47:50,787 [main:117] - GENERATED CALL = (testClass).equals("vmlty").compareTo(false)
2021-03-12 10:47:50,787 [main:114] - replacement of 1 of type Int is (testClass).test.toInt()
2021-03-12 10:47:50,934 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:47:50,934 [main:66] - Compilation checking started
2021-03-12 10:47:51,575 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast(it)

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast(it - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print("check")
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / 10
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % 10 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = 0
    for (prope6 in 1..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if (prope6 == -(testClass).test.toInt()) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:47:51,578 [main:107] - replacing (10, Int)
2021-03-12 10:47:51,578 [main:50] - replacing 10 Int
2021-03-12 10:47:51,578 [main:54] - Getting value of type Int
2021-03-12 10:47:51,709 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:51,711 [main:58] - GENERATED VALUE OF TYPE Int = -758278363
2021-03-12 10:47:51,712 [main:61] - GENERATED IS CALL =false
2021-03-12 10:47:51,720 [main:67] - randomType = Delegate
2021-03-12 10:47:51,840 [main:302] - generating value of type = Delegate false depth = 0
2021-03-12 10:47:51,842 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:47:51,859 [main:78] - Generated call from random type = (Delegate()).test.length
2021-03-12 10:47:51,860 [main:106] - GETTING Int from String
2021-03-12 10:47:51,897 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57361d3e]]
2021-03-12 10:47:51,897 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57361d3e]
2021-03-12 10:47:51,897 [main:117] - GENERATED CALL = (Delegate().test).count()
2021-03-12 10:47:51,898 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56f94ad2]]
2021-03-12 10:47:51,898 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:47:51,898 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56f94ad2]
2021-03-12 10:47:52,032 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:47:52,034 [main:117] - GENERATED CALL = (Delegate().test).compareTo(Delegate().test).div(-46)
2021-03-12 10:47:52,034 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2148126c]]
2021-03-12 10:47:52,034 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:47:52,157 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:52,289 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:52,291 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2148126c]
2021-03-12 10:47:52,424 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 10:47:52,584 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-12 10:47:52,586 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-12 10:47:52,868 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:47:52,870 [main:95] - GENERATED = CharArray(1309212874)
2021-03-12 10:47:52,983 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:53,104 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:47:53,106 [main:117] - GENERATED CALL = (Delegate().test).subSequence(1541420331, 1285810891).lastIndexOfAny(CharArray(1309212874), -1363802802, false)
2021-03-12 10:47:53,106 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa5e6af]]
2021-03-12 10:47:53,106 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa5e6af]
2021-03-12 10:47:53,106 [main:117] - GENERATED CALL = (Delegate().test).toInt()
2021-03-12 10:47:53,106 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36ec390a]]
2021-03-12 10:47:53,106 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:47:53,229 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:47:53,232 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36ec390a]
2021-03-12 10:47:53,349 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:53,351 [main:117] - GENERATED CALL = (Delegate().test).compareTo("iiwgd").shr(-1274607364)
2021-03-12 10:47:53,351 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c705ec3]]
2021-03-12 10:47:53,351 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:47:53,460 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:53,573 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:53,575 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c705ec3]
2021-03-12 10:47:53,682 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:47:53,805 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:53,961 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:47:53,963 [main:117] - GENERATED CALL = (Delegate().test).subSequence(1173446710, -1628087295).indexOf('搑', -865445469, true)
2021-03-12 10:47:53,963 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47d65e43]]
2021-03-12 10:47:53,964 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47d65e43]
2021-03-12 10:47:54,125 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 10:47:54,127 [main:302] - generating value of type = Int true depth = 1
2021-03-12 10:47:54,130 [main:117] - GENERATED CALL = (Delegate().test).sumOf({a: Char -> -1114052457})
2021-03-12 10:47:54,131 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@361b25cf]]
2021-03-12 10:47:54,131 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@361b25cf]
2021-03-12 10:47:54,248 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:47:54,250 [main:117] - GENERATED CALL = (Delegate().test).length.times(-114)
2021-03-12 10:47:54,250 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aae0627]]
2021-03-12 10:47:54,250 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:47:54,368 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:54,487 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:54,489 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aae0627]
2021-03-12 10:47:54,606 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 10:47:54,608 [main:302] - generating value of type = Int true depth = 1
2021-03-12 10:47:54,609 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-1444325889, 784697210).sumBy({a: Char -> 131851792})
2021-03-12 10:47:54,609 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76]]
2021-03-12 10:47:54,610 [main:117] - GENERATED CALL = (Delegate().test).length
2021-03-12 10:47:54,610 [main:114] - replacement of 10 of type Int is (Delegate().test).compareTo("iiwgd").shr(-1274607364)
2021-03-12 10:47:54,734 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:47:54,734 [main:66] - Compilation checking started
2021-03-12 10:47:55,331 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast(it)

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast(it - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print("check")
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % 10 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = 0
    for (prope6 in 1..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if (prope6 == -(testClass).test.toInt()) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:47:55,334 [main:107] - replacing (0, Int)
2021-03-12 10:47:55,334 [main:50] - replacing 0 Int
2021-03-12 10:47:55,334 [main:54] - Getting value of type Int
2021-03-12 10:47:55,459 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:55,461 [main:58] - GENERATED VALUE OF TYPE Int = 1742539153
2021-03-12 10:47:55,461 [main:61] - GENERATED IS CALL =false
2021-03-12 10:47:55,638 [main:67] - randomType = Short
2021-03-12 10:47:55,780 [main:302] - generating value of type = Short true depth = 0
2021-03-12 10:47:55,844 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5d394592]
2021-03-12 10:47:55,961 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:47:55,964 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56f94ad2]
2021-03-12 10:47:56,086 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:47:56,088 [main:78] - Generated call from random type = (-8218).compareTo(60).div(43)
2021-03-12 10:47:56,089 [main:106] - GETTING Int from String
2021-03-12 10:47:56,126 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3289e3a9]]
2021-03-12 10:47:56,126 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3289e3a9]
2021-03-12 10:47:56,126 [main:117] - GENERATED CALL = (Delegate().testDelegated).length.unaryPlus()
2021-03-12 10:47:56,127 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2225a51b]]
2021-03-12 10:47:56,127 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:47:56,253 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:47:56,255 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2225a51b]
2021-03-12 10:47:56,366 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:56,368 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo("hvvnz").xor(1096634541)
2021-03-12 10:47:56,368 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@467c07f4]]
2021-03-12 10:47:56,368 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:47:56,368 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo(testClass.test).absoluteValue
2021-03-12 10:47:56,368 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@575604ff]]
2021-03-12 10:47:56,368 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:47:56,481 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:56,598 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:56,599 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(-1343960222, -1103251632).length
2021-03-12 10:47:56,599 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2148126c]]
2021-03-12 10:47:56,599 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:47:56,742 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:56,902 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:56,904 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2148126c]
2021-03-12 10:47:57,039 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 10:47:57,155 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-12 10:47:57,158 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-12 10:47:57,523 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:47:57,524 [main:302] - generating value of type = Function1<Int, Char> false depth = 3
2021-03-12 10:47:57,526 [main:302] - generating value of type = Char true depth = 4
2021-03-12 10:47:57,528 [main:95] - GENERATED = CharArray(891573787, {a: Int -> 'ꕦ'})
2021-03-12 10:47:57,645 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:57,816 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:47:57,828 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
2021-03-12 10:47:57,828 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c944389]]
2021-03-12 10:47:57,828 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c944389]
2021-03-12 10:47:57,829 [main:117] - GENERATED CALL = (Delegate().testDelegated).length.dec()
2021-03-12 10:47:57,829 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@359f4427]]
2021-03-12 10:47:57,829 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:47:57,829 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@359f4427]
2021-03-12 10:47:57,942 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:57,944 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo(Delegate().testDelegated).rotateRight(547435810)
2021-03-12 10:47:57,944 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2d40023b]]
2021-03-12 10:47:57,945 [main:117] - GENERATED CALL = (Delegate().testDelegated).length.sign
2021-03-12 10:47:57,945 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c705ec3]]
2021-03-12 10:47:57,945 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c705ec3]
2021-03-12 10:47:58,055 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:47:58,165 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:58,273 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:47:58,275 [main:117] - GENERATED CALL = (Delegate().testDelegated).indexOf('盙', -966354771, true)
2021-03-12 10:47:58,276 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2102f478]]
2021-03-12 10:47:58,276 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2102f478]
2021-03-12 10:47:58,421 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 10:47:58,550 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-12 10:47:58,554 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-12 10:47:58,836 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:47:58,837 [main:95] - GENERATED = CharArray(1973602384)
2021-03-12 10:47:58,941 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:59,049 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:47:59,051 [main:117] - GENERATED CALL = (Delegate().testDelegated).indexOfAny(CharArray(1973602384), -922033882, false)
2021-03-12 10:47:59,051 [main:114] - replacement of 0 of type Int is (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
2021-03-12 10:47:59,153 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:47:59,154 [main:66] - Compilation checking started
2021-03-12 10:47:59,651 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast(it)

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast(it - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print("check")
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % 10 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in 1..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if (prope6 == -(testClass).test.toInt()) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:47:59,654 [main:107] - replacing (1, Int)
2021-03-12 10:47:59,654 [main:50] - replacing 1 Int
2021-03-12 10:47:59,654 [main:54] - Getting value of type Int
2021-03-12 10:47:59,763 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:47:59,765 [main:58] - GENERATED VALUE OF TYPE Int = 311624765
2021-03-12 10:47:59,765 [main:61] - GENERATED IS CALL =false
2021-03-12 10:47:59,930 [main:67] - randomType = TestClass?
2021-03-12 10:48:00,040 [main:302] - generating value of type = TestClass false depth = 0
2021-03-12 10:48:00,041 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:48:00,146 [main:194] - Type params = []
2021-03-12 10:48:00,258 [main:302] - generating value of type = Test false depth = 2
2021-03-12 10:48:00,261 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:48:00,497 [main:302] - generating value of type = Delegate false depth = 4
2021-03-12 10:48:00,499 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:48:00,515 [main:78] - Generated call from random type = (TestClass(Delegate()))?.test.length
2021-03-12 10:48:00,516 [main:106] - GETTING Int from TestClass
2021-03-12 10:48:00,533 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@23f2a5db], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@412c7b5e]]
2021-03-12 10:48:00,533 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@23f2a5db]
2021-03-12 10:48:00,639 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:00,639 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@412c7b5e]
2021-03-12 10:48:00,750 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:00,752 [main:117] - GENERATED CALL = (testClass).equals("ebwwn").compareTo(true)
2021-03-12 10:48:00,753 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a7d2e2a]]
2021-03-12 10:48:00,753 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a7d2e2a]
2021-03-12 10:48:00,891 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:00,893 [main:117] - GENERATED CALL = (testClass).test.compareTo(Delegate().testDelegated, false)
2021-03-12 10:48:00,893 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa5e6af]]
2021-03-12 10:48:00,893 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa5e6af]
2021-03-12 10:48:00,894 [main:117] - GENERATED CALL = (testClass).test.toInt()
2021-03-12 10:48:00,894 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76]]
2021-03-12 10:48:00,894 [main:117] - GENERATED CALL = (testClass).test.length
2021-03-12 10:48:00,894 [main:114] - replacement of 1 of type Int is 311624765
2021-03-12 10:48:01,022 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 10:48:01,023 [main:66] - Compilation checking started
2021-03-12 10:48:01,560 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast(it)

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast(it - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print("check")
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % 10 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in 311624765..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if (prope6 == -(testClass).test.toInt()) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:01,562 [main:107] - replacing ("check", String)
2021-03-12 10:48:01,563 [main:50] - replacing "check" String
2021-03-12 10:48:01,563 [main:54] - Getting value of type String
2021-03-12 10:48:01,681 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:01,683 [main:58] - GENERATED VALUE OF TYPE String = "pglcu"
2021-03-12 10:48:01,683 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:01,810 [main:67] - randomType = UShort
2021-03-12 10:48:01,923 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 10:48:01,988 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@20545fac]
2021-03-12 10:48:01,988 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@130626b9]
2021-03-12 10:48:02,142 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:02,145 [main:78] - Generated call from random type = (7897.toUShort()).toLong().toString(1386169886)
2021-03-12 10:48:02,145 [main:114] - replacement of "check" of type String is (7897.toUShort()).toLong().toString(1386169886)
2021-03-12 10:48:02,275 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:02,276 [main:66] - Compilation checking started
2021-03-12 10:48:02,905 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast(it)

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast(it - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % 10 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in 311624765..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if (prope6 == -(testClass).test.toInt()) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:02,907 [main:107] - replacing (it, Char)
2021-03-12 10:48:02,907 [main:50] - replacing it Char
2021-03-12 10:48:02,907 [main:54] - Getting value of type Char
2021-03-12 10:48:03,037 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:48:03,039 [main:58] - GENERATED VALUE OF TYPE Char = 'ꑗ'
2021-03-12 10:48:03,039 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:03,048 [main:67] - randomType = TestClass
2021-03-12 10:48:03,161 [main:302] - generating value of type = TestClass false depth = 0
2021-03-12 10:48:03,163 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:48:03,275 [main:194] - Type params = []
2021-03-12 10:48:03,381 [main:302] - generating value of type = Test false depth = 2
2021-03-12 10:48:03,382 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:48:03,598 [main:302] - generating value of type = TestClass false depth = 4
2021-03-12 10:48:03,599 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:48:03,699 [main:194] - Type params = []
2021-03-12 10:48:03,835 [main:302] - generating value of type = Test false depth = 6
2021-03-12 10:48:03,836 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:48:04,053 [main:302] - generating value of type = Delegate false depth = 8
2021-03-12 10:48:04,055 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:48:04,072 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:48:04,179 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:04,181 [main:78] - Generated call from random type = (TestClass(TestClass(Delegate()))).test.get(1992032244)
2021-03-12 10:48:04,182 [main:106] - GETTING Char from Test
2021-03-12 10:48:04,189 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]]
2021-03-12 10:48:04,189 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:48:04,291 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:04,293 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.get(913869187)
2021-03-12 10:48:04,293 [main:114] - replacement of it of type Char is 'ꑗ'
2021-03-12 10:48:04,399 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CHARACTER_CONSTANT)
2021-03-12 10:48:04,399 [main:66] - Compilation checking started
2021-03-12 10:48:04,935 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast(it)

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % 10 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in 311624765..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if (prope6 == -(testClass).test.toInt()) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:04,937 [main:107] - replacing (fu1, Int)
2021-03-12 10:48:04,937 [main:50] - replacing fu1 Int
2021-03-12 10:48:04,937 [main:54] - Getting value of type Int
2021-03-12 10:48:05,052 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:05,054 [main:58] - GENERATED VALUE OF TYPE Int = -488923980
2021-03-12 10:48:05,054 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:05,180 [main:67] - randomType = Float
2021-03-12 10:48:05,318 [main:302] - generating value of type = Float true depth = 0
2021-03-12 10:48:05,381 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1af064a4]
2021-03-12 10:48:05,382 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e0b3d79]
2021-03-12 10:48:05,382 [main:78] - Generated call from random type = (0.47770697f).toInt().countOneBits()
2021-03-12 10:48:05,383 [main:106] - GETTING Int from String
2021-03-12 10:48:05,416 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@52936640]]
2021-03-12 10:48:05,416 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:05,417 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@52936640]
2021-03-12 10:48:05,417 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo(testClass.test).takeHighestOneBit()
2021-03-12 10:48:05,417 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c944389]]
2021-03-12 10:48:05,417 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c944389]
2021-03-12 10:48:05,417 [main:117] - GENERATED CALL = (Delegate().testDelegated).length.dec()
2021-03-12 10:48:05,417 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@359f4427]]
2021-03-12 10:48:05,417 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@359f4427]
2021-03-12 10:48:05,521 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:05,523 [main:117] - GENERATED CALL = (Delegate().testDelegated).length.rotateRight(1855444607)
2021-03-12 10:48:05,523 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f70777b]]
2021-03-12 10:48:05,523 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:05,626 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:05,628 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f70777b]
2021-03-12 10:48:05,629 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo("gmteh").inc()
2021-03-12 10:48:05,629 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6ceaef8e]]
2021-03-12 10:48:05,629 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:05,629 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6ceaef8e]
2021-03-12 10:48:05,629 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo(Delegate().test).countTrailingZeroBits()
2021-03-12 10:48:05,629 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17b96d56]]
2021-03-12 10:48:05,630 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17b96d56]
2021-03-12 10:48:05,734 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:05,736 [main:117] - GENERATED CALL = (Delegate().testDelegated).length.plus(-39)
2021-03-12 10:48:05,736 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2148126c]]
2021-03-12 10:48:05,736 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:48:05,841 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:05,950 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:05,951 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2148126c]
2021-03-12 10:48:06,069 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 10:48:06,190 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 10:48:06,192 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 10:48:06,308 [main:302] - generating value of type = Char true depth = 3
2021-03-12 10:48:06,310 [main:95] - GENERATED = charArrayOf('佫')
2021-03-12 10:48:06,419 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:06,566 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:06,568 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(1917989574, 542213977).lastIndexOfAny(charArrayOf('佫'), 1241247673, false)
2021-03-12 10:48:06,569 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@619a61c1]]
2021-03-12 10:48:06,569 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:06,721 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:06,722 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@619a61c1]
2021-03-12 10:48:06,825 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:06,827 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo("phdyk").and(1322991494)
2021-03-12 10:48:06,827 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f70777b]]
2021-03-12 10:48:06,827 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f70777b]
2021-03-12 10:48:06,827 [main:117] - GENERATED CALL = (Delegate().testDelegated).length.inc()
2021-03-12 10:48:06,827 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@70ed62]]
2021-03-12 10:48:06,827 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:48:06,928 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:06,930 [main:117] - GENERATED CALL = (Delegate().testDelegated).get(96413825).code
2021-03-12 10:48:06,930 [main:114] - replacement of fu1 of type Int is (Delegate().testDelegated).length.rotateRight(1855444607)
2021-03-12 10:48:07,032 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:07,032 [main:66] - Compilation checking started
2021-03-12 10:48:07,371 [main:49] - Result = false
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast(it)

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % 10 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in 311624765..size) {
        val prope5 = size - prope6
        (Delegate().testDelegated).length.rotateRight(1855444607) += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if (prope6 == -(testClass).test.toInt()) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:07,373 [main:107] - replacing (prope6 == -(testClass).test.toInt(), Boolean)
2021-03-12 10:48:07,373 [main:50] - replacing prope6 == -(testClass).test.toInt() Boolean
2021-03-12 10:48:07,373 [main:54] - Getting value of type Boolean
2021-03-12 10:48:07,492 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:07,494 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:48:07,494 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:08,241 [main:67] - randomType = Collection<Function2<Sequence<Kla0>, TestClass, MutableMap<Short, Byte>>>
2021-03-12 10:48:08,242 [main:106] - GETTING Boolean from Test
2021-03-12 10:48:08,250 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2130eec1]]
2021-03-12 10:48:08,250 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]
2021-03-12 10:48:08,359 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:08,359 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2130eec1]
2021-03-12 10:48:08,470 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:08,471 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).equals("vmzuv").xor(true)
2021-03-12 10:48:08,472 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2eae22b9]]
2021-03-12 10:48:08,472 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2eae22b9]
2021-03-12 10:48:08,587 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:08,699 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:08,700 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.startsWith("zevmz", true)
2021-03-12 10:48:08,700 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc62453]]
2021-03-12 10:48:08,701 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]
2021-03-12 10:48:08,860 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:08,860 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc62453]
2021-03-12 10:48:09,011 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:09,011 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).equals("qnkxt").equals("qcdjp")
2021-03-12 10:48:09,011 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675470d]]
2021-03-12 10:48:09,011 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675470d]
2021-03-12 10:48:09,012 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.matches(Delegate().test)
2021-03-12 10:48:09,012 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@41e95d06]]
2021-03-12 10:48:09,012 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]
2021-03-12 10:48:09,122 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@41e95d06]
2021-03-12 10:48:09,223 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:09,224 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)
2021-03-12 10:48:09,225 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]]
2021-03-12 10:48:09,225 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]
2021-03-12 10:48:09,323 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).equals(null)
2021-03-12 10:48:09,323 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2c02c021]]
2021-03-12 10:48:09,323 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]
2021-03-12 10:48:09,427 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:09,427 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2c02c021]
2021-03-12 10:48:09,532 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:09,533 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).equals("kidms").or(false)
2021-03-12 10:48:09,534 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@ed6bc2e]]
2021-03-12 10:48:09,534 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]
2021-03-12 10:48:09,638 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:09,638 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@ed6bc2e]
2021-03-12 10:48:09,638 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).equals("qdfeb").not()
2021-03-12 10:48:09,639 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@624e1774]]
2021-03-12 10:48:09,639 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@624e1774]
2021-03-12 10:48:09,790 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:09,791 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.equals("huakp")
2021-03-12 10:48:09,791 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72597845]]
2021-03-12 10:48:09,791 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72597845]
2021-03-12 10:48:09,791 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.toBoolean()
2021-03-12 10:48:09,791 [main:114] - replacement of prope6 == -(testClass).test.toInt() of type Boolean is (TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)
2021-03-12 10:48:09,912 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:09,912 [main:66] - Compilation checking started
2021-03-12 10:48:10,439 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast(it)

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % 10 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in 311624765..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:10,441 [main:107] - replacing (it, Char)
2021-03-12 10:48:10,442 [main:50] - replacing it Char
2021-03-12 10:48:10,442 [main:54] - Getting value of type Char
2021-03-12 10:48:10,578 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:48:10,580 [main:58] - GENERATED VALUE OF TYPE Char = '髅'
2021-03-12 10:48:10,580 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:10,585 [main:67] - randomType = Delegate
2021-03-12 10:48:10,696 [main:302] - generating value of type = Delegate false depth = 0
2021-03-12 10:48:10,697 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:48:10,715 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:48:10,822 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:10,824 [main:78] - Generated call from random type = (Delegate()).test.get(-27508826)
2021-03-12 10:48:10,825 [main:106] - GETTING Char from String
2021-03-12 10:48:10,858 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Char): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59c80365]]
2021-03-12 10:48:10,858 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:48:10,969 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:11,123 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:11,125 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Char): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59c80365]
2021-03-12 10:48:11,283 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:11,396 [main:302] - generating value of type = Function1<Int, Char> false depth = 0
2021-03-12 10:48:11,398 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:48:11,400 [main:117] - GENERATED CALL = (Delegate().test).subSequence(504717458, 1734860127).getOrElse(88987411, {a: Int -> '糿'})
2021-03-12 10:48:11,400 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b], public final operator fun minus(other: kotlin.Int): kotlin.Char defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4a5a233b]]
2021-03-12 10:48:11,400 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:48:11,517 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:11,519 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Int): kotlin.Char defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4a5a233b]
2021-03-12 10:48:11,618 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:11,620 [main:117] - GENERATED CALL = (Delegate().test).get(-249961370).minus(-1448147469)
2021-03-12 10:48:11,620 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b], public final operator fun plus(other: kotlin.Int): kotlin.Char defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@54e83c70]]
2021-03-12 10:48:11,620 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:48:11,720 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:11,722 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Int): kotlin.Char defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@54e83c70]
2021-03-12 10:48:11,831 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:11,833 [main:117] - GENERATED CALL = (Delegate().test).get(289066916).plus(1091827480)
2021-03-12 10:48:11,833 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fa99830]]
2021-03-12 10:48:11,833 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fa99830]
2021-03-12 10:48:11,833 [main:117] - GENERATED CALL = (Delegate().test).length.toChar()
2021-03-12 10:48:11,833 [main:113] - Case = [public inline fun kotlin.CharSequence.reduceRightIndexed(operation: (index: kotlin.Int, kotlin.Char, acc: kotlin.Char) -> kotlin.Char): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ce98a62]]
2021-03-12 10:48:11,833 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.reduceRightIndexed(operation: (index: kotlin.Int, kotlin.Char, acc: kotlin.Char) -> kotlin.Char): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ce98a62]
2021-03-12 10:48:11,935 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] Int, Char, [@kotlin.ParameterName] Char, Char> false depth = 0
2021-03-12 10:48:11,938 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:48:11,940 [main:117] - GENERATED CALL = (Delegate().test).reduceRightIndexed({a: Int, b: Char, c: Char -> '닎'})
2021-03-12 10:48:11,941 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecaseChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a891564]]
2021-03-12 10:48:11,941 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:48:12,047 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:12,050 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecaseChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a891564]
2021-03-12 10:48:12,050 [main:117] - GENERATED CALL = (Delegate().test).get(1731212055).titlecaseChar()
2021-03-12 10:48:12,050 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Char): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59c80365]]
2021-03-12 10:48:12,050 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Char): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59c80365]
2021-03-12 10:48:12,160 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:12,262 [main:302] - generating value of type = Function1<Int, Char> false depth = 0
2021-03-12 10:48:12,264 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:48:12,265 [main:117] - GENERATED CALL = (Delegate().test).getOrElse(-851603572, {a: Int -> '됑'})
2021-03-12 10:48:12,266 [main:113] - Case = [public fun kotlin.CharSequence.last(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@948367e]]
2021-03-12 10:48:12,266 [main:149] - GENERATING call of type public fun kotlin.CharSequence.last(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@948367e]
2021-03-12 10:48:12,266 [main:117] - GENERATED CALL = (Delegate().test).last()
2021-03-12 10:48:12,266 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Char): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3979ec0]]
2021-03-12 10:48:12,266 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:48:12,414 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:12,534 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:12,535 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> kotlin.Char): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3979ec0]
2021-03-12 10:48:12,637 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:12,739 [main:302] - generating value of type = Function1<Int, Char> false depth = 0
2021-03-12 10:48:12,741 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:48:12,743 [main:117] - GENERATED CALL = (Delegate().test).subSequence(483319764, 1167761663).elementAtOrElse(1848743977, {a: Int -> ''})
2021-03-12 10:48:12,743 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.random(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac945b0]]
2021-03-12 10:48:12,743 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:48:12,843 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:12,944 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:12,946 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.random(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac945b0]
2021-03-12 10:48:12,946 [main:117] - GENERATED CALL = (Delegate().test).subSequence(623045897, 1841671305).random()
2021-03-12 10:48:12,946 [main:114] - replacement of it of type Char is (Delegate()).test.get(-27508826)
2021-03-12 10:48:13,047 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:13,048 [main:66] - Compilation checking started
2021-03-12 10:48:13,521 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % 10 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in 311624765..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:13,523 [main:107] - replacing (this, Ty0)
2021-03-12 10:48:13,525 [main:50] - replacing this Ty0
2021-03-12 10:48:13,525 [main:54] - Getting value of type Ty0
2021-03-12 10:48:13,627 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 10:48:13,632 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 10:48:13,638 [main:67] - randomType = Delegate
2021-03-12 10:48:13,767 [main:302] - generating value of type = Delegate false depth = 0
2021-03-12 10:48:13,769 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:48:13,784 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:13,814 [main:106] - GETTING Ty0 from Test
2021-03-12 10:48:13,821 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:13,822 [main:106] - GETTING Ty0 from TestClass
2021-03-12 10:48:13,834 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:13,834 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:13,835 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:13,835 [main:111] - Cant find and generate replacement for this type Ty0
2021-03-12 10:48:13,835 [main:107] - replacing (this, Ty0)
2021-03-12 10:48:13,835 [main:50] - replacing this Ty0
2021-03-12 10:48:13,835 [main:54] - Getting value of type Ty0
2021-03-12 10:48:13,948 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 10:48:13,953 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 10:48:14,204 [main:67] - randomType = Function2<Kla0, Boolean?, Long>
2021-03-12 10:48:14,205 [main:106] - GETTING Ty0 from Test
2021-03-12 10:48:14,214 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:14,238 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:14,239 [main:106] - GETTING Ty0 from TestClass
2021-03-12 10:48:14,252 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:14,252 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:14,253 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:14,253 [main:111] - Cant find and generate replacement for this type Ty0
2021-03-12 10:48:14,253 [main:107] - replacing (10, Int)
2021-03-12 10:48:14,253 [main:50] - replacing 10 Int
2021-03-12 10:48:14,253 [main:54] - Getting value of type Int
2021-03-12 10:48:14,353 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:14,355 [main:58] - GENERATED VALUE OF TYPE Int = -1983826872
2021-03-12 10:48:14,355 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:14,358 [main:67] - randomType = String
2021-03-12 10:48:14,458 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:14,481 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:14,482 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@33e99277]
2021-03-12 10:48:14,584 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:14,586 [main:78] - Generated call from random type = ("rhxqk").compareTo(Delegate().test).rem(17)
2021-03-12 10:48:14,587 [main:106] - GETTING Int from String
2021-03-12 10:48:14,617 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa5e6af]]
2021-03-12 10:48:14,617 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa5e6af]
2021-03-12 10:48:14,617 [main:117] - GENERATED CALL = (testClass.test).toInt()
2021-03-12 10:48:14,617 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3646f314]]
2021-03-12 10:48:14,617 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:14,720 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:14,722 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3646f314]
2021-03-12 10:48:14,826 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:14,828 [main:117] - GENERATED CALL = (testClass.test).compareTo("zvlaf").minus(89)
2021-03-12 10:48:14,828 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@619a61c1]]
2021-03-12 10:48:14,828 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:14,828 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@619a61c1]
2021-03-12 10:48:14,930 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:14,932 [main:117] - GENERATED CALL = (testClass.test).compareTo(Delegate().testDelegated).and(-1500871549)
2021-03-12 10:48:14,932 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3289e3a9]]
2021-03-12 10:48:14,932 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3289e3a9]
2021-03-12 10:48:14,932 [main:117] - GENERATED CALL = (testClass.test).length.unaryPlus()
2021-03-12 10:48:14,932 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@52936640]]
2021-03-12 10:48:14,932 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@52936640]
2021-03-12 10:48:14,933 [main:117] - GENERATED CALL = (testClass.test).length.takeHighestOneBit()
2021-03-12 10:48:14,933 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c944389]]
2021-03-12 10:48:14,933 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:14,933 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c944389]
2021-03-12 10:48:14,933 [main:117] - GENERATED CALL = (testClass.test).compareTo(Delegate().test).dec()
2021-03-12 10:48:14,933 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6ceaef8e]]
2021-03-12 10:48:14,933 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:14,933 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6ceaef8e]
2021-03-12 10:48:14,933 [main:117] - GENERATED CALL = (testClass.test).compareTo(testClass.test).countTrailingZeroBits()
2021-03-12 10:48:14,933 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36ec390a]]
2021-03-12 10:48:14,933 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36ec390a]
2021-03-12 10:48:15,066 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:15,068 [main:117] - GENERATED CALL = (testClass.test).length.shr(1581572849)
2021-03-12 10:48:15,068 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@359f4427]]
2021-03-12 10:48:15,068 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:15,068 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@359f4427]
2021-03-12 10:48:15,190 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:15,192 [main:117] - GENERATED CALL = (testClass.test).compareTo(Delegate().test).rotateRight(696684049)
2021-03-12 10:48:15,192 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1870e28d]]
2021-03-12 10:48:15,192 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:15,298 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:15,300 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1870e28d]
2021-03-12 10:48:15,400 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:15,402 [main:117] - GENERATED CALL = (testClass.test).compareTo("yjvtq").or(2019347172)
2021-03-12 10:48:15,402 [main:114] - replacement of 10 of type Int is -1983826872
2021-03-12 10:48:15,503 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 10:48:15,504 [main:66] - Compilation checking started
2021-03-12 10:48:16,055 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in 311624765..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return fu1
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:16,057 [main:107] - replacing (fu1, Int)
2021-03-12 10:48:16,058 [main:50] - replacing fu1 Int
2021-03-12 10:48:16,058 [main:54] - Getting value of type Int
2021-03-12 10:48:16,171 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:16,172 [main:58] - GENERATED VALUE OF TYPE Int = 754981294
2021-03-12 10:48:16,173 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:16,286 [main:67] - randomType = UByte
2021-03-12 10:48:16,386 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:48:16,422 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3d1d5156]
2021-03-12 10:48:16,423 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4b674606]
2021-03-12 10:48:16,524 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:16,525 [main:78] - Generated call from random type = (100.toUByte()).toByte().times(-124)
2021-03-12 10:48:16,526 [main:106] - GETTING Int from String
2021-03-12 10:48:16,545 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e0b3d79]]
2021-03-12 10:48:16,545 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:16,671 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:16,672 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e0b3d79]
2021-03-12 10:48:16,673 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo("flbkh").countOneBits()
2021-03-12 10:48:16,673 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22345898]]
2021-03-12 10:48:16,673 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:48:16,775 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:16,877 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:16,880 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22345898]
2021-03-12 10:48:16,986 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:48:16,987 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:48:16,989 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(186114089, 1751997006).indexOfFirst({a: Char -> true})
2021-03-12 10:48:16,989 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aae0627]]
2021-03-12 10:48:16,989 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:48:17,094 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:17,198 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:17,200 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aae0627]
2021-03-12 10:48:17,306 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 10:48:17,307 [main:302] - generating value of type = Int true depth = 1
2021-03-12 10:48:17,309 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(930284336, 636527603).sumBy({a: Char -> 1149286825})
2021-03-12 10:48:17,309 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c944389]]
2021-03-12 10:48:17,309 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c944389]
2021-03-12 10:48:17,309 [main:117] - GENERATED CALL = (Delegate().testDelegated).length.dec()
2021-03-12 10:48:17,309 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50433c48]]
2021-03-12 10:48:17,309 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50433c48]
2021-03-12 10:48:17,408 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:48:17,511 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:17,618 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:17,620 [main:117] - GENERATED CALL = (Delegate().testDelegated).lastIndexOf('楤', 218093412, false)
2021-03-12 10:48:17,620 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36ec390a]]
2021-03-12 10:48:17,620 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:17,620 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36ec390a]
2021-03-12 10:48:17,796 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:17,799 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
2021-03-12 10:48:17,799 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3646f314]]
2021-03-12 10:48:17,799 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3646f314]
2021-03-12 10:48:17,955 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:17,956 [main:117] - GENERATED CALL = (Delegate().testDelegated).length.minus(-49)
2021-03-12 10:48:17,957 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3646f314]]
2021-03-12 10:48:17,957 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:17,957 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3646f314]
2021-03-12 10:48:18,062 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:18,064 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo(Delegate().testDelegated).minus(-85)
2021-03-12 10:48:18,064 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7480b7cd]]
2021-03-12 10:48:18,064 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:18,064 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7480b7cd]
2021-03-12 10:48:18,164 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:18,166 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo(Delegate().test).compareTo(-6)
2021-03-12 10:48:18,166 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4883c638]]
2021-03-12 10:48:18,166 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4883c638]
2021-03-12 10:48:18,268 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:18,270 [main:117] - GENERATED CALL = (Delegate().testDelegated).length.ushr(767122337)
2021-03-12 10:48:18,270 [main:114] - replacement of fu1 of type Int is (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
2021-03-12 10:48:18,372 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:18,372 [main:66] - Compilation checking started
2021-03-12 10:48:18,879 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        if (prope4 > 0) {
            print('X')
            prope4--
        }
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in 311624765..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:18,883 [main:107] - replacing ({
            print('X')
            prope4--
        }, Int)
2021-03-12 10:48:18,884 [main:50] - replacing {
            print('X')
            prope4--
        } Int
2021-03-12 10:48:18,884 [main:54] - Getting value of type Int
2021-03-12 10:48:18,995 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:18,996 [main:58] - GENERATED VALUE OF TYPE Int = 612766595
2021-03-12 10:48:18,997 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:19,002 [main:67] - randomType = Test
2021-03-12 10:48:19,003 [main:106] - GETTING Int from String
2021-03-12 10:48:19,025 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17b96d56]]
2021-03-12 10:48:19,026 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:19,026 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17b96d56]
2021-03-12 10:48:19,128 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:19,129 [main:117] - GENERATED CALL = (Delegate().test).compareTo(Delegate().test).plus(87)
2021-03-12 10:48:19,130 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c944389]]
2021-03-12 10:48:19,130 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:19,130 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c944389]
2021-03-12 10:48:19,130 [main:117] - GENERATED CALL = (Delegate().test).compareTo(Delegate().test).dec()
2021-03-12 10:48:19,130 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@758f426]]
2021-03-12 10:48:19,130 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:19,239 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:19,241 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@758f426]
2021-03-12 10:48:19,241 [main:117] - GENERATED CALL = (Delegate().test).compareTo("jlkeu").toInt()
2021-03-12 10:48:19,241 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3289e3a9]]
2021-03-12 10:48:19,241 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:19,362 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:19,364 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3289e3a9]
2021-03-12 10:48:19,364 [main:117] - GENERATED CALL = (Delegate().test).compareTo("arqlb").unaryPlus()
2021-03-12 10:48:19,364 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c705ec3]]
2021-03-12 10:48:19,364 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c705ec3]
2021-03-12 10:48:19,469 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:48:19,576 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:19,681 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:19,683 [main:117] - GENERATED CALL = (Delegate().test).indexOf('鹥', 259317746, false)
2021-03-12 10:48:19,684 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7630471]]
2021-03-12 10:48:19,684 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:19,684 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7630471]
2021-03-12 10:48:19,792 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:19,900 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:19,902 [main:117] - GENERATED CALL = (Delegate().test).compareTo(Delegate().testDelegated).coerceIn(-1739484450, 530479930)
2021-03-12 10:48:19,902 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17b96d56]]
2021-03-12 10:48:19,902 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17b96d56]
2021-03-12 10:48:20,005 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:20,007 [main:117] - GENERATED CALL = (Delegate().test).length.plus(127)
2021-03-12 10:48:20,007 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@207dc569]]
2021-03-12 10:48:20,007 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@207dc569]
2021-03-12 10:48:20,109 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:48:20,111 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:48:20,113 [main:117] - GENERATED CALL = (Delegate().test).indexOfLast({a: Char -> true})
2021-03-12 10:48:20,113 [main:113] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@323e4cb9]]
2021-03-12 10:48:20,113 [main:117] - GENERATED CALL = (Delegate().test).lastIndex
2021-03-12 10:48:20,113 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa5e6af]]
2021-03-12 10:48:20,113 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa5e6af]
2021-03-12 10:48:20,114 [main:117] - GENERATED CALL = (Delegate().test).toInt()
2021-03-12 10:48:20,114 [main:114] - replacement of {
            print('X')
            prope4--
        } of type Int is (Delegate().test).compareTo("arqlb").unaryPlus()
2021-03-12 10:48:20,213 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:20,213 [main:66] - Compilation checking started
2021-03-12 10:48:20,687 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in 311624765..size) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:20,689 [main:107] - replacing (311624765..size, IntRange)
2021-03-12 10:48:20,690 [main:50] - replacing 311624765..size IntRange
2021-03-12 10:48:20,690 [main:54] - Getting value of type IntRange
2021-03-12 10:48:20,834 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 10:48:20,968 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 10:48:20,972 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 10:48:21,339 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:48:21,341 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:48:21,343 [main:95] - GENERATED = IntRange(1721010786, -471224132)
2021-03-12 10:48:21,343 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(1721010786, -471224132)
2021-03-12 10:48:21,343 [main:61] - GENERATED IS CALL =true
2021-03-12 10:48:21,349 [main:67] - randomType = Delegate
2021-03-12 10:48:21,453 [main:302] - generating value of type = Delegate false depth = 0
2021-03-12 10:48:21,455 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:48:21,466 [main:106] - GETTING IntRange from String
2021-03-12 10:48:21,490 [main:113] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@32a6978c]]
2021-03-12 10:48:21,490 [main:117] - GENERATED CALL = (Delegate().testDelegated).indices
2021-03-12 10:48:21,490 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7453e050]]
2021-03-12 10:48:21,490 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:21,490 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7453e050]
2021-03-12 10:48:21,595 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:21,597 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo(Delegate().testDelegated).until(-52)
2021-03-12 10:48:21,597 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@32a6978c]]
2021-03-12 10:48:21,597 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:48:21,698 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:21,801 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:21,803 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(-987286023, 1552194302).indices
2021-03-12 10:48:21,804 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7453e050]]
2021-03-12 10:48:21,804 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7453e050]
2021-03-12 10:48:21,904 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:21,906 [main:117] - GENERATED CALL = (Delegate().testDelegated).length.until(-67)
2021-03-12 10:48:21,906 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3a662a]]
2021-03-12 10:48:21,906 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@39972f5b]
2021-03-12 10:48:22,007 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:22,009 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3a662a]
2021-03-12 10:48:22,176 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:22,179 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo("nvkoj").rangeTo(-29)
2021-03-12 10:48:22,179 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3a662a]]
2021-03-12 10:48:22,179 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3a662a]
2021-03-12 10:48:22,338 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:48:22,340 [main:117] - GENERATED CALL = (Delegate().testDelegated).length.rangeTo(43)
2021-03-12 10:48:22,340 [main:114] - replacement of 311624765..size of type IntRange is (Delegate().testDelegated).length.until(-67)
2021-03-12 10:48:22,440 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:22,440 [main:66] - Compilation checking started
2021-03-12 10:48:22,941 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        prope1.fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:22,943 [main:107] - replacing (prope1, Kla0)
2021-03-12 10:48:22,944 [main:50] - replacing prope1 Kla0
2021-03-12 10:48:22,944 [main:54] - Getting value of type Kla0
2021-03-12 10:48:23,066 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 10:48:23,068 [main:112] - generating klass Kla0 text = class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    }
}
2021-03-12 10:48:23,175 [main:194] - Type params = []
2021-03-12 10:48:23,276 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 10:48:23,277 [main:61] - GENERATED IS CALL =true
2021-03-12 10:48:23,280 [main:67] - randomType = Long
2021-03-12 10:48:23,382 [main:302] - generating value of type = Long true depth = 0
2021-03-12 10:48:23,428 [main:106] - GETTING Kla0 from String
2021-03-12 10:48:23,458 [main:106] - GETTING Kla0 from String
2021-03-12 10:48:23,459 [main:106] - GETTING Kla0 from Test
2021-03-12 10:48:23,467 [main:106] - GETTING Kla0 from String
2021-03-12 10:48:23,467 [main:106] - GETTING Kla0 from TestClass
2021-03-12 10:48:23,485 [main:106] - GETTING Kla0 from String
2021-03-12 10:48:23,486 [main:106] - GETTING Kla0 from String
2021-03-12 10:48:23,486 [main:114] - replacement of prope1 of type Kla0 is Kla0()
2021-03-12 10:48:23,586 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:48:23,586 [main:66] - Compilation checking started
2021-03-12 10:48:24,079 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:24,082 [main:107] - replacing (it, Char)
2021-03-12 10:48:24,083 [main:50] - replacing it Char
2021-03-12 10:48:24,083 [main:54] - Getting value of type Char
2021-03-12 10:48:24,192 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:48:24,193 [main:58] - GENERATED VALUE OF TYPE Char = '䩥'
2021-03-12 10:48:24,193 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:24,199 [main:67] - randomType = Kla0
2021-03-12 10:48:24,305 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 10:48:24,307 [main:112] - generating klass Kla0 text = class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if (it == ' ' || it == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    }
}
2021-03-12 10:48:24,416 [main:194] - Type params = []
2021-03-12 10:48:24,550 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7274a1d5]
2021-03-12 10:48:24,550 [main:78] - Generated call from random type = (Kla0()).prope4.digitToChar()
2021-03-12 10:48:24,551 [main:106] - GETTING Char from Test
2021-03-12 10:48:24,563 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]]
2021-03-12 10:48:24,563 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:48:24,666 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:24,668 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.get(1344832159)
2021-03-12 10:48:24,668 [main:114] - replacement of it of type Char is (Kla0()).prope4.digitToChar()
2021-03-12 10:48:24,769 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:24,769 [main:66] - Compilation checking started
2021-03-12 10:48:25,266 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if (it == ' ' || (Kla0()).prope4.digitToChar() == '-') {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:25,269 [main:107] - replacing (it == ' ' || (Kla0()).prope4.digitToChar() == '-', Boolean)
2021-03-12 10:48:25,269 [main:50] - replacing it == ' ' || (Kla0()).prope4.digitToChar() == '-' Boolean
2021-03-12 10:48:25,270 [main:54] - Getting value of type Boolean
2021-03-12 10:48:25,401 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:25,404 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:48:25,404 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:25,522 [main:67] - randomType = Double
2021-03-12 10:48:25,629 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:48:25,702 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2b874d46]
2021-03-12 10:48:25,702 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4543c852]
2021-03-12 10:48:25,805 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:48:25,910 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:25,912 [main:78] - Generated call from random type = (0.9949330343585361).toChar().equals('ν', false)
2021-03-12 10:48:25,913 [main:106] - GETTING Boolean from String
2021-03-12 10:48:25,941 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eb78abe]]
2021-03-12 10:48:25,942 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:48:26,047 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:26,151 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:26,153 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eb78abe]
2021-03-12 10:48:26,252 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:26,353 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:48:26,459 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:48:26,462 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:48:26,682 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 10:48:26,686 [main:95] - GENERATED = StringBuilder("dgsne")
2021-03-12 10:48:26,787 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:26,917 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:27,043 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:27,045 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-1843921453, 1386486332).regionMatches(2015949438, StringBuilder("dgsne"), -354416605, -354533227, true)
2021-03-12 10:48:27,045 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@624e1774], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2c02c021]]
2021-03-12 10:48:27,045 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@624e1774]
2021-03-12 10:48:27,156 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:27,156 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2c02c021]
2021-03-12 10:48:27,261 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:27,263 [main:117] - GENERATED CALL = (Delegate().test).equals("kohqf").or(true)
2021-03-12 10:48:27,263 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@505ee5e]]
2021-03-12 10:48:27,263 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:48:27,375 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:27,490 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:27,491 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@505ee5e]
2021-03-12 10:48:27,591 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 10:48:27,698 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 10:48:27,701 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 10:48:28,043 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:48:28,045 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 10:48:28,181 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 10:48:28,184 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 10:48:28,308 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 10:48:28,312 [main:95] - GENERATED = mutableSetOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)
2021-03-12 10:48:28,312 [main:95] - GENERATED = Regex("aokpq", mutableSetOf<RegexOption>(kotlin.text.RegexOption.MULTILINE))
2021-03-12 10:48:28,312 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-1655538528, 1018435531).matches(Regex("aokpq", mutableSetOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)))
2021-03-12 10:48:28,312 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@ae40a76], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1808fdac]]
2021-03-12 10:48:28,312 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1808fdac]
2021-03-12 10:48:28,419 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:28,420 [main:117] - GENERATED CALL = (Delegate().test).length.equals("siljm")
2021-03-12 10:48:28,420 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@700af1a3]]
2021-03-12 10:48:28,420 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@700af1a3]
2021-03-12 10:48:28,420 [main:117] - GENERATED CALL = (Delegate().test).isNotEmpty()
2021-03-12 10:48:28,420 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da89ff4]]
2021-03-12 10:48:28,420 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:48:28,521 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:28,522 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da89ff4]
2021-03-12 10:48:28,522 [main:117] - GENERATED CALL = (Delegate().test).get(-1940167907).isLowSurrogate()
2021-03-12 10:48:28,523 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d6e582e]]
2021-03-12 10:48:28,523 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:48:28,630 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:28,733 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:28,735 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d6e582e]
2021-03-12 10:48:28,735 [main:117] - GENERATED CALL = (Delegate().test).subSequence(1786701894, -388063610).none()
2021-03-12 10:48:28,735 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41439bff]]
2021-03-12 10:48:28,735 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:48:28,835 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:28,836 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41439bff]
2021-03-12 10:48:28,836 [main:117] - GENERATED CALL = (Delegate().test).get(-2009766537).isDigit()
2021-03-12 10:48:28,837 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ba9ad49]]
2021-03-12 10:48:28,837 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1eee1b2b]
2021-03-12 10:48:28,947 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:28,949 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ba9ad49]
2021-03-12 10:48:28,949 [main:117] - GENERATED CALL = (Delegate().test).get(-1629740912).isUpperCase()
2021-03-12 10:48:28,950 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26afbd1]]
2021-03-12 10:48:28,950 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1d98886d]
2021-03-12 10:48:29,052 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:29,157 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:29,159 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26afbd1]
2021-03-12 10:48:29,285 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:48:29,404 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:29,405 [main:117] - GENERATED CALL = (Delegate().test).subSequence(2003807081, 1910387358).startsWith('', true)
2021-03-12 10:48:29,406 [main:114] - replacement of it == ' ' || (Kla0()).prope4.digitToChar() == '-' of type Boolean is (Delegate().test).subSequence(1786701894, -388063610).none()
2021-03-12 10:48:29,510 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:29,511 [main:66] - Compilation checking started
2021-03-12 10:48:29,981 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if (prope6 % 2 == prope3.size) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:29,983 [main:107] - replacing (prope6 % 2 == prope3.size, Boolean)
2021-03-12 10:48:29,983 [main:50] - replacing prope6 % 2 == prope3.size Boolean
2021-03-12 10:48:29,983 [main:54] - Getting value of type Boolean
2021-03-12 10:48:30,088 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:30,090 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:48:30,090 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:30,329 [main:67] - randomType = Function1<Char, UByte>
2021-03-12 10:48:30,330 [main:106] - GETTING Boolean from Test
2021-03-12 10:48:30,335 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc62453]]
2021-03-12 10:48:30,335 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]
2021-03-12 10:48:30,437 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:30,437 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc62453]
2021-03-12 10:48:30,539 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:30,539 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).equals("lqfqb").equals("tbwjn")
2021-03-12 10:48:30,539 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@ed6bc2e]]
2021-03-12 10:48:30,539 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]
2021-03-12 10:48:30,641 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:30,641 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@ed6bc2e]
2021-03-12 10:48:30,641 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).equals("qwgjl").not()
2021-03-12 10:48:30,641 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2130eec1]]
2021-03-12 10:48:30,642 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]
2021-03-12 10:48:30,771 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:30,772 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2130eec1]
2021-03-12 10:48:30,886 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:30,888 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).equals("yjpep").xor(false)
2021-03-12 10:48:30,888 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72597845]]
2021-03-12 10:48:30,888 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72597845]
2021-03-12 10:48:30,888 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.toBoolean()
2021-03-12 10:48:30,889 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@624e1774]]
2021-03-12 10:48:30,889 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@624e1774]
2021-03-12 10:48:30,992 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:30,993 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.equals("xyyoy")
2021-03-12 10:48:30,993 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@640d246]]
2021-03-12 10:48:30,993 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@640d246]
2021-03-12 10:48:31,096 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:31,098 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.endsWith(testClass.test, false)
2021-03-12 10:48:31,098 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2eae22b9]]
2021-03-12 10:48:31,098 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2eae22b9]
2021-03-12 10:48:31,202 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:31,304 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:31,306 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.startsWith("mhxja", true)
2021-03-12 10:48:31,306 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]]
2021-03-12 10:48:31,306 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]
2021-03-12 10:48:31,410 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:31,411 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")
2021-03-12 10:48:31,411 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@4865f53], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675470d]]
2021-03-12 10:48:31,411 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@675470d]
2021-03-12 10:48:31,516 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:31,518 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).test.matches("mofea")
2021-03-12 10:48:31,518 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@41e95d06]]
2021-03-12 10:48:31,518 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@5ebdb1a7]
2021-03-12 10:48:31,623 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:31,623 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@41e95d06]
2021-03-12 10:48:31,731 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:31,733 [main:117] - GENERATED CALL = (TestClass(TestClass(TestClass(Delegate()))).foo).equals("cmdht").and(true)
2021-03-12 10:48:31,733 [main:114] - replacement of prope6 % 2 == prope3.size of type Boolean is (TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")
2021-03-12 10:48:31,841 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:31,842 [main:66] - Compilation checking started
2021-03-12 10:48:32,478 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print("s"); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:32,480 [main:107] - replacing (this, Ty0)
2021-03-12 10:48:32,481 [main:50] - replacing this Ty0
2021-03-12 10:48:32,481 [main:54] - Getting value of type Ty0
2021-03-12 10:48:32,628 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 10:48:32,634 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 10:48:32,907 [main:67] - randomType = ArrayList<TestClass>
2021-03-12 10:48:33,035 [main:302] - generating value of type = ArrayList<TestClass> false depth = 0
2021-03-12 10:48:33,152 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<TestClass> = TODO()
2021-03-12 10:48:33,155 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<TestClass> = TODO()
2021-03-12 10:48:33,276 [main:95] - GENERATED = ArrayList<TestClass>()
2021-03-12 10:48:33,459 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:33,481 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:33,482 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:33,483 [main:106] - GETTING Ty0 from TestClass
2021-03-12 10:48:33,496 [main:106] - GETTING Ty0 from Test
2021-03-12 10:48:33,502 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:33,503 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:33,503 [main:111] - Cant find and generate replacement for this type Ty0
2021-03-12 10:48:33,503 [main:107] - replacing ("s", String)
2021-03-12 10:48:33,503 [main:50] - replacing "s" String
2021-03-12 10:48:33,503 [main:54] - Getting value of type String
2021-03-12 10:48:33,612 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:48:33,614 [main:58] - GENERATED VALUE OF TYPE String = "glnmq"
2021-03-12 10:48:33,614 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:34,154 [main:67] - randomType = Pair<ULong, UInt>
2021-03-12 10:48:34,286 [main:302] - generating value of type = Pair<ULong, UInt> false depth = 0
2021-03-12 10:48:34,402 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong, second: UInt): Pair<ULong, UInt> = TODO()
2021-03-12 10:48:34,407 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong, second: UInt): Pair<ULong, UInt> = TODO()
2021-03-12 10:48:34,547 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 10:48:34,549 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 10:48:34,551 [main:95] - GENERATED = Pair<ULong, UInt>(8246918205302088793.toULong(), 509020506.toUInt())
2021-03-12 10:48:34,572 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e5a0120]
2021-03-12 10:48:34,682 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:34,684 [main:78] - Generated call from random type = (Pair<ULong, UInt>(8246918205302088793.toULong(), 509020506.toUInt())).first.toString(127611605)
2021-03-12 10:48:34,685 [main:106] - GETTING String from TestClass
2021-03-12 10:48:34,704 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17370ad9]]
2021-03-12 10:48:34,704 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17370ad9]
2021-03-12 10:48:34,823 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:48:34,829 [main:117] - GENERATED CALL = (testClass).test.removeSuffix(StringBuilder())
2021-03-12 10:48:34,829 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31879b34]]
2021-03-12 10:48:34,829 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31879b34]
2021-03-12 10:48:34,829 [main:117] - GENERATED CALL = (testClass).test.toUpperCase()
2021-03-12 10:48:34,829 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@666581d0]]
2021-03-12 10:48:34,829 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@666581d0]
2021-03-12 10:48:34,944 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:48:34,947 [main:117] - GENERATED CALL = (testClass).test.replaceBeforeLast('㖊', Delegate().testDelegated, Delegate().test)
2021-03-12 10:48:34,947 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58152cf2]]
2021-03-12 10:48:34,947 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58152cf2]
2021-03-12 10:48:35,061 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:48:35,064 [main:117] - GENERATED CALL = (testClass).test.substringBefore('ᇲ', Delegate().test)
2021-03-12 10:48:35,064 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a906d2c]]
2021-03-12 10:48:35,064 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a906d2c]
2021-03-12 10:48:35,179 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:48:35,181 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:48:35,184 [main:117] - GENERATED CALL = (testClass).test.dropLastWhile({a: Char -> false})
2021-03-12 10:48:35,184 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@575b0f0a]]
2021-03-12 10:48:35,184 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@575b0f0a]
2021-03-12 10:48:35,296 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:48:35,411 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:48:35,519 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:48:35,521 [main:117] - GENERATED CALL = (testClass).test.replaceFirst('嵩', '쪈', false)
2021-03-12 10:48:35,521 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a]]
2021-03-12 10:48:35,522 [main:117] - GENERATED CALL = (testClass).test
2021-03-12 10:48:35,522 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c6f8cfa]]
2021-03-12 10:48:35,522 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c6f8cfa]
2021-03-12 10:48:35,625 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:48:35,627 [main:117] - GENERATED CALL = (testClass).test.drop(1379094297)
2021-03-12 10:48:35,627 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f3604be]]
2021-03-12 10:48:35,627 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f3604be]
2021-03-12 10:48:35,786 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:48:35,788 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:48:35,790 [main:117] - GENERATED CALL = (testClass).test.filter({a: Char -> false})
2021-03-12 10:48:35,790 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1a80be8a], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9bf309]]
2021-03-12 10:48:35,790 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9bf309]
2021-03-12 10:48:35,791 [main:117] - GENERATED CALL = (testClass).test.capitalize()
2021-03-12 10:48:35,791 [main:114] - replacement of "s" of type String is (testClass).test
2021-03-12 10:48:35,908 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:35,908 [main:66] - Compilation checking started
2021-03-12 10:48:36,429 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:36,433 [main:107] - replacing ({
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    }, Any)
2021-03-12 10:48:36,433 [main:50] - replacing {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    } Any
2021-03-12 10:48:36,433 [main:54] - Getting value of type Any
2021-03-12 10:48:36,583 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:36,583 [main:58] - GENERATED VALUE OF TYPE Any = "fnqyu"
2021-03-12 10:48:36,584 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:37,010 [main:67] - randomType = LinkedHashMap<Triple<Delegate, UShort?, Boolean>, Int>
2021-03-12 10:48:37,118 [main:302] - generating value of type = LinkedHashMap<Triple<Delegate, UShort?, Boolean>, Int> false depth = 0
2021-03-12 10:48:37,238 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Triple<Delegate, UShort?, Boolean>, Int> = TODO()
2021-03-12 10:48:37,241 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Triple<Delegate, UShort?, Boolean>, Int> = TODO()
2021-03-12 10:48:37,360 [main:95] - GENERATED = linkedMapOf<Triple<Delegate, UShort?, Boolean>, Int>()
2021-03-12 10:48:37,572 [main:106] - GETTING Any from String
2021-03-12 10:48:37,614 [main:114] - replacement of {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    } of type Any is "fnqyu"
2021-03-12 10:48:37,719 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 10:48:37,719 [main:66] - Compilation checking started
2021-03-12 10:48:37,723 [main:71] - Wrong syntax or breaks conditions
2021-03-12 10:48:37,723 [main:49] - Result = false
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) "fnqyu"
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        body(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:37,725 [main:107] - replacing (body, Function1<Char, Unit>)
2021-03-12 10:48:37,725 [main:50] - replacing body Function1<Char, Unit>
2021-03-12 10:48:37,726 [main:54] - Getting value of type Function1<Char, Unit>
2021-03-12 10:48:37,837 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 10:48:37,839 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:48:37,954 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:48:37,957 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:48:38,192 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:48:38,192 [main:95] - GENERATED = println("uqmne")
2021-03-12 10:48:38,192 [main:58] - GENERATED VALUE OF TYPE Function1<Char, Unit> = {a: Char -> println("uqmne")}
2021-03-12 10:48:38,192 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:38,424 [main:67] - randomType = Double?
2021-03-12 10:48:38,528 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:48:38,583 [main:106] - GETTING Function1<Char, Unit> from String
2021-03-12 10:48:38,623 [main:106] - GETTING Function1<Char, Unit> from String
2021-03-12 10:48:38,624 [main:106] - GETTING Function1<Char, Unit> from String
2021-03-12 10:48:38,626 [main:106] - GETTING Function1<Char, Unit> from String
2021-03-12 10:48:38,629 [main:106] - GETTING Function1<Char, Unit> from Test
2021-03-12 10:48:38,640 [main:106] - GETTING Function1<Char, Unit> from TestClass
2021-03-12 10:48:38,663 [main:106] - GETTING Function1<Char, Unit> from String
2021-03-12 10:48:38,663 [main:114] - replacement of body of type Function1<Char, Unit> is {a: Char -> println("uqmne")}
2021-03-12 10:48:38,803 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:48:38,803 [main:66] - Compilation checking started
2021-03-12 10:48:39,368 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:39,371 [main:107] - replacing (prope8, Function1<Ty0, Unit>)
2021-03-12 10:48:39,371 [main:50] - replacing prope8 Function1<Ty0, Unit>
2021-03-12 10:48:39,371 [main:54] - Getting value of type Function1<Ty0, Unit>
2021-03-12 10:48:39,492 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-12 10:48:39,494 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:48:39,650 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:48:39,653 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:48:39,935 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:48:39,935 [main:95] - GENERATED = println("tdeqi")
2021-03-12 10:48:39,935 [main:58] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> println("tdeqi")}
2021-03-12 10:48:39,936 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:40,326 [main:67] - randomType = ArrayDeque<Boolean?>?
2021-03-12 10:48:40,449 [main:302] - generating value of type = ArrayDeque<Boolean?> false depth = 0
2021-03-12 10:48:40,571 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Boolean?> = TODO()
2021-03-12 10:48:40,574 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Boolean?> = TODO()
2021-03-12 10:48:40,691 [main:95] - GENERATED = ArrayDeque<Boolean?>()
2021-03-12 10:48:40,922 [main:106] - GETTING Function1<Ty0, Unit> from String
2021-03-12 10:48:40,965 [main:106] - GETTING Function1<Ty0, Unit> from Test
2021-03-12 10:48:40,976 [main:106] - GETTING Function1<Ty0, Unit> from String
2021-03-12 10:48:40,979 [main:106] - GETTING Function1<Ty0, Unit> from TestClass
2021-03-12 10:48:40,998 [main:106] - GETTING Function1<Ty0, Unit> from String
2021-03-12 10:48:40,999 [main:106] - GETTING Function1<Ty0, Unit> from String
2021-03-12 10:48:41,000 [main:106] - GETTING Function1<Ty0, Unit> from String
2021-03-12 10:48:41,000 [main:114] - replacement of prope8 of type Function1<Ty0, Unit> is {a: Ty0 -> println("tdeqi")}
2021-03-12 10:48:41,105 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:48:41,106 [main:66] - Compilation checking started
2021-03-12 10:48:41,487 [main:49] - Result = false
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
{a: Ty0 -> println("tdeqi")}(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:41,489 [main:107] - replacing (if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        }, Any)
2021-03-12 10:48:41,490 [main:50] - replacing if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        } Any
2021-03-12 10:48:41,490 [main:54] - Getting value of type Any
2021-03-12 10:48:41,625 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:48:41,626 [main:58] - GENERATED VALUE OF TYPE Any = "fqrcy"
2021-03-12 10:48:41,626 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:41,765 [main:67] - randomType = Array<Int>
2021-03-12 10:48:41,884 [main:302] - generating value of type = Array<Int> false depth = 0
2021-03-12 10:48:41,999 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int): Array<Int> = TODO()
2021-03-12 10:48:42,002 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Int): Array<Int> = TODO()
2021-03-12 10:48:42,373 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:48:42,375 [main:302] - generating value of type = Function1<Int, Int> false depth = 3
2021-03-12 10:48:42,377 [main:302] - generating value of type = Int true depth = 4
2021-03-12 10:48:42,379 [main:95] - GENERATED = Array<Int>(-1445131012, {a: Int -> -440101628})
2021-03-12 10:48:42,396 [main:106] - GETTING Any from TestClass
2021-03-12 10:48:42,418 [main:106] - GETTING Any from String
2021-03-12 10:48:42,448 [main:114] - replacement of if (prope4 > 0) (Delegate().test).compareTo("arqlb").unaryPlus()
        else {
            // print(c)
        } of type Any is Delegate().test
2021-03-12 10:48:42,567 [main:33] - Trying to replace Element(IF) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:42,568 [main:66] - Compilation checking started
2021-03-12 10:48:43,136 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:43,138 [main:107] - replacing (prope8, Function1<Ty0, Unit>)
2021-03-12 10:48:43,139 [main:50] - replacing prope8 Function1<Ty0, Unit>
2021-03-12 10:48:43,139 [main:54] - Getting value of type Function1<Ty0, Unit>
2021-03-12 10:48:43,302 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-12 10:48:43,306 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:48:43,436 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:48:43,439 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:48:43,855 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:48:43,857 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:48:43,859 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:48:43,860 [main:95] - GENERATED = require(true, { "htbyx"})
2021-03-12 10:48:43,860 [main:58] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> require(true, { "htbyx"})}
2021-03-12 10:48:43,860 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:44,126 [main:67] - randomType = HashMap<Short, String>
2021-03-12 10:48:44,237 [main:302] - generating value of type = HashMap<Short, String> false depth = 0
2021-03-12 10:48:44,348 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Short, Strg> = TODO()
2021-03-12 10:48:44,351 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Short, Strg> = TODO()
2021-03-12 10:48:44,474 [main:95] - GENERATED = linkedMapOf<Short, String>()
2021-03-12 10:48:44,616 [main:106] - GETTING Function1<Ty0, Unit> from Test
2021-03-12 10:48:44,625 [main:106] - GETTING Function1<Ty0, Unit> from String
2021-03-12 10:48:44,660 [main:106] - GETTING Function1<Ty0, Unit> from String
2021-03-12 10:48:44,662 [main:106] - GETTING Function1<Ty0, Unit> from TestClass
2021-03-12 10:48:44,683 [main:106] - GETTING Function1<Ty0, Unit> from String
2021-03-12 10:48:44,684 [main:106] - GETTING Function1<Ty0, Unit> from String
2021-03-12 10:48:44,686 [main:106] - GETTING Function1<Ty0, Unit> from String
2021-03-12 10:48:44,686 [main:114] - replacement of prope8 of type Function1<Ty0, Unit> is {a: Ty0 -> require(true, { "htbyx"})}
2021-03-12 10:48:44,800 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:48:44,800 [main:66] - Compilation checking started
2021-03-12 10:48:45,177 [main:49] - Result = false
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - '0')
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
{a: Ty0 -> require(true, { "htbyx"})}(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:45,178 [main:107] - replacing ('0', Char)
2021-03-12 10:48:45,179 [main:50] - replacing '0' Char
2021-03-12 10:48:45,179 [main:54] - Getting value of type Char
2021-03-12 10:48:45,295 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:48:45,296 [main:58] - GENERATED VALUE OF TYPE Char = '⯎'
2021-03-12 10:48:45,297 [main:61] - GENERATED IS CALL =false
2021-03-12 10:48:45,419 [main:67] - randomType = UInt
2021-03-12 10:48:45,536 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 10:48:45,600 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@1b837a5f]
2021-03-12 10:48:45,730 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:48:45,732 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Int.digitToChar(): kotlin.Char defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7274a1d5]
2021-03-12 10:48:45,733 [main:78] - Generated call from random type = (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()
2021-03-12 10:48:45,733 [main:114] - replacement of '0' of type Char is (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()
2021-03-12 10:48:45,885 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:45,885 [main:66] - Compilation checking started
2021-03-12 10:48:46,464 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:46,467 [main:107] - replacing (this, Ty0)
2021-03-12 10:48:46,467 [main:50] - replacing this Ty0
2021-03-12 10:48:46,467 [main:54] - Getting value of type Ty0
2021-03-12 10:48:46,587 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 10:48:46,592 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 10:48:46,982 [main:67] - randomType = LinkedHashSet<Pair<Double, Char>>
2021-03-12 10:48:47,130 [main:302] - generating value of type = LinkedHashSet<Pair<Double, Char>> false depth = 0
2021-03-12 10:48:47,261 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Pair<Double, Char>> = TODO()
2021-03-12 10:48:47,264 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Pair<Double, Char>> = TODO()
2021-03-12 10:48:47,386 [main:95] - GENERATED = linkedSetOf<Pair<Double, Char>>()
2021-03-12 10:48:47,597 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:47,626 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:47,627 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:47,628 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:47,628 [main:106] - GETTING Ty0 from TestClass
2021-03-12 10:48:47,642 [main:106] - GETTING Ty0 from String
2021-03-12 10:48:47,643 [main:106] - GETTING Ty0 from Test
2021-03-12 10:48:47,651 [main:111] - Cant find and generate replacement for this type Ty0
2021-03-12 10:48:47,758 [main:141] - TRYING TO REPLACE CONSTANT 182864442
2021-03-12 10:48:47,866 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 10:48:47,866 [main:66] - Compilation checking started
2021-03-12 10:48:48,254 [main:49] - Result = false
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(prope8(prope5, get(prope5))).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), 1776859063, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:48,254 [main:141] - TRYING TO REPLACE CONSTANT 1776859063
2021-03-12 10:48:48,366 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 10:48:48,367 [main:66] - Compilation checking started
2021-03-12 10:48:48,897 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, false)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:48,898 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 10:48:49,024 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 10:48:49,024 [main:66] - Compilation checking started
2021-03-12 10:48:49,542 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:49,542 [main:141] - TRYING TO REPLACE CONSTANT '虣'
2021-03-12 10:48:49,656 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 10:48:49,657 [main:66] - Compilation checking started
2021-03-12 10:48:50,073 [main:49] - Result = false
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf(get(182864442)), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(-1274607364)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:50,074 [main:141] - TRYING TO REPLACE CONSTANT 1274607364
2021-03-12 10:48:50,187 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 10:48:50,187 [main:66] - Compilation checking started
2021-03-12 10:48:50,740 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, false)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:50,741 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 10:48:50,876 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 10:48:50,877 [main:66] - Compilation checking started
2021-03-12 10:48:51,421 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1805938130).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, true)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:51,421 [main:141] - TRYING TO REPLACE CONSTANT 1133330132
2021-03-12 10:48:51,546 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 10:48:51,546 [main:66] - Compilation checking started
2021-03-12 10:48:52,065 [main:141] - TRYING TO REPLACE CONSTANT 1805938130
2021-03-12 10:48:52,181 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 10:48:52,181 [main:66] - Compilation checking started
2021-03-12 10:48:52,703 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), -1173701482, true)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:52,703 [main:141] - TRYING TO REPLACE CONSTANT 1173701482
2021-03-12 10:48:52,823 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 10:48:52,823 [main:66] - Compilation checking started
2021-03-12 10:48:53,341 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> 'ꕦ'}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:53,341 [main:141] - TRYING TO REPLACE CONSTANT 891573787
2021-03-12 10:48:53,450 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 10:48:53,451 [main:66] - Compilation checking started
2021-03-12 10:48:53,827 [main:49] - Result = false
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(prope8(prope5, get(prope5)), {a: Int -> 'ꕦ'}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:53,827 [main:141] - TRYING TO REPLACE CONSTANT 'ꕦ'
2021-03-12 10:48:53,937 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:48:53,938 [main:66] - Compilation checking started
2021-03-12 10:48:54,451 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:54,451 [main:141] - TRYING TO REPLACE CONSTANT 7897
2021-03-12 10:48:54,567 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 10:48:54,567 [main:66] - Compilation checking started
2021-03-12 10:48:54,961 [main:49] - Result = false
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((compareTo("iiwgd").toUShort()).toLong().toString(1386169886))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:54,962 [main:141] - TRYING TO REPLACE CONSTANT 1386169886
2021-03-12 10:48:55,075 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 10:48:55,075 [main:66] - Compilation checking started
2021-03-12 10:48:55,572 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(-1983826872))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:55,572 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 10:48:55,686 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 10:48:55,686 [main:66] - Compilation checking started
2021-03-12 10:48:56,030 [main:49] - Result = false
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(-27508826))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(-1983826872))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(fu1 % -1983826872 == 0)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:56,030 [main:141] - TRYING TO REPLACE CONSTANT null
2021-03-12 10:48:56,139 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 10:48:56,139 [main:66] - Compilation checking started
2021-03-12 10:48:56,658 [main:141] - TRYING TO REPLACE CONSTANT 27508826
2021-03-12 10:48:56,775 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 10:48:56,776 [main:66] - Compilation checking started
2021-03-12 10:48:57,285 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(388063610))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(-1983826872))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1983826872 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:57,285 [main:141] - TRYING TO REPLACE CONSTANT 1983826872
2021-03-12 10:48:57,401 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 10:48:57,402 [main:66] - Compilation checking started
2021-03-12 10:48:57,920 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(388063610))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(-1983826872))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1274607364 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-126076032)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:57,920 [main:141] - TRYING TO REPLACE CONSTANT 126076032
2021-03-12 10:48:58,053 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 10:48:58,053 [main:66] - Compilation checking started
2021-03-12 10:48:58,576 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(388063610))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(-1983826872))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1274607364 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(-67)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-1983826872)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:58,576 [main:141] - TRYING TO REPLACE CONSTANT 67
2021-03-12 10:48:58,700 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 10:48:58,700 [main:66] - Compilation checking started
2021-03-12 10:48:59,208 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(388063610))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(-1983826872))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1274607364 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(1274607364)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-1983826872)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:59,208 [main:141] - TRYING TO REPLACE CONSTANT 1786701894
2021-03-12 10:48:59,329 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 10:48:59,329 [main:66] - Compilation checking started
2021-03-12 10:48:59,675 [main:49] - Result = false
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(388063610))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(compareTo(10.toUByte()), -388063610).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(-1983826872))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1274607364 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(1274607364)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-1983826872)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:48:59,675 [main:141] - TRYING TO REPLACE CONSTANT 388063610
2021-03-12 10:48:59,784 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 10:48:59,785 [main:66] - Compilation checking started
2021-03-12 10:49:00,347 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(388063610))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, 126076032).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(-1983826872))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1274607364 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(1274607364)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-1983826872)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:49:00,348 [main:141] - TRYING TO REPLACE CONSTANT 2083633612
2021-03-12 10:49:00,474 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 10:49:00,474 [main:66] - Compilation checking started
2021-03-12 10:49:00,828 [main:49] - Result = false
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(388063610))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (-126076032.toUInt()).compareTo(10.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, 126076032).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(-1983826872))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1274607364 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(1274607364)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-1983826872)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:49:00,829 [main:141] - TRYING TO REPLACE CONSTANT 10
2021-03-12 10:49:00,939 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 10:49:00,940 [main:66] - Compilation checking started
2021-03-12 10:49:01,384 [main:53] - Result = true
Text:

import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(388063610))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(0.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, 126076032).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(-1983826872))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1274607364 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(1274607364)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-1983826872)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:49:01,384 [main:41] - AFTER TRY 1 res = 
import java.io.*
import java.util.*
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

fun box970() : String {
    val testClass = TestClass(Delegate())
val prope0 = StringReader("/aaa/bbb/ccc/ddd")

    val prope1 = Kla0()
    prope0.fu2 {
        Kla0().fu3(it)
    }
    prope1.fu6()
    return "OK"
}

class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(388063610))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(0.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, 126076032).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(-1983826872))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1274607364 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}

fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}

fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(1274607364)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-1983826872)
}

fun Reader.fu2(body : (Char) -> Unit) {
    val testClass = TestClass(Delegate())
do {
        var prope6 = read();
        if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals(null).and(true)) break
        {a: Char -> println("uqmne")}(prope6.toChar())
    } while(true)
}


2021-03-12 10:49:01,595 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:49:01,818 [main:302] - generating value of type = TestClass false depth = 1
2021-03-12 10:49:01,820 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:49:01,925 [main:194] - Type params = []
2021-03-12 10:49:02,029 [main:302] - generating value of type = Test false depth = 3
2021-03-12 10:49:02,031 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:49:02,249 [main:302] - generating value of type = Delegate false depth = 5
2021-03-12 10:49:02,251 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:49:02,251 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:49:02,252 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:49:02,382 [main:194] - Type params = []
2021-03-12 10:49:02,489 [main:302] - generating value of type = Test false depth = 1
2021-03-12 10:49:02,492 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:49:02,709 [main:302] - generating value of type = Delegate false depth = 3
2021-03-12 10:49:02,711 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:49:02,711 [main:112] - generating klass Kla0 text = class Kla0() {
    val prope2 = LinkedList<Char>()
    val prope3 = LinkedList<Int>()

    var prope4 = 0

    fun fu3(it : Char) {
        val testClass = TestClass(Delegate())
prope2.addLast((Delegate()).test.get(388063610))

        // Commented for KT-621
        // when (it) {
        //    .isDigit() => digits.addLast(it.toInt() - '0'.toInt())
        //    ' ', '-' => {}
        //    else => {
        //            printAll()
        //            digits.clear()
        //    }
        // }

        if ((TestClass(TestClass(TestClass(Delegate()))).foo).test.get(182864442).isDigit()) {
            prope3.addLast('ꑗ' - (2083633612.toUInt()).compareTo(0.toUByte()).digitToChar())
        } else if ((Delegate().test).subSequence(1786701894, 126076032).none()) {
        } else {
            fu6()
            prope3.clear()
        }

        if (prope3.size > 16)
          fu5()
        fu4()
    }

    fun fu4() {
        val testClass = TestClass(Delegate())
if (prope3.size < (Delegate().test).lastIndexOfAny(charArrayOf('虣'), -1173701482, true)) return
        print((7897.toUShort()).toLong().toString(-1983826872))
        val fu1 = prope3.fu1 { prope6, d ->
            if ((TestClass(TestClass(TestClass(Delegate()))).foo).equals("tvsmq")) {
                val prope8 = d * 2 / (Delegate().test).compareTo("iiwgd").shr(1133330132)
                val prope9 = d * 2 % 10
                (prope8 + prope9).fu0 {
                }
            } else d
        }
        if (fu1 % -1274607364 == 0) {print((testClass).test); prope4 = prope3.size}
    }

    fun fu5() {
        while (!prope2.isEmpty()) {
            val prope7 = prope2.removeFirst()
            fu7(prope7)
            if (prope7.isDigit()) {
                prope3.removeFirst()
                return
            }
        }
    }

    fun fu6() {
        while (!prope2.isEmpty())
          fu7(prope2.removeFirst())
    }

    fun fu7(prope7 : Char) {
        val testClass = TestClass(Delegate())
Delegate().test
    }
}
2021-03-12 10:49:02,817 [main:194] - Type params = []
2021-03-12 10:49:03,148 [main:43] - GENERATING CALL OF fun <Ty0> Ty0.fu0(prope8 : (Ty0) -> Unit) : Ty0 {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}
2021-03-12 10:49:04,597 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> Function2<Array<ULong?>, Triple<HashSet<Double>, Float?, Test>?, TestClass?>.fu0(prope8 : (Function2<Array<ULong?>, Triple<HashSet<Double>, Float?, Test>?, TestClass?>) -> Unit) : Function2<Array<ULong?>, Triple<HashSet<Double>, Float?, Test>?, TestClass?> {
    val testClass = TestClass(Delegate())
prope8(this)
    return this
}
2021-03-12 10:49:04,845 [main:302] - generating value of type = Function1<Function2<Array<ULong?>, Triple<HashSet<Double>, Float?, Test>?, TestClass?>, Unit> false depth = 1
2021-03-12 10:49:04,847 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 10:49:04,964 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:49:04,967 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:49:05,198 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 10:49:05,200 [main:95] - GENERATED = require(false)
2021-03-12 10:49:05,200 [main:302] - generating value of type = Function2<Array<ULong?>, Triple<HashSet<Double>, Float?, Test>?, TestClass?> false depth = 1
2021-03-12 10:49:05,202 [main:302] - generating value of type = TestClass false depth = 2
2021-03-12 10:49:05,204 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:49:05,311 [main:194] - Type params = []
2021-03-12 10:49:05,418 [main:302] - generating value of type = Test false depth = 4
2021-03-12 10:49:05,420 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:49:05,644 [main:302] - generating value of type = TestClass false depth = 6
2021-03-12 10:49:05,646 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 10:49:05,819 [main:194] - Type params = []
2021-03-12 10:49:05,996 [main:302] - generating value of type = Test false depth = 8
2021-03-12 10:49:05,998 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 10:49:06,230 [main:302] - generating value of type = Delegate false depth = 10
2021-03-12 10:49:06,232 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 10:49:06,232 [main:95] - GENERATED = {a: Array<ULong?>, b: Triple<HashSet<Double>, Float?, Test>? -> TestClass(TestClass(Delegate()))}.fu0<Function2<Array<ULong?>, Triple<HashSet<Double>, Float?, Test>?, TestClass?>>({a: Function2<Array<ULong?>, Triple<HashSet<Double>, Float?, Test>?, TestClass?> -> require(false)})
2021-03-12 10:49:06,340 [main:43] - GENERATING CALL OF fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(1274607364)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-1983826872)
}
2021-03-12 10:49:06,342 [main:61] - WITHOUT TYPE PARAMS = fun LinkedList<Int>.fu1(prope8 : (Int, Int )-> Int): Int {
    val testClass = TestClass(Delegate())
var fu1 = (Delegate().testDelegated).subSequence(1133330132, 1786701894).lastIndexOfAny(CharArray(891573787, {a: Int -> (2083633612.toUInt()).compareTo(10.toUByte()).digitToChar()}), 126076032, true)
    for (prope6 in (Delegate().testDelegated).length.until(1274607364)) {
        val prope5 = size - prope6
        fu1 += prope8(prope5, get(prope5))
    }
    return (Delegate().testDelegated).compareTo(Delegate().test).shr(-1983826872)
}
2021-03-12 10:49:06,577 [main:302] - generating value of type = Function2<Int, Int, Int> false depth = 1
2021-03-12 10:49:06,579 [main:302] - generating value of type = Int true depth = 2
2021-03-12 10:49:06,581 [main:302] - generating value of type = [ERROR : LinkedList<Int>]<Int> false depth = 1
2021-03-12 10:49:06,584 [main:309] - RECREATED ERROR TYPE = null
