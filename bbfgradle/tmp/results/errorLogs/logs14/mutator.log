2021-03-11 12:26:06,406 [main:66] - Compilation checking started
2021-03-11 12:26:09,679 [main:52] - Trying to change 463 nodes
2021-03-11 12:26:09,679 [main:56] - replacing (list1.size, Int)
2021-03-11 12:26:09,681 [main:38] - replacing list1.size Int
2021-03-11 12:26:09,681 [main:42] - Getting value of type Int
2021-03-11 12:26:09,862 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:09,865 [main:46] - GENERATED VALUE OF TYPE Int = 1459102385
2021-03-11 12:26:09,866 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:10,477 [main:55] - randomType = HashSet<String>
2021-03-11 12:26:10,718 [main:302] - generating value of type = HashSet<String> false depth = 0
2021-03-11 12:26:10,919 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Strg> = TODO()
2021-03-11 12:26:10,923 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Strg> = TODO()
2021-03-11 12:26:11,107 [main:95] - GENERATED = hashSetOf<String>()
2021-03-11 12:26:11,392 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e4fa412]
2021-03-11 12:26:11,557 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:26:11,558 [main:66] - Generated call from random type = (hashSetOf<String>()).size.compareTo(91)
2021-03-11 12:26:11,558 [main:63] - replacement of list1.size of type Int is (hashSetOf<String>()).size.compareTo(91)
2021-03-11 12:26:11,702 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:11,702 [main:66] - Compilation checking started
2021-03-11 12:26:12,492 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:12,496 [main:56] - replacing (1u.toUByte(), UByte)
2021-03-11 12:26:12,497 [main:38] - replacing 1u.toUByte() UByte
2021-03-11 12:26:12,498 [main:42] - Getting value of type UByte
2021-03-11 12:26:12,669 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:12,670 [main:46] - GENERATED VALUE OF TYPE UByte = 116.toUByte()
2021-03-11 12:26:12,670 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:12,671 [main:55] - randomType = Boolean
2021-03-11 12:26:12,879 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:26:12,898 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:26:13,064 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:26:13,067 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@4b688389]
2021-03-11 12:26:13,068 [main:66] - Generated call from random type = (true).compareTo(false).toUByte()
2021-03-11 12:26:13,080 [main:94] - GETTING UByte from Int
2021-03-11 12:26:13,173 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@26f316e5]]
2021-03-11 12:26:13,174 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac]
2021-03-11 12:26:13,307 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:26:13,309 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@26f316e5]
2021-03-11 12:26:13,310 [main:105] - GENERATED CALL = (list4.size).div(-3551872471733091688).toUByte()
2021-03-11 12:26:13,310 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@4b688389]]
2021-03-11 12:26:13,311 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:26:13,465 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:13,467 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@4b688389]
2021-03-11 12:26:13,468 [main:105] - GENERATED CALL = (list4.size).compareTo(1127500889).toUByte()
2021-03-11 12:26:13,468 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@26f316e5]]
2021-03-11 12:26:13,468 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:26:13,468 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@26f316e5]
2021-03-11 12:26:13,469 [main:105] - GENERATED CALL = (list4.size).toLong().toUByte()
2021-03-11 12:26:13,469 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@4b688389]]
2021-03-11 12:26:13,469 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@4b688389]
2021-03-11 12:26:13,470 [main:105] - GENERATED CALL = (list4.size).toUByte()
2021-03-11 12:26:13,470 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@4b688389]]
2021-03-11 12:26:13,470 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:26:13,471 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@4b688389]
2021-03-11 12:26:13,471 [main:105] - GENERATED CALL = (list4.size).toInt().toUByte()
2021-03-11 12:26:13,471 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@41cd00cd]]
2021-03-11 12:26:13,472 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:26:13,472 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@41cd00cd]
2021-03-11 12:26:13,472 [main:105] - GENERATED CALL = (list4.size).toByte().toUByte()
2021-03-11 12:26:13,473 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@47f68aa4]]
2021-03-11 12:26:13,473 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:26:13,473 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@47f68aa4]
2021-03-11 12:26:13,474 [main:105] - GENERATED CALL = (list4.size).toShort().toUByte()
2021-03-11 12:26:13,474 [main:63] - replacement of 1u.toUByte() of type UByte is (list4.size).compareTo(1127500889).toUByte()
2021-03-11 12:26:13,602 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:13,602 [main:66] - Compilation checking started
2021-03-11 12:26:14,024 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list4.size).compareTo(1127500889).toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:14,029 [main:56] - replacing (list2.size, Int)
2021-03-11 12:26:14,030 [main:38] - replacing list2.size Int
2021-03-11 12:26:14,030 [main:42] - Getting value of type Int
2021-03-11 12:26:14,196 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:14,198 [main:46] - GENERATED VALUE OF TYPE Int = -1352911800
2021-03-11 12:26:14,198 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:14,200 [main:55] - randomType = UByte
2021-03-11 12:26:14,412 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:14,473 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27979cf9]
2021-03-11 12:26:14,609 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:14,611 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@495e3dd2]
2021-03-11 12:26:14,745 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:14,746 [main:66] - Generated call from random type = (88.toUByte()).compareTo(71.toUByte()).coerceAtMost(272532579)
2021-03-11 12:26:14,747 [main:94] - GETTING Int from Int
2021-03-11 12:26:14,811 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b90353c]]
2021-03-11 12:26:14,811 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:26:14,812 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b90353c]
2021-03-11 12:26:14,812 [main:105] - GENERATED CALL = (list4.size).toByte().countOneBits()
2021-03-11 12:26:14,812 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@25e62a12]]
2021-03-11 12:26:14,812 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:26:14,813 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@25e62a12]
2021-03-11 12:26:14,968 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:15,116 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:15,117 [main:105] - GENERATED CALL = (list4.size).toInt().coerceIn(-930236396, -533643580)
2021-03-11 12:26:15,117 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73ec0f58]]
2021-03-11 12:26:15,117 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73ec0f58]
2021-03-11 12:26:15,118 [main:105] - GENERATED CALL = (list4.size).inv()
2021-03-11 12:26:15,118 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e00055b]]
2021-03-11 12:26:15,118 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:26:15,118 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e00055b]
2021-03-11 12:26:15,250 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:26:15,251 [main:105] - GENERATED CALL = (list4.size).toInt().rem(103)
2021-03-11 12:26:15,251 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@296f4f62]]
2021-03-11 12:26:15,251 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:26:15,375 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:15,376 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@296f4f62]
2021-03-11 12:26:15,529 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:15,531 [main:105] - GENERATED CALL = (list4.size).compareTo(793999043).or(1145469042)
2021-03-11 12:26:15,533 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@757023a6]]
2021-03-11 12:26:15,534 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:26:15,679 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:15,681 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@757023a6]
2021-03-11 12:26:15,849 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:15,851 [main:105] - GENERATED CALL = (list4.size).compareTo(-1404411117).rotateLeft(-1235908792)
2021-03-11 12:26:15,851 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5673aca9]]
2021-03-11 12:26:15,851 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:26:15,851 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5673aca9]
2021-03-11 12:26:15,852 [main:105] - GENERATED CALL = (list4.size).toShort().countOneBits()
2021-03-11 12:26:15,852 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a00c980]]
2021-03-11 12:26:15,852 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:26:15,852 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a00c980]
2021-03-11 12:26:15,852 [main:105] - GENERATED CALL = (list4.size).toInt().unaryMinus()
2021-03-11 12:26:15,853 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce9cc4f]]
2021-03-11 12:26:15,853 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce9cc4f]
2021-03-11 12:26:15,853 [main:105] - GENERATED CALL = (list4.size).countLeadingZeroBits()
2021-03-11 12:26:15,853 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@f53ebe2]]
2021-03-11 12:26:15,853 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:26:15,853 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@f53ebe2]
2021-03-11 12:26:15,998 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:26:15,999 [main:105] - GENERATED CALL = (list4.size).toFloat().compareTo(-123)
2021-03-11 12:26:16,000 [main:63] - replacement of list2.size of type Int is (list4.size).toShort().countOneBits()
2021-03-11 12:26:16,136 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:16,137 [main:66] - Compilation checking started
2021-03-11 12:26:16,527 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if ((list4.size).toShort().countOneBits() > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:16,530 [main:56] - replacing (4u, ULong)
2021-03-11 12:26:16,530 [main:38] - replacing 4u ULong
2021-03-11 12:26:16,530 [main:42] - Getting value of type ULong
2021-03-11 12:26:16,657 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:26:16,658 [main:46] - GENERATED VALUE OF TYPE ULong = 1036954070066083103.toULong()
2021-03-11 12:26:16,658 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:17,086 [main:55] - randomType = Function1<HashMap<ULong, Char>, UShort>
2021-03-11 12:26:17,088 [main:94] - GETTING ULong from Int
2021-03-11 12:26:17,151 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5f1f24e3]]
2021-03-11 12:26:17,151 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:26:17,152 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5f1f24e3]
2021-03-11 12:26:17,152 [main:105] - GENERATED CALL = (list1.size).toLong().toULong()
2021-03-11 12:26:17,152 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]]
2021-03-11 12:26:17,153 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:26:17,310 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:26:17,312 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]
2021-03-11 12:26:17,312 [main:105] - GENERATED CALL = (list1.size).div(0.13221866666941617).toULong()
2021-03-11 12:26:17,312 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]]
2021-03-11 12:26:17,312 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:26:17,313 [main:105] - GENERATED CALL = (list1.size).toULong()
2021-03-11 12:26:17,313 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]]
2021-03-11 12:26:17,313 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:26:17,458 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:17,459 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:26:17,460 [main:105] - GENERATED CALL = (list1.size).compareTo(147143127).toULong()
2021-03-11 12:26:17,460 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]]
2021-03-11 12:26:17,460 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:26:17,460 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]
2021-03-11 12:26:17,461 [main:105] - GENERATED CALL = (list1.size).toDouble().toULong()
2021-03-11 12:26:17,461 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@36ffee72]]
2021-03-11 12:26:17,461 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:26:17,461 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@36ffee72]
2021-03-11 12:26:17,462 [main:105] - GENERATED CALL = (list1.size).toShort().toULong()
2021-03-11 12:26:17,462 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@67b166a0]]
2021-03-11 12:26:17,462 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:26:17,462 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@67b166a0]
2021-03-11 12:26:17,462 [main:105] - GENERATED CALL = (list1.size).toFloat().toULong()
2021-03-11 12:26:17,462 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]]
2021-03-11 12:26:17,462 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:26:17,463 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:26:17,463 [main:105] - GENERATED CALL = (list1.size).toInt().toULong()
2021-03-11 12:26:17,463 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@e31b846]]
2021-03-11 12:26:17,463 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:26:17,464 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@e31b846]
2021-03-11 12:26:17,464 [main:105] - GENERATED CALL = (list1.size).toByte().toULong()
2021-03-11 12:26:17,464 [main:63] - replacement of 4u of type ULong is (list1.size).toFloat().toULong()
2021-03-11 12:26:17,596 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:17,597 [main:66] - Compilation checking started
2021-03-11 12:26:18,340 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:18,344 [main:56] - replacing (list4.size > 23, Boolean)
2021-03-11 12:26:18,345 [main:38] - replacing list4.size > 23 Boolean
2021-03-11 12:26:18,345 [main:42] - Getting value of type Boolean
2021-03-11 12:26:18,467 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:26:18,468 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:26:18,468 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:18,469 [main:55] - randomType = UInt
2021-03-11 12:26:18,573 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:18,610 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@11cc301]
2021-03-11 12:26:18,726 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:18,728 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:26:18,856 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:26:18,858 [main:66] - Generated call from random type = (1244147221.toUInt()).equals("vzmgp").xor(true)
2021-03-11 12:26:18,867 [main:94] - GETTING Boolean from UShort
2021-03-11 12:26:18,915 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@14488e0b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-11 12:26:18,916 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@14488e0b]
2021-03-11 12:26:18,916 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-11 12:26:19,068 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:19,069 [main:105] - GENERATED CALL = (1u.toUShort()).toLong().equals("ulsbz")
2021-03-11 12:26:19,069 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@496bd320], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]]
2021-03-11 12:26:19,069 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@496bd320]
2021-03-11 12:26:19,070 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]
2021-03-11 12:26:19,202 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:19,203 [main:105] - GENERATED CALL = (1u.toUShort()).toFloat().equals("kbimu")
2021-03-11 12:26:19,203 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@47b7da3f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]]
2021-03-11 12:26:19,203 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@47b7da3f]
2021-03-11 12:26:19,204 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]
2021-03-11 12:26:19,320 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:19,321 [main:105] - GENERATED CALL = (1u.toUShort()).toByte().equals("ndzhj")
2021-03-11 12:26:19,321 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@14fafa60], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:26:19,321 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@14fafa60]
2021-03-11 12:26:19,478 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:19,480 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:26:19,606 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:19,607 [main:105] - GENERATED CALL = (1u.toUShort()).compareTo(5.toUByte()).equals("iizto")
2021-03-11 12:26:19,607 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:26:19,607 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e]
2021-03-11 12:26:19,715 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:19,716 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:26:19,836 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:19,841 [main:105] - GENERATED CALL = (1u.toUShort()).equals("akcyp").equals("usphq")
2021-03-11 12:26:19,842 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@496bd320], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34ffd74d]]
2021-03-11 12:26:19,842 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@496bd320]
2021-03-11 12:26:19,842 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34ffd74d]
2021-03-11 12:26:19,842 [main:105] - GENERATED CALL = (1u.toUShort()).toFloat().isNaN()
2021-03-11 12:26:19,842 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59fc7cfc], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@398f03f]]
2021-03-11 12:26:19,843 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59fc7cfc]
2021-03-11 12:26:19,963 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:26:19,964 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@398f03f]
2021-03-11 12:26:19,965 [main:105] - GENERATED CALL = (1u.toUShort()).rangeTo(22436.toUShort()).isEmpty()
2021-03-11 12:26:19,965 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59fc7cfc], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public operator fun kotlin.ranges.UIntRange.contains(value: kotlin.UByte): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7eaedcbf]]
2021-03-11 12:26:19,965 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59fc7cfc]
2021-03-11 12:26:20,080 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:26:20,082 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public operator fun kotlin.ranges.UIntRange.contains(value: kotlin.UByte): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7eaedcbf]
2021-03-11 12:26:20,206 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:20,207 [main:105] - GENERATED CALL = (1u.toUShort()).rangeTo(2419.toUShort()).contains(34.toUByte())
2021-03-11 12:26:20,207 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:26:20,207 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e]
2021-03-11 12:26:20,344 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:20,345 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:26:20,461 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:26:20,462 [main:105] - GENERATED CALL = (1u.toUShort()).equals("cmreu").xor(true)
2021-03-11 12:26:20,462 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@496bd320], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@143977f1]]
2021-03-11 12:26:20,462 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@496bd320]
2021-03-11 12:26:20,462 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@143977f1]
2021-03-11 12:26:20,463 [main:105] - GENERATED CALL = (1u.toUShort()).toFloat().isFinite()
2021-03-11 12:26:20,463 [main:63] - replacement of list4.size > 23 of type Boolean is (1u.toUShort()).toFloat().isNaN()
2021-03-11 12:26:20,573 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:20,574 [main:66] - Compilation checking started
2021-03-11 12:26:21,339 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:21,341 [main:56] - replacing (list1 != listOf<UInt>(1u, 2u, 3u, 4u), Boolean)
2021-03-11 12:26:21,342 [main:38] - replacing list1 != listOf<UInt>(1u, 2u, 3u, 4u) Boolean
2021-03-11 12:26:21,342 [main:42] - Getting value of type Boolean
2021-03-11 12:26:21,465 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:26:21,465 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:26:21,466 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:21,467 [main:55] - randomType = UShort
2021-03-11 12:26:21,581 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:26:21,623 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7fb0a647]
2021-03-11 12:26:21,624 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]
2021-03-11 12:26:21,733 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:21,733 [main:66] - Generated call from random type = (32231.toUShort()).toByte().equals("ffepy")
2021-03-11 12:26:21,735 [main:94] - GETTING Boolean from Int
2021-03-11 12:26:21,787 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:26:21,787 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:26:21,903 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:21,904 [main:105] - GENERATED CALL = (list4.size).equals("cfgtc")
2021-03-11 12:26:21,904 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]]
2021-03-11 12:26:21,904 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:26:22,044 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:26:22,045 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]
2021-03-11 12:26:22,046 [main:105] - GENERATED CALL = (list4.size).div(0.8516539347684844).isNaN()
2021-03-11 12:26:22,046 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@143977f1]]
2021-03-11 12:26:22,046 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:26:22,046 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@143977f1]
2021-03-11 12:26:22,047 [main:105] - GENERATED CALL = (list4.size).toFloat().isFinite()
2021-03-11 12:26:22,047 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]]
2021-03-11 12:26:22,047 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:26:22,047 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]
2021-03-11 12:26:22,170 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:22,171 [main:105] - GENERATED CALL = (list4.size).toFloat().equals("fvlou")
2021-03-11 12:26:22,171 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@de42c9e]]
2021-03-11 12:26:22,171 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:26:22,171 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@de42c9e]
2021-03-11 12:26:22,277 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:22,277 [main:105] - GENERATED CALL = (list4.size).toShort().equals("gryrb")
2021-03-11 12:26:22,277 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e04d4f4]]
2021-03-11 12:26:22,277 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:26:22,278 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e04d4f4]
2021-03-11 12:26:22,278 [main:105] - GENERATED CALL = (list4.size).toChar().isLowSurrogate()
2021-03-11 12:26:22,278 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34ffd74d]]
2021-03-11 12:26:22,278 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:26:22,278 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34ffd74d]
2021-03-11 12:26:22,278 [main:105] - GENERATED CALL = (list4.size).toFloat().isNaN()
2021-03-11 12:26:22,278 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-11 12:26:22,278 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:26:22,278 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-11 12:26:22,383 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:22,384 [main:105] - GENERATED CALL = (list4.size).toLong().equals("kxdha")
2021-03-11 12:26:22,384 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ebac349]]
2021-03-11 12:26:22,384 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:26:22,384 [main:137] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ebac349]
2021-03-11 12:26:22,384 [main:105] - GENERATED CALL = (list4.size).toChar().isLowerCase()
2021-03-11 12:26:22,384 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:26:22,384 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:26:22,515 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:22,516 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:26:22,653 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:26:22,654 [main:105] - GENERATED CALL = (list4.size).equals("zwevx").equals("vxloq")
2021-03-11 12:26:22,654 [main:63] - replacement of list1 != listOf<UInt>(1u, 2u, 3u, 4u) of type Boolean is (list4.size).equals("zwevx").equals("vxloq")
2021-03-11 12:26:22,761 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:22,762 [main:66] - Compilation checking started
2021-03-11 12:26:23,064 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list4.size).equals("zwevx").equals("vxloq")) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:23,067 [main:56] - replacing (1u.toUByte() until 5u.toUByte(), UIntRange)
2021-03-11 12:26:23,067 [main:38] - replacing 1u.toUByte() until 5u.toUByte() UIntRange
2021-03-11 12:26:23,067 [main:42] - Getting value of type UIntRange
2021-03-11 12:26:23,186 [main:302] - generating value of type = UIntRange false depth = 0
2021-03-11 12:26:23,299 [main:43] - GENERATING CALL OF fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-11 12:26:23,302 [main:61] - WITHOUT TYPE PARAMS = fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-11 12:26:23,636 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:26:23,637 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:26:23,638 [main:95] - GENERATED = UIntRange(2033453100.toUInt(), 1210168120.toUInt())
2021-03-11 12:26:23,638 [main:46] - GENERATED VALUE OF TYPE UIntRange = UIntRange(2033453100.toUInt(), 1210168120.toUInt())
2021-03-11 12:26:23,638 [main:49] - GENERATED IS CALL =true
2021-03-11 12:26:23,639 [main:55] - randomType = Boolean
2021-03-11 12:26:23,769 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:26:23,788 [main:94] - GETTING UIntRange from ArrayList<ULong>
2021-03-11 12:26:23,993 [main:94] - GETTING UIntRange from Int
2021-03-11 12:26:24,051 [main:94] - GETTING UIntRange from Int
2021-03-11 12:26:24,052 [main:94] - GETTING UIntRange from Int
2021-03-11 12:26:24,053 [main:94] - GETTING UIntRange from Boolean
2021-03-11 12:26:24,069 [main:94] - GETTING UIntRange from ArrayList<UInt>
2021-03-11 12:26:24,263 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3de0725f]]
2021-03-11 12:26:24,263 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac]
2021-03-11 12:26:24,370 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:24,371 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3de0725f]
2021-03-11 12:26:24,484 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:24,485 [main:105] - GENERATED CALL = (list1).get(-162825204).until(1152212611.toUInt())
2021-03-11 12:26:24,486 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac], @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@22fbec8c]]
2021-03-11 12:26:24,486 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac]
2021-03-11 12:26:24,588 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:24,588 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@22fbec8c]
2021-03-11 12:26:24,688 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:24,689 [main:105] - GENERATED CALL = (list1).get(-1808367125).rangeTo(549677369.toUInt())
2021-03-11 12:26:24,689 [main:63] - replacement of 1u.toUByte() until 5u.toUByte() of type UIntRange is (list1).get(-1808367125).rangeTo(549677369.toUInt())
2021-03-11 12:26:24,790 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:24,791 [main:66] - Compilation checking started
2021-03-11 12:26:25,385 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:25,388 [main:56] - replacing (i, UInt)
2021-03-11 12:26:25,389 [main:38] - replacing i UInt
2021-03-11 12:26:25,389 [main:42] - Getting value of type UInt
2021-03-11 12:26:25,524 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:25,525 [main:46] - GENERATED VALUE OF TYPE UInt = 1902497714.toUInt()
2021-03-11 12:26:25,525 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:25,526 [main:55] - randomType = String
2021-03-11 12:26:25,664 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:26:25,704 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.UInt): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f790dbf]
2021-03-11 12:26:25,813 [main:302] - generating value of type = Function1<Char, UInt> false depth = 0
2021-03-11 12:26:25,814 [main:302] - generating value of type = UInt true depth = 1
2021-03-11 12:26:25,816 [main:66] - Generated call from random type = ("avcgq").sumOf({a: Char -> 767104385.toUInt()})
2021-03-11 12:26:25,818 [main:94] - GETTING UInt from Int
2021-03-11 12:26:25,876 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:26:25,876 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:26:25,986 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:26:25,988 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:26:25,988 [main:105] - GENERATED CALL = (list4.size).div(0.030647102170834994).toUInt()
2021-03-11 12:26:25,988 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]]
2021-03-11 12:26:25,988 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:26:25,989 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]
2021-03-11 12:26:25,989 [main:105] - GENERATED CALL = (list4.size).toShort().toUInt()
2021-03-11 12:26:25,989 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:26:25,989 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:26:26,093 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:26,094 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:26:26,095 [main:105] - GENERATED CALL = (list4.size).compareTo(814994010).toUInt()
2021-03-11 12:26:26,095 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]]
2021-03-11 12:26:26,095 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:26:26,095 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]
2021-03-11 12:26:26,095 [main:105] - GENERATED CALL = (list4.size).toLong().toUInt()
2021-03-11 12:26:26,095 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]]
2021-03-11 12:26:26,095 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:26:26,096 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]
2021-03-11 12:26:26,096 [main:105] - GENERATED CALL = (list4.size).toFloat().toUInt()
2021-03-11 12:26:26,096 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]]
2021-03-11 12:26:26,096 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:26:26,096 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]
2021-03-11 12:26:26,096 [main:105] - GENERATED CALL = (list4.size).toByte().toUInt()
2021-03-11 12:26:26,097 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:26:26,097 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:26:26,097 [main:105] - GENERATED CALL = (list4.size).toUInt()
2021-03-11 12:26:26,097 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:26:26,097 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:26:26,097 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:26:26,097 [main:105] - GENERATED CALL = (list4.size).toDouble().toUInt()
2021-03-11 12:26:26,097 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:26:26,097 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:26:26,098 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:26:26,098 [main:105] - GENERATED CALL = (list4.size).toInt().toUInt()
2021-03-11 12:26:26,098 [main:63] - replacement of i of type UInt is (list4.size).toUInt()
2021-03-11 12:26:26,196 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:26,196 [main:66] - Compilation checking started
2021-03-11 12:26:26,502 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add((list4.size).toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:26,505 [main:56] - replacing (23, Int)
2021-03-11 12:26:26,505 [main:38] - replacing 23 Int
2021-03-11 12:26:26,505 [main:42] - Getting value of type Int
2021-03-11 12:26:26,611 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:26,611 [main:46] - GENERATED VALUE OF TYPE Int = -692484397
2021-03-11 12:26:26,612 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:26,613 [main:55] - randomType = String
2021-03-11 12:26:26,711 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:26:26,733 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c497949]
2021-03-11 12:26:26,840 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:26,945 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:26,946 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bc297bd]
2021-03-11 12:26:27,058 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:26:27,059 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:26:27,061 [main:66] - Generated call from random type = ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})
2021-03-11 12:26:27,061 [main:63] - replacement of 23 of type Int is ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})
2021-03-11 12:26:27,194 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:27,194 [main:66] - Compilation checking started
2021-03-11 12:26:27,835 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in range2) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:27,840 [main:56] - replacing (i, UInt)
2021-03-11 12:26:27,840 [main:38] - replacing i UInt
2021-03-11 12:26:27,840 [main:42] - Getting value of type UInt
2021-03-11 12:26:27,958 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:27,958 [main:46] - GENERATED VALUE OF TYPE UInt = 1785541927.toUInt()
2021-03-11 12:26:27,959 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:28,202 [main:55] - randomType = Short?
2021-03-11 12:26:28,327 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:26:28,433 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6ba8e841]
2021-03-11 12:26:28,573 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:26:28,574 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:26:28,575 [main:66] - Generated call from random type = (24241)?.div(0.023344606692992098).toUInt()
2021-03-11 12:26:28,576 [main:94] - GETTING UInt from Boolean
2021-03-11 12:26:28,590 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:26:28,591 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:26:28,712 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:26:28,714 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:26:28,714 [main:105] - GENERATED CALL = (list4.add(i)).compareTo(true).toUInt()
2021-03-11 12:26:28,714 [main:63] - replacement of i of type UInt is 1785541927.toUInt()
2021-03-11 12:26:28,824 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:28,824 [main:66] - Compilation checking started
2021-03-11 12:26:29,365 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in range2) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:29,371 [main:56] - replacing (1u, ULong)
2021-03-11 12:26:29,372 [main:38] - replacing 1u ULong
2021-03-11 12:26:29,372 [main:42] - Getting value of type ULong
2021-03-11 12:26:29,500 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:26:29,501 [main:46] - GENERATED VALUE OF TYPE ULong = 3025966061041734286.toULong()
2021-03-11 12:26:29,501 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:29,752 [main:55] - randomType = Set<Float>
2021-03-11 12:26:29,753 [main:94] - GETTING ULong from Int
2021-03-11 12:26:29,808 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5f1f24e3]]
2021-03-11 12:26:29,808 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:26:29,808 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5f1f24e3]
2021-03-11 12:26:29,809 [main:105] - GENERATED CALL = (list2.size).toLong().toULong()
2021-03-11 12:26:29,809 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@e31b846]]
2021-03-11 12:26:29,809 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:26:29,809 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@e31b846]
2021-03-11 12:26:29,809 [main:105] - GENERATED CALL = (list2.size).toByte().toULong()
2021-03-11 12:26:29,809 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]]
2021-03-11 12:26:29,810 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:26:29,923 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:29,924 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:26:29,925 [main:105] - GENERATED CALL = (list2.size).compareTo(2041468372).toULong()
2021-03-11 12:26:29,925 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]]
2021-03-11 12:26:29,925 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:26:29,925 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]
2021-03-11 12:26:29,925 [main:105] - GENERATED CALL = (list2.size).toDouble().toULong()
2021-03-11 12:26:29,925 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@67b166a0]]
2021-03-11 12:26:29,925 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:26:29,926 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@67b166a0]
2021-03-11 12:26:29,926 [main:105] - GENERATED CALL = (list2.size).toFloat().toULong()
2021-03-11 12:26:29,926 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@36ffee72]]
2021-03-11 12:26:29,926 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:26:29,926 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@36ffee72]
2021-03-11 12:26:29,926 [main:105] - GENERATED CALL = (list2.size).toShort().toULong()
2021-03-11 12:26:29,926 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]]
2021-03-11 12:26:29,926 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:26:30,041 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:26:30,042 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]
2021-03-11 12:26:30,043 [main:105] - GENERATED CALL = (list2.size).div(0.6795021052660245).toULong()
2021-03-11 12:26:30,043 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]]
2021-03-11 12:26:30,043 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:26:30,043 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:26:30,044 [main:105] - GENERATED CALL = (list2.size).toInt().toULong()
2021-03-11 12:26:30,044 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]]
2021-03-11 12:26:30,044 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:26:30,044 [main:105] - GENERATED CALL = (list2.size).toULong()
2021-03-11 12:26:30,044 [main:63] - replacement of 1u of type ULong is (list2.size).toDouble().toULong()
2021-03-11 12:26:30,153 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:30,153 [main:66] - Compilation checking started
2021-03-11 12:26:30,705 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in range2) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:30,708 [main:56] - replacing (2u, UInt)
2021-03-11 12:26:30,709 [main:38] - replacing 2u UInt
2021-03-11 12:26:30,709 [main:42] - Getting value of type UInt
2021-03-11 12:26:30,813 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:30,814 [main:46] - GENERATED VALUE OF TYPE UInt = 1156686279.toUInt()
2021-03-11 12:26:30,814 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:30,816 [main:55] - randomType = Int
2021-03-11 12:26:30,939 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:30,996 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:26:30,997 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]
2021-03-11 12:26:30,997 [main:66] - Generated call from random type = (-445463064).toShort().toUInt()
2021-03-11 12:26:30,998 [main:94] - GETTING UInt from UByte
2021-03-11 12:26:31,036 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2], @kotlin.internal.InlineOnly public final inline operator fun minus(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@22c5f3e8]]
2021-03-11 12:26:31,036 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2]
2021-03-11 12:26:31,036 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun minus(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@22c5f3e8]
2021-03-11 12:26:31,143 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:31,144 [main:105] - GENERATED CALL = (1u.toUByte()).toUShort().minus(52.toUByte())
2021-03-11 12:26:31,145 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11bacd68], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]]
2021-03-11 12:26:31,145 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11bacd68]
2021-03-11 12:26:31,145 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]
2021-03-11 12:26:31,145 [main:105] - GENERATED CALL = (1u.toUByte()).toLong().toUInt()
2021-03-11 12:26:31,145 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6547fe6b], public open val endInclusive: kotlin.UInt defined in kotlin.ranges.UIntRange[DeserializedPropertyDescriptor@6fdb6643]]
2021-03-11 12:26:31,145 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6547fe6b]
2021-03-11 12:26:31,258 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:31,259 [main:105] - GENERATED CALL = (1u.toUByte()).rangeTo(104.toUByte()).endInclusive
2021-03-11 12:26:31,259 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.takeHighestOneBit(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7b915d3a]]
2021-03-11 12:26:31,259 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc]
2021-03-11 12:26:31,370 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:31,372 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.takeHighestOneBit(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7b915d3a]
2021-03-11 12:26:31,372 [main:105] - GENERATED CALL = (1u.toUByte()).div(81.toUByte()).takeHighestOneBit()
2021-03-11 12:26:31,372 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc], @kotlin.internal.InlineOnly public final inline operator fun times(other: kotlin.UByte): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@144aba8]]
2021-03-11 12:26:31,372 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc]
2021-03-11 12:26:31,480 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:31,481 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun times(other: kotlin.UByte): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@144aba8]
2021-03-11 12:26:31,589 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:31,590 [main:105] - GENERATED CALL = (1u.toUByte()).div(98.toUByte()).times(12.toUByte())
2021-03-11 12:26:31,590 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.takeLowestOneBit(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@819e073]]
2021-03-11 12:26:31,591 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc]
2021-03-11 12:26:31,715 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:31,716 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.takeLowestOneBit(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@819e073]
2021-03-11 12:26:31,716 [main:105] - GENERATED CALL = (1u.toUByte()).div(31.toUByte()).takeLowestOneBit()
2021-03-11 12:26:31,716 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.rotateRight(bitCount: kotlin.Int): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@3b33304b]]
2021-03-11 12:26:31,716 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc]
2021-03-11 12:26:31,833 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:31,834 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.rotateRight(bitCount: kotlin.Int): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@3b33304b]
2021-03-11 12:26:31,947 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:31,949 [main:105] - GENERATED CALL = (1u.toUByte()).div(107.toUByte()).rotateRight(1217912391)
2021-03-11 12:26:31,949 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceAtMost(maximumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18a564a7]]
2021-03-11 12:26:31,949 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc]
2021-03-11 12:26:32,053 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:32,054 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceAtMost(maximumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18a564a7]
2021-03-11 12:26:32,160 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:32,161 [main:105] - GENERATED CALL = (1u.toUByte()).div(70.toUByte()).coerceAtMost(1667904852.toUInt())
2021-03-11 12:26:32,161 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7bc34e09], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:26:32,161 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7bc34e09]
2021-03-11 12:26:32,265 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:32,266 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:26:32,266 [main:105] - GENERATED CALL = (1u.toUByte()).compareTo(51.toUByte()).toUInt()
2021-03-11 12:26:32,266 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun times(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@28e9c741]]
2021-03-11 12:26:32,266 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun times(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@28e9c741]
2021-03-11 12:26:32,389 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:32,390 [main:105] - GENERATED CALL = (1u.toUByte()).times(126.toUByte())
2021-03-11 12:26:32,390 [main:63] - replacement of 2u of type UInt is (1u.toUByte()).div(81.toUByte()).takeHighestOneBit()
2021-03-11 12:26:32,508 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:32,509 [main:66] - Compilation checking started
2021-03-11 12:26:33,063 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in range2) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:33,067 [main:56] - replacing (5u.toUShort(), UShort)
2021-03-11 12:26:33,068 [main:38] - replacing 5u.toUShort() UShort
2021-03-11 12:26:33,068 [main:42] - Getting value of type UShort
2021-03-11 12:26:33,176 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:26:33,177 [main:46] - GENERATED VALUE OF TYPE UShort = 20020.toUShort()
2021-03-11 12:26:33,177 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:33,178 [main:55] - randomType = Float
2021-03-11 12:26:33,282 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:26:33,323 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@41a252d0]
2021-03-11 12:26:33,323 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@5a170a6b]
2021-03-11 12:26:33,324 [main:66] - Generated call from random type = (0.12092644f).toByte().toUShort()
2021-03-11 12:26:33,325 [main:94] - GETTING UShort from Int
2021-03-11 12:26:33,354 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@5a170a6b]]
2021-03-11 12:26:33,354 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:26:33,355 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@5a170a6b]
2021-03-11 12:26:33,355 [main:105] - GENERATED CALL = (list3.size).toByte().toUShort()
2021-03-11 12:26:33,355 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@7c7b0f5d]]
2021-03-11 12:26:33,355 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:26:33,355 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@7c7b0f5d]
2021-03-11 12:26:33,355 [main:105] - GENERATED CALL = (list3.size).toInt().toUShort()
2021-03-11 12:26:33,355 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@7c7b0f5d]]
2021-03-11 12:26:33,356 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:26:33,453 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:33,454 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@7c7b0f5d]
2021-03-11 12:26:33,454 [main:105] - GENERATED CALL = (list3.size).compareTo(787462642).toUShort()
2021-03-11 12:26:33,454 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@7c7b0f5d]]
2021-03-11 12:26:33,454 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@7c7b0f5d]
2021-03-11 12:26:33,454 [main:105] - GENERATED CALL = (list3.size).toUShort()
2021-03-11 12:26:33,455 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@5a65140d]]
2021-03-11 12:26:33,455 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac]
2021-03-11 12:26:33,552 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:26:33,553 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@5a65140d]
2021-03-11 12:26:33,553 [main:105] - GENERATED CALL = (list3.size).div(-7232651056978004737).toUShort()
2021-03-11 12:26:33,553 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@1320fd4d]]
2021-03-11 12:26:33,553 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:26:33,553 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@1320fd4d]
2021-03-11 12:26:33,554 [main:105] - GENERATED CALL = (list3.size).toShort().toUShort()
2021-03-11 12:26:33,554 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@5a65140d]]
2021-03-11 12:26:33,554 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:26:33,554 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@5a65140d]
2021-03-11 12:26:33,554 [main:105] - GENERATED CALL = (list3.size).toLong().toUShort()
2021-03-11 12:26:33,554 [main:63] - replacement of 5u.toUShort() of type UShort is (list3.size).toByte().toUShort()
2021-03-11 12:26:33,653 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:33,653 [main:66] - Compilation checking started
2021-03-11 12:26:34,130 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in range2) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:34,133 [main:56] - replacing (range2, UIntRange)
2021-03-11 12:26:34,134 [main:38] - replacing range2 UIntRange
2021-03-11 12:26:34,134 [main:42] - Getting value of type UIntRange
2021-03-11 12:26:34,248 [main:302] - generating value of type = UIntRange false depth = 0
2021-03-11 12:26:34,360 [main:43] - GENERATING CALL OF fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-11 12:26:34,362 [main:61] - WITHOUT TYPE PARAMS = fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-11 12:26:34,677 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:26:34,678 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:26:34,678 [main:95] - GENERATED = UIntRange(175880686.toUInt(), 652313422.toUInt())
2021-03-11 12:26:34,678 [main:46] - GENERATED VALUE OF TYPE UIntRange = UIntRange(175880686.toUInt(), 652313422.toUInt())
2021-03-11 12:26:34,679 [main:49] - GENERATED IS CALL =true
2021-03-11 12:26:34,783 [main:55] - randomType = Short
2021-03-11 12:26:34,908 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:26:34,970 [main:94] - GETTING UIntRange from Int
2021-03-11 12:26:35,005 [main:94] - GETTING UIntRange from Int
2021-03-11 12:26:35,006 [main:94] - GETTING UIntRange from Boolean
2021-03-11 12:26:35,015 [main:94] - GETTING UIntRange from Boolean
2021-03-11 12:26:35,016 [main:94] - GETTING UIntRange from UByte
2021-03-11 12:26:35,038 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UShort.until(to: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@30c5ce0a]]
2021-03-11 12:26:35,038 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2]
2021-03-11 12:26:35,039 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UShort.until(to: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@30c5ce0a]
2021-03-11 12:26:35,136 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:26:35,137 [main:105] - GENERATED CALL = (1u.toUByte()).toUShort().until(6955.toUShort())
2021-03-11 12:26:35,137 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2], @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59fc7cfc]]
2021-03-11 12:26:35,137 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2]
2021-03-11 12:26:35,137 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59fc7cfc]
2021-03-11 12:26:35,243 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:26:35,244 [main:105] - GENERATED CALL = (1u.toUByte()).toUShort().rangeTo(31663.toUShort())
2021-03-11 12:26:35,244 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3de0725f]]
2021-03-11 12:26:35,244 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc]
2021-03-11 12:26:35,353 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:35,354 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3de0725f]
2021-03-11 12:26:35,456 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:35,457 [main:105] - GENERATED CALL = (1u.toUByte()).div(58.toUByte()).until(706773689.toUInt())
2021-03-11 12:26:35,457 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6547fe6b]]
2021-03-11 12:26:35,457 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6547fe6b]
2021-03-11 12:26:35,567 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:35,568 [main:105] - GENERATED CALL = (1u.toUByte()).rangeTo(98.toUByte())
2021-03-11 12:26:35,568 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UByte.until(to: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3c62a22b]]
2021-03-11 12:26:35,568 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UByte.until(to: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3c62a22b]
2021-03-11 12:26:35,676 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:35,677 [main:105] - GENERATED CALL = (1u.toUByte()).until(115.toUByte())
2021-03-11 12:26:35,677 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc], @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@22fbec8c]]
2021-03-11 12:26:35,677 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc]
2021-03-11 12:26:35,779 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:35,780 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@22fbec8c]
2021-03-11 12:26:35,881 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:35,882 [main:105] - GENERATED CALL = (1u.toUByte()).div(124.toUByte()).rangeTo(982941085.toUInt())
2021-03-11 12:26:35,882 [main:63] - replacement of range2 of type UIntRange is (1u.toUByte()).toUShort().until(6955.toUShort())
2021-03-11 12:26:35,980 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:35,981 [main:66] - Compilation checking started
2021-03-11 12:26:36,486 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:36,491 [main:56] - replacing (list3.size, Int)
2021-03-11 12:26:36,492 [main:38] - replacing list3.size Int
2021-03-11 12:26:36,492 [main:42] - Getting value of type Int
2021-03-11 12:26:36,619 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:36,620 [main:46] - GENERATED VALUE OF TYPE Int = 2100113572
2021-03-11 12:26:36,620 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:37,277 [main:55] - randomType = Triple<ArrayDeque<ULong?>, String?, Short>?
2021-03-11 12:26:37,409 [main:302] - generating value of type = Triple<ArrayDeque<ULong?>, String?, Short> false depth = 0
2021-03-11 12:26:37,515 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ArrayDeque<ULong?>, second: String?, third: Short): Triple<ArrayDeque<ULong?>, String?, Short> = TODO()
2021-03-11 12:26:37,517 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ArrayDeque<ULong?>, second: String?, third: Short): Triple<ArrayDeque<ULong?>, String?, Short> = TODO()
2021-03-11 12:26:37,618 [main:302] - generating value of type = ArrayDeque<ULong?> false depth = 3
2021-03-11 12:26:37,721 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<ULong?> = TODO()
2021-03-11 12:26:37,723 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<ULong?> = TODO()
2021-03-11 12:26:37,823 [main:95] - GENERATED = ArrayDeque<ULong?>()
2021-03-11 12:26:37,824 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:26:37,824 [main:302] - generating value of type = Short true depth = 3
2021-03-11 12:26:37,825 [main:95] - GENERATED = Triple<ArrayDeque<ULong?>, String?, Short>(ArrayDeque<ULong?>(), "qmiuw", 24553)
2021-03-11 12:26:37,865 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6a74b59a]
2021-03-11 12:26:37,865 [main:66] - Generated call from random type = (Triple<ArrayDeque<ULong?>, String?, Short>(ArrayDeque<ULong?>(), "qmiuw", 24553))?.third.toInt()
2021-03-11 12:26:37,866 [main:94] - GETTING Int from ArrayList<UInt>
2021-03-11 12:26:38,071 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@edbc97d], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a4ce2f]]
2021-03-11 12:26:38,071 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a4ce2f]
2021-03-11 12:26:38,072 [main:105] - GENERATED CALL = (list3).size.toInt()
2021-03-11 12:26:38,072 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@218f9aa3], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@757023a6]]
2021-03-11 12:26:38,072 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@757023a6]
2021-03-11 12:26:38,233 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:38,234 [main:105] - GENERATED CALL = (list3).modCount.rotateLeft(-972018153)
2021-03-11 12:26:38,234 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@218f9aa3], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bf73503]]
2021-03-11 12:26:38,234 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bf73503]
2021-03-11 12:26:38,235 [main:105] - GENERATED CALL = (list3).modCount.inc()
2021-03-11 12:26:38,235 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@edbc97d], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e00055b]]
2021-03-11 12:26:38,235 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e00055b]
2021-03-11 12:26:38,353 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:26:38,354 [main:105] - GENERATED CALL = (list3).size.rem(-11)
2021-03-11 12:26:38,354 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@218f9aa3], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@137766b4]]
2021-03-11 12:26:38,355 [main:105] - GENERATED CALL = (list3).modCount.absoluteValue
2021-03-11 12:26:38,355 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@218f9aa3], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e7c0a80]]
2021-03-11 12:26:38,355 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e7c0a80]
2021-03-11 12:26:38,468 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:38,469 [main:105] - GENERATED CALL = (list3).modCount.rotateRight(23974260)
2021-03-11 12:26:38,469 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@218f9aa3], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51c62d81]]
2021-03-11 12:26:38,469 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51c62d81]
2021-03-11 12:26:38,469 [main:105] - GENERATED CALL = (list3).modCount.takeHighestOneBit()
2021-03-11 12:26:38,469 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@218f9aa3], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b7cdc47]]
2021-03-11 12:26:38,470 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b7cdc47]
2021-03-11 12:26:38,470 [main:105] - GENERATED CALL = (list3).modCount.unaryPlus()
2021-03-11 12:26:38,470 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@edbc97d], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@361986c2]]
2021-03-11 12:26:38,470 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@361986c2]
2021-03-11 12:26:38,578 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:38,579 [main:105] - GENERATED CALL = (list3).size.xor(1801929635)
2021-03-11 12:26:38,580 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@218f9aa3], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73ec0f58]]
2021-03-11 12:26:38,580 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73ec0f58]
2021-03-11 12:26:38,580 [main:105] - GENERATED CALL = (list3).modCount.inv()
2021-03-11 12:26:38,580 [main:63] - replacement of list3.size of type Int is (list3).modCount.inc()
2021-03-11 12:26:38,689 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:38,690 [main:66] - Compilation checking started
2021-03-11 12:26:39,002 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list3).modCount.inc() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}


2021-03-11 12:26:39,007 [main:56] - replacing (list4, ArrayList<ULong>)
2021-03-11 12:26:39,008 [main:38] - replacing list4 ArrayList<ULong>
2021-03-11 12:26:39,008 [main:42] - Getting value of type ArrayList<ULong>
2021-03-11 12:26:39,121 [main:302] - generating value of type = ArrayList<ULong> false depth = 0
2021-03-11 12:26:39,238 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<ULong> = TODO()
2021-03-11 12:26:39,240 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<ULong> = TODO()
2021-03-11 12:26:39,341 [main:95] - GENERATED = arrayListOf<ULong>()
2021-03-11 12:26:39,341 [main:46] - GENERATED VALUE OF TYPE ArrayList<ULong> = arrayListOf<ULong>()
2021-03-11 12:26:39,341 [main:49] - GENERATED IS CALL =true
2021-03-11 12:26:39,449 [main:55] - randomType = ArrayList<Byte>
2021-03-11 12:26:39,554 [main:302] - generating value of type = ArrayList<Byte> false depth = 0
2021-03-11 12:26:39,658 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Byte): ArrayList<Byte> = TODO()
2021-03-11 12:26:39,659 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Byte): ArrayList<Byte> = TODO()
2021-03-11 12:26:39,758 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 12:26:39,759 [main:95] - GENERATED = arrayListOf<Byte>(-112)
2021-03-11 12:26:39,909 [main:94] - GETTING ArrayList<ULong> from ArrayList<ULong>
2021-03-11 12:26:40,020 [main:63] - replacement of list4 of type ArrayList<ULong> is list4
2021-03-11 12:26:40,128 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:26:40,132 [main:56] - replacing (list4, ArrayList<ULong>)
2021-03-11 12:26:40,133 [main:38] - replacing list4 ArrayList<ULong>
2021-03-11 12:26:40,133 [main:42] - Getting value of type ArrayList<ULong>
2021-03-11 12:26:40,233 [main:302] - generating value of type = ArrayList<ULong> false depth = 0
2021-03-11 12:26:40,342 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<ULong> = TODO()
2021-03-11 12:26:40,344 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<ULong> = TODO()
2021-03-11 12:26:40,545 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:26:40,546 [main:95] - GENERATED = ArrayList<ULong>(675282597)
2021-03-11 12:26:40,546 [main:46] - GENERATED VALUE OF TYPE ArrayList<ULong> = ArrayList<ULong>(675282597)
2021-03-11 12:26:40,546 [main:49] - GENERATED IS CALL =true
2021-03-11 12:26:40,548 [main:55] - randomType = Int
2021-03-11 12:26:40,649 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:40,758 [main:94] - GETTING ArrayList<ULong> from UShort
2021-03-11 12:26:40,786 [main:94] - GETTING ArrayList<ULong> from Int
2021-03-11 12:26:40,841 [main:94] - GETTING ArrayList<ULong> from ArrayList<UInt>
2021-03-11 12:26:40,976 [main:63] - replacement of list4 of type ArrayList<ULong> is list2
2021-03-11 12:26:41,073 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:26:41,074 [main:66] - Compilation checking started
2021-03-11 12:26:41,529 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return "OK"
}


2021-03-11 12:26:41,532 [main:56] - replacing (4u, UInt)
2021-03-11 12:26:41,533 [main:38] - replacing 4u UInt
2021-03-11 12:26:41,533 [main:42] - Getting value of type UInt
2021-03-11 12:26:41,632 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:41,633 [main:46] - GENERATED VALUE OF TYPE UInt = 993170678.toUInt()
2021-03-11 12:26:41,633 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:42,376 [main:55] - randomType = Pair<Short?, ArrayDeque<Triple<Long, Float, Long>>>
2021-03-11 12:26:42,473 [main:302] - generating value of type = Pair<Short?, ArrayDeque<Triple<Long, Float, Long>>> false depth = 0
2021-03-11 12:26:42,578 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Short?, second: ArrayDeque<Triple<Long, Float, Long>>): Pair<Short?, ArrayDeque<Triple<Long, Float, Long>>> = TODO()
2021-03-11 12:26:42,580 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Short?, second: ArrayDeque<Triple<Long, Float, Long>>): Pair<Short?, ArrayDeque<Triple<Long, Float, Long>>> = TODO()
2021-03-11 12:26:42,684 [main:302] - generating value of type = Short true depth = 3
2021-03-11 12:26:42,684 [main:302] - generating value of type = ArrayDeque<Triple<Long, Float, Long>> false depth = 3
2021-03-11 12:26:42,823 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Triple<Long, Float, Long>>): ArrayDeque<Triple<Long, Float, Long>> = TODO()
2021-03-11 12:26:42,825 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Triple<Long, Float, Long>>): ArrayDeque<Triple<Long, Float, Long>> = TODO()
2021-03-11 12:26:43,038 [main:302] - generating value of type = Collection<Triple<Long, Float, Long>> false depth = 6
2021-03-11 12:26:43,146 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Collection<Triple<Long, Float, Long>> = TODO()
2021-03-11 12:26:43,148 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Collection<Triple<Long, Float, Long>> = TODO()
2021-03-11 12:26:43,253 [main:95] - GENERATED = hashSetOf<Triple<Long, Float, Long>>()
2021-03-11 12:26:43,253 [main:95] - GENERATED = ArrayDeque<Triple<Long, Float, Long>>(hashSetOf<Triple<Long, Float, Long>>())
2021-03-11 12:26:43,253 [main:95] - GENERATED = Pair<Short?, ArrayDeque<Triple<Long, Float, Long>>>(-14464, ArrayDeque<Triple<Long, Float, Long>>(hashSetOf<Triple<Long, Float, Long>>()))
2021-03-11 12:26:43,282 [main:94] - GETTING UInt from Boolean
2021-03-11 12:26:43,297 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:26:43,297 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:26:43,406 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:26:43,407 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:26:43,408 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).toUInt()
2021-03-11 12:26:43,408 [main:63] - replacement of 4u of type UInt is 993170678.toUInt()
2021-03-11 12:26:43,505 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:43,505 [main:66] - Compilation checking started
2021-03-11 12:26:43,977 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt())) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return "OK"
}


2021-03-11 12:26:43,981 [main:56] - replacing (4u, UInt)
2021-03-11 12:26:43,982 [main:38] - replacing 4u UInt
2021-03-11 12:26:43,982 [main:42] - Getting value of type UInt
2021-03-11 12:26:44,080 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:44,081 [main:46] - GENERATED VALUE OF TYPE UInt = 1036700044.toUInt()
2021-03-11 12:26:44,081 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:44,183 [main:55] - randomType = Short
2021-03-11 12:26:44,284 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:26:44,339 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1094a657]
2021-03-11 12:26:44,442 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:26:44,443 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:26:44,444 [main:66] - Generated call from random type = (-8355).compareTo(-115).toUInt()
2021-03-11 12:26:44,445 [main:94] - GETTING UInt from ArrayList<UInt>
2021-03-11 12:26:44,629 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLast(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@220f76ee]]
2021-03-11 12:26:44,630 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLast(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@220f76ee]
2021-03-11 12:26:44,630 [main:105] - GENERATED CALL = (list1).removeLast()
2021-03-11 12:26:44,630 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@32ab36fa], public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7cf67585]]
2021-03-11 12:26:44,630 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@32ab36fa]
2021-03-11 12:26:44,728 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:44,847 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:44,848 [main:137] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@7cf67585]
2021-03-11 12:26:44,948 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:44,949 [main:105] - GENERATED CALL = (list1).subList(-851015274, 47464619).get(-1272892751)
2021-03-11 12:26:44,949 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62585aff], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b6e75f1]]
2021-03-11 12:26:44,949 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62585aff]
2021-03-11 12:26:44,950 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b6e75f1]
2021-03-11 12:26:45,048 [main:302] - generating value of type = Function1<T, UInt> false depth = 0
2021-03-11 12:26:45,049 [main:302] - generating value of type = UInt true depth = 1
2021-03-11 12:26:45,050 [main:105] - GENERATED CALL = (list1).toArray().sumOf({a: T -> 120452785.toUInt()})
2021-03-11 12:26:45,050 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.takeHighestOneBit(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7b915d3a]]
2021-03-11 12:26:45,050 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac]
2021-03-11 12:26:45,151 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:45,152 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.takeHighestOneBit(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7b915d3a]
2021-03-11 12:26:45,152 [main:105] - GENERATED CALL = (list1).get(2103552528).takeHighestOneBit()
2021-03-11 12:26:45,152 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac], @kotlin.internal.InlineOnly public final inline infix fun shl(bitCount: kotlin.Int): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@cd6ca4b]]
2021-03-11 12:26:45,152 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac]
2021-03-11 12:26:45,249 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:45,250 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun shl(bitCount: kotlin.Int): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@cd6ca4b]
2021-03-11 12:26:45,348 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:45,349 [main:105] - GENERATED CALL = (list1).get(443670412).shl(297322477)
2021-03-11 12:26:45,349 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@756b424a]]
2021-03-11 12:26:45,349 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@756b424a]
2021-03-11 12:26:45,452 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:45,453 [main:105] - GENERATED CALL = (list1).elementAt(2028636327)
2021-03-11 12:26:45,453 [main:101] - Case = [@kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.minOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3b32fef7]]
2021-03-11 12:26:45,453 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.minOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3b32fef7]
2021-03-11 12:26:45,453 [main:105] - GENERATED CALL = (list1).minOrNull()
2021-03-11 12:26:45,453 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceAtMost(maximumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18a564a7]]
2021-03-11 12:26:45,453 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac]
2021-03-11 12:26:45,555 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:45,556 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceAtMost(maximumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18a564a7]
2021-03-11 12:26:45,656 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:45,657 [main:105] - GENERATED CALL = (list1).get(35704348).coerceAtMost(1072378573.toUInt())
2021-03-11 12:26:45,657 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac]]
2021-03-11 12:26:45,657 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac]
2021-03-11 12:26:45,780 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:45,781 [main:105] - GENERATED CALL = (list1).get(55608535)
2021-03-11 12:26:45,782 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f0d99a4]]
2021-03-11 12:26:45,782 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1f0d99a4]
2021-03-11 12:26:45,782 [main:105] - GENERATED CALL = (list1).first()
2021-03-11 12:26:45,782 [main:63] - replacement of 4u of type UInt is (list1).get(55608535)
2021-03-11 12:26:45,895 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:45,896 [main:66] - Compilation checking started
2021-03-11 12:26:46,343 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt())) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return "OK"
}


2021-03-11 12:26:46,347 [main:56] - replacing (list3, ArrayList<UInt>)
2021-03-11 12:26:46,347 [main:38] - replacing list3 ArrayList<UInt>
2021-03-11 12:26:46,347 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:26:46,460 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:26:46,567 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<UInt> = TODO()
2021-03-11 12:26:46,569 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<UInt> = TODO()
2021-03-11 12:26:46,682 [main:95] - GENERATED = ArrayList<UInt>()
2021-03-11 12:26:46,682 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = ArrayList<UInt>()
2021-03-11 12:26:46,682 [main:49] - GENERATED IS CALL =true
2021-03-11 12:26:46,801 [main:55] - randomType = List<Float>
2021-03-11 12:26:46,805 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:26:46,822 [main:94] - GETTING ArrayList<UInt> from UByte
2021-03-11 12:26:46,885 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:26:46,889 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:26:46,948 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:26:47,106 [main:63] - replacement of list3 of type ArrayList<UInt> is ArrayList<UInt>()
2021-03-11 12:26:47,208 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:26:47,210 [main:66] - Compilation checking started
2021-03-11 12:26:47,570 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt())) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $ArrayList<UInt>()"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return "OK"
}


2021-03-11 12:26:47,575 [main:56] - replacing (list1, ArrayList<UInt>)
2021-03-11 12:26:47,576 [main:38] - replacing list1 ArrayList<UInt>
2021-03-11 12:26:47,576 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:26:47,709 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:26:47,828 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<UInt> = TODO()
2021-03-11 12:26:47,831 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<UInt> = TODO()
2021-03-11 12:26:47,936 [main:95] - GENERATED = ArrayList<UInt>()
2021-03-11 12:26:47,936 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = ArrayList<UInt>()
2021-03-11 12:26:47,936 [main:49] - GENERATED IS CALL =true
2021-03-11 12:26:48,167 [main:55] - randomType = Collection<Array<ULong>>
2021-03-11 12:26:48,171 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:26:48,189 [main:94] - GETTING ArrayList<UInt> from UByte
2021-03-11 12:26:48,231 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:26:48,264 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:26:48,267 [main:94] - GETTING ArrayList<UInt> from ArrayList<ULong>
2021-03-11 12:26:48,376 [main:63] - replacement of list1 of type ArrayList<UInt> is list4
2021-03-11 12:26:48,476 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:26:48,476 [main:66] - Compilation checking started
2021-03-11 12:26:48,772 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt())) {
        return "Wrong elements for 1u until 5u: $list4"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return "OK"
}


2021-03-11 12:26:48,777 [main:56] - replacing (1u, UInt)
2021-03-11 12:26:48,778 [main:38] - replacing 1u UInt
2021-03-11 12:26:48,778 [main:42] - Getting value of type UInt
2021-03-11 12:26:48,893 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:48,894 [main:46] - GENERATED VALUE OF TYPE UInt = 1476983351.toUInt()
2021-03-11 12:26:48,894 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:49,753 [main:55] - randomType = Function1<LinkedHashSet<Map<ArrayDeque<Double>, Boolean>?>, MutableMap<HashSet<Boolean>, UShort?>>
2021-03-11 12:26:49,754 [main:94] - GETTING UInt from ArrayList<ULong>
2021-03-11 12:26:49,920 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@64dbb059], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:26:49,920 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:26:49,921 [main:105] - GENERATED CALL = (list4).modCount.toUInt()
2021-03-11 12:26:49,921 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4fdad1f9], @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@74af849d]]
2021-03-11 12:26:49,921 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4fdad1f9]
2021-03-11 12:26:50,021 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:50,022 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@74af849d]
2021-03-11 12:26:50,023 [main:105] - GENERATED CALL = (list4).get(978359797).toUInt()
2021-03-11 12:26:50,023 [main:101] - Case = [@kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74352685]]
2021-03-11 12:26:50,023 [main:137] - GENERATING call of type @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74352685]
2021-03-11 12:26:50,023 [main:105] - GENERATED CALL = (list4).sum()
2021-03-11 12:26:50,023 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79303624]]
2021-03-11 12:26:50,023 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79303624]
2021-03-11 12:26:50,154 [main:302] - generating value of type = Function1<T, UInt> false depth = 0
2021-03-11 12:26:50,155 [main:302] - generating value of type = UInt true depth = 1
2021-03-11 12:26:50,156 [main:105] - GENERATED CALL = (list4).sumOf({a: T -> 464008805.toUInt()})
2021-03-11 12:26:50,156 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96], @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.Array<out kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e224d5e]]
2021-03-11 12:26:50,156 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96]
2021-03-11 12:26:50,156 [main:137] - GENERATING call of type @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.Array<out kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e224d5e]
2021-03-11 12:26:50,156 [main:105] - GENERATED CALL = (list4).toArray().sum()
2021-03-11 12:26:50,156 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@28a2ecb4], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:26:50,156 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:26:50,157 [main:105] - GENERATED CALL = (list4).size.toUInt()
2021-03-11 12:26:50,157 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b6e75f1]]
2021-03-11 12:26:50,157 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96]
2021-03-11 12:26:50,157 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b6e75f1]
2021-03-11 12:26:50,264 [main:302] - generating value of type = Function1<T, UInt> false depth = 0
2021-03-11 12:26:50,265 [main:302] - generating value of type = UInt true depth = 1
2021-03-11 12:26:50,266 [main:105] - GENERATED CALL = (list4).toArray().sumOf({a: T -> 1525593269.toUInt()})
2021-03-11 12:26:50,267 [main:63] - replacement of 1u of type UInt is (list4).get(978359797).toUInt()
2021-03-11 12:26:50,371 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:50,372 [main:66] - Compilation checking started
2021-03-11 12:26:50,661 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt())) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>((list4).get(978359797).toUInt(), (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return "OK"
}


2021-03-11 12:26:50,665 [main:56] - replacing (listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u), List<UInt>)
2021-03-11 12:26:50,665 [main:38] - replacing listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u) List<UInt>
2021-03-11 12:26:50,665 [main:42] - Getting value of type List<UInt>
2021-03-11 12:26:50,771 [main:302] - generating value of type = List<UInt> false depth = 0
2021-03-11 12:26:50,880 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: UInt): List<UInt> = TODO()
2021-03-11 12:26:50,882 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: UInt): List<UInt> = TODO()
2021-03-11 12:26:50,981 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:26:50,982 [main:95] - GENERATED = listOfNotNull<UInt>(1197920479.toUInt())
2021-03-11 12:26:50,982 [main:46] - GENERATED VALUE OF TYPE List<UInt> = listOfNotNull<UInt>(1197920479.toUInt())
2021-03-11 12:26:50,983 [main:49] - GENERATED IS CALL =true
2021-03-11 12:26:51,088 [main:55] - randomType = List<UByte>
2021-03-11 12:26:51,091 [main:94] - GETTING List<UInt> from Int
2021-03-11 12:26:51,127 [main:94] - GETTING List<UInt> from ArrayList<UInt>
2021-03-11 12:26:51,258 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.sortedWith(comparator: kotlin.Comparator<in T>): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30e24cc1]]
2021-03-11 12:26:51,258 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.sortedWith(comparator: kotlin.Comparator<in T>): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30e24cc1]
2021-03-11 12:26:51,354 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 12:26:51,459 [main:43] - GENERATING CALL OF fun <T> nullsLast(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-11 12:26:51,461 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-11 12:26:51,661 [main:385] - Cant generate call of fun <T> nullsLast(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-11 12:26:51,661 [main:144] - CANT GENERATE PARAMS FOR public fun <T> kotlin.collections.Iterable<T>.sortedWith(comparator: kotlin.Comparator<in T>): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30e24cc1]
2021-03-11 12:26:51,661 [main:101] - Case = [public fun <T : kotlin.Any> kotlin.collections.Iterable<T?>.filterNotNull(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b254e2e]]
2021-03-11 12:26:51,661 [main:137] - GENERATING call of type public fun <T : kotlin.Any> kotlin.collections.Iterable<T?>.filterNotNull(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b254e2e]
2021-03-11 12:26:51,661 [main:105] - GENERATED CALL = (list1).filterNotNull()
2021-03-11 12:26:51,661 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.take(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7b9b0006]]
2021-03-11 12:26:51,661 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.take(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7b9b0006]
2021-03-11 12:26:51,759 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:51,760 [main:105] - GENERATED CALL = (list1).take(-396267841)
2021-03-11 12:26:51,761 [main:101] - Case = [@kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.shuffled(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3631dfac]]
2021-03-11 12:26:51,761 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.shuffled(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3631dfac]
2021-03-11 12:26:51,761 [main:105] - GENERATED CALL = (list1).shuffled()
2021-03-11 12:26:51,761 [main:101] - Case = [public inline fun <T, K> kotlin.collections.Iterable<T>.distinctBy(selector: (T) -> K): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@53ca55c]]
2021-03-11 12:26:51,761 [main:137] - GENERATING call of type public inline fun <T, K> kotlin.collections.Iterable<T>.distinctBy(selector: (T) -> K): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@53ca55c]
2021-03-11 12:26:51,859 [main:302] - generating value of type = Function1<T, K> false depth = 0
2021-03-11 12:26:51,860 [main:302] - generating value of type = K false depth = 1
2021-03-11 12:26:51,864 [main:105] - GENERATED CALL = (list1).distinctBy({a: T -> })
2021-03-11 12:26:51,864 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.dropWhile(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@68a02e00]]
2021-03-11 12:26:51,864 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.dropWhile(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@68a02e00]
2021-03-11 12:26:51,962 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:26:51,963 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:26:51,964 [main:105] - GENERATED CALL = (list1).dropWhile({a: T -> true})
2021-03-11 12:26:51,964 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.filterNot(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1bbeedf9]]
2021-03-11 12:26:51,964 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.filterNot(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1bbeedf9]
2021-03-11 12:26:52,060 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:26:52,061 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:26:52,062 [main:105] - GENERATED CALL = (list1).filterNot({a: T -> true})
2021-03-11 12:26:52,062 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.minusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@48852718]]
2021-03-11 12:26:52,062 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.minusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@48852718]
2021-03-11 12:26:52,180 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:26:52,282 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Comparable<T>, b: Comparable<T>): T = TODO()
2021-03-11 12:26:52,283 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Comparable<T>, b: Comparable<T>): T = TODO()
2021-03-11 12:26:52,382 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:26:52,387 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:26:52,391 [main:95] - GENERATED = maxOf<Comparable<T>>(0.3241125151442815, 60.toUByte())
2021-03-11 12:26:52,392 [main:105] - GENERATED CALL = (list1).minusElement(maxOf<Comparable<T>>(0.3241125151442815, 60.toUByte()))
2021-03-11 12:26:52,392 [main:101] - Case = [public operator fun <T> kotlin.collections.Iterable<T>.minus(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@39da5b44]]
2021-03-11 12:26:52,392 [main:137] - GENERATING call of type public operator fun <T> kotlin.collections.Iterable<T>.minus(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@39da5b44]
2021-03-11 12:26:52,493 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:26:52,696 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Short): T = TODO()
2021-03-11 12:26:52,697 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Short): T = TODO()
2021-03-11 12:26:52,794 [main:302] - generating value of type = Short true depth = 3
2021-03-11 12:26:52,795 [main:95] - GENERATED = checkNotNull<Short>(28038)
2021-03-11 12:26:52,795 [main:105] - GENERATED CALL = (list1).minus(checkNotNull<Short>(28038))
2021-03-11 12:26:52,795 [main:101] - Case = [public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.sortedBy(crossinline selector: (T) -> R?): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@752534aa]]
2021-03-11 12:26:52,795 [main:137] - GENERATING call of type public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.sortedBy(crossinline selector: (T) -> R?): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@752534aa]
2021-03-11 12:26:52,891 [main:302] - generating value of type = Function1<T, R?> false depth = 0
2021-03-11 12:26:52,892 [main:302] - generating value of type = R false depth = 1
2021-03-11 12:26:53,100 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->ArrayDeque<HashSet<String>>): R = TODO()
2021-03-11 12:26:53,102 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->ArrayDeque<HashSet<String>>): R = TODO()
2021-03-11 12:26:53,438 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:26:53,438 [main:302] - generating value of type = Function0<ArrayDeque<HashSet<String>>> false depth = 4
2021-03-11 12:26:53,439 [main:302] - generating value of type = ArrayDeque<HashSet<String>> false depth = 5
2021-03-11 12:26:53,546 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<HashSet<String>>): ArrayDeque<HashSet<String>> = TODO()
2021-03-11 12:26:53,548 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<HashSet<String>>): ArrayDeque<HashSet<String>> = TODO()
2021-03-11 12:26:53,754 [main:302] - generating value of type = Collection<HashSet<String>> false depth = 8
2021-03-11 12:26:53,857 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): Collection<HashSet<String>> = TODO()
2021-03-11 12:26:53,858 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): Collection<HashSet<String>> = TODO()
2021-03-11 12:26:54,057 [main:302] - generating value of type = Int true depth = 11
2021-03-11 12:26:54,058 [main:95] - GENERATED = ArrayList<HashSet<String>>(-1287729506)
2021-03-11 12:26:54,058 [main:95] - GENERATED = ArrayDeque<HashSet<String>>(ArrayList<HashSet<String>>(-1287729506))
2021-03-11 12:26:54,058 [main:95] - GENERATED = synchronized<ArrayDeque<HashSet<String>>>("batfi", { ArrayDeque<HashSet<String>>(ArrayList<HashSet<String>>(-1287729506))})
2021-03-11 12:26:54,059 [main:105] - GENERATED CALL = (list1).sortedBy({a: T -> synchronized<ArrayDeque<HashSet<String>>>("batfi", { ArrayDeque<HashSet<String>>(ArrayList<HashSet<String>>(-1287729506))})})
2021-03-11 12:26:54,059 [main:63] - replacement of listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u) of type List<UInt> is (list1).dropWhile({a: T -> true})
2021-03-11 12:26:54,156 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:54,156 [main:66] - Compilation checking started
2021-03-11 12:26:54,484 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt())) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != (list1).dropWhile({a: T -> true})) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return "OK"
}


2021-03-11 12:26:54,488 [main:56] - replacing (list3.size, Int)
2021-03-11 12:26:54,488 [main:38] - replacing list3.size Int
2021-03-11 12:26:54,488 [main:42] - Getting value of type Int
2021-03-11 12:26:54,587 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:54,588 [main:46] - GENERATED VALUE OF TYPE Int = 734277673
2021-03-11 12:26:54,588 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:54,590 [main:55] - randomType = UByte
2021-03-11 12:26:54,687 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:54,728 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@44a0b9cf]
2021-03-11 12:26:54,728 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7c149660]
2021-03-11 12:26:54,728 [main:66] - Generated call from random type = (90.toUByte()).toByte().toInt()
2021-03-11 12:26:54,729 [main:63] - replacement of list3.size of type Int is (90.toUByte()).toByte().toInt()
2021-03-11 12:26:54,831 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:54,831 [main:66] - Compilation checking started
2021-03-11 12:26:55,312 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt())) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((90.toUByte()).toByte().toInt() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return "OK"
}


2021-03-11 12:26:55,318 [main:56] - replacing (3u, UInt)
2021-03-11 12:26:55,319 [main:38] - replacing 3u UInt
2021-03-11 12:26:55,319 [main:42] - Getting value of type UInt
2021-03-11 12:26:55,436 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:55,437 [main:46] - GENERATED VALUE OF TYPE UInt = 795198784.toUInt()
2021-03-11 12:26:55,437 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:55,440 [main:55] - randomType = ULong
2021-03-11 12:26:55,540 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:26:55,574 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@32508b4a]
2021-03-11 12:26:55,574 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6d9b3c4c]
2021-03-11 12:26:55,677 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:55,678 [main:66] - Generated call from random type = (1340174838473537945.toULong()).toUShort().div(62.toUByte())
2021-03-11 12:26:55,679 [main:94] - GETTING UInt from ArrayList<UInt>
2021-03-11 12:26:55,825 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6d7a16fd]]
2021-03-11 12:26:55,826 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:26:55,924 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:55,925 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6d7a16fd]
2021-03-11 12:26:56,023 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:56,024 [main:105] - GENERATED CALL = (list3).get(984283594).div(4.toUByte())
2021-03-11 12:26:56,025 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]]
2021-03-11 12:26:56,025 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:26:56,124 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:56,125 [main:105] - GENERATED CALL = (list3).get(-464017228)
2021-03-11 12:26:56,125 [main:101] - Case = [@kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.maxOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1753339a]]
2021-03-11 12:26:56,125 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.maxOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1753339a]
2021-03-11 12:26:56,125 [main:105] - GENERATED CALL = (list3).maxOrNull()
2021-03-11 12:26:56,125 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7db120a0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6135d3be]]
2021-03-11 12:26:56,125 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7db120a0]
2021-03-11 12:26:56,223 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:56,320 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:56,321 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6135d3be]
2021-03-11 12:26:56,321 [main:105] - GENERATED CALL = (list3).subList(1927405280, 1458727436).removeLastOrNull()
2021-03-11 12:26:56,322 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7db120a0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeFirst(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4c57e410]]
2021-03-11 12:26:56,322 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7db120a0]
2021-03-11 12:26:56,418 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:56,517 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:56,518 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeFirst(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4c57e410]
2021-03-11 12:26:56,518 [main:105] - GENERATED CALL = (list3).subList(60904679, -1270571367).removeFirst()
2021-03-11 12:26:56,518 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline operator fun times(other: kotlin.UByte): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@144aba8]]
2021-03-11 12:26:56,518 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:26:56,617 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:56,618 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun times(other: kotlin.UByte): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@144aba8]
2021-03-11 12:26:56,715 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:56,716 [main:105] - GENERATED CALL = (list3).get(2074267415).times(63.toUByte())
2021-03-11 12:26:56,716 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline operator fun plus(other: kotlin.UByte): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@708a5f26]]
2021-03-11 12:26:56,716 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:26:56,813 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:56,814 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun plus(other: kotlin.UByte): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@708a5f26]
2021-03-11 12:26:56,928 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:26:56,929 [main:105] - GENERATED CALL = (list3).get(1916468497).plus(122.toUByte())
2021-03-11 12:26:56,929 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.singleOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@619b8141]]
2021-03-11 12:26:56,929 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.singleOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@619b8141]
2021-03-11 12:26:56,929 [main:105] - GENERATED CALL = (list3).singleOrNull()
2021-03-11 12:26:56,929 [main:101] - Case = [public open fun iterator(): kotlin.collections.MutableIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@25f45fd5], public abstract fun next(): kotlin.UInt defined in kotlin.collections.MutableIterator[DeserializedSimpleFunctionDescriptor@37db6c6f]]
2021-03-11 12:26:56,929 [main:137] - GENERATING call of type public open fun iterator(): kotlin.collections.MutableIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@25f45fd5]
2021-03-11 12:26:56,929 [main:137] - GENERATING call of type public abstract fun next(): kotlin.UInt defined in kotlin.collections.MutableIterator[DeserializedSimpleFunctionDescriptor@37db6c6f]
2021-03-11 12:26:56,930 [main:105] - GENERATED CALL = (list3).iterator().next()
2021-03-11 12:26:56,930 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UInt): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@43d5d99a]]
2021-03-11 12:26:56,930 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:26:57,027 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:26:57,028 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UInt): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@43d5d99a]
2021-03-11 12:26:57,136 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:26:57,137 [main:105] - GENERATED CALL = (list3).get(-470198426).and(1948715013.toUInt())
2021-03-11 12:26:57,137 [main:63] - replacement of 3u of type UInt is 795198784.toUInt()
2021-03-11 12:26:57,233 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:26:57,234 [main:66] - Compilation checking started
2021-03-11 12:26:57,655 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt())) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((90.toUByte()).toByte().toInt() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return "OK"
}


2021-03-11 12:26:57,659 [main:56] - replacing (range4, ULongRange)
2021-03-11 12:26:57,660 [main:38] - replacing range4 ULongRange
2021-03-11 12:26:57,660 [main:42] - Getting value of type ULongRange
2021-03-11 12:26:57,756 [main:302] - generating value of type = ULongRange false depth = 0
2021-03-11 12:26:57,859 [main:43] - GENERATING CALL OF fun ULongRange(start: kotlin.ULong, endInclusive: kotlin.ULong): ULongRange = TODO()
2021-03-11 12:26:57,861 [main:61] - WITHOUT TYPE PARAMS = fun ULongRange(start: kotlin.ULong, endInclusive: kotlin.ULong): ULongRange = TODO()
2021-03-11 12:26:58,158 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:26:58,159 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:26:58,160 [main:95] - GENERATED = ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())
2021-03-11 12:26:58,160 [main:46] - GENERATED VALUE OF TYPE ULongRange = ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())
2021-03-11 12:26:58,160 [main:49] - GENERATED IS CALL =true
2021-03-11 12:26:58,161 [main:55] - randomType = Byte
2021-03-11 12:26:58,278 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:26:58,324 [main:94] - GETTING ULongRange from Int
2021-03-11 12:26:58,360 [main:94] - GETTING ULongRange from ArrayList<UInt>
2021-03-11 12:26:58,476 [main:94] - GETTING ULongRange from UByte
2021-03-11 12:26:58,500 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27d30729], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.ULong.until(to: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@485a7298]]
2021-03-11 12:26:58,500 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27d30729]
2021-03-11 12:26:58,599 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:26:58,600 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.ULong.until(to: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@485a7298]
2021-03-11 12:26:58,697 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:26:58,698 [main:105] - GENERATED CALL = (1u.toUByte()).div(4966716065949107373.toULong()).until(8919058543509075955.toULong())
2021-03-11 12:26:58,698 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27d30729], @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@76704c27]]
2021-03-11 12:26:58,698 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27d30729]
2021-03-11 12:26:58,795 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:26:58,795 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@76704c27]
2021-03-11 12:26:58,894 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:26:58,895 [main:105] - GENERATED CALL = (1u.toUByte()).div(6670341300211311147.toULong()).rangeTo(7428884521132057365.toULong())
2021-03-11 12:26:58,895 [main:63] - replacement of range4 of type ULongRange is ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())
2021-03-11 12:26:58,993 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:26:58,993 [main:66] - Compilation checking started
2021-03-11 12:26:59,436 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt())) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((90.toUByte()).toByte().toInt() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return "OK"
}


2021-03-11 12:26:59,442 [main:56] - replacing (i, ULong)
2021-03-11 12:26:59,443 [main:38] - replacing i ULong
2021-03-11 12:26:59,443 [main:42] - Getting value of type ULong
2021-03-11 12:26:59,548 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:26:59,549 [main:46] - GENERATED VALUE OF TYPE ULong = 7565201463888577435.toULong()
2021-03-11 12:26:59,549 [main:49] - GENERATED IS CALL =false
2021-03-11 12:26:59,794 [main:55] - randomType = Set<Boolean>
2021-03-11 12:26:59,795 [main:94] - GETTING ULong from ArrayList<UInt>
2021-03-11 12:26:59,958 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42bee69b], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.ULong): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ec68dec]]
2021-03-11 12:26:59,958 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42bee69b]
2021-03-11 12:26:59,958 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.ULong): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ec68dec]
2021-03-11 12:27:00,058 [main:302] - generating value of type = Function1<T, ULong> false depth = 0
2021-03-11 12:27:00,059 [main:302] - generating value of type = ULong true depth = 1
2021-03-11 12:27:00,060 [main:105] - GENERATED CALL = (list3).toArray().sumOf({a: T -> 3393462038418965508.toULong()})
2021-03-11 12:27:00,060 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline operator fun minus(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@a7e75b]]
2021-03-11 12:27:00,060 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:27:00,158 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:00,159 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun minus(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@a7e75b]
2021-03-11 12:27:00,257 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:00,258 [main:105] - GENERATED CALL = (list3).get(1572928912).minus(1761879825632055573.toULong())
2021-03-11 12:27:00,258 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline operator fun plus(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@ca47d17]]
2021-03-11 12:27:00,258 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:27:00,356 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:00,357 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun plus(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@ca47d17]
2021-03-11 12:27:00,455 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:00,456 [main:105] - GENERATED CALL = (list3).get(2088252398).plus(5334768117037886013.toULong())
2021-03-11 12:27:00,456 [main:101] - Case = [@kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.ULong>.sum(): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7aa5ea12]]
2021-03-11 12:27:00,456 [main:137] - GENERATING call of type @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.ULong>.sum(): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7aa5ea12]
2021-03-11 12:27:00,456 [main:105] - GENERATED CALL = (list3).sum()
2021-03-11 12:27:00,456 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline fun toULong(): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@28e7e641]]
2021-03-11 12:27:00,456 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:27:00,553 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:00,554 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toULong(): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@28e7e641]
2021-03-11 12:27:00,554 [main:105] - GENERATED CALL = (list3).get(-1754018325).toULong()
2021-03-11 12:27:00,554 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline operator fun rem(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5259f1e5]]
2021-03-11 12:27:00,554 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:27:00,653 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:00,654 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rem(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5259f1e5]
2021-03-11 12:27:00,752 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:00,753 [main:105] - GENERATED CALL = (list3).get(-557565999).rem(641670294213497552.toULong())
2021-03-11 12:27:00,753 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42bee69b], @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.Array<out kotlin.ULong>.sum(): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f3defe2]]
2021-03-11 12:27:00,753 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42bee69b]
2021-03-11 12:27:00,753 [main:137] - GENERATING call of type @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.Array<out kotlin.ULong>.sum(): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f3defe2]
2021-03-11 12:27:00,753 [main:105] - GENERATED CALL = (list3).toArray().sum()
2021-03-11 12:27:00,753 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline operator fun times(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4bf4c546]]
2021-03-11 12:27:00,753 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:27:00,850 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:00,851 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun times(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4bf4c546]
2021-03-11 12:27:00,974 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:00,975 [main:105] - GENERATED CALL = (list3).get(-78127874).times(3951594168256914343.toULong())
2021-03-11 12:27:00,975 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@20571b5e]]
2021-03-11 12:27:00,975 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:27:01,075 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:01,076 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@20571b5e]
2021-03-11 12:27:01,178 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:01,179 [main:105] - GENERATED CALL = (list3).get(-767202615).div(2326483165184746521.toULong())
2021-03-11 12:27:01,180 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.ULong): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@590784be]]
2021-03-11 12:27:01,180 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.ULong): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-11 12:27:01,278 [main:302] - generating value of type = Function1<T, ULong> false depth = 0
2021-03-11 12:27:01,279 [main:302] - generating value of type = ULong true depth = 1
2021-03-11 12:27:01,280 [main:105] - GENERATED CALL = (list3).sumOf({a: T -> 4220664974828388568.toULong()})
2021-03-11 12:27:01,280 [main:63] - replacement of i of type ULong is (list3).sum()
2021-03-11 12:27:01,378 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:01,379 [main:66] - Compilation checking started
2021-03-11 12:27:01,688 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt())) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((90.toUByte()).toByte().toInt() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        list4.add((list3).sum())
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return "OK"
}


2021-03-11 12:27:01,691 [main:56] - replacing ("OK", String)
2021-03-11 12:27:01,692 [main:38] - replacing "OK" String
2021-03-11 12:27:01,692 [main:42] - Getting value of type String
2021-03-11 12:27:01,793 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:27:01,793 [main:46] - GENERATED VALUE OF TYPE String = "wcdwx"
2021-03-11 12:27:01,793 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:02,100 [main:55] - randomType = List<UByte?>?
2021-03-11 12:27:02,101 [main:94] - GETTING String from Int
2021-03-11 12:27:02,143 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]]
2021-03-11 12:27:02,143 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:27:02,143 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]
2021-03-11 12:27:02,143 [main:105] - GENERATED CALL = (list2.size).toChar().titlecase()
2021-03-11 12:27:02,143 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]]
2021-03-11 12:27:02,143 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:27:02,143 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]
2021-03-11 12:27:02,240 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:02,241 [main:105] - GENERATED CALL = (list2.size).toByte().toString(1648910524)
2021-03-11 12:27:02,241 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:27:02,241 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:27:02,358 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:02,359 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:27:02,457 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:02,458 [main:105] - GENERATED CALL = (list2.size).compareTo(912368806).toString(-117224280)
2021-03-11 12:27:02,459 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]]
2021-03-11 12:27:02,459 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:27:02,459 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]
2021-03-11 12:27:02,563 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:27:02,564 [main:105] - GENERATED CALL = (list2.size).toChar().plus("vusyc")
2021-03-11 12:27:02,564 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:27:02,565 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:27:02,662 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:02,663 [main:105] - GENERATED CALL = (list2.size).toString(-125627584)
2021-03-11 12:27:02,664 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]]
2021-03-11 12:27:02,664 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:27:02,664 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]
2021-03-11 12:27:02,760 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:02,761 [main:105] - GENERATED CALL = (list2.size).toShort().toString(188728030)
2021-03-11 12:27:02,761 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:27:02,762 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac]
2021-03-11 12:27:02,858 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:27:02,859 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:27:02,958 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:02,959 [main:105] - GENERATED CALL = (list2.size).div(-7801125802890188832).toString(-1033864497)
2021-03-11 12:27:02,959 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]]
2021-03-11 12:27:02,959 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:27:02,959 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]
2021-03-11 12:27:02,959 [main:105] - GENERATED CALL = (list2.size).toChar().lowercase()
2021-03-11 12:27:02,959 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]]
2021-03-11 12:27:02,960 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:27:02,960 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]
2021-03-11 12:27:02,960 [main:105] - GENERATED CALL = (list2.size).toChar().uppercase()
2021-03-11 12:27:02,960 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:27:02,960 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:27:02,960 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:27:03,059 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:03,060 [main:105] - GENERATED CALL = (list2.size).toLong().toString(275835728)
2021-03-11 12:27:03,060 [main:63] - replacement of "OK" of type String is (list2.size).toChar().uppercase()
2021-03-11 12:27:03,158 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:03,159 [main:66] - Compilation checking started
2021-03-11 12:27:03,613 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt())) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((90.toUByte()).toByte().toInt() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:03,619 [main:56] - replacing (1u, UInt)
2021-03-11 12:27:03,620 [main:38] - replacing 1u UInt
2021-03-11 12:27:03,620 [main:42] - Getting value of type UInt
2021-03-11 12:27:03,745 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:03,746 [main:46] - GENERATED VALUE OF TYPE UInt = 1379164409.toUInt()
2021-03-11 12:27:03,746 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:04,388 [main:55] - randomType = Array<Function2<List<Double>, Float?, Short>>?
2021-03-11 12:27:04,487 [main:302] - generating value of type = Array<Function2<List<Double>, Float?, Short>> false depth = 0
2021-03-11 12:27:04,593 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Function2<List<Double>, Float?, Short>): Array<Function2<List<Double>, Float?, Short>> = TODO()
2021-03-11 12:27:04,595 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Function2<List<Double>, Float?, Short>): Array<Function2<List<Double>, Float?, Short>> = TODO()
2021-03-11 12:27:04,697 [main:302] - generating value of type = Function2<List<Double>, Float?, Short> false depth = 3
2021-03-11 12:27:04,698 [main:302] - generating value of type = Short true depth = 4
2021-03-11 12:27:04,699 [main:95] - GENERATED = arrayOf<Function2<List<Double>, Float?, Short>>({a: List<Double>, b: Float? -> 18107})
2021-03-11 12:27:04,725 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:04,725 [main:66] - Generated call from random type = (arrayOf<Function2<List<Double>, Float?, Short>>({a: List<Double>, b: Float? -> 18107}))?.size.toUInt()
2021-03-11 12:27:04,727 [main:94] - GETTING UInt from Int
2021-03-11 12:27:04,769 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:27:04,769 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:27:04,769 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:27:04,769 [main:105] - GENERATED CALL = (list3.size).toDouble().toUInt()
2021-03-11 12:27:04,769 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:04,769 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:04,770 [main:105] - GENERATED CALL = (list3.size).toUInt()
2021-03-11 12:27:04,770 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:27:04,770 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:27:04,870 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:27:04,871 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:27:04,871 [main:105] - GENERATED CALL = (list3.size).div(0.4014112098956394).toUInt()
2021-03-11 12:27:04,871 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]]
2021-03-11 12:27:04,871 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:27:04,872 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]
2021-03-11 12:27:04,872 [main:105] - GENERATED CALL = (list3.size).toByte().toUInt()
2021-03-11 12:27:04,872 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]]
2021-03-11 12:27:04,872 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:27:04,872 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]
2021-03-11 12:27:04,872 [main:105] - GENERATED CALL = (list3.size).toLong().toUInt()
2021-03-11 12:27:04,872 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:04,872 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:27:04,970 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:04,970 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:04,971 [main:105] - GENERATED CALL = (list3.size).compareTo(154263182).toUInt()
2021-03-11 12:27:04,971 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]]
2021-03-11 12:27:04,971 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:27:04,971 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]
2021-03-11 12:27:04,971 [main:105] - GENERATED CALL = (list3.size).toShort().toUInt()
2021-03-11 12:27:04,971 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]]
2021-03-11 12:27:04,971 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:27:04,971 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]
2021-03-11 12:27:04,971 [main:105] - GENERATED CALL = (list3.size).toFloat().toUInt()
2021-03-11 12:27:04,971 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:04,972 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:27:04,972 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:04,972 [main:105] - GENERATED CALL = (list3.size).toInt().toUInt()
2021-03-11 12:27:04,972 [main:63] - replacement of 1u of type UInt is (list3.size).compareTo(154263182).toUInt()
2021-03-11 12:27:05,071 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:05,071 [main:66] - Compilation checking started
2021-03-11 12:27:05,377 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if (list1 != listOf<UInt>((list3.size).compareTo(154263182).toUInt(), 2u, 3u, 993170678.toUInt())) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((90.toUByte()).toByte().toInt() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:05,380 [main:56] - replacing (list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt()), Boolean)
2021-03-11 12:27:05,381 [main:38] - replacing list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt()) Boolean
2021-03-11 12:27:05,381 [main:42] - Getting value of type Boolean
2021-03-11 12:27:05,480 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:05,481 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:27:05,481 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:05,483 [main:55] - randomType = String
2021-03-11 12:27:05,585 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:27:05,609 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c497949]
2021-03-11 12:27:05,708 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:05,808 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:05,809 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30270eee]
2021-03-11 12:27:05,809 [main:66] - Generated call from random type = ("pxfjn").subSequence(-1143614779, 1796004403).any()
2021-03-11 12:27:05,810 [main:94] - GETTING Boolean from ArrayList<UInt>
2021-03-11 12:27:05,943 [main:101] - Case = [public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@1825e8ca], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@2ec76a97]]
2021-03-11 12:27:05,943 [main:137] - GENERATING call of type public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@1825e8ca]
2021-03-11 12:27:05,943 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@2ec76a97]
2021-03-11 12:27:06,044 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:06,044 [main:105] - GENERATED CALL = (list1).clear().equals("dboat")
2021-03-11 12:27:06,044 [main:101] - Case = [public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51b89f6e], public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@e75c97d]]
2021-03-11 12:27:06,044 [main:137] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51b89f6e]
2021-03-11 12:27:06,044 [main:137] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@e75c97d]
2021-03-11 12:27:06,044 [main:105] - GENERATED CALL = (list1).listIterator().hasNext()
2021-03-11 12:27:06,044 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@4e690bc9], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:27:06,044 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@4e690bc9]
2021-03-11 12:27:06,144 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:06,144 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:27:06,256 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:06,257 [main:105] - GENERATED CALL = (list1).equals("pwprf").and(false)
2021-03-11 12:27:06,257 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d09e514]]
2021-03-11 12:27:06,257 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d09e514]
2021-03-11 12:27:06,257 [main:105] - GENERATED CALL = (list1).none()
2021-03-11 12:27:06,257 [main:101] - Case = [public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@35f6a35e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:27:06,257 [main:137] - GENERATING call of type public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@35f6a35e]
2021-03-11 12:27:06,356 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:06,357 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:27:06,455 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:06,455 [main:105] - GENERATED CALL = (list1).add(2100945149.toUInt()).equals("isujr")
2021-03-11 12:27:06,455 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62585aff], @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60cb6cf0]]
2021-03-11 12:27:06,455 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62585aff]
2021-03-11 12:27:06,456 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60cb6cf0]
2021-03-11 12:27:06,555 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:27:06,660 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:27:06,661 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 12:27:06,785 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 12:27:06,786 [main:105] - GENERATED CALL = (list1).toArray().contentEquals(emptyArray<T>())
2021-03-11 12:27:06,786 [main:101] - Case = [public open fun containsAll(elements: kotlin.collections.Collection<kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5f585409]]
2021-03-11 12:27:06,786 [main:137] - GENERATING call of type public open fun containsAll(elements: kotlin.collections.Collection<kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5f585409]
2021-03-11 12:27:06,883 [main:302] - generating value of type = Collection<UInt> false depth = 0
2021-03-11 12:27:06,985 [main:43] - GENERATING CALL OF fun <T> mutableListOf(): Collection<UInt> = TODO()
2021-03-11 12:27:06,986 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(): Collection<UInt> = TODO()
2021-03-11 12:27:07,084 [main:95] - GENERATED = mutableListOf<UInt>()
2021-03-11 12:27:07,084 [main:105] - GENERATED CALL = (list1).containsAll(mutableListOf<UInt>())
2021-03-11 12:27:07,084 [main:101] - Case = [public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@565a5750], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:27:07,084 [main:137] - GENERATING call of type public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@565a5750]
2021-03-11 12:27:07,190 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:07,191 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:27:07,293 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:07,294 [main:105] - GENERATED CALL = (list1).contains(1799415035.toUInt()).and(false)
2021-03-11 12:27:07,294 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3ebaecc4]]
2021-03-11 12:27:07,294 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3ebaecc4]
2021-03-11 12:27:07,399 [main:105] - GENERATED CALL = (list1).equals(null)
2021-03-11 12:27:07,400 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@32ab36fa], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@2553066a]]
2021-03-11 12:27:07,400 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@32ab36fa]
2021-03-11 12:27:07,502 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:07,605 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:07,606 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@2553066a]
2021-03-11 12:27:07,711 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:07,711 [main:105] - GENERATED CALL = (list1).subList(-1102496250, 1035624991).equals("ppnxa")
2021-03-11 12:27:07,711 [main:63] - replacement of list1 != listOf<UInt>(1u, 2u, 3u, 993170678.toUInt()) of type Boolean is (list1).equals(null)
2021-03-11 12:27:07,810 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:07,811 [main:66] - Compilation checking started
2021-03-11 12:27:08,266 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add(i)
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((90.toUByte()).toByte().toInt() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:08,269 [main:56] - replacing (i, UInt)
2021-03-11 12:27:08,270 [main:38] - replacing i UInt
2021-03-11 12:27:08,270 [main:42] - Getting value of type UInt
2021-03-11 12:27:08,419 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:08,419 [main:46] - GENERATED VALUE OF TYPE UInt = 606514194.toUInt()
2021-03-11 12:27:08,420 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:08,422 [main:55] - randomType = UInt
2021-03-11 12:27:08,524 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:08,556 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun dec(): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@13d64f47]
2021-03-11 12:27:08,556 [main:66] - Generated call from random type = (1207195499.toUInt()).dec()
2021-03-11 12:27:08,557 [main:94] - GETTING UInt from ArrayList<UInt>
2021-03-11 12:27:08,675 [main:101] - Case = [public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51b89f6e], public abstract fun next(): kotlin.UInt defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@66594b19]]
2021-03-11 12:27:08,675 [main:137] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51b89f6e]
2021-03-11 12:27:08,675 [main:137] - GENERATING call of type public abstract fun next(): kotlin.UInt defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@66594b19]
2021-03-11 12:27:08,675 [main:105] - GENERATED CALL = (list1).listIterator().next()
2021-03-11 12:27:08,675 [main:101] - Case = [@kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74352685]]
2021-03-11 12:27:08,675 [main:137] - GENERATING call of type @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74352685]
2021-03-11 12:27:08,675 [main:105] - GENERATED CALL = (list1).sum()
2021-03-11 12:27:08,676 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac], @kotlin.internal.InlineOnly public final inline fun inv(): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@8f163ad]]
2021-03-11 12:27:08,676 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac]
2021-03-11 12:27:08,774 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:08,775 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun inv(): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@8f163ad]
2021-03-11 12:27:08,775 [main:105] - GENERATED CALL = (list1).get(150148343).inv()
2021-03-11 12:27:08,776 [main:101] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2c2f2f33]]
2021-03-11 12:27:08,776 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2c2f2f33]
2021-03-11 12:27:08,881 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-11 12:27:08,882 [main:302] - generating value of type = R false depth = 1
2021-03-11 12:27:09,091 [main:43] - GENERATING CALL OF fun <R> run(block: ()->UByte?): R = TODO()
2021-03-11 12:27:09,093 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->UByte?): R = TODO()
2021-03-11 12:27:09,310 [main:302] - generating value of type = Function0<UByte?> false depth = 4
2021-03-11 12:27:09,311 [main:302] - generating value of type = UByte true depth = 5
2021-03-11 12:27:09,312 [main:95] - GENERATED = run<UByte?>({ 125.toUByte()})
2021-03-11 12:27:09,312 [main:105] - GENERATED CALL = (list1).minBy({a: T -> run<UByte?>({ 125.toUByte()})})
2021-03-11 12:27:09,312 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac], @kotlin.internal.InlineOnly public final inline operator fun rem(other: kotlin.UByte): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2a4131fb]]
2021-03-11 12:27:09,312 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac]
2021-03-11 12:27:09,409 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:09,410 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rem(other: kotlin.UByte): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2a4131fb]
2021-03-11 12:27:09,507 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:09,508 [main:105] - GENERATED CALL = (list1).get(-1768246924).rem(23.toUByte())
2021-03-11 12:27:09,508 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@210e804b]]
2021-03-11 12:27:09,508 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@210e804b]
2021-03-11 12:27:09,508 [main:105] - GENERATED CALL = (list1).single()
2021-03-11 12:27:09,508 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac], @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UInt): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@43d5d99a]]
2021-03-11 12:27:09,508 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac]
2021-03-11 12:27:09,606 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:09,607 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UInt): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@43d5d99a]
2021-03-11 12:27:09,705 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:09,706 [main:105] - GENERATED CALL = (list1).get(-596487968).and(1199571099.toUInt())
2021-03-11 12:27:09,706 [main:101] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@41acf46d]]
2021-03-11 12:27:09,706 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@41acf46d]
2021-03-11 12:27:09,806 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-11 12:27:09,807 [main:302] - generating value of type = R false depth = 1
2021-03-11 12:27:10,037 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Array<Float>): R = TODO()
2021-03-11 12:27:10,038 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Array<Float>): R = TODO()
2021-03-11 12:27:10,236 [main:302] - generating value of type = Function0<Array<Float>> false depth = 4
2021-03-11 12:27:10,237 [main:302] - generating value of type = Array<Float> false depth = 5
2021-03-11 12:27:10,338 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Float): Array<Float> = TODO()
2021-03-11 12:27:10,339 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Float): Array<Float> = TODO()
2021-03-11 12:27:10,636 [main:302] - generating value of type = Int true depth = 8
2021-03-11 12:27:10,638 [main:302] - generating value of type = Function1<Int, Float> false depth = 8
2021-03-11 12:27:10,639 [main:302] - generating value of type = Float true depth = 9
2021-03-11 12:27:10,640 [main:95] - GENERATED = Array<Float>(-735412852, {a: Int -> 0.68480045f})
2021-03-11 12:27:10,640 [main:95] - GENERATED = run<Array<Float>>({ Array<Float>(-735412852, {a: Int -> 0.68480045f})})
2021-03-11 12:27:10,641 [main:105] - GENERATED CALL = (list1).maxBy({a: T -> run<Array<Float>>({ Array<Float>(-735412852, {a: Int -> 0.68480045f})})})
2021-03-11 12:27:10,641 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLast(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@220f76ee]]
2021-03-11 12:27:10,642 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLast(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@220f76ee]
2021-03-11 12:27:10,642 [main:105] - GENERATED CALL = (list1).removeLast()
2021-03-11 12:27:10,642 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac], @kotlin.internal.InlineOnly public final inline operator fun inc(): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@ff5df9d]]
2021-03-11 12:27:10,642 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac]
2021-03-11 12:27:10,749 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:10,750 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun inc(): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@ff5df9d]
2021-03-11 12:27:10,750 [main:105] - GENERATED CALL = (list1).get(-38704331).inc()
2021-03-11 12:27:10,750 [main:63] - replacement of i of type UInt is (list1).get(150148343).inv()
2021-03-11 12:27:10,850 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:10,850 [main:66] - Compilation checking started
2021-03-11 12:27:11,272 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((90.toUByte()).toByte().toInt() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        list4.add(i)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:11,278 [main:56] - replacing (1u, UInt)
2021-03-11 12:27:11,278 [main:38] - replacing 1u UInt
2021-03-11 12:27:11,278 [main:42] - Getting value of type UInt
2021-03-11 12:27:11,382 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:11,383 [main:46] - GENERATED VALUE OF TYPE UInt = 1193113768.toUInt()
2021-03-11 12:27:11,383 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:11,489 [main:55] - randomType = Short
2021-03-11 12:27:11,631 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:27:11,677 [main:137] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2628f294]
2021-03-11 12:27:11,677 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]
2021-03-11 12:27:11,677 [main:66] - Generated call from random type = (13280).toShort().toUInt()
2021-03-11 12:27:11,677 [main:63] - replacement of 1u of type UInt is (13280).toShort().toUInt()
2021-03-11 12:27:11,774 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:11,777 [main:56] - replacing (list4.add(i), Boolean)
2021-03-11 12:27:11,778 [main:38] - replacing list4.add(i) Boolean
2021-03-11 12:27:11,778 [main:42] - Getting value of type Boolean
2021-03-11 12:27:11,875 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:11,876 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:27:11,876 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:11,974 [main:55] - randomType = Short
2021-03-11 12:27:12,069 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:27:12,100 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1e23c53d]
2021-03-11 12:27:12,100 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2805e3]
2021-03-11 12:27:12,101 [main:66] - Generated call from random type = (31110).toChar().isHighSurrogate()
2021-03-11 12:27:12,101 [main:94] - GETTING Boolean from UShort
2021-03-11 12:27:12,122 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@496bd320], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34ffd74d]]
2021-03-11 12:27:12,122 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@496bd320]
2021-03-11 12:27:12,122 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34ffd74d]
2021-03-11 12:27:12,123 [main:105] - GENERATED CALL = (1u.toUShort()).toFloat().isNaN()
2021-03-11 12:27:12,123 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@68801771], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3d982f4c]]
2021-03-11 12:27:12,123 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@68801771]
2021-03-11 12:27:12,123 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3d982f4c]
2021-03-11 12:27:12,221 [main:105] - GENERATED CALL = (1u.toUShort()).toUByte().equals(null)
2021-03-11 12:27:12,221 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:27:12,221 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e]
2021-03-11 12:27:12,319 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:12,319 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:27:12,418 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:12,419 [main:105] - GENERATED CALL = (1u.toUShort()).equals("fegsp").xor(true)
2021-03-11 12:27:12,419 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:27:12,419 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e]
2021-03-11 12:27:12,515 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:12,516 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:27:12,611 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:12,612 [main:105] - GENERATED CALL = (1u.toUShort()).equals("jocde").or(false)
2021-03-11 12:27:12,612 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@47b7da3f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]]
2021-03-11 12:27:12,612 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@47b7da3f]
2021-03-11 12:27:12,612 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]
2021-03-11 12:27:12,710 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:12,711 [main:105] - GENERATED CALL = (1u.toUShort()).toByte().equals("zcobl")
2021-03-11 12:27:12,711 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2cdcf975], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@de42c9e]]
2021-03-11 12:27:12,711 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2cdcf975]
2021-03-11 12:27:12,711 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@de42c9e]
2021-03-11 12:27:12,808 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:12,808 [main:105] - GENERATED CALL = (1u.toUShort()).toShort().equals("pgwng")
2021-03-11 12:27:12,808 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:27:12,808 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e]
2021-03-11 12:27:12,907 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:12,907 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:27:13,003 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:13,004 [main:105] - GENERATED CALL = (1u.toUShort()).equals("rjzwz").and(false)
2021-03-11 12:27:13,004 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@289eda4b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3f008d2d]]
2021-03-11 12:27:13,004 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@289eda4b]
2021-03-11 12:27:13,120 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:13,121 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3f008d2d]
2021-03-11 12:27:13,216 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:13,216 [main:105] - GENERATED CALL = (1u.toUShort()).div(26.toUByte()).equals("wylhi")
2021-03-11 12:27:13,216 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@14488e0b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-11 12:27:13,217 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@14488e0b]
2021-03-11 12:27:13,217 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-11 12:27:13,312 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:13,312 [main:105] - GENERATED CALL = (1u.toUShort()).toLong().equals("zubwq")
2021-03-11 12:27:13,312 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@316129ae], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]]
2021-03-11 12:27:13,313 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@316129ae]
2021-03-11 12:27:13,313 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]
2021-03-11 12:27:13,313 [main:105] - GENERATED CALL = (1u.toUShort()).toDouble().isFinite()
2021-03-11 12:27:13,313 [main:63] - replacement of list4.add(i) of type Boolean is (1u.toUShort()).equals("fegsp").xor(true)
2021-03-11 12:27:13,409 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:13,409 [main:66] - Compilation checking started
2021-03-11 12:27:13,855 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((90.toUByte()).toByte().toInt() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:13,859 [main:56] - replacing ((hashSetOf<String>()).size.compareTo(91) > 23, Boolean)
2021-03-11 12:27:13,860 [main:38] - replacing (hashSetOf<String>()).size.compareTo(91) > 23 Boolean
2021-03-11 12:27:13,860 [main:42] - Getting value of type Boolean
2021-03-11 12:27:13,963 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:13,963 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:27:13,964 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:13,965 [main:55] - randomType = Double
2021-03-11 12:27:14,065 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:27:14,100 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:27:14,101 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]
2021-03-11 12:27:14,198 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:14,199 [main:66] - Generated call from random type = (0.9797460316108079).toDouble().equals("myynb")
2021-03-11 12:27:14,200 [main:94] - GETTING Boolean from ArrayList<UInt>
2021-03-11 12:27:14,340 [main:101] - Case = [public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@2c7f8225], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:27:14,340 [main:137] - GENERATING call of type public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@2c7f8225]
2021-03-11 12:27:14,439 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:14,439 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:27:14,537 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:14,538 [main:105] - GENERATED CALL = (list3).contains(1178575934.toUInt()).xor(false)
2021-03-11 12:27:14,538 [main:101] - Case = [public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@27106a9b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@2ec76a97]]
2021-03-11 12:27:14,538 [main:137] - GENERATING call of type public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@27106a9b]
2021-03-11 12:27:14,538 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@2ec76a97]
2021-03-11 12:27:14,634 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:14,635 [main:105] - GENERATED CALL = (list3).clear().equals("iydce")
2021-03-11 12:27:14,635 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@4e690bc9], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:27:14,635 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@4e690bc9]
2021-03-11 12:27:14,730 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:14,730 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:27:14,846 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:14,847 [main:105] - GENERATED CALL = (list3).equals("wdnyd").xor(true)
2021-03-11 12:27:14,847 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7db120a0], public abstract fun isEmpty(): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@2e1d96b5]]
2021-03-11 12:27:14,847 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7db120a0]
2021-03-11 12:27:14,942 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:15,039 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:15,039 [main:137] - GENERATING call of type public abstract fun isEmpty(): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@2e1d96b5]
2021-03-11 12:27:15,040 [main:105] - GENERATED CALL = (list3).subList(-1544037224, -28020119).isEmpty()
2021-03-11 12:27:15,040 [main:101] - Case = [public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@565f87ed], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:27:15,040 [main:137] - GENERATING call of type public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@565f87ed]
2021-03-11 12:27:15,137 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:15,138 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:27:15,138 [main:105] - GENERATED CALL = (list3).add(2147422114.toUInt()).not()
2021-03-11 12:27:15,138 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7db120a0], public abstract fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@6724ba9a]]
2021-03-11 12:27:15,138 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7db120a0]
2021-03-11 12:27:15,245 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:15,345 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:15,346 [main:137] - GENERATING call of type public abstract fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@6724ba9a]
2021-03-11 12:27:15,442 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:15,443 [main:105] - GENERATED CALL = (list3).subList(1640926651, -1968464708).contains(339402510.toUInt())
2021-03-11 12:27:15,443 [main:101] - Case = [public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4cdd5e4d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@37ea1171]]
2021-03-11 12:27:15,443 [main:137] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4cdd5e4d]
2021-03-11 12:27:15,443 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@37ea1171]
2021-03-11 12:27:15,540 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:15,540 [main:105] - GENERATED CALL = (list3).listIterator().equals("igxen")
2021-03-11 12:27:15,540 [main:101] - Case = [public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@2c7f8225], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:27:15,540 [main:137] - GENERATING call of type public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@2c7f8225]
2021-03-11 12:27:15,636 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:15,637 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:27:15,732 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:15,733 [main:105] - GENERATED CALL = (list3).contains(1220475597.toUInt()).and(false)
2021-03-11 12:27:15,733 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@4e690bc9], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:27:15,733 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@4e690bc9]
2021-03-11 12:27:15,829 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:15,830 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:27:15,930 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:15,931 [main:105] - GENERATED CALL = (list3).equals("ouvgc").or(true)
2021-03-11 12:27:15,931 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@7fc2bf91], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:27:15,931 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:27:16,028 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:16,029 [main:105] - GENERATED CALL = (list3).size.equals("nwdxh")
2021-03-11 12:27:16,029 [main:63] - replacement of (hashSetOf<String>()).size.compareTo(91) > 23 of type Boolean is (list3).subList(1640926651, -1968464708).contains(339402510.toUInt())
2021-03-11 12:27:16,125 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:16,126 [main:66] - Compilation checking started
2021-03-11 12:27:16,548 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((list3).subList(1640926651, -1968464708).contains(339402510.toUInt())) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((90.toUByte()).toByte().toInt() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:16,552 [main:56] - replacing (listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u), List<UInt>)
2021-03-11 12:27:16,553 [main:38] - replacing listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u) List<UInt>
2021-03-11 12:27:16,553 [main:42] - Getting value of type List<UInt>
2021-03-11 12:27:16,679 [main:302] - generating value of type = List<UInt> false depth = 0
2021-03-11 12:27:16,791 [main:43] - GENERATING CALL OF fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->UInt): List<UInt> = TODO()
2021-03-11 12:27:16,793 [main:61] - WITHOUT TYPE PARAMS = fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->UInt): List<UInt> = TODO()
2021-03-11 12:27:17,091 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:27:17,092 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, UInt> false depth = 3
2021-03-11 12:27:17,092 [main:302] - generating value of type = UInt true depth = 4
2021-03-11 12:27:17,093 [main:95] - GENERATED = List<UInt>(-1016595272, {a: Int -> 1607271612.toUInt()})
2021-03-11 12:27:17,093 [main:46] - GENERATED VALUE OF TYPE List<UInt> = List<UInt>(-1016595272, {a: Int -> 1607271612.toUInt()})
2021-03-11 12:27:17,093 [main:49] - GENERATED IS CALL =true
2021-03-11 12:27:17,095 [main:55] - randomType = Double
2021-03-11 12:27:17,191 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:27:17,231 [main:94] - GETTING List<UInt> from ArrayList<UInt>
2021-03-11 12:27:17,340 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.filterIndexed(predicate: (index: kotlin.Int, T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1176578f]]
2021-03-11 12:27:17,340 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.filterIndexed(predicate: (index: kotlin.Int, T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1176578f]
2021-03-11 12:27:17,436 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Boolean> false depth = 0
2021-03-11 12:27:17,437 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:27:17,438 [main:105] - GENERATED CALL = (list1).filterIndexed({a: Int, b: T -> true})
2021-03-11 12:27:17,438 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.drop(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1b2cd4e4]]
2021-03-11 12:27:17,438 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.drop(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1b2cd4e4]
2021-03-11 12:27:17,534 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:17,535 [main:105] - GENERATED CALL = (list1).drop(171521333)
2021-03-11 12:27:17,535 [main:101] - Case = [public inline fun <T, K> kotlin.collections.Iterable<T>.distinctBy(selector: (T) -> K): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@53ca55c]]
2021-03-11 12:27:17,535 [main:137] - GENERATING call of type public inline fun <T, K> kotlin.collections.Iterable<T>.distinctBy(selector: (T) -> K): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@53ca55c]
2021-03-11 12:27:17,631 [main:302] - generating value of type = Function1<T, K> false depth = 0
2021-03-11 12:27:17,632 [main:302] - generating value of type = K false depth = 1
2021-03-11 12:27:17,636 [main:105] - GENERATED CALL = (list1).distinctBy({a: T -> })
2021-03-11 12:27:17,636 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.takeWhile(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2cca0a50]]
2021-03-11 12:27:17,636 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.takeWhile(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2cca0a50]
2021-03-11 12:27:17,732 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:27:17,733 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:27:17,734 [main:105] - GENERATED CALL = (list1).takeWhile({a: T -> true})
2021-03-11 12:27:17,734 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.toList(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6a736908]]
2021-03-11 12:27:17,734 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.toList(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6a736908]
2021-03-11 12:27:17,734 [main:105] - GENERATED CALL = (list1).toList()
2021-03-11 12:27:17,734 [main:101] - Case = [public fun <T : kotlin.Any> kotlin.collections.Iterable<T?>.filterNotNull(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b254e2e]]
2021-03-11 12:27:17,734 [main:137] - GENERATING call of type public fun <T : kotlin.Any> kotlin.collections.Iterable<T?>.filterNotNull(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b254e2e]
2021-03-11 12:27:17,735 [main:105] - GENERATED CALL = (list1).filterNotNull()
2021-03-11 12:27:17,735 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sortedDescending(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7e2e756f]]
2021-03-11 12:27:17,735 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sortedDescending(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7e2e756f]
2021-03-11 12:27:17,735 [main:105] - GENERATED CALL = (list1).sortedDescending()
2021-03-11 12:27:17,735 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.filter(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@418c4e4a]]
2021-03-11 12:27:17,735 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.filter(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@418c4e4a]
2021-03-11 12:27:17,830 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:27:17,831 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:27:17,832 [main:105] - GENERATED CALL = (list1).filter({a: T -> true})
2021-03-11 12:27:17,832 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.plusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@98474c2]]
2021-03-11 12:27:17,832 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.plusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@98474c2]
2021-03-11 12:27:17,928 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:27:18,030 [main:43] - GENERATING CALL OF fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-11 12:27:18,032 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-11 12:27:18,226 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:27:18,227 [main:95] - GENERATED = enumValueOf<Enum<T>>("bnfpb")
2021-03-11 12:27:18,227 [main:105] - GENERATED CALL = (list1).plusElement(enumValueOf<Enum<T>>("bnfpb"))
2021-03-11 12:27:18,228 [main:101] - Case = [public operator fun <T> kotlin.collections.Collection<T>.plus(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@73a09825]]
2021-03-11 12:27:18,228 [main:137] - GENERATING call of type public operator fun <T> kotlin.collections.Collection<T>.plus(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@73a09825]
2021-03-11 12:27:18,360 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:27:18,667 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: HashMap<Int, Short>): T = TODO()
2021-03-11 12:27:18,668 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: HashMap<Int, Short>): T = TODO()
2021-03-11 12:27:18,764 [main:302] - generating value of type = HashMap<Int, Short> false depth = 3
2021-03-11 12:27:18,865 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): HashMap<Int, Short> = TODO()
2021-03-11 12:27:18,867 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): HashMap<Int, Short> = TODO()
2021-03-11 12:27:18,963 [main:95] - GENERATED = LinkedHashMap<Int, Short>()
2021-03-11 12:27:18,963 [main:95] - GENERATED = requireNotNull<HashMap<Int, Short>>(LinkedHashMap<Int, Short>())
2021-03-11 12:27:18,963 [main:105] - GENERATED CALL = (list1).plus(requireNotNull<HashMap<Int, Short>>(LinkedHashMap<Int, Short>()))
2021-03-11 12:27:18,963 [main:63] - replacement of listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u) of type List<UInt> is (list1).takeWhile({a: T -> true})
2021-03-11 12:27:19,060 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:19,061 [main:66] - Compilation checking started
2021-03-11 12:27:19,322 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != (list1).takeWhile({a: T -> true})) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((90.toUByte()).toByte().toInt() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:19,326 [main:56] - replacing (list2, ArrayList<UInt>)
2021-03-11 12:27:19,326 [main:38] - replacing list2 ArrayList<UInt>
2021-03-11 12:27:19,326 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:27:19,424 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:27:19,526 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:27:19,528 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:27:19,622 [main:95] - GENERATED = arrayListOf<UInt>()
2021-03-11 12:27:19,622 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = arrayListOf<UInt>()
2021-03-11 12:27:19,623 [main:49] - GENERATED IS CALL =true
2021-03-11 12:27:19,841 [main:55] - randomType = MutableMap<Float, String>
2021-03-11 12:27:19,845 [main:94] - GETTING ArrayList<UInt> from ArrayList<ULong>
2021-03-11 12:27:19,966 [main:63] - replacement of list2 of type ArrayList<UInt> is list4
2021-03-11 12:27:20,084 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:27:20,084 [main:66] - Compilation checking started
2021-03-11 12:27:20,354 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list4"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((90.toUByte()).toByte().toInt() > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:20,358 [main:56] - replacing ((90.toUByte()).toByte().toInt() > 23, Boolean)
2021-03-11 12:27:20,359 [main:38] - replacing (90.toUByte()).toByte().toInt() > 23 Boolean
2021-03-11 12:27:20,359 [main:42] - Getting value of type Boolean
2021-03-11 12:27:20,456 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:20,457 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:27:20,457 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:20,559 [main:55] - randomType = Char?
2021-03-11 12:27:20,657 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:27:20,683 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Char defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@57695414]
2021-03-11 12:27:20,683 [main:137] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ebac349]
2021-03-11 12:27:20,683 [main:66] - Generated call from random type = ('雖')?.dec().isLowerCase()
2021-03-11 12:27:20,684 [main:94] - GETTING Boolean from Int
2021-03-11 12:27:20,713 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]]
2021-03-11 12:27:20,713 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:27:20,714 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]
2021-03-11 12:27:20,714 [main:105] - GENERATED CALL = (list1.size).toDouble().isFinite()
2021-03-11 12:27:20,714 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]]
2021-03-11 12:27:20,714 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:27:20,810 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:27:20,811 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]
2021-03-11 12:27:20,811 [main:105] - GENERATED CALL = (list1.size).div(0.2782956947671227).isFinite()
2021-03-11 12:27:20,812 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f91f4f6]]
2021-03-11 12:27:20,812 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb]
2021-03-11 12:27:20,911 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:27:20,912 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4f91f4f6]
2021-03-11 12:27:21,010 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:21,011 [main:105] - GENERATED CALL = (list1.size).rangeTo(73).contains(-187628152)
2021-03-11 12:27:21,011 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:27:21,011 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:27:21,108 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:21,108 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:27:21,205 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:21,206 [main:105] - GENERATED CALL = (list1.size).equals("ycgvr").and(false)
2021-03-11 12:27:21,206 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@6e9da3a3]]
2021-03-11 12:27:21,206 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb]
2021-03-11 12:27:21,304 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:27:21,305 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@6e9da3a3]
2021-03-11 12:27:21,305 [main:105] - GENERATED CALL = (list1.size).rangeTo(27).isEmpty()
2021-03-11 12:27:21,305 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6ea257]]
2021-03-11 12:27:21,305 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:27:21,305 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6ea257]
2021-03-11 12:27:21,305 [main:105] - GENERATED CALL = (list1.size).toChar().isDigit()
2021-03-11 12:27:21,305 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf3643c]]
2021-03-11 12:27:21,305 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:27:21,306 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf3643c]
2021-03-11 12:27:21,306 [main:105] - GENERATED CALL = (list1.size).toChar().isLetterOrDigit()
2021-03-11 12:27:21,306 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59419d8e]]
2021-03-11 12:27:21,306 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:27:21,306 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59419d8e]
2021-03-11 12:27:21,306 [main:105] - GENERATED CALL = (list1.size).toChar().isTitleCase()
2021-03-11 12:27:21,306 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:27:21,306 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:27:21,306 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:27:21,413 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:21,413 [main:105] - GENERATED CALL = (list1.size).toInt().equals("dlsvw")
2021-03-11 12:27:21,417 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]]
2021-03-11 12:27:21,417 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:27:21,417 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]
2021-03-11 12:27:21,417 [main:105] - GENERATED CALL = (list1.size).toDouble().isNaN()
2021-03-11 12:27:21,417 [main:63] - replacement of (90.toUByte()).toByte().toInt() > 23 of type Boolean is (list1.size).div(0.2782956947671227).isFinite()
2021-03-11 12:27:21,513 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:21,514 [main:66] - Compilation checking started
2021-03-11 12:27:21,971 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return "Wrong elements for 1uL until 5uL: $list2"
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:21,977 [main:56] - replacing ("Wrong elements for 1uL until 5uL: $list2", String)
2021-03-11 12:27:21,978 [main:38] - replacing "Wrong elements for 1uL until 5uL: $list2" String
2021-03-11 12:27:21,978 [main:42] - Getting value of type String
2021-03-11 12:27:22,088 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:27:22,089 [main:46] - GENERATED VALUE OF TYPE String = "uihbp"
2021-03-11 12:27:22,089 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:22,189 [main:55] - randomType = Short
2021-03-11 12:27:22,285 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:27:22,323 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]
2021-03-11 12:27:22,419 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:22,420 [main:66] - Generated call from random type = (-24401).toString(1281606996)
2021-03-11 12:27:22,420 [main:63] - replacement of "Wrong elements for 1uL until 5uL: $list2" of type String is (-24401).toString(1281606996)
2021-03-11 12:27:22,518 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:22,518 [main:66] - Compilation checking started
2021-03-11 12:27:22,989 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list2.size > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:22,993 [main:56] - replacing (5u.toUByte(), UByte)
2021-03-11 12:27:22,993 [main:38] - replacing 5u.toUByte() UByte
2021-03-11 12:27:22,993 [main:42] - Getting value of type UByte
2021-03-11 12:27:23,098 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:23,099 [main:46] - GENERATED VALUE OF TYPE UByte = 22.toUByte()
2021-03-11 12:27:23,099 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:23,205 [main:55] - randomType = Short
2021-03-11 12:27:23,303 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:27:23,353 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5cbb0744]
2021-03-11 12:27:23,353 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@41cd00cd]
2021-03-11 12:27:23,353 [main:66] - Generated call from random type = (7165).toByte().toUByte()
2021-03-11 12:27:23,353 [main:94] - GETTING UByte from UByte
2021-03-11 12:27:23,390 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.rotateRight(bitCount: kotlin.Int): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@25850671]]
2021-03-11 12:27:23,390 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.rotateRight(bitCount: kotlin.Int): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@25850671]
2021-03-11 12:27:23,491 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:23,492 [main:105] - GENERATED CALL = (1u.toUByte()).rotateRight(713496825)
2021-03-11 12:27:23,492 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7bc34e09], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@4b688389]]
2021-03-11 12:27:23,492 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7bc34e09]
2021-03-11 12:27:23,590 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:23,591 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@4b688389]
2021-03-11 12:27:23,591 [main:105] - GENERATED CALL = (1u.toUByte()).compareTo(50.toUByte()).toUByte()
2021-03-11 12:27:23,591 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline infix fun or(other: kotlin.UByte): kotlin.UByte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@47f9b353]]
2021-03-11 12:27:23,591 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun or(other: kotlin.UByte): kotlin.UByte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@47f9b353]
2021-03-11 12:27:23,690 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:23,691 [main:105] - GENERATED CALL = (1u.toUByte()).or(88.toUByte())
2021-03-11 12:27:23,691 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2], @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@68801771]]
2021-03-11 12:27:23,691 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2]
2021-03-11 12:27:23,691 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@68801771]
2021-03-11 12:27:23,691 [main:105] - GENERATED CALL = (1u.toUByte()).toUShort().toUByte()
2021-03-11 12:27:23,692 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@50715301], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@47f68aa4]]
2021-03-11 12:27:23,692 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@50715301]
2021-03-11 12:27:23,692 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUByte(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@47f68aa4]
2021-03-11 12:27:23,692 [main:105] - GENERATED CALL = (1u.toUByte()).toShort().toUByte()
2021-03-11 12:27:23,692 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline infix fun xor(other: kotlin.UByte): kotlin.UByte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@172ab6dc]]
2021-03-11 12:27:23,692 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun xor(other: kotlin.UByte): kotlin.UByte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@172ab6dc]
2021-03-11 12:27:23,800 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:23,801 [main:105] - GENERATED CALL = (1u.toUByte()).xor(73.toUByte())
2021-03-11 12:27:23,801 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@69ac7d77]]
2021-03-11 12:27:23,801 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@69ac7d77]
2021-03-11 12:27:23,801 [main:105] - GENERATED CALL = (1u.toUByte()).toUByte()
2021-03-11 12:27:23,801 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc], @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2408dbed]]
2021-03-11 12:27:23,801 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc]
2021-03-11 12:27:23,915 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:23,916 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2408dbed]
2021-03-11 12:27:23,916 [main:105] - GENERATED CALL = (1u.toUByte()).div(48.toUByte()).toUByte()
2021-03-11 12:27:23,917 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.rotateLeft(bitCount: kotlin.Int): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@35fcb7d]]
2021-03-11 12:27:23,917 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.rotateLeft(bitCount: kotlin.Int): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@35fcb7d]
2021-03-11 12:27:24,012 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:24,013 [main:105] - GENERATED CALL = (1u.toUByte()).rotateLeft(-2019538051)
2021-03-11 12:27:24,013 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.takeLowestOneBit(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@55e107f5]]
2021-03-11 12:27:24,013 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.takeLowestOneBit(): kotlin.UByte defined in kotlin[DeserializedSimpleFunctionDescriptor@55e107f5]
2021-03-11 12:27:24,013 [main:105] - GENERATED CALL = (1u.toUByte()).takeLowestOneBit()
2021-03-11 12:27:24,013 [main:63] - replacement of 5u.toUByte() of type UByte is (1u.toUByte()).xor(73.toUByte())
2021-03-11 12:27:24,108 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:24,112 [main:56] - replacing (list2, ArrayList<UInt>)
2021-03-11 12:27:24,113 [main:38] - replacing list2 ArrayList<UInt>
2021-03-11 12:27:24,113 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:27:24,208 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:27:24,307 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<UInt> = TODO()
2021-03-11 12:27:24,309 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<UInt> = TODO()
2021-03-11 12:27:24,504 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:27:24,505 [main:95] - GENERATED = ArrayList<UInt>(399209351)
2021-03-11 12:27:24,505 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = ArrayList<UInt>(399209351)
2021-03-11 12:27:24,505 [main:49] - GENERATED IS CALL =true
2021-03-11 12:27:24,507 [main:55] - randomType = Long
2021-03-11 12:27:24,603 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:27:24,646 [main:94] - GETTING ArrayList<UInt> from UShort
2021-03-11 12:27:24,671 [main:94] - GETTING ArrayList<UInt> from UByte
2021-03-11 12:27:24,696 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:27:24,707 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:27:24,710 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:27:24,743 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:27:24,743 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:27:24,851 [main:63] - replacement of list2 of type ArrayList<UInt> is list2
2021-03-11 12:27:24,946 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:27:24,950 [main:56] - replacing (list2.size, Int)
2021-03-11 12:27:24,951 [main:38] - replacing list2.size Int
2021-03-11 12:27:24,951 [main:42] - Getting value of type Int
2021-03-11 12:27:25,051 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:25,052 [main:46] - GENERATED VALUE OF TYPE Int = -197402673
2021-03-11 12:27:25,052 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:25,157 [main:55] - randomType = Short
2021-03-11 12:27:25,267 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:27:25,311 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:27:25,312 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e4fa412]
2021-03-11 12:27:25,409 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:27:25,410 [main:66] - Generated call from random type = (16023).toInt().compareTo(-117)
2021-03-11 12:27:25,411 [main:94] - GETTING Int from Boolean
2021-03-11 12:27:25,423 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1542447f]]
2021-03-11 12:27:25,423 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:25,532 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:25,533 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1542447f]
2021-03-11 12:27:25,650 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:27:25,651 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).plus(100)
2021-03-11 12:27:25,651 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a4ce2f]]
2021-03-11 12:27:25,651 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:25,752 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:25,752 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a4ce2f]
2021-03-11 12:27:25,753 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).toInt()
2021-03-11 12:27:25,753 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51c62d81]]
2021-03-11 12:27:25,753 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:25,847 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:25,848 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51c62d81]
2021-03-11 12:27:25,848 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).takeHighestOneBit()
2021-03-11 12:27:25,848 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a83905]]
2021-03-11 12:27:25,848 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:25,943 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:25,944 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a83905]
2021-03-11 12:27:26,043 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:26,045 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(false).ushr(2051190108)
2021-03-11 12:27:26,045 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@495e3dd2]]
2021-03-11 12:27:26,045 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:26,152 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:26,153 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@495e3dd2]
2021-03-11 12:27:26,262 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:26,263 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(false).coerceAtMost(-948511853)
2021-03-11 12:27:26,263 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603c041c]]
2021-03-11 12:27:26,263 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:26,358 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:26,358 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603c041c]
2021-03-11 12:27:26,453 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:27:26,454 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).div(94)
2021-03-11 12:27:26,454 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@296f4f62]]
2021-03-11 12:27:26,454 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:26,550 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:26,551 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@296f4f62]
2021-03-11 12:27:26,653 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:26,654 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(false).or(323646576)
2021-03-11 12:27:26,654 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]]
2021-03-11 12:27:26,654 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:26,751 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:26,752 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(false)
2021-03-11 12:27:26,752 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3691a4cc]]
2021-03-11 12:27:26,752 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:26,849 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:26,850 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3691a4cc]
2021-03-11 12:27:26,950 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:27:26,950 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).minus(-6)
2021-03-11 12:27:26,951 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e00055b]]
2021-03-11 12:27:26,951 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:27,046 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:27,047 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e00055b]
2021-03-11 12:27:27,143 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:27:27,144 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(false).rem(120)
2021-03-11 12:27:27,144 [main:63] - replacement of list2.size of type Int is (list1.add(i)).compareTo(false).coerceAtMost(-948511853)
2021-03-11 12:27:27,239 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:27,240 [main:66] - Compilation checking started
2021-03-11 12:27:27,700 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if ((list1.add(i)).compareTo(false).coerceAtMost(-948511853) > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:27,704 [main:56] - replacing (1uL until 5uL, ULongRange)
2021-03-11 12:27:27,705 [main:38] - replacing 1uL until 5uL ULongRange
2021-03-11 12:27:27,705 [main:42] - Getting value of type ULongRange
2021-03-11 12:27:27,810 [main:302] - generating value of type = ULongRange false depth = 0
2021-03-11 12:27:27,914 [main:43] - GENERATING CALL OF fun ULongRange(start: kotlin.ULong, endInclusive: kotlin.ULong): ULongRange = TODO()
2021-03-11 12:27:27,916 [main:61] - WITHOUT TYPE PARAMS = fun ULongRange(start: kotlin.ULong, endInclusive: kotlin.ULong): ULongRange = TODO()
2021-03-11 12:27:28,233 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:27:28,234 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:27:28,235 [main:95] - GENERATED = ULongRange(1988878844625148411.toULong(), 9032232747686785050.toULong())
2021-03-11 12:27:28,235 [main:46] - GENERATED VALUE OF TYPE ULongRange = ULongRange(1988878844625148411.toULong(), 9032232747686785050.toULong())
2021-03-11 12:27:28,235 [main:49] - GENERATED IS CALL =true
2021-03-11 12:27:28,345 [main:55] - randomType = MutableMap<Byte, Boolean>
2021-03-11 12:27:28,346 [main:94] - GETTING ULongRange from ArrayList<UInt>
2021-03-11 12:27:28,462 [main:94] - GETTING ULongRange from Int
2021-03-11 12:27:28,492 [main:94] - GETTING ULongRange from UByte
2021-03-11 12:27:28,513 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27d30729], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.ULong.until(to: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@485a7298]]
2021-03-11 12:27:28,513 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27d30729]
2021-03-11 12:27:28,613 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:28,614 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.ULong.until(to: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@485a7298]
2021-03-11 12:27:28,712 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:28,713 [main:105] - GENERATED CALL = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
2021-03-11 12:27:28,713 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27d30729], @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@76704c27]]
2021-03-11 12:27:28,713 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27d30729]
2021-03-11 12:27:28,812 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:28,813 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@76704c27]
2021-03-11 12:27:28,916 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:28,917 [main:105] - GENERATED CALL = (1u.toUByte()).div(589060028827776548.toULong()).rangeTo(7750225127715114420.toULong())
2021-03-11 12:27:28,917 [main:63] - replacement of 1uL until 5uL of type ULongRange is (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
2021-03-11 12:27:29,017 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:29,017 [main:66] - Compilation checking started
2021-03-11 12:27:29,525 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if ((list1.add(i)).compareTo(false).coerceAtMost(-948511853) > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411})) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:29,532 [main:56] - replacing ((list1.add(i)).compareTo(false).coerceAtMost(-948511853) > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411}), Boolean)
2021-03-11 12:27:29,533 [main:38] - replacing (list1.add(i)).compareTo(false).coerceAtMost(-948511853) > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411}) Boolean
2021-03-11 12:27:29,533 [main:42] - Getting value of type Boolean
2021-03-11 12:27:29,668 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:29,669 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:27:29,669 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:29,671 [main:55] - randomType = UByte
2021-03-11 12:27:29,774 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:29,801 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7359be48]
2021-03-11 12:27:29,801 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@65124fa2]
2021-03-11 12:27:29,901 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:29,901 [main:66] - Generated call from random type = (48.toUByte()).toUShort().equals("bpgnu")
2021-03-11 12:27:29,901 [main:94] - GETTING Boolean from Boolean
2021-03-11 12:27:29,910 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:27:29,910 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:27:30,008 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:30,009 [main:105] - GENERATED CALL = (list1.add(i)).xor(false)
2021-03-11 12:27:30,009 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:27:30,009 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:27:30,108 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:30,109 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:27:30,209 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:30,210 [main:105] - GENERATED CALL = (list1.add(i)).equals("wkzbb").xor(false)
2021-03-11 12:27:30,210 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:27:30,210 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:27:30,310 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:30,311 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:27:30,311 [main:105] - GENERATED CALL = (list1.add(i)).equals("jpspu").not()
2021-03-11 12:27:30,311 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:27:30,311 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:27:30,411 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:30,411 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:27:30,512 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:30,512 [main:105] - GENERATED CALL = (list1.add(i)).equals("gnzvr").equals("nxxll")
2021-03-11 12:27:30,512 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:27:30,512 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:27:30,612 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:30,612 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:27:30,712 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:30,713 [main:105] - GENERATED CALL = (list1.add(i)).equals("eejvv").and(false)
2021-03-11 12:27:30,713 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:27:30,713 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:27:30,713 [main:105] - GENERATED CALL = (list1.add(i)).not()
2021-03-11 12:27:30,713 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:27:30,713 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:27:30,813 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:30,814 [main:105] - GENERATED CALL = (list1.add(i)).or(false)
2021-03-11 12:27:30,814 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:27:30,814 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:27:30,916 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:30,916 [main:105] - GENERATED CALL = (list1.add(i)).equals("skgkg")
2021-03-11 12:27:30,916 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:27:30,916 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:27:31,017 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:31,017 [main:105] - GENERATED CALL = (list1.add(i)).and(true)
2021-03-11 12:27:31,018 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:27:31,018 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:27:31,117 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:31,117 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:27:31,217 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:31,218 [main:105] - GENERATED CALL = (list1.add(i)).equals("tfhmj").or(false)
2021-03-11 12:27:31,218 [main:63] - replacement of (list1.add(i)).compareTo(false).coerceAtMost(-948511853) > ("wtugq").subSequence(-1323833445, 1139110257).sumBy({a: Char -> 1926010411}) of type Boolean is list1.add(1785541927.toUInt())
2021-03-11 12:27:31,342 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:31,342 [main:66] - Compilation checking started
2021-03-11 12:27:31,750 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:31,754 [main:56] - replacing (3u, UInt)
2021-03-11 12:27:31,754 [main:38] - replacing 3u UInt
2021-03-11 12:27:31,754 [main:42] - Getting value of type UInt
2021-03-11 12:27:31,853 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:31,854 [main:46] - GENERATED VALUE OF TYPE UInt = 1740808733.toUInt()
2021-03-11 12:27:31,854 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:32,148 [main:55] - randomType = ArrayList<LinkedHashMap<Short, ULong>>
2021-03-11 12:27:32,243 [main:302] - generating value of type = ArrayList<LinkedHashMap<Short, ULong>> false depth = 0
2021-03-11 12:27:32,344 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<LinkedHashMap<Short, ULong>> = TODO()
2021-03-11 12:27:32,345 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<LinkedHashMap<Short, ULong>> = TODO()
2021-03-11 12:27:32,535 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:27:32,536 [main:95] - GENERATED = ArrayList<LinkedHashMap<Short, ULong>>(754086082)
2021-03-11 12:27:32,769 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:32,770 [main:66] - Generated call from random type = (ArrayList<LinkedHashMap<Short, ULong>>(754086082)).modCount.toUInt()
2021-03-11 12:27:32,771 [main:94] - GETTING UInt from Int
2021-03-11 12:27:32,818 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]]
2021-03-11 12:27:32,819 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:27:32,819 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]
2021-03-11 12:27:32,819 [main:105] - GENERATED CALL = (list4.size).toLong().toUInt()
2021-03-11 12:27:32,819 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:32,819 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:27:32,819 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:32,819 [main:105] - GENERATED CALL = (list4.size).toInt().toUInt()
2021-03-11 12:27:32,819 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:32,819 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:27:32,928 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:32,929 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:32,929 [main:105] - GENERATED CALL = (list4.size).compareTo(677382035).toUInt()
2021-03-11 12:27:32,929 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]]
2021-03-11 12:27:32,929 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:27:32,929 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]
2021-03-11 12:27:32,930 [main:105] - GENERATED CALL = (list4.size).toShort().toUInt()
2021-03-11 12:27:32,930 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]]
2021-03-11 12:27:32,930 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:27:32,930 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]
2021-03-11 12:27:32,930 [main:105] - GENERATED CALL = (list4.size).toByte().toUInt()
2021-03-11 12:27:32,930 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:32,930 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:32,930 [main:105] - GENERATED CALL = (list4.size).toUInt()
2021-03-11 12:27:32,930 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]]
2021-03-11 12:27:32,930 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:27:32,930 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]
2021-03-11 12:27:32,931 [main:105] - GENERATED CALL = (list4.size).toFloat().toUInt()
2021-03-11 12:27:32,931 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:27:32,931 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:27:33,037 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:27:33,038 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:27:33,038 [main:105] - GENERATED CALL = (list4.size).div(0.2965970322708993).toUInt()
2021-03-11 12:27:33,038 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:27:33,038 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:27:33,038 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:27:33,038 [main:105] - GENERATED CALL = (list4.size).toDouble().toUInt()
2021-03-11 12:27:33,038 [main:63] - replacement of 3u of type UInt is (list4.size).div(0.2965970322708993).toUInt()
2021-03-11 12:27:33,143 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:33,143 [main:66] - Compilation checking started
2021-03-11 12:27:33,465 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, (list4.size).div(0.2965970322708993).toUInt(), (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:33,468 [main:56] - replacing (2u, UInt)
2021-03-11 12:27:33,468 [main:38] - replacing 2u UInt
2021-03-11 12:27:33,468 [main:42] - Getting value of type UInt
2021-03-11 12:27:33,567 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:33,567 [main:46] - GENERATED VALUE OF TYPE UInt = 1642048266.toUInt()
2021-03-11 12:27:33,567 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:33,569 [main:55] - randomType = String
2021-03-11 12:27:33,666 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:27:33,684 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.String.toUInt(): kotlin.UInt defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c485c63]
2021-03-11 12:27:33,685 [main:66] - Generated call from random type = ("hntws").toUInt()
2021-03-11 12:27:33,685 [main:63] - replacement of 2u of type UInt is ("hntws").toUInt()
2021-03-11 12:27:33,780 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:33,783 [main:56] - replacing (listOf<UInt>(1u, 2u, 3u, (list1).get(55608535)), List<UInt>)
2021-03-11 12:27:33,784 [main:38] - replacing listOf<UInt>(1u, 2u, 3u, (list1).get(55608535)) List<UInt>
2021-03-11 12:27:33,784 [main:42] - Getting value of type List<UInt>
2021-03-11 12:27:33,879 [main:302] - generating value of type = List<UInt> false depth = 0
2021-03-11 12:27:33,983 [main:43] - GENERATING CALL OF fun <E> buildList(builderAction: kotlin.collections.MutableList<UInt>.()->kotlin.Unit): List<UInt> = TODO()
2021-03-11 12:27:33,984 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(builderAction: kotlin.collections.MutableList<UInt>.()->kotlin.Unit): List<UInt> = TODO()
2021-03-11 12:27:34,183 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<UInt>, Unit> false depth = 3
2021-03-11 12:27:34,183 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 12:27:34,283 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:27:34,285 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:27:34,574 [main:302] - generating value of type = Int true depth = 7
2021-03-11 12:27:34,574 [main:302] - generating value of type = Function1<Int, Unit> false depth = 7
2021-03-11 12:27:34,575 [main:302] - generating value of type = Unit false depth = 8
2021-03-11 12:27:34,676 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:27:34,677 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:27:34,874 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 11
2021-03-11 12:27:34,874 [main:302] - generating value of type = Unit false depth = 12
2021-03-11 12:27:34,976 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:27:34,977 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:27:35,186 [main:302] - generating value of type = Boolean true depth = 15
2021-03-11 12:27:35,187 [main:95] - GENERATED = require(true)
2021-03-11 12:27:35,187 [main:95] - GENERATED = contract({ require(true)})
2021-03-11 12:27:35,187 [main:95] - GENERATED = repeat(-416390807, {a: Int -> contract({ require(true)})})
2021-03-11 12:27:35,188 [main:95] - GENERATED = buildList<UInt>({ repeat(-416390807, {a: Int -> contract({ require(true)})})})
2021-03-11 12:27:35,188 [main:46] - GENERATED VALUE OF TYPE List<UInt> = buildList<UInt>({ repeat(-416390807, {a: Int -> contract({ require(true)})})})
2021-03-11 12:27:35,188 [main:49] - GENERATED IS CALL =true
2021-03-11 12:27:35,189 [main:55] - randomType = Byte
2021-03-11 12:27:35,317 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:27:35,380 [main:94] - GETTING List<UInt> from Boolean
2021-03-11 12:27:35,398 [main:94] - GETTING List<UInt> from Int
2021-03-11 12:27:35,461 [main:94] - GETTING List<UInt> from Int
2021-03-11 12:27:35,464 [main:94] - GETTING List<UInt> from ArrayList<ULong>
2021-03-11 12:27:35,610 [main:63] - replacement of listOf<UInt>(1u, 2u, 3u, (list1).get(55608535)) of type List<UInt> is buildList<UInt>({ repeat(-416390807, {a: Int -> contract({ require(true)})})})
2021-03-11 12:27:35,705 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:27:35,705 [main:66] - Compilation checking started
2021-03-11 12:27:36,037 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != buildList<UInt>({ repeat(-416390807, {a: Int -> contract({ require(true)})})})) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:36,041 [main:56] - replacing (ArrayList<UInt>(), ArrayList<UInt>)
2021-03-11 12:27:36,041 [main:38] - replacing ArrayList<UInt>() ArrayList<UInt>
2021-03-11 12:27:36,042 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:27:36,160 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:27:36,267 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:27:36,268 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:27:36,370 [main:95] - GENERATED = arrayListOf<UInt>()
2021-03-11 12:27:36,370 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = arrayListOf<UInt>()
2021-03-11 12:27:36,370 [main:49] - GENERATED IS CALL =true
2021-03-11 12:27:36,478 [main:55] - randomType = Short
2021-03-11 12:27:36,579 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:27:36,614 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:27:36,626 [main:94] - GETTING ArrayList<UInt> from UShort
2021-03-11 12:27:36,652 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:27:36,773 [main:63] - replacement of ArrayList<UInt>() of type ArrayList<UInt> is list3
2021-03-11 12:27:36,871 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:27:36,872 [main:66] - Compilation checking started
2021-03-11 12:27:37,166 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = list3
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:37,170 [main:56] - replacing (1u.toUShort(), UShort)
2021-03-11 12:27:37,170 [main:38] - replacing 1u.toUShort() UShort
2021-03-11 12:27:37,170 [main:42] - Getting value of type UShort
2021-03-11 12:27:37,270 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:27:37,271 [main:46] - GENERATED VALUE OF TYPE UShort = 25376.toUShort()
2021-03-11 12:27:37,271 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:37,611 [main:55] - randomType = LinkedHashMap<Float?, Array<Double>>
2021-03-11 12:27:37,709 [main:302] - generating value of type = LinkedHashMap<Float?, Array<Double>> false depth = 0
2021-03-11 12:27:37,811 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Float?, Array<Double>> = TODO()
2021-03-11 12:27:37,812 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Float?, Array<Double>> = TODO()
2021-03-11 12:27:37,910 [main:95] - GENERATED = linkedMapOf<Float?, Array<Double>>()
2021-03-11 12:27:38,080 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@7c7b0f5d]
2021-03-11 12:27:38,081 [main:66] - Generated call from random type = (linkedMapOf<Float?, Array<Double>>()).size.toUShort()
2021-03-11 12:27:38,082 [main:94] - GETTING UShort from Boolean
2021-03-11 12:27:38,096 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@7c7b0f5d]]
2021-03-11 12:27:38,096 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:38,198 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:38,199 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUShort(): kotlin.UShort defined in kotlin[DeserializedSimpleFunctionDescriptor@7c7b0f5d]
2021-03-11 12:27:38,199 [main:105] - GENERATED CALL = (list3.add(i)).compareTo(false).toUShort()
2021-03-11 12:27:38,199 [main:63] - replacement of 1u.toUShort() of type UShort is 25376.toUShort()
2021-03-11 12:27:38,295 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:38,295 [main:66] - Compilation checking started
2021-03-11 12:27:38,713 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:38,719 [main:56] - replacing (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535)), Boolean)
2021-03-11 12:27:38,720 [main:38] - replacing list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535)) Boolean
2021-03-11 12:27:38,720 [main:42] - Getting value of type Boolean
2021-03-11 12:27:38,819 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:38,820 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:27:38,820 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:39,230 [main:55] - randomType = Map<Array<UShort>, Double>?
2021-03-11 12:27:39,231 [main:94] - GETTING Boolean from ArrayList<UInt>
2021-03-11 12:27:39,362 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@38fbc3b1], public abstract fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@c3ac2f6]]
2021-03-11 12:27:39,362 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@38fbc3b1]
2021-03-11 12:27:39,465 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:39,587 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:39,588 [main:137] - GENERATING call of type public abstract fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@c3ac2f6]
2021-03-11 12:27:39,685 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:39,686 [main:105] - GENERATED CALL = (list2).subList(1493627905, 635501091).add(2144478397.toUInt())
2021-03-11 12:27:39,686 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7f9d2cfc]]
2021-03-11 12:27:39,686 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7f9d2cfc]
2021-03-11 12:27:39,782 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:39,782 [main:105] - GENERATED CALL = (list2).equals("bmsys")
2021-03-11 12:27:39,783 [main:101] - Case = [public open fun isEmpty(): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@61f691d8]]
2021-03-11 12:27:39,783 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@61f691d8]
2021-03-11 12:27:39,783 [main:105] - GENERATED CALL = (list2).isEmpty()
2021-03-11 12:27:39,783 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@38fbc3b1], public fun <T> kotlin.collections.MutableList<T>.removeAll(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3b7f00d9]]
2021-03-11 12:27:39,783 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@38fbc3b1]
2021-03-11 12:27:39,879 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:39,976 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:39,976 [main:137] - GENERATING call of type public fun <T> kotlin.collections.MutableList<T>.removeAll(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3b7f00d9]
2021-03-11 12:27:40,073 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:27:40,074 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:27:40,075 [main:105] - GENERATED CALL = (list2).subList(-949189602, 972576130).removeAll({a: T -> true})
2021-03-11 12:27:40,075 [main:101] - Case = [public open fun addAll(index: kotlin.Int, elements: kotlin.collections.Collection<kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@74228335]]
2021-03-11 12:27:40,075 [main:137] - GENERATING call of type public open fun addAll(index: kotlin.Int, elements: kotlin.collections.Collection<kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@74228335]
2021-03-11 12:27:40,172 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:40,268 [main:302] - generating value of type = Collection<UInt> false depth = 0
2021-03-11 12:27:40,369 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): Collection<UInt> = TODO()
2021-03-11 12:27:40,371 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): Collection<UInt> = TODO()
2021-03-11 12:27:40,470 [main:95] - GENERATED = LinkedHashSet<UInt>()
2021-03-11 12:27:40,470 [main:105] - GENERATED CALL = (list2).addAll(-823176913, LinkedHashSet<UInt>())
2021-03-11 12:27:40,471 [main:101] - Case = [public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@6ba72356], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@2ec76a97]]
2021-03-11 12:27:40,471 [main:137] - GENERATING call of type public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@6ba72356]
2021-03-11 12:27:40,471 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@2ec76a97]
2021-03-11 12:27:40,569 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:40,570 [main:105] - GENERATED CALL = (list2).clear().equals("jpobu")
2021-03-11 12:27:40,570 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@c2bfc15], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:27:40,570 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:27:40,670 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:40,670 [main:105] - GENERATED CALL = (list2).modCount.equals("fbarb")
2021-03-11 12:27:40,670 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62dd0a66], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3f008d2d]]
2021-03-11 12:27:40,670 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62dd0a66]
2021-03-11 12:27:40,768 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:40,769 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3f008d2d]
2021-03-11 12:27:40,870 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:40,871 [main:105] - GENERATED CALL = (list2).get(-1041216800).equals("setyr")
2021-03-11 12:27:40,871 [main:101] - Case = [public open fun retainAll(elements: kotlin.collections.Collection<kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7e66c962]]
2021-03-11 12:27:40,871 [main:137] - GENERATING call of type public open fun retainAll(elements: kotlin.collections.Collection<kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7e66c962]
2021-03-11 12:27:40,972 [main:302] - generating value of type = Collection<UInt> false depth = 0
2021-03-11 12:27:41,074 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: UInt): Collection<UInt> = TODO()
2021-03-11 12:27:41,076 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: UInt): Collection<UInt> = TODO()
2021-03-11 12:27:41,176 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:27:41,177 [main:95] - GENERATED = linkedSetOf<UInt>(268546491.toUInt())
2021-03-11 12:27:41,177 [main:105] - GENERATED CALL = (list2).retainAll(linkedSetOf<UInt>(268546491.toUInt()))
2021-03-11 12:27:41,177 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d20b385], @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3bb2680e]]
2021-03-11 12:27:41,177 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d20b385]
2021-03-11 12:27:41,177 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3bb2680e]
2021-03-11 12:27:41,177 [main:105] - GENERATED CALL = (list2).toArray().isEmpty()
2021-03-11 12:27:41,178 [main:63] - replacement of list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535)) of type Boolean is (list2).modCount.equals("fbarb")
2021-03-11 12:27:41,278 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:41,279 [main:66] - Compilation checking started
2021-03-11 12:27:41,565 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((list2).modCount.equals("fbarb")) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:41,570 [main:56] - replacing (4u, UInt)
2021-03-11 12:27:41,570 [main:38] - replacing 4u UInt
2021-03-11 12:27:41,571 [main:42] - Getting value of type UInt
2021-03-11 12:27:41,668 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:41,669 [main:46] - GENERATED VALUE OF TYPE UInt = 1611058493.toUInt()
2021-03-11 12:27:41,670 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:42,265 [main:55] - randomType = Function2<Short, ArrayDeque<Short?>, UByte?>
2021-03-11 12:27:42,266 [main:94] - GETTING UInt from Int
2021-03-11 12:27:42,304 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:27:42,304 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:27:42,400 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:27:42,401 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:27:42,401 [main:105] - GENERATED CALL = (list2.size).div(0.01534055346828489).toUInt()
2021-03-11 12:27:42,402 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:42,402 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:27:42,402 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:42,402 [main:105] - GENERATED CALL = (list2.size).toInt().toUInt()
2021-03-11 12:27:42,402 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:27:42,402 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:27:42,402 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:27:42,402 [main:105] - GENERATED CALL = (list2.size).toDouble().toUInt()
2021-03-11 12:27:42,402 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]]
2021-03-11 12:27:42,402 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:27:42,402 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]
2021-03-11 12:27:42,402 [main:105] - GENERATED CALL = (list2.size).toFloat().toUInt()
2021-03-11 12:27:42,402 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]]
2021-03-11 12:27:42,402 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:27:42,403 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]
2021-03-11 12:27:42,403 [main:105] - GENERATED CALL = (list2.size).toShort().toUInt()
2021-03-11 12:27:42,403 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]]
2021-03-11 12:27:42,403 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:27:42,403 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]
2021-03-11 12:27:42,403 [main:105] - GENERATED CALL = (list2.size).toByte().toUInt()
2021-03-11 12:27:42,403 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:42,403 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:27:42,500 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:42,501 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:42,501 [main:105] - GENERATED CALL = (list2.size).compareTo(1212394855).toUInt()
2021-03-11 12:27:42,501 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:42,501 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:42,501 [main:105] - GENERATED CALL = (list2.size).toUInt()
2021-03-11 12:27:42,501 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]]
2021-03-11 12:27:42,502 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:27:42,502 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]
2021-03-11 12:27:42,502 [main:105] - GENERATED CALL = (list2.size).toLong().toUInt()
2021-03-11 12:27:42,502 [main:63] - replacement of 4u of type UInt is (list2.size).toFloat().toUInt()
2021-03-11 12:27:42,598 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:42,598 [main:66] - Compilation checking started
2021-03-11 12:27:42,996 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt())) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:42,999 [main:56] - replacing (3u, UInt)
2021-03-11 12:27:42,999 [main:38] - replacing 3u UInt
2021-03-11 12:27:43,000 [main:42] - Getting value of type UInt
2021-03-11 12:27:43,096 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:43,097 [main:46] - GENERATED VALUE OF TYPE UInt = 1511223201.toUInt()
2021-03-11 12:27:43,097 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:43,297 [main:55] - randomType = List<Byte>
2021-03-11 12:27:43,299 [main:94] - GETTING UInt from ArrayList<ULong>
2021-03-11 12:27:43,419 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96], @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.Array<out kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e224d5e]]
2021-03-11 12:27:43,419 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96]
2021-03-11 12:27:43,419 [main:137] - GENERATING call of type @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.Array<out kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e224d5e]
2021-03-11 12:27:43,419 [main:105] - GENERATED CALL = (list4).toArray().sum()
2021-03-11 12:27:43,419 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@64dbb059], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:43,420 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:43,420 [main:105] - GENERATED CALL = (list4).modCount.toUInt()
2021-03-11 12:27:43,420 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4fdad1f9], @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@74af849d]]
2021-03-11 12:27:43,420 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4fdad1f9]
2021-03-11 12:27:43,518 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:43,518 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@74af849d]
2021-03-11 12:27:43,519 [main:105] - GENERATED CALL = (list4).get(-1205154427).toUInt()
2021-03-11 12:27:43,519 [main:101] - Case = [@kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74352685]]
2021-03-11 12:27:43,519 [main:137] - GENERATING call of type @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74352685]
2021-03-11 12:27:43,519 [main:105] - GENERATED CALL = (list4).sum()
2021-03-11 12:27:43,519 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79303624]]
2021-03-11 12:27:43,519 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79303624]
2021-03-11 12:27:43,643 [main:302] - generating value of type = Function1<T, UInt> false depth = 0
2021-03-11 12:27:43,643 [main:302] - generating value of type = UInt true depth = 1
2021-03-11 12:27:43,644 [main:105] - GENERATED CALL = (list4).sumOf({a: T -> 642142755.toUInt()})
2021-03-11 12:27:43,644 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@4a9c6950], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:43,644 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:43,644 [main:105] - GENERATED CALL = (list4).size.toUInt()
2021-03-11 12:27:43,645 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b6e75f1]]
2021-03-11 12:27:43,645 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96]
2021-03-11 12:27:43,645 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b6e75f1]
2021-03-11 12:27:43,742 [main:302] - generating value of type = Function1<T, UInt> false depth = 0
2021-03-11 12:27:43,742 [main:302] - generating value of type = UInt true depth = 1
2021-03-11 12:27:43,743 [main:105] - GENERATED CALL = (list4).toArray().sumOf({a: T -> 240523119.toUInt()})
2021-03-11 12:27:43,743 [main:63] - replacement of 3u of type UInt is (list4).size.toUInt()
2021-03-11 12:27:43,839 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:43,842 [main:56] - replacing (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt()), Boolean)
2021-03-11 12:27:43,843 [main:38] - replacing list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt()) Boolean
2021-03-11 12:27:43,843 [main:42] - Getting value of type Boolean
2021-03-11 12:27:43,938 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:43,939 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:27:43,939 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:43,941 [main:55] - randomType = UByte
2021-03-11 12:27:44,036 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:44,066 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4d45f266]
2021-03-11 12:27:44,165 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:44,165 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:27:44,262 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:44,263 [main:66] - Generated call from random type = (47.toUByte()).equals("elrqv").or(false)
2021-03-11 12:27:44,263 [main:94] - GETTING Boolean from Boolean
2021-03-11 12:27:44,272 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:27:44,272 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:27:44,367 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:44,367 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:27:44,463 [main:105] - GENERATED CALL = (list2.add(i)).equals("lwynh").equals(null)
2021-03-11 12:27:44,463 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:27:44,463 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:44,560 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:44,560 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:27:44,657 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:44,658 [main:105] - GENERATED CALL = (list2.add(i)).compareTo(true).equals("advzj")
2021-03-11 12:27:44,658 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:27:44,658 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:27:44,754 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:44,754 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:27:44,850 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:44,851 [main:105] - GENERATED CALL = (list2.add(i)).equals("wujkq").xor(false)
2021-03-11 12:27:44,851 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:27:44,851 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:27:44,947 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:44,947 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:27:44,947 [main:105] - GENERATED CALL = (list2.add(i)).equals("ntsme").not()
2021-03-11 12:27:44,947 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:27:44,948 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:27:45,044 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:45,044 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:27:45,141 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:45,142 [main:105] - GENERATED CALL = (list2.add(i)).equals("acahd").and(false)
2021-03-11 12:27:45,142 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:27:45,142 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:27:45,238 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:45,239 [main:105] - GENERATED CALL = (list2.add(i)).xor(false)
2021-03-11 12:27:45,239 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:27:45,239 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:27:45,336 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:27:45,336 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:27:45,432 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:45,433 [main:105] - GENERATED CALL = (list2.add(i)).equals("dmvza").or(false)
2021-03-11 12:27:45,433 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:27:45,433 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:27:45,554 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:45,555 [main:105] - GENERATED CALL = (list2.add(i)).or(false)
2021-03-11 12:27:45,555 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:27:45,555 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:27:45,650 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:45,651 [main:105] - GENERATED CALL = (list2.add(i)).and(true)
2021-03-11 12:27:45,651 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:27:45,651 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:27:45,651 [main:105] - GENERATED CALL = (list2.add(i)).not()
2021-03-11 12:27:45,651 [main:63] - replacement of list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt()) of type Boolean is (list2.add(i)).equals("dmvza").or(false)
2021-03-11 12:27:45,748 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:45,748 [main:66] - Compilation checking started
2021-03-11 12:27:45,993 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if ((list2.add(i)).equals("dmvza").or(false)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:45,997 [main:56] - replacing (list1, ArrayList<UInt>)
2021-03-11 12:27:45,997 [main:38] - replacing list1 ArrayList<UInt>
2021-03-11 12:27:45,997 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:27:46,095 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:27:46,196 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-11 12:27:46,197 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-11 12:27:46,292 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:27:46,293 [main:95] - GENERATED = arrayListOf<UInt>(1287323813.toUInt())
2021-03-11 12:27:46,293 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = arrayListOf<UInt>(1287323813.toUInt())
2021-03-11 12:27:46,293 [main:49] - GENERATED IS CALL =true
2021-03-11 12:27:46,392 [main:55] - randomType = Float?
2021-03-11 12:27:46,488 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:27:46,535 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:27:46,569 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:27:46,576 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:27:46,686 [main:63] - replacement of list1 of type ArrayList<UInt> is list2
2021-03-11 12:27:46,781 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:27:46,781 [main:66] - Compilation checking started
2021-03-11 12:27:47,042 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list2"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt())) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:47,046 [main:56] - replacing (list3, ArrayList<UInt>)
2021-03-11 12:27:47,046 [main:38] - replacing list3 ArrayList<UInt>
2021-03-11 12:27:47,046 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:27:47,146 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:27:47,250 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:27:47,252 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:27:47,348 [main:95] - GENERATED = arrayListOf<UInt>()
2021-03-11 12:27:47,348 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = arrayListOf<UInt>()
2021-03-11 12:27:47,348 [main:49] - GENERATED IS CALL =true
2021-03-11 12:27:47,674 [main:55] - randomType = LinkedHashSet<Int?>?
2021-03-11 12:27:47,769 [main:302] - generating value of type = LinkedHashSet<Int?> false depth = 0
2021-03-11 12:27:47,870 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Int?>): LinkedHashSet<Int?> = TODO()
2021-03-11 12:27:47,871 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Int?>): LinkedHashSet<Int?> = TODO()
2021-03-11 12:27:48,064 [main:302] - generating value of type = Collection<Int?> false depth = 3
2021-03-11 12:27:48,165 [main:43] - GENERATING CALL OF fun <E> HashSet(): Collection<Int?> = TODO()
2021-03-11 12:27:48,167 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(): Collection<Int?> = TODO()
2021-03-11 12:27:48,260 [main:95] - GENERATED = HashSet<Int?>()
2021-03-11 12:27:48,260 [main:95] - GENERATED = LinkedHashSet<Int?>(HashSet<Int?>())
2021-03-11 12:27:48,387 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:27:48,398 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:27:48,400 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:27:48,434 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:27:48,436 [main:94] - GETTING ArrayList<UInt> from UShort
2021-03-11 12:27:48,462 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:27:48,464 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:27:48,464 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:27:48,573 [main:63] - replacement of list3 of type ArrayList<UInt> is list2
2021-03-11 12:27:48,668 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:27:48,668 [main:66] - Compilation checking started
2021-03-11 12:27:49,067 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt())) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:49,071 [main:56] - replacing (1u until 5u, UIntRange)
2021-03-11 12:27:49,071 [main:38] - replacing 1u until 5u UIntRange
2021-03-11 12:27:49,071 [main:42] - Getting value of type UIntRange
2021-03-11 12:27:49,171 [main:302] - generating value of type = UIntRange false depth = 0
2021-03-11 12:27:49,269 [main:43] - GENERATING CALL OF fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-11 12:27:49,271 [main:61] - WITHOUT TYPE PARAMS = fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-11 12:27:49,558 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:27:49,558 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:27:49,559 [main:95] - GENERATED = UIntRange(683394101.toUInt(), 732187662.toUInt())
2021-03-11 12:27:49,559 [main:46] - GENERATED VALUE OF TYPE UIntRange = UIntRange(683394101.toUInt(), 732187662.toUInt())
2021-03-11 12:27:49,559 [main:49] - GENERATED IS CALL =true
2021-03-11 12:27:49,778 [main:55] - randomType = HashSet<Boolean?>
2021-03-11 12:27:49,874 [main:302] - generating value of type = HashSet<Boolean?> false depth = 0
2021-03-11 12:27:49,973 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Boolean?> = TODO()
2021-03-11 12:27:49,974 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Boolean?> = TODO()
2021-03-11 12:27:50,068 [main:95] - GENERATED = linkedSetOf<Boolean?>()
2021-03-11 12:27:50,167 [main:94] - GETTING UIntRange from UShort
2021-03-11 12:27:50,188 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@68801771], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UByte.until(to: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3c62a22b]]
2021-03-11 12:27:50,188 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@68801771]
2021-03-11 12:27:50,188 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UByte.until(to: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3c62a22b]
2021-03-11 12:27:50,283 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:50,284 [main:105] - GENERATED CALL = (1u.toUShort()).toUByte().until(9.toUByte())
2021-03-11 12:27:50,284 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@289eda4b], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3de0725f]]
2021-03-11 12:27:50,284 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@289eda4b]
2021-03-11 12:27:50,380 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:50,381 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3de0725f]
2021-03-11 12:27:50,477 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:50,478 [main:105] - GENERATED CALL = (1u.toUShort()).div(64.toUByte()).until(534806439.toUInt())
2021-03-11 12:27:50,478 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@68801771], @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6547fe6b]]
2021-03-11 12:27:50,478 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@68801771]
2021-03-11 12:27:50,478 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6547fe6b]
2021-03-11 12:27:50,576 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:50,577 [main:105] - GENERATED CALL = (1u.toUShort()).toUByte().rangeTo(26.toUByte())
2021-03-11 12:27:50,577 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UShort.until(to: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@30c5ce0a]]
2021-03-11 12:27:50,577 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UShort.until(to: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@30c5ce0a]
2021-03-11 12:27:50,675 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:27:50,676 [main:105] - GENERATED CALL = (1u.toUShort()).until(27303.toUShort())
2021-03-11 12:27:50,676 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@289eda4b], @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@22fbec8c]]
2021-03-11 12:27:50,676 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@289eda4b]
2021-03-11 12:27:50,771 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:50,771 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@22fbec8c]
2021-03-11 12:27:50,867 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:50,868 [main:105] - GENERATED CALL = (1u.toUShort()).div(66.toUByte()).rangeTo(1621913633.toUInt())
2021-03-11 12:27:50,868 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59fc7cfc]]
2021-03-11 12:27:50,868 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59fc7cfc]
2021-03-11 12:27:50,968 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:27:50,969 [main:105] - GENERATED CALL = (1u.toUShort()).rangeTo(21029.toUShort())
2021-03-11 12:27:50,969 [main:63] - replacement of 1u until 5u of type UIntRange is UIntRange(683394101.toUInt(), 732187662.toUInt())
2021-03-11 12:27:51,063 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:27:51,064 [main:66] - Compilation checking started
2021-03-11 12:27:51,445 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt())) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:51,448 [main:56] - replacing (listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt()), List<UInt>)
2021-03-11 12:27:51,449 [main:38] - replacing listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt()) List<UInt>
2021-03-11 12:27:51,449 [main:42] - Getting value of type List<UInt>
2021-03-11 12:27:51,547 [main:302] - generating value of type = List<UInt> false depth = 0
2021-03-11 12:27:51,647 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): List<UInt> = TODO()
2021-03-11 12:27:51,648 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): List<UInt> = TODO()
2021-03-11 12:27:51,769 [main:95] - GENERATED = arrayListOf<UInt>()
2021-03-11 12:27:51,769 [main:46] - GENERATED VALUE OF TYPE List<UInt> = arrayListOf<UInt>()
2021-03-11 12:27:51,771 [main:49] - GENERATED IS CALL =true
2021-03-11 12:27:51,772 [main:55] - randomType = Char
2021-03-11 12:27:51,867 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:27:51,889 [main:94] - GETTING List<UInt> from Boolean
2021-03-11 12:27:51,902 [main:94] - GETTING List<UInt> from ArrayList<UInt>
2021-03-11 12:27:52,011 [main:101] - Case = [public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.sortedBy(crossinline selector: (T) -> R?): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@752534aa]]
2021-03-11 12:27:52,011 [main:137] - GENERATING call of type public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.sortedBy(crossinline selector: (T) -> R?): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@752534aa]
2021-03-11 12:27:52,107 [main:302] - generating value of type = Function1<T, R?> false depth = 0
2021-03-11 12:27:52,108 [main:302] - generating value of type = R false depth = 1
2021-03-11 12:27:52,307 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Short): R = TODO()
2021-03-11 12:27:52,308 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Short): R = TODO()
2021-03-11 12:27:52,499 [main:302] - generating value of type = Function0<Short> false depth = 4
2021-03-11 12:27:52,499 [main:302] - generating value of type = Short true depth = 5
2021-03-11 12:27:52,500 [main:95] - GENERATED = run<Short>({ 462})
2021-03-11 12:27:52,501 [main:105] - GENERATED CALL = (list1).sortedBy({a: T -> run<Short>({ 462})})
2021-03-11 12:27:52,501 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.drop(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1b2cd4e4]]
2021-03-11 12:27:52,501 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.drop(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1b2cd4e4]
2021-03-11 12:27:52,596 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:52,597 [main:105] - GENERATED CALL = (list1).drop(-1976042613)
2021-03-11 12:27:52,597 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.filterNot(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1bbeedf9]]
2021-03-11 12:27:52,597 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.filterNot(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1bbeedf9]
2021-03-11 12:27:52,692 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:27:52,693 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:27:52,694 [main:105] - GENERATED CALL = (list1).filterNot({a: T -> true})
2021-03-11 12:27:52,694 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.toList(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6a736908]]
2021-03-11 12:27:52,694 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.toList(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6a736908]
2021-03-11 12:27:52,694 [main:105] - GENERATED CALL = (list1).toList()
2021-03-11 12:27:52,694 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.minusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@48852718]]
2021-03-11 12:27:52,694 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.minusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@48852718]
2021-03-11 12:27:52,794 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:27:52,895 [main:43] - GENERATING CALL OF fun <T> minOf(a: Float, b: Float, c: Float): T = TODO()
2021-03-11 12:27:52,897 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Float, b: Float, c: Float): T = TODO()
2021-03-11 12:27:52,991 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:27:52,992 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:27:52,993 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:27:52,993 [main:95] - GENERATED = minOf<Float>(0.66815454f, 0.29594946f, 0.53401804f)
2021-03-11 12:27:52,993 [main:105] - GENERATED CALL = (list1).minusElement(minOf<Float>(0.66815454f, 0.29594946f, 0.53401804f))
2021-03-11 12:27:52,994 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sorted(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@694fdebe]]
2021-03-11 12:27:52,994 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sorted(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@694fdebe]
2021-03-11 12:27:52,994 [main:105] - GENERATED CALL = (list1).sorted()
2021-03-11 12:27:52,994 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.distinct(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7da66aa8]]
2021-03-11 12:27:52,994 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.distinct(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7da66aa8]
2021-03-11 12:27:52,994 [main:105] - GENERATED CALL = (list1).distinct()
2021-03-11 12:27:52,994 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.filterIndexed(predicate: (index: kotlin.Int, T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1176578f]]
2021-03-11 12:27:52,994 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.filterIndexed(predicate: (index: kotlin.Int, T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1176578f]
2021-03-11 12:27:53,091 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Boolean> false depth = 0
2021-03-11 12:27:53,092 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:27:53,092 [main:105] - GENERATED CALL = (list1).filterIndexed({a: Int, b: T -> false})
2021-03-11 12:27:53,093 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.plusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@98474c2]]
2021-03-11 12:27:53,093 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.plusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@98474c2]
2021-03-11 12:27:53,188 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:27:53,291 [main:43] - GENERATING CALL OF fun <T> maxOf(a: ArrayList<ULong>, other: ArrayList<ULong>, comparator: kotlin.Comparator<ArrayList<ULong>>): T = TODO()
2021-03-11 12:27:53,293 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: ArrayList<ULong>, other: ArrayList<ULong>, comparator: kotlin.Comparator<ArrayList<ULong>>): T = TODO()
2021-03-11 12:27:53,499 [main:302] - generating value of type = ArrayList<ULong> false depth = 3
2021-03-11 12:27:53,602 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: ULong): ArrayList<ULong> = TODO()
2021-03-11 12:27:53,603 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: ULong): ArrayList<ULong> = TODO()
2021-03-11 12:27:53,700 [main:302] - generating value of type = ULong true depth = 6
2021-03-11 12:27:53,701 [main:95] - GENERATED = arrayListOf<ULong>(2212744146504686838.toULong())
2021-03-11 12:27:53,701 [main:302] - generating value of type = ArrayList<ULong> false depth = 3
2021-03-11 12:27:53,842 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: ULong): ArrayList<ULong> = TODO()
2021-03-11 12:27:53,843 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: ULong): ArrayList<ULong> = TODO()
2021-03-11 12:27:53,937 [main:302] - generating value of type = ULong true depth = 6
2021-03-11 12:27:53,938 [main:95] - GENERATED = arrayListOf<ULong>(4843503301735732923.toULong())
2021-03-11 12:27:53,938 [main:302] - generating value of type = Comparator<ArrayList<ULong>> false depth = 3
2021-03-11 12:27:54,038 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<ArrayList<ULong>>): Comparator<ArrayList<ULong>> = TODO()
2021-03-11 12:27:54,039 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<ArrayList<ULong>>): Comparator<ArrayList<ULong>> = TODO()
2021-03-11 12:27:54,229 [main:302] - generating value of type = Comparator<ArrayList<ULong>> false depth = 6
2021-03-11 12:27:54,329 [main:43] - GENERATING CALL OF fun <T> compareByDescending(selector: (ArrayList<ULong>)->kotlin.Comparable<*>?): Comparator<ArrayList<ULong>> = TODO()
2021-03-11 12:27:54,330 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareByDescending(selector: (ArrayList<ULong>)->kotlin.Comparable<*>?): Comparator<ArrayList<ULong>> = TODO()
2021-03-11 12:27:54,530 [main:302] - generating value of type = Function1<ArrayList<ULong>, Comparable<*>?> false depth = 9
2021-03-11 12:27:54,531 [main:302] - generating value of type = Comparable<*> false depth = 10
2021-03-11 12:27:54,535 [main:95] - GENERATED = compareByDescending<ArrayList<ULong>>({a: ArrayList<ULong> -> false})
2021-03-11 12:27:54,535 [main:95] - GENERATED = nullsFirst<ArrayList<ULong>>(compareByDescending<ArrayList<ULong>>({a: ArrayList<ULong> -> false}))
2021-03-11 12:27:54,536 [main:95] - GENERATED = maxOf<ArrayList<ULong>>(arrayListOf<ULong>(2212744146504686838.toULong()), arrayListOf<ULong>(4843503301735732923.toULong()), nullsFirst<ArrayList<ULong>>(compareByDescending<ArrayList<ULong>>({a: ArrayList<ULong> -> false})))
2021-03-11 12:27:54,536 [main:105] - GENERATED CALL = (list1).plusElement(maxOf<ArrayList<ULong>>(arrayListOf<ULong>(2212744146504686838.toULong()), arrayListOf<ULong>(4843503301735732923.toULong()), nullsFirst<ArrayList<ULong>>(compareByDescending<ArrayList<ULong>>({a: ArrayList<ULong> -> false}))))
2021-03-11 12:27:54,536 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.takeWhile(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2cca0a50]]
2021-03-11 12:27:54,536 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.takeWhile(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2cca0a50]
2021-03-11 12:27:54,631 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:27:54,632 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:27:54,633 [main:105] - GENERATED CALL = (list1).takeWhile({a: T -> true})
2021-03-11 12:27:54,633 [main:63] - replacement of listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt()) of type List<UInt> is (list1).filterIndexed({a: Int, b: T -> false})
2021-03-11 12:27:54,727 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:54,728 [main:66] - Compilation checking started
2021-03-11 12:27:55,012 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterIndexed({a: Int, b: T -> false})) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535))) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:55,015 [main:56] - replacing (list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535)), Boolean)
2021-03-11 12:27:55,016 [main:38] - replacing list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535)) Boolean
2021-03-11 12:27:55,016 [main:42] - Getting value of type Boolean
2021-03-11 12:27:55,113 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:55,114 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:27:55,114 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:55,116 [main:55] - randomType = Int
2021-03-11 12:27:55,212 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:55,248 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:27:55,344 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:27:55,345 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4afe8f90]
2021-03-11 12:27:55,346 [main:66] - Generated call from random type = (-2012801863).div(0.10139677680474668).isInfinite()
2021-03-11 12:27:55,346 [main:63] - replacement of list3 != listOf<UInt>(1u, 2u, 3u, (list1).get(55608535)) of type Boolean is (-2012801863).div(0.10139677680474668).isInfinite()
2021-03-11 12:27:55,442 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:55,442 [main:66] - Compilation checking started
2021-03-11 12:27:55,832 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt())) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add(i)
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:55,838 [main:56] - replacing (i, UInt)
2021-03-11 12:27:55,839 [main:38] - replacing i UInt
2021-03-11 12:27:55,839 [main:42] - Getting value of type UInt
2021-03-11 12:27:55,950 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:55,950 [main:46] - GENERATED VALUE OF TYPE UInt = 1981994191.toUInt()
2021-03-11 12:27:55,950 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:55,952 [main:55] - randomType = ULong
2021-03-11 12:27:56,074 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:56,101 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6c0e7257]
2021-03-11 12:27:56,101 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun inv(): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2b6907d4]
2021-03-11 12:27:56,101 [main:66] - Generated call from random type = (6450469878920120558.toULong()).toUInt().inv()
2021-03-11 12:27:56,101 [main:63] - replacement of i of type UInt is (6450469878920120558.toULong()).toUInt().inv()
2021-03-11 12:27:56,195 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:56,196 [main:66] - Compilation checking started
2021-03-11 12:27:56,590 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt())) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add((6450469878920120558.toULong()).toUInt().inv())
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:27:56,594 [main:56] - replacing (i, ULong)
2021-03-11 12:27:56,594 [main:38] - replacing i ULong
2021-03-11 12:27:56,594 [main:42] - Getting value of type ULong
2021-03-11 12:27:56,691 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:56,692 [main:46] - GENERATED VALUE OF TYPE ULong = 147473524897626334.toULong()
2021-03-11 12:27:56,692 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:56,694 [main:55] - randomType = Int
2021-03-11 12:27:56,789 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:56,820 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:27:56,915 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:27:56,916 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]
2021-03-11 12:27:56,916 [main:66] - Generated call from random type = (-13565662).div(0.10939663121225895).toULong()
2021-03-11 12:27:56,917 [main:94] - GETTING ULong from ArrayList<ULong>
2021-03-11 12:27:57,026 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4fdad1f9], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.takeHighestOneBit(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@67420940]]
2021-03-11 12:27:57,026 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4fdad1f9]
2021-03-11 12:27:57,121 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:57,122 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.takeHighestOneBit(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@67420940]
2021-03-11 12:27:57,122 [main:105] - GENERATED CALL = (list4).get(-64530395).takeHighestOneBit()
2021-03-11 12:27:57,122 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.ULong): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ec68dec]]
2021-03-11 12:27:57,122 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96]
2021-03-11 12:27:57,122 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.ULong): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ec68dec]
2021-03-11 12:27:57,217 [main:302] - generating value of type = Function1<T, ULong> false depth = 0
2021-03-11 12:27:57,218 [main:302] - generating value of type = ULong true depth = 1
2021-03-11 12:27:57,219 [main:105] - GENERATED CALL = (list4).toArray().sumOf({a: T -> 1300358225209991093.toULong()})
2021-03-11 12:27:57,219 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4fdad1f9], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.coerceIn(minimumValue: kotlin.ULong, maximumValue: kotlin.ULong): kotlin.ULong defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@143ef384]]
2021-03-11 12:27:57,219 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4fdad1f9]
2021-03-11 12:27:57,314 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:57,314 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.coerceIn(minimumValue: kotlin.ULong, maximumValue: kotlin.ULong): kotlin.ULong defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@143ef384]
2021-03-11 12:27:57,410 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:57,506 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:27:57,507 [main:105] - GENERATED CALL = (list4).get(-1439226926).coerceIn(3215433318161135184.toULong(), 7856914689166405082.toULong())
2021-03-11 12:27:57,507 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeFirst(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4c57e410]]
2021-03-11 12:27:57,507 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeFirst(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4c57e410]
2021-03-11 12:27:57,507 [main:105] - GENERATED CALL = (list4).removeFirst()
2021-03-11 12:27:57,507 [main:101] - Case = [@kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.MutableList<T>.remove(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-11 12:27:57,507 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.MutableList<T>.remove(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-11 12:27:57,605 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:57,606 [main:105] - GENERATED CALL = (list4).remove(1875552580)
2021-03-11 12:27:57,606 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@444796e9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeFirstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d97f3ef]]
2021-03-11 12:27:57,606 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@444796e9]
2021-03-11 12:27:57,704 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:57,801 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:57,802 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeFirstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d97f3ef]
2021-03-11 12:27:57,802 [main:105] - GENERATED CALL = (list4).subList(-1387219562, -514491463).removeFirstOrNull()
2021-03-11 12:27:57,803 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4fdad1f9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.rotateLeft(bitCount: kotlin.Int): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@44757ab5]]
2021-03-11 12:27:57,803 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4fdad1f9]
2021-03-11 12:27:57,900 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:57,901 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.rotateLeft(bitCount: kotlin.Int): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@44757ab5]
2021-03-11 12:27:58,001 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:58,002 [main:105] - GENERATED CALL = (list4).get(-1846994909).rotateLeft(-743181431)
2021-03-11 12:27:58,002 [main:101] - Case = [public open fun iterator(): kotlin.collections.MutableIterator<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3ac18729], public abstract fun next(): kotlin.ULong defined in kotlin.collections.MutableIterator[DeserializedSimpleFunctionDescriptor@39ad84f3]]
2021-03-11 12:27:58,002 [main:137] - GENERATING call of type public open fun iterator(): kotlin.collections.MutableIterator<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3ac18729]
2021-03-11 12:27:58,002 [main:137] - GENERATING call of type public abstract fun next(): kotlin.ULong defined in kotlin.collections.MutableIterator[DeserializedSimpleFunctionDescriptor@39ad84f3]
2021-03-11 12:27:58,002 [main:105] - GENERATED CALL = (list4).iterator().next()
2021-03-11 12:27:58,002 [main:101] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.max(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fbaeebe]]
2021-03-11 12:27:58,002 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.max(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fbaeebe]
2021-03-11 12:27:58,003 [main:105] - GENERATED CALL = (list4).max()
2021-03-11 12:27:58,003 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6135d3be]]
2021-03-11 12:27:58,003 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6135d3be]
2021-03-11 12:27:58,003 [main:105] - GENERATED CALL = (list4).removeLastOrNull()
2021-03-11 12:27:58,003 [main:63] - replacement of i of type ULong is (list4).toArray().sumOf({a: T -> 1300358225209991093.toULong()})
2021-03-11 12:27:58,098 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:58,102 [main:56] - replacing (3u, UInt)
2021-03-11 12:27:58,102 [main:38] - replacing 3u UInt
2021-03-11 12:27:58,102 [main:42] - Getting value of type UInt
2021-03-11 12:27:58,197 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:27:58,197 [main:46] - GENERATED VALUE OF TYPE UInt = 2053948066.toUInt()
2021-03-11 12:27:58,197 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:58,199 [main:55] - randomType = UShort
2021-03-11 12:27:58,319 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:27:58,344 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4e4ef7f0]
2021-03-11 12:27:58,344 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun times(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3bb1c420]
2021-03-11 12:27:58,443 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:27:58,444 [main:66] - Generated call from random type = (16634.toUShort()).toUByte().times(18.toUByte())
2021-03-11 12:27:58,445 [main:94] - GETTING UInt from Int
2021-03-11 12:27:58,494 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]]
2021-03-11 12:27:58,494 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:27:58,494 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]
2021-03-11 12:27:58,494 [main:105] - GENERATED CALL = (list3.size).toFloat().toUInt()
2021-03-11 12:27:58,495 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]]
2021-03-11 12:27:58,495 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:27:58,495 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]
2021-03-11 12:27:58,495 [main:105] - GENERATED CALL = (list3.size).toLong().toUInt()
2021-03-11 12:27:58,495 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:58,495 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:27:58,495 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:58,495 [main:105] - GENERATED CALL = (list3.size).toInt().toUInt()
2021-03-11 12:27:58,495 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:27:58,495 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:27:58,495 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:27:58,495 [main:105] - GENERATED CALL = (list3.size).toDouble().toUInt()
2021-03-11 12:27:58,495 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:58,495 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:58,496 [main:105] - GENERATED CALL = (list3.size).toUInt()
2021-03-11 12:27:58,496 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]]
2021-03-11 12:27:58,496 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:27:58,496 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]
2021-03-11 12:27:58,496 [main:105] - GENERATED CALL = (list3.size).toByte().toUInt()
2021-03-11 12:27:58,496 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]]
2021-03-11 12:27:58,496 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:27:58,496 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]
2021-03-11 12:27:58,496 [main:105] - GENERATED CALL = (list3.size).toShort().toUInt()
2021-03-11 12:27:58,496 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:27:58,496 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:27:58,593 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:58,593 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:27:58,594 [main:105] - GENERATED CALL = (list3.size).compareTo(1625948213).toUInt()
2021-03-11 12:27:58,594 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:27:58,594 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:27:58,690 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:27:58,691 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:27:58,691 [main:105] - GENERATED CALL = (list3.size).div(0.22372093219921896).toUInt()
2021-03-11 12:27:58,691 [main:63] - replacement of 3u of type UInt is (list3.size).toLong().toUInt()
2021-03-11 12:27:58,787 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:27:58,791 [main:56] - replacing ("Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2", String)
2021-03-11 12:27:58,792 [main:38] - replacing "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2" String
2021-03-11 12:27:58,792 [main:42] - Getting value of type String
2021-03-11 12:27:58,886 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:27:58,887 [main:46] - GENERATED VALUE OF TYPE String = "tnbew"
2021-03-11 12:27:58,887 [main:49] - GENERATED IS CALL =false
2021-03-11 12:27:59,087 [main:55] - randomType = Pair<ULong, List<UShort>>
2021-03-11 12:27:59,182 [main:302] - generating value of type = Pair<ULong, List<UShort>> false depth = 0
2021-03-11 12:27:59,281 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong, second: List<UShort>): Pair<ULong, List<UShort>> = TODO()
2021-03-11 12:27:59,283 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong, second: List<UShort>): Pair<ULong, List<UShort>> = TODO()
2021-03-11 12:27:59,384 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:27:59,385 [main:302] - generating value of type = List<UShort> false depth = 3
2021-03-11 12:27:59,485 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: UShort): List<UShort> = TODO()
2021-03-11 12:27:59,486 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: UShort): List<UShort> = TODO()
2021-03-11 12:27:59,579 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 12:27:59,580 [main:95] - GENERATED = mutableListOf<UShort>(18030.toUShort())
2021-03-11 12:27:59,581 [main:95] - GENERATED = Pair<ULong, List<UShort>>(877111114458732125.toULong(), mutableListOf<UShort>(18030.toUShort()))
2021-03-11 12:27:59,598 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d671d62]
2021-03-11 12:27:59,694 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:59,695 [main:66] - Generated call from random type = (Pair<ULong, List<UShort>>(877111114458732125.toULong(), mutableListOf<UShort>(18030.toUShort()))).first.toString(2124282419)
2021-03-11 12:27:59,696 [main:94] - GETTING String from Boolean
2021-03-11 12:27:59,708 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:27:59,708 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:27:59,803 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:27:59,803 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:27:59,898 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:27:59,899 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(false).toString(1330271089)
2021-03-11 12:27:59,899 [main:63] - replacement of "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2" of type String is "tnbew"
2021-03-11 12:27:59,994 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 12:27:59,994 [main:66] - Compilation checking started
2021-03-11 12:28:00,370 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > 23) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt())) {
        return "tnbew"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add((6450469878920120558.toULong()).toUInt().inv())
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:00,374 [main:56] - replacing (list1, ArrayList<UInt>)
2021-03-11 12:28:00,375 [main:38] - replacing list1 ArrayList<UInt>
2021-03-11 12:28:00,375 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:28:00,475 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:28:00,616 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<UInt> = TODO()
2021-03-11 12:28:00,617 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<UInt> = TODO()
2021-03-11 12:28:00,709 [main:95] - GENERATED = ArrayList<UInt>()
2021-03-11 12:28:00,710 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = ArrayList<UInt>()
2021-03-11 12:28:00,710 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:00,711 [main:55] - randomType = UInt
2021-03-11 12:28:00,808 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:00,843 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:28:00,967 [main:63] - replacement of list1 of type ArrayList<UInt> is list1
2021-03-11 12:28:01,061 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:28:01,065 [main:56] - replacing (23, Int)
2021-03-11 12:28:01,066 [main:38] - replacing 23 Int
2021-03-11 12:28:01,066 [main:42] - Getting value of type Int
2021-03-11 12:28:01,160 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:01,161 [main:46] - GENERATED VALUE OF TYPE Int = 1538669293
2021-03-11 12:28:01,161 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:01,258 [main:55] - randomType = UShort?
2021-03-11 12:28:01,353 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:28:01,386 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6e1ddf8c]
2021-03-11 12:28:01,481 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:01,482 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1945176d]
2021-03-11 12:28:01,482 [main:66] - Generated call from random type = (2399.toUShort())?.div(117.toUByte()).countLeadingZeroBits()
2021-03-11 12:28:01,483 [main:94] - GETTING Int from UByte
2021-03-11 12:28:01,510 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5c126571]]
2021-03-11 12:28:01,510 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734]
2021-03-11 12:28:01,511 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5c126571]
2021-03-11 12:28:01,605 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:28:01,606 [main:105] - GENERATED CALL = (1u.toUByte()).toByte().rem(-113)
2021-03-11 12:28:01,606 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f9183c0], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@f53ebe2]]
2021-03-11 12:28:01,606 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f9183c0]
2021-03-11 12:28:01,606 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@f53ebe2]
2021-03-11 12:28:01,700 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:28:01,701 [main:105] - GENERATED CALL = (1u.toUByte()).toFloat().compareTo(-9)
2021-03-11 12:28:01,701 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@177dcd77]]
2021-03-11 12:28:01,701 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2]
2021-03-11 12:28:01,701 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@177dcd77]
2021-03-11 12:28:01,701 [main:105] - GENERATED CALL = (1u.toUByte()).toUShort().countOneBits()
2021-03-11 12:28:01,701 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@19c2cf53]]
2021-03-11 12:28:01,701 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734]
2021-03-11 12:28:01,701 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@19c2cf53]
2021-03-11 12:28:01,796 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:28:01,796 [main:105] - GENERATED CALL = (1u.toUByte()).toByte().compareTo(-58)
2021-03-11 12:28:01,797 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f9183c0], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@458bf662]]
2021-03-11 12:28:01,797 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f9183c0]
2021-03-11 12:28:01,797 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@458bf662]
2021-03-11 12:28:01,797 [main:105] - GENERATED CALL = (1u.toUByte()).toFloat().toBits()
2021-03-11 12:28:01,797 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@50715301], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@215deaf]]
2021-03-11 12:28:01,797 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@50715301]
2021-03-11 12:28:01,797 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@215deaf]
2021-03-11 12:28:01,797 [main:105] - GENERATED CALL = (1u.toUByte()).toShort().countTrailingZeroBits()
2021-03-11 12:28:01,797 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f9183c0], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@7c8e3415]]
2021-03-11 12:28:01,797 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f9183c0]
2021-03-11 12:28:01,797 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@7c8e3415]
2021-03-11 12:28:01,797 [main:105] - GENERATED CALL = (1u.toUByte()).toFloat().roundToInt()
2021-03-11 12:28:01,798 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7bc34e09], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@361986c2]]
2021-03-11 12:28:01,798 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7bc34e09]
2021-03-11 12:28:01,892 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:01,893 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@361986c2]
2021-03-11 12:28:01,988 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:01,989 [main:105] - GENERATED CALL = (1u.toUByte()).compareTo(52.toUByte()).xor(-1131708840)
2021-03-11 12:28:01,989 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f9183c0], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@53bf821c]]
2021-03-11 12:28:01,989 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f9183c0]
2021-03-11 12:28:01,989 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@53bf821c]
2021-03-11 12:28:01,989 [main:105] - GENERATED CALL = (1u.toUByte()).toFloat().toInt()
2021-03-11 12:28:01,989 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7bc34e09], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bf73503]]
2021-03-11 12:28:01,989 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7bc34e09]
2021-03-11 12:28:02,086 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:02,087 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bf73503]
2021-03-11 12:28:02,087 [main:105] - GENERATED CALL = (1u.toUByte()).compareTo(109.toUByte()).inc()
2021-03-11 12:28:02,087 [main:63] - replacement of 23 of type Int is (1u.toUByte()).toByte().rem(-113)
2021-03-11 12:28:02,182 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:02,182 [main:66] - Compilation checking started
2021-03-11 12:28:02,568 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt())) {
        return "tnbew"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add((6450469878920120558.toULong()).toUInt().inv())
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong())) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:02,572 [main:56] - replacing (list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong()), Boolean)
2021-03-11 12:28:02,573 [main:38] - replacing list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong()) Boolean
2021-03-11 12:28:02,573 [main:42] - Getting value of type Boolean
2021-03-11 12:28:02,669 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:02,670 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:28:02,670 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:02,768 [main:55] - randomType = Short
2021-03-11 12:28:02,892 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:28:02,925 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1e23c53d]
2021-03-11 12:28:02,926 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac74bb4]
2021-03-11 12:28:03,022 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:28:03,122 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:03,123 [main:66] - Generated call from random type = (577).toChar().equals('㉭', true)
2021-03-11 12:28:03,124 [main:94] - GETTING Boolean from ArrayList<UInt>
2021-03-11 12:28:03,248 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7f9d2cfc]]
2021-03-11 12:28:03,248 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7f9d2cfc]
2021-03-11 12:28:03,344 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:03,344 [main:105] - GENERATED CALL = (list2).equals("isrnx")
2021-03-11 12:28:03,345 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d20b385], @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3bb2680e]]
2021-03-11 12:28:03,345 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d20b385]
2021-03-11 12:28:03,345 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3bb2680e]
2021-03-11 12:28:03,345 [main:105] - GENERATED CALL = (list2).toArray().isEmpty()
2021-03-11 12:28:03,345 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d09e514]]
2021-03-11 12:28:03,345 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d09e514]
2021-03-11 12:28:03,345 [main:105] - GENERATED CALL = (list2).none()
2021-03-11 12:28:03,345 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@38fbc3b1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@2553066a]]
2021-03-11 12:28:03,345 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@38fbc3b1]
2021-03-11 12:28:03,441 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:03,537 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:03,538 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@2553066a]
2021-03-11 12:28:03,634 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:03,635 [main:105] - GENERATED CALL = (list2).subList(694363012, 22067282).equals("fglqp")
2021-03-11 12:28:03,635 [main:101] - Case = [public open fun containsAll(elements: kotlin.collections.Collection<kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5a7c5375]]
2021-03-11 12:28:03,635 [main:137] - GENERATING call of type public open fun containsAll(elements: kotlin.collections.Collection<kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5a7c5375]
2021-03-11 12:28:03,731 [main:302] - generating value of type = Collection<UInt> false depth = 0
2021-03-11 12:28:03,831 [main:43] - GENERATING CALL OF fun <T> emptySet(): Collection<UInt> = TODO()
2021-03-11 12:28:03,833 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySet(): Collection<UInt> = TODO()
2021-03-11 12:28:03,933 [main:95] - GENERATED = emptySet<UInt>()
2021-03-11 12:28:03,933 [main:105] - GENERATED CALL = (list2).containsAll(emptySet<UInt>())
2021-03-11 12:28:03,933 [main:101] - Case = [public open fun iterator(): kotlin.collections.MutableIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@61d12d59], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableIterator[DeserializedSimpleFunctionDescriptor@25c92132]]
2021-03-11 12:28:03,933 [main:137] - GENERATING call of type public open fun iterator(): kotlin.collections.MutableIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@61d12d59]
2021-03-11 12:28:03,933 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableIterator[DeserializedSimpleFunctionDescriptor@25c92132]
2021-03-11 12:28:04,030 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:04,031 [main:105] - GENERATED CALL = (list2).iterator().equals("kvowu")
2021-03-11 12:28:04,031 [main:101] - Case = [public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@53e438f0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:28:04,031 [main:137] - GENERATING call of type public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@53e438f0]
2021-03-11 12:28:04,126 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:04,127 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:28:04,221 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:04,222 [main:105] - GENERATED CALL = (list2).contains(1444203602.toUInt()).or(true)
2021-03-11 12:28:04,222 [main:101] - Case = [public open fun remove(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3efa9c8e]]
2021-03-11 12:28:04,222 [main:137] - GENERATING call of type public open fun remove(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3efa9c8e]
2021-03-11 12:28:04,317 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:04,318 [main:105] - GENERATED CALL = (list2).remove(675346752.toUInt())
2021-03-11 12:28:04,318 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d20b385], @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@59316e4a]]
2021-03-11 12:28:04,318 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d20b385]
2021-03-11 12:28:04,318 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@59316e4a]
2021-03-11 12:28:04,318 [main:105] - GENERATED CALL = (list2).toArray().isNotEmpty()
2021-03-11 12:28:04,319 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@2030ec3b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:28:04,319 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:28:04,415 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:04,415 [main:105] - GENERATED CALL = (list2).size.equals("aiecb")
2021-03-11 12:28:04,415 [main:63] - replacement of list4 != listOf<ULong>((list2.size).toDouble().toULong(), 2u, 3u, (list1.size).toFloat().toULong()) of type Boolean is (list2).equals("isrnx")
2021-03-11 12:28:04,511 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:04,511 [main:66] - Compilation checking started
2021-03-11 12:28:04,896 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt())) {
        return "tnbew"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add((6450469878920120558.toULong()).toUInt().inv())
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:04,900 [main:56] - replacing ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113), Boolean)
2021-03-11 12:28:04,901 [main:38] - replacing (hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113) Boolean
2021-03-11 12:28:04,901 [main:42] - Getting value of type Boolean
2021-03-11 12:28:04,996 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:04,996 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:28:04,996 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:04,998 [main:55] - randomType = ULong
2021-03-11 12:28:05,092 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:05,127 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6b6d4de3]
2021-03-11 12:28:05,253 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:05,253 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:28:05,347 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:05,348 [main:66] - Generated call from random type = (5541844170999287812.toULong()).equals("gydwh").xor(true)
2021-03-11 12:28:05,349 [main:94] - GETTING Boolean from Int
2021-03-11 12:28:05,383 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:28:05,384 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:28:05,479 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:05,480 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:28:05,480 [main:105] - GENERATED CALL = (list2.size).equals("iwoyi").not()
2021-03-11 12:28:05,480 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2805e3]]
2021-03-11 12:28:05,480 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:28:05,480 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2805e3]
2021-03-11 12:28:05,480 [main:105] - GENERATED CALL = (list2.size).toChar().isHighSurrogate()
2021-03-11 12:28:05,480 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-11 12:28:05,480 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:28:05,480 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-11 12:28:05,574 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:05,574 [main:105] - GENERATED CALL = (list2.size).toLong().equals("wwpaz")
2021-03-11 12:28:05,575 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]]
2021-03-11 12:28:05,575 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:28:05,575 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]
2021-03-11 12:28:05,667 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:05,667 [main:105] - GENERATED CALL = (list2.size).toFloat().equals("mfcvv")
2021-03-11 12:28:05,667 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]]
2021-03-11 12:28:05,667 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:28:05,667 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]
2021-03-11 12:28:05,760 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:05,760 [main:105] - GENERATED CALL = (list2.size).toDouble().equals("mkkfy")
2021-03-11 12:28:05,760 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443e326f]]
2021-03-11 12:28:05,760 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:28:05,760 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443e326f]
2021-03-11 12:28:05,760 [main:105] - GENERATED CALL = (list2.size).toChar().isISOControl()
2021-03-11 12:28:05,760 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]]
2021-03-11 12:28:05,760 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:28:05,855 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:28:05,856 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]
2021-03-11 12:28:05,952 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:05,952 [main:105] - GENERATED CALL = (list2.size).div(0.8129365428068626).equals("hrrkw")
2021-03-11 12:28:05,952 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e04d4f4]]
2021-03-11 12:28:05,952 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:28:05,952 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e04d4f4]
2021-03-11 12:28:05,953 [main:105] - GENERATED CALL = (list2.size).toChar().isLowSurrogate()
2021-03-11 12:28:05,953 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@8032cb1]]
2021-03-11 12:28:05,953 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb]
2021-03-11 12:28:06,045 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:28:06,046 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@8032cb1]
2021-03-11 12:28:06,139 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:06,140 [main:105] - GENERATED CALL = (list2.size).rangeTo(-15).equals("bonza")
2021-03-11 12:28:06,140 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f74d2a1]]
2021-03-11 12:28:06,140 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:28:06,140 [main:137] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f74d2a1]
2021-03-11 12:28:06,140 [main:105] - GENERATED CALL = (list2.size).toChar().isDefined()
2021-03-11 12:28:06,140 [main:63] - replacement of (hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113) of type Boolean is (list2.size).toChar().isDefined()
2021-03-11 12:28:06,233 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:06,233 [main:66] - Compilation checking started
2021-03-11 12:28:06,469 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((list2.size).toChar().isDefined()) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt())) {
        return "tnbew"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        list3.add((6450469878920120558.toULong()).toUInt().inv())
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:06,473 [main:56] - replacing (1u, UInt)
2021-03-11 12:28:06,473 [main:38] - replacing 1u UInt
2021-03-11 12:28:06,473 [main:42] - Getting value of type UInt
2021-03-11 12:28:06,568 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:06,569 [main:46] - GENERATED VALUE OF TYPE UInt = 1047966091.toUInt()
2021-03-11 12:28:06,569 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:06,667 [main:55] - randomType = LinkedHashSet<Byte>
2021-03-11 12:28:06,761 [main:302] - generating value of type = LinkedHashSet<Byte> false depth = 0
2021-03-11 12:28:06,859 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Byte): LkedHashSet<Byte> = TODO()
2021-03-11 12:28:06,861 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Byte): LkedHashSet<Byte> = TODO()
2021-03-11 12:28:06,954 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 12:28:06,955 [main:95] - GENERATED = linkedSetOf<Byte>(-48)
2021-03-11 12:28:07,067 [main:137] - GENERATING call of type @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74352685]
2021-03-11 12:28:07,067 [main:66] - Generated call from random type = (linkedSetOf<Byte>(-48)).sum()
2021-03-11 12:28:07,068 [main:94] - GETTING UInt from Int
2021-03-11 12:28:07,098 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:28:07,099 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:28:07,192 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:28:07,193 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:28:07,193 [main:105] - GENERATED CALL = (list4.size).div(0.6059816419257469).toUInt()
2021-03-11 12:28:07,193 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]]
2021-03-11 12:28:07,193 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:28:07,193 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]
2021-03-11 12:28:07,193 [main:105] - GENERATED CALL = (list4.size).toLong().toUInt()
2021-03-11 12:28:07,193 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]]
2021-03-11 12:28:07,193 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:28:07,193 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]
2021-03-11 12:28:07,193 [main:105] - GENERATED CALL = (list4.size).toFloat().toUInt()
2021-03-11 12:28:07,193 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:28:07,193 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:28:07,194 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:28:07,194 [main:105] - GENERATED CALL = (list4.size).toInt().toUInt()
2021-03-11 12:28:07,194 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:28:07,194 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:28:07,194 [main:105] - GENERATED CALL = (list4.size).toUInt()
2021-03-11 12:28:07,194 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:28:07,194 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:28:07,194 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:28:07,194 [main:105] - GENERATED CALL = (list4.size).toDouble().toUInt()
2021-03-11 12:28:07,194 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]]
2021-03-11 12:28:07,194 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:28:07,194 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]
2021-03-11 12:28:07,194 [main:105] - GENERATED CALL = (list4.size).toByte().toUInt()
2021-03-11 12:28:07,194 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:28:07,194 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:28:07,288 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:07,289 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:28:07,289 [main:105] - GENERATED CALL = (list4.size).compareTo(1034621242).toUInt()
2021-03-11 12:28:07,289 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]]
2021-03-11 12:28:07,289 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:28:07,289 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]
2021-03-11 12:28:07,289 [main:105] - GENERATED CALL = (list4.size).toShort().toUInt()
2021-03-11 12:28:07,290 [main:63] - replacement of 1u of type UInt is (list4.size).toUInt()
2021-03-11 12:28:07,384 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:07,388 [main:56] - replacing (list3.add((6450469878920120558.toULong()).toUInt().inv()), Boolean)
2021-03-11 12:28:07,388 [main:38] - replacing list3.add((6450469878920120558.toULong()).toUInt().inv()) Boolean
2021-03-11 12:28:07,389 [main:42] - Getting value of type Boolean
2021-03-11 12:28:07,512 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:07,512 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:28:07,513 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:07,609 [main:55] - randomType = Sequence<ULong>
2021-03-11 12:28:07,610 [main:94] - GETTING Boolean from UByte
2021-03-11 12:28:07,632 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6547fe6b], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@398f03f]]
2021-03-11 12:28:07,632 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6547fe6b]
2021-03-11 12:28:07,725 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:07,726 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@398f03f]
2021-03-11 12:28:07,726 [main:105] - GENERATED CALL = (1u.toUByte()).rangeTo(7.toUByte()).isEmpty()
2021-03-11 12:28:07,726 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27bcd6c8], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]]
2021-03-11 12:28:07,726 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27bcd6c8]
2021-03-11 12:28:07,726 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]
2021-03-11 12:28:07,726 [main:105] - GENERATED CALL = (1u.toUByte()).toDouble().isNaN()
2021-03-11 12:28:07,726 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11bacd68], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-11 12:28:07,726 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11bacd68]
2021-03-11 12:28:07,726 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-11 12:28:07,819 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:07,819 [main:105] - GENERATED CALL = (1u.toUByte()).toLong().equals("zqeds")
2021-03-11 12:28:07,820 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3d982f4c]]
2021-03-11 12:28:07,820 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3d982f4c]
2021-03-11 12:28:07,912 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:07,913 [main:105] - GENERATED CALL = (1u.toUByte()).equals("jnsit")
2021-03-11 12:28:07,913 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f9183c0], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34ffd74d]]
2021-03-11 12:28:07,913 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f9183c0]
2021-03-11 12:28:07,913 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34ffd74d]
2021-03-11 12:28:07,913 [main:105] - GENERATED CALL = (1u.toUByte()).toFloat().isNaN()
2021-03-11 12:28:07,913 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f9183c0], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e49055a]]
2021-03-11 12:28:07,913 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@5f9183c0]
2021-03-11 12:28:07,913 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e49055a]
2021-03-11 12:28:07,913 [main:105] - GENERATED CALL = (1u.toUByte()).toFloat().isInfinite()
2021-03-11 12:28:07,913 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27bcd6c8], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]]
2021-03-11 12:28:07,913 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27bcd6c8]
2021-03-11 12:28:07,913 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]
2021-03-11 12:28:07,914 [main:105] - GENERATED CALL = (1u.toUByte()).toDouble().isFinite()
2021-03-11 12:28:07,914 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6547fe6b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@5be749fc]]
2021-03-11 12:28:07,914 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6547fe6b]
2021-03-11 12:28:08,006 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:08,007 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@5be749fc]
2021-03-11 12:28:08,100 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:08,100 [main:105] - GENERATED CALL = (1u.toUByte()).rangeTo(117.toUByte()).equals("tnfsb")
2021-03-11 12:28:08,100 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27bcd6c8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]]
2021-03-11 12:28:08,100 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@27bcd6c8]
2021-03-11 12:28:08,100 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]
2021-03-11 12:28:08,193 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:08,193 [main:105] - GENERATED CALL = (1u.toUByte()).toDouble().equals("xphqs")
2021-03-11 12:28:08,193 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7bc34e09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:28:08,193 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7bc34e09]
2021-03-11 12:28:08,286 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:08,287 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:28:08,380 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:08,380 [main:105] - GENERATED CALL = (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
2021-03-11 12:28:08,380 [main:63] - replacement of list3.add((6450469878920120558.toULong()).toUInt().inv()) of type Boolean is (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
2021-03-11 12:28:08,474 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:08,474 [main:66] - Compilation checking started
2021-03-11 12:28:08,837 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt())) {
        return "tnbew"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:08,840 [main:56] - replacing (listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt()), List<UInt>)
2021-03-11 12:28:08,841 [main:38] - replacing listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt()) List<UInt>
2021-03-11 12:28:08,841 [main:42] - Getting value of type List<UInt>
2021-03-11 12:28:08,936 [main:302] - generating value of type = List<UInt> false depth = 0
2021-03-11 12:28:09,034 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): List<UInt> = TODO()
2021-03-11 12:28:09,035 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): List<UInt> = TODO()
2021-03-11 12:28:09,221 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:28:09,222 [main:95] - GENERATED = ArrayDeque<UInt>(-317598935)
2021-03-11 12:28:09,222 [main:46] - GENERATED VALUE OF TYPE List<UInt> = ArrayDeque<UInt>(-317598935)
2021-03-11 12:28:09,222 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:09,223 [main:55] - randomType = Byte
2021-03-11 12:28:09,317 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:28:09,359 [main:94] - GETTING List<UInt> from UShort
2021-03-11 12:28:09,389 [main:94] - GETTING List<UInt> from ArrayList<UInt>
2021-03-11 12:28:09,510 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sortedDescending(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7e2e756f]]
2021-03-11 12:28:09,510 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sortedDescending(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7e2e756f]
2021-03-11 12:28:09,510 [main:105] - GENERATED CALL = (list1).sortedDescending()
2021-03-11 12:28:09,510 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.sortedWith(comparator: kotlin.Comparator<in T>): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30e24cc1]]
2021-03-11 12:28:09,511 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.sortedWith(comparator: kotlin.Comparator<in T>): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30e24cc1]
2021-03-11 12:28:09,604 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 12:28:09,829 [main:43] - GENERATING CALL OF fun <T, K> compareBy(comparator: kotlin.Comparator<LinkedHashMap<ULong, Char>>, selector: (T)->LinkedHashMap<ULong, Char>): Comparator<T> = TODO()
2021-03-11 12:28:09,830 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareBy(comparator: kotlin.Comparator<LinkedHashMap<ULong, Char>>, selector: (T)->LinkedHashMap<ULong, Char>): Comparator<T> = TODO()
2021-03-11 12:28:10,116 [main:302] - generating value of type = Comparator<LinkedHashMap<ULong, Char>> false depth = 3
2021-03-11 12:28:10,214 [main:43] - GENERATING CALL OF fun <T> nullsLast(comparator: kotlin.Comparator<LinkedHashMap<ULong, Char>>): Comparator<LkedHashMap<ULong, Char>> = TODO()
2021-03-11 12:28:10,215 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(comparator: kotlin.Comparator<LinkedHashMap<ULong, Char>>): Comparator<LkedHashMap<ULong, Char>> = TODO()
2021-03-11 12:28:10,401 [main:302] - generating value of type = Comparator<LinkedHashMap<ULong, Char>> false depth = 6
2021-03-11 12:28:10,498 [main:43] - GENERATING CALL OF fun <T> compareByDescending(selector: (LinkedHashMap<ULong, Char>)->kotlin.Comparable<*>?): Comparator<LkedHashMap<ULong, Char>> = TODO()
2021-03-11 12:28:10,500 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareByDescending(selector: (LinkedHashMap<ULong, Char>)->kotlin.Comparable<*>?): Comparator<LkedHashMap<ULong, Char>> = TODO()
2021-03-11 12:28:10,691 [main:302] - generating value of type = Function1<LinkedHashMap<ULong, Char>, Comparable<*>?> false depth = 9
2021-03-11 12:28:10,691 [main:302] - generating value of type = Comparable<*> false depth = 10
2021-03-11 12:28:10,696 [main:95] - GENERATED = compareByDescending<LinkedHashMap<ULong, Char>>({a: LinkedHashMap<ULong, Char> -> -1578826749})
2021-03-11 12:28:10,696 [main:95] - GENERATED = nullsLast<LinkedHashMap<ULong, Char>>(compareByDescending<LinkedHashMap<ULong, Char>>({a: LinkedHashMap<ULong, Char> -> -1578826749}))
2021-03-11 12:28:10,696 [main:302] - generating value of type = Function1<T, LinkedHashMap<ULong, Char>> false depth = 3
2021-03-11 12:28:10,696 [main:302] - generating value of type = LinkedHashMap<ULong, Char> false depth = 4
2021-03-11 12:28:10,795 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<ULong, Char> = TODO()
2021-03-11 12:28:10,797 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<ULong, Char> = TODO()
2021-03-11 12:28:10,889 [main:95] - GENERATED = linkedMapOf<ULong, Char>()
2021-03-11 12:28:10,889 [main:95] - GENERATED = compareBy<T, LinkedHashMap<ULong, Char>>(nullsLast<LinkedHashMap<ULong, Char>>(compareByDescending<LinkedHashMap<ULong, Char>>({a: LinkedHashMap<ULong, Char> -> -1578826749})), {a: T -> linkedMapOf<ULong, Char>()})
2021-03-11 12:28:10,890 [main:105] - GENERATED CALL = (list1).sortedWith(compareBy<T, LinkedHashMap<ULong, Char>>(nullsLast<LinkedHashMap<ULong, Char>>(compareByDescending<LinkedHashMap<ULong, Char>>({a: LinkedHashMap<ULong, Char> -> -1578826749})), {a: T -> linkedMapOf<ULong, Char>()}))
2021-03-11 12:28:10,890 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.plusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@98474c2]]
2021-03-11 12:28:10,890 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.plusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@98474c2]
2021-03-11 12:28:10,984 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:28:11,082 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Comparable<T>, other: Comparable<T>): T = TODO()
2021-03-11 12:28:11,084 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Comparable<T>, other: Comparable<T>): T = TODO()
2021-03-11 12:28:11,175 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:28:11,180 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:28:11,184 [main:95] - GENERATED = maxOf<Comparable<T>>('⵵', 0.2927963f)
2021-03-11 12:28:11,184 [main:105] - GENERATED CALL = (list1).plusElement(maxOf<Comparable<T>>('⵵', 0.2927963f))
2021-03-11 12:28:11,184 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.takeWhile(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2cca0a50]]
2021-03-11 12:28:11,184 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.takeWhile(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2cca0a50]
2021-03-11 12:28:11,279 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:28:11,279 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:28:11,280 [main:105] - GENERATED CALL = (list1).takeWhile({a: T -> false})
2021-03-11 12:28:11,280 [main:101] - Case = [public operator fun <T> kotlin.collections.Collection<T>.plus(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@73a09825]]
2021-03-11 12:28:11,280 [main:137] - GENERATING call of type public operator fun <T> kotlin.collections.Collection<T>.plus(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@73a09825]
2021-03-11 12:28:11,374 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:28:11,473 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-11 12:28:11,475 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-11 12:28:11,571 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:28:11,575 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:28:11,579 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:28:11,680 [main:43] - GENERATING CALL OF fun <E> Enum(name: kotlin.String, ordinal: kotlin.Int): Comparable<T> = TODO()
2021-03-11 12:28:11,681 [main:61] - WITHOUT TYPE PARAMS = fun <E> Enum(name: kotlin.String, ordinal: kotlin.Int): Comparable<T> = TODO()
2021-03-11 12:28:12,005 [main:302] - generating value of type = String true depth = 6
2021-03-11 12:28:12,006 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:28:12,007 [main:95] - GENERATED = Enum<Enum<E>>("uglvw", -2072856630)
2021-03-11 12:28:12,007 [main:95] - GENERATED = maxOf<Comparable<T>>(1548005669.toUInt(), 1101239512.toUInt(), Enum<Enum<E>>("uglvw", -2072856630))
2021-03-11 12:28:12,008 [main:105] - GENERATED CALL = (list1).plus(maxOf<Comparable<T>>(1548005669.toUInt(), 1101239512.toUInt(), Enum<Enum<E>>("uglvw", -2072856630)))
2021-03-11 12:28:12,008 [main:101] - Case = [public fun <T : kotlin.Any> kotlin.collections.Iterable<T?>.filterNotNull(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b254e2e]]
2021-03-11 12:28:12,008 [main:137] - GENERATING call of type public fun <T : kotlin.Any> kotlin.collections.Iterable<T?>.filterNotNull(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b254e2e]
2021-03-11 12:28:12,008 [main:105] - GENERATED CALL = (list1).filterNotNull()
2021-03-11 12:28:12,008 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.filter(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@418c4e4a]]
2021-03-11 12:28:12,008 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.filter(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@418c4e4a]
2021-03-11 12:28:12,103 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:28:12,104 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:28:12,105 [main:105] - GENERATED CALL = (list1).filter({a: T -> false})
2021-03-11 12:28:12,105 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.drop(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1b2cd4e4]]
2021-03-11 12:28:12,105 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.drop(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1b2cd4e4]
2021-03-11 12:28:12,198 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:12,199 [main:105] - GENERATED CALL = (list1).drop(-459878648)
2021-03-11 12:28:12,199 [main:101] - Case = [@kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.shuffled(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3631dfac]]
2021-03-11 12:28:12,199 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.shuffled(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3631dfac]
2021-03-11 12:28:12,199 [main:105] - GENERATED CALL = (list1).shuffled()
2021-03-11 12:28:12,199 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.filterIndexed(predicate: (index: kotlin.Int, T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1176578f]]
2021-03-11 12:28:12,199 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.filterIndexed(predicate: (index: kotlin.Int, T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1176578f]
2021-03-11 12:28:12,293 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Boolean> false depth = 0
2021-03-11 12:28:12,294 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:28:12,295 [main:105] - GENERATED CALL = (list1).filterIndexed({a: Int, b: T -> true})
2021-03-11 12:28:12,295 [main:63] - replacement of listOf<UInt>(1u, (1u.toUByte()).div(81.toUByte()).takeHighestOneBit(), 795198784.toUInt(), (list2.size).toFloat().toUInt()) of type List<UInt> is (list1).filterNotNull()
2021-03-11 12:28:12,392 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:12,392 [main:66] - Compilation checking started
2021-03-11 12:28:12,745 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        list1.add(1785541927.toUInt())
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:12,751 [main:56] - replacing (list1.add(1785541927.toUInt()), Boolean)
2021-03-11 12:28:12,752 [main:38] - replacing list1.add(1785541927.toUInt()) Boolean
2021-03-11 12:28:12,752 [main:42] - Getting value of type Boolean
2021-03-11 12:28:12,857 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:12,858 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:28:12,858 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:12,955 [main:55] - randomType = UShort?
2021-03-11 12:28:13,046 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:28:13,080 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2302ecd9]
2021-03-11 12:28:13,080 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e49055a]
2021-03-11 12:28:13,081 [main:66] - Generated call from random type = (19179.toUShort())?.toFloat().isInfinite()
2021-03-11 12:28:13,081 [main:94] - GETTING Boolean from ArrayList<UInt>
2021-03-11 12:28:13,192 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42bee69b], public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5c6d0169]]
2021-03-11 12:28:13,192 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42bee69b]
2021-03-11 12:28:13,192 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5c6d0169]
2021-03-11 12:28:13,192 [main:105] - GENERATED CALL = (list3).toArray().none()
2021-03-11 12:28:13,192 [main:101] - Case = [public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@565f87ed], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:28:13,192 [main:137] - GENERATING call of type public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@565f87ed]
2021-03-11 12:28:13,282 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:13,283 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:28:13,373 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:13,374 [main:105] - GENERATED CALL = (list3).add(1051534575.toUInt()).or(true)
2021-03-11 12:28:13,374 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42bee69b], public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62ebcd4c]]
2021-03-11 12:28:13,374 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42bee69b]
2021-03-11 12:28:13,374 [main:137] - GENERATING call of type public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62ebcd4c]
2021-03-11 12:28:13,465 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:28:13,652 [main:43] - GENERATING CALL OF fun <T> maxOf(a: ULong?, b: ULong?, comparator: kotlin.Comparator<ULong?>): T = TODO()
2021-03-11 12:28:13,653 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: ULong?, b: ULong?, comparator: kotlin.Comparator<ULong?>): T = TODO()
2021-03-11 12:28:13,837 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:28:13,838 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:28:13,838 [main:302] - generating value of type = Comparator<ULong?> false depth = 3
2021-03-11 12:28:13,933 [main:43] - GENERATING CALL OF fun <T> reverseOrder(): Comparator<ULong?> = TODO()
2021-03-11 12:28:13,934 [main:61] - WITHOUT TYPE PARAMS = fun <T> reverseOrder(): Comparator<ULong?> = TODO()
2021-03-11 12:28:14,025 [main:95] - GENERATED = reverseOrder<ULong?>()
2021-03-11 12:28:14,025 [main:95] - GENERATED = maxOf<ULong?>(113462033072759844.toULong(), 5631060950012781907.toULong(), reverseOrder<ULong?>())
2021-03-11 12:28:14,025 [main:105] - GENERATED CALL = (list3).toArray().contains(maxOf<ULong?>(113462033072759844.toULong(), 5631060950012781907.toULong(), reverseOrder<ULong?>()))
2021-03-11 12:28:14,025 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3f008d2d]]
2021-03-11 12:28:14,025 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:28:14,119 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:14,120 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3f008d2d]
2021-03-11 12:28:14,211 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:14,211 [main:105] - GENERATED CALL = (list3).get(-382161758).equals("pjwsf")
2021-03-11 12:28:14,211 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d09e514]]
2021-03-11 12:28:14,211 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d09e514]
2021-03-11 12:28:14,212 [main:105] - GENERATED CALL = (list3).none()
2021-03-11 12:28:14,212 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7db120a0], public abstract fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@437679fc]]
2021-03-11 12:28:14,212 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7db120a0]
2021-03-11 12:28:14,303 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:14,430 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:14,431 [main:137] - GENERATING call of type public abstract fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@437679fc]
2021-03-11 12:28:14,521 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:14,522 [main:105] - GENERATED CALL = (list3).subList(1977135867, 1274226474).add(609754205.toUInt())
2021-03-11 12:28:14,522 [main:101] - Case = [public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@30c79c25], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:28:14,522 [main:137] - GENERATING call of type public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@30c79c25]
2021-03-11 12:28:14,614 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:14,615 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:28:14,707 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:14,707 [main:105] - GENERATED CALL = (list3).contains(1238551868.toUInt()).or(true)
2021-03-11 12:28:14,708 [main:101] - Case = [public open fun removeAll(elements: kotlin.collections.Collection<kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@9798c3e]]
2021-03-11 12:28:14,708 [main:137] - GENERATING call of type public open fun removeAll(elements: kotlin.collections.Collection<kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@9798c3e]
2021-03-11 12:28:14,798 [main:302] - generating value of type = Collection<UInt> false depth = 0
2021-03-11 12:28:14,892 [main:43] - GENERATING CALL OF fun <T> setOf(element: UInt): Collection<UInt> = TODO()
2021-03-11 12:28:14,894 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(element: UInt): Collection<UInt> = TODO()
2021-03-11 12:28:14,983 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:28:14,984 [main:95] - GENERATED = setOf<UInt>(1023306261.toUInt())
2021-03-11 12:28:14,984 [main:105] - GENERATED CALL = (list3).removeAll(setOf<UInt>(1023306261.toUInt()))
2021-03-11 12:28:14,984 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42bee69b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@716c9c9]]
2021-03-11 12:28:14,984 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42bee69b]
2021-03-11 12:28:14,984 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@716c9c9]
2021-03-11 12:28:15,076 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:15,076 [main:105] - GENERATED CALL = (list3).toArray().equals("mupzb")
2021-03-11 12:28:15,076 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@218f9aa3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:28:15,076 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:28:15,168 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:15,168 [main:105] - GENERATED CALL = (list3).modCount.equals("phmwi")
2021-03-11 12:28:15,168 [main:63] - replacement of list1.add(1785541927.toUInt()) of type Boolean is true
2021-03-11 12:28:15,258 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:28:15,259 [main:66] - Compilation checking started
2021-03-11 12:28:15,603 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 25376.toUShort() until (list3.size).toByte().toUShort()
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:15,606 [main:56] - replacing (list3, ArrayList<UInt>)
2021-03-11 12:28:15,606 [main:38] - replacing list3 ArrayList<UInt>
2021-03-11 12:28:15,607 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:28:15,700 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:28:15,796 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<UInt> = TODO()
2021-03-11 12:28:15,797 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<UInt> = TODO()
2021-03-11 12:28:15,887 [main:95] - GENERATED = ArrayList<UInt>()
2021-03-11 12:28:15,887 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = ArrayList<UInt>()
2021-03-11 12:28:15,887 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:15,888 [main:55] - randomType = String
2021-03-11 12:28:15,978 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:28:16,005 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:28:16,018 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:28:16,052 [main:94] - GETTING ArrayList<UInt> from ArrayList<ULong>
2021-03-11 12:28:16,182 [main:63] - replacement of list3 of type ArrayList<UInt> is ArrayList<UInt>()
2021-03-11 12:28:16,272 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:28:16,275 [main:56] - replacing (2u, ULong)
2021-03-11 12:28:16,275 [main:38] - replacing 2u ULong
2021-03-11 12:28:16,275 [main:42] - Getting value of type ULong
2021-03-11 12:28:16,366 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:16,366 [main:46] - GENERATED VALUE OF TYPE ULong = 3003543429920875795.toULong()
2021-03-11 12:28:16,366 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:16,460 [main:55] - randomType = UByte?
2021-03-11 12:28:16,550 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:16,589 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2eacca91]
2021-03-11 12:28:16,685 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:16,686 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rem(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6ea08e81]
2021-03-11 12:28:16,776 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:16,777 [main:66] - Generated call from random type = (21.toUByte())?.div(65.toUByte()).rem(2183886553796100041.toULong())
2021-03-11 12:28:16,778 [main:94] - GETTING ULong from ArrayList<UInt>
2021-03-11 12:28:16,939 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline operator fun minus(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@a7e75b]]
2021-03-11 12:28:16,939 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:28:17,031 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:17,031 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun minus(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@a7e75b]
2021-03-11 12:28:17,126 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:17,127 [main:105] - GENERATED CALL = (list3).get(1765362495).minus(8327712672957519571.toULong())
2021-03-11 12:28:17,127 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42bee69b], @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.Array<out kotlin.ULong>.sum(): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f3defe2]]
2021-03-11 12:28:17,127 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42bee69b]
2021-03-11 12:28:17,127 [main:137] - GENERATING call of type @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.Array<out kotlin.ULong>.sum(): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f3defe2]
2021-03-11 12:28:17,128 [main:105] - GENERATED CALL = (list3).toArray().sum()
2021-03-11 12:28:17,128 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline operator fun times(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4bf4c546]]
2021-03-11 12:28:17,128 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:28:17,219 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:17,220 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun times(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4bf4c546]
2021-03-11 12:28:17,309 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:17,310 [main:105] - GENERATED CALL = (list3).get(927094088).times(1023192813462809543.toULong())
2021-03-11 12:28:17,310 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.ULong): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@590784be]]
2021-03-11 12:28:17,310 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.ULong): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-11 12:28:17,401 [main:302] - generating value of type = Function1<T, ULong> false depth = 0
2021-03-11 12:28:17,402 [main:302] - generating value of type = ULong true depth = 1
2021-03-11 12:28:17,402 [main:105] - GENERATED CALL = (list3).sumOf({a: T -> 6666325569590063389.toULong()})
2021-03-11 12:28:17,403 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@218f9aa3], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]]
2021-03-11 12:28:17,403 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:28:17,403 [main:105] - GENERATED CALL = (list3).modCount.toULong()
2021-03-11 12:28:17,403 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@daeca83], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]]
2021-03-11 12:28:17,403 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:28:17,403 [main:105] - GENERATED CALL = (list3).size.toULong()
2021-03-11 12:28:17,403 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline fun toULong(): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@28e7e641]]
2021-03-11 12:28:17,403 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:28:17,493 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:17,493 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toULong(): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@28e7e641]
2021-03-11 12:28:17,493 [main:105] - GENERATED CALL = (list3).get(-437862603).toULong()
2021-03-11 12:28:17,493 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline operator fun plus(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@ca47d17]]
2021-03-11 12:28:17,493 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:28:17,584 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:17,585 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun plus(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@ca47d17]
2021-03-11 12:28:17,676 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:17,677 [main:105] - GENERATED CALL = (list3).get(-1533353885).plus(2726844678290548421.toULong())
2021-03-11 12:28:17,677 [main:101] - Case = [@kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.ULong>.sum(): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7aa5ea12]]
2021-03-11 12:28:17,677 [main:137] - GENERATING call of type @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.ULong>.sum(): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7aa5ea12]
2021-03-11 12:28:17,677 [main:105] - GENERATED CALL = (list3).sum()
2021-03-11 12:28:17,677 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee], @kotlin.internal.InlineOnly public final inline operator fun rem(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5259f1e5]]
2021-03-11 12:28:17,677 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@45259ee]
2021-03-11 12:28:17,768 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:17,768 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rem(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5259f1e5]
2021-03-11 12:28:17,858 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:17,859 [main:105] - GENERATED CALL = (list3).get(-1989846407).rem(6330032479055365242.toULong())
2021-03-11 12:28:17,859 [main:63] - replacement of 2u of type ULong is (list3).sum()
2021-03-11 12:28:17,949 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:17,953 [main:56] - replacing (25376.toUShort() until (list3.size).toByte().toUShort(), UIntRange)
2021-03-11 12:28:17,954 [main:38] - replacing 25376.toUShort() until (list3.size).toByte().toUShort() UIntRange
2021-03-11 12:28:17,954 [main:42] - Getting value of type UIntRange
2021-03-11 12:28:18,045 [main:302] - generating value of type = UIntRange false depth = 0
2021-03-11 12:28:18,139 [main:43] - GENERATING CALL OF fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-11 12:28:18,140 [main:61] - WITHOUT TYPE PARAMS = fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-11 12:28:18,420 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:28:18,421 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:28:18,421 [main:95] - GENERATED = UIntRange(790274903.toUInt(), 222834590.toUInt())
2021-03-11 12:28:18,421 [main:46] - GENERATED VALUE OF TYPE UIntRange = UIntRange(790274903.toUInt(), 222834590.toUInt())
2021-03-11 12:28:18,422 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:18,516 [main:55] - randomType = UInt?
2021-03-11 12:28:18,606 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:18,644 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@970b93f]
2021-03-11 12:28:18,644 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UShort.until(to: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@30c5ce0a]
2021-03-11 12:28:18,735 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:28:18,735 [main:66] - Generated call from random type = (1094175832.toUInt())?.toUShort().until(3508.toUShort())
2021-03-11 12:28:18,736 [main:94] - GETTING UIntRange from Boolean
2021-03-11 12:28:18,749 [main:94] - GETTING UIntRange from Boolean
2021-03-11 12:28:18,750 [main:94] - GETTING UIntRange from ArrayList<UInt>
2021-03-11 12:28:18,872 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62dd0a66], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3de0725f]]
2021-03-11 12:28:18,872 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62dd0a66]
2021-03-11 12:28:18,962 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:18,963 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3de0725f]
2021-03-11 12:28:19,054 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:19,054 [main:105] - GENERATED CALL = (list2).get(1821401735).until(868514389.toUInt())
2021-03-11 12:28:19,054 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62dd0a66], @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@22fbec8c]]
2021-03-11 12:28:19,055 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62dd0a66]
2021-03-11 12:28:19,146 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:19,147 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@22fbec8c]
2021-03-11 12:28:19,275 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:19,275 [main:105] - GENERATED CALL = (list2).get(722762397).rangeTo(1787439505.toUInt())
2021-03-11 12:28:19,276 [main:63] - replacement of 25376.toUShort() until (list3.size).toByte().toUShort() of type UIntRange is (list2).get(722762397).rangeTo(1787439505.toUInt())
2021-03-11 12:28:19,365 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:19,365 [main:66] - Compilation checking started
2021-03-11 12:28:19,708 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = ArrayList<UInt>()
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:19,712 [main:56] - replacing (ArrayList<UInt>(), ArrayList<UInt>)
2021-03-11 12:28:19,712 [main:38] - replacing ArrayList<UInt>() ArrayList<UInt>
2021-03-11 12:28:19,712 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:28:19,803 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:28:19,899 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-11 12:28:19,901 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-11 12:28:19,989 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:28:19,989 [main:95] - GENERATED = arrayListOf<UInt>(1996069306.toUInt())
2021-03-11 12:28:19,989 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = arrayListOf<UInt>(1996069306.toUInt())
2021-03-11 12:28:19,990 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:19,991 [main:55] - randomType = Boolean
2021-03-11 12:28:20,079 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:20,091 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:28:20,099 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:28:20,206 [main:63] - replacement of ArrayList<UInt>() of type ArrayList<UInt> is arrayListOf<UInt>(1996069306.toUInt())
2021-03-11 12:28:20,295 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:28:20,295 [main:66] - Compilation checking started
2021-03-11 12:28:20,636 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:20,642 [main:56] - replacing (3u, ULong)
2021-03-11 12:28:20,642 [main:38] - replacing 3u ULong
2021-03-11 12:28:20,642 [main:42] - Getting value of type ULong
2021-03-11 12:28:20,737 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:20,737 [main:46] - GENERATED VALUE OF TYPE ULong = 2122397899047377356.toULong()
2021-03-11 12:28:20,737 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:21,108 [main:55] - randomType = LinkedHashMap<Char?, Array<Int?>>
2021-03-11 12:28:21,198 [main:302] - generating value of type = LinkedHashMap<Char?, Array<Int?>> false depth = 0
2021-03-11 12:28:21,292 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Char?, Array<Int?>> = TODO()
2021-03-11 12:28:21,293 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Char?, Array<Int?>> = TODO()
2021-03-11 12:28:21,383 [main:95] - GENERATED = linkedMapOf<Char?, Array<Int?>>()
2021-03-11 12:28:21,525 [main:137] - GENERATING call of type public open fun get(key: kotlin.Char?): kotlin.Array<kotlin.Int?>? defined in kotlin.collections.LinkedHashMap[DeserializedSimpleFunctionDescriptor@77942fa7]
2021-03-11 12:28:21,614 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:28:21,615 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.ULong): kotlin.ULong defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ec68dec]
2021-03-11 12:28:21,738 [main:302] - generating value of type = Function1<T, ULong> false depth = 0
2021-03-11 12:28:21,738 [main:302] - generating value of type = ULong true depth = 1
2021-03-11 12:28:21,740 [main:66] - Generated call from random type = (linkedMapOf<Char?, Array<Int?>>()).get('甉')?.sumOf({a: T -> 1999987422832759178.toULong()})!!
2021-03-11 12:28:21,740 [main:63] - replacement of 3u of type ULong is (linkedMapOf<Char?, Array<Int?>>()).get('甉')?.sumOf({a: T -> 1999987422832759178.toULong()})!!
2021-03-11 12:28:21,832 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(POSTFIX_EXPRESSION)
2021-03-11 12:28:21,837 [main:56] - replacing ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113), Boolean)
2021-03-11 12:28:21,838 [main:38] - replacing (hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113) Boolean
2021-03-11 12:28:21,838 [main:42] - Getting value of type Boolean
2021-03-11 12:28:21,930 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:21,930 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:28:21,930 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:21,932 [main:55] - randomType = UShort
2021-03-11 12:28:22,021 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:28:22,047 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@129195f1]
2021-03-11 12:28:22,047 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4afe8f90]
2021-03-11 12:28:22,047 [main:66] - Generated call from random type = (22567.toUShort()).toDouble().isInfinite()
2021-03-11 12:28:22,048 [main:94] - GETTING Boolean from ArrayList<ULong>
2021-03-11 12:28:22,174 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d09e514]]
2021-03-11 12:28:22,174 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d09e514]
2021-03-11 12:28:22,175 [main:105] - GENERATED CALL = (list4).none()
2021-03-11 12:28:22,175 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@444796e9], public abstract fun isEmpty(): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@568e8a1a]]
2021-03-11 12:28:22,175 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@444796e9]
2021-03-11 12:28:22,264 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:22,354 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:22,355 [main:137] - GENERATING call of type public abstract fun isEmpty(): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@568e8a1a]
2021-03-11 12:28:22,355 [main:105] - GENERATED CALL = (list4).subList(-582013958, 442805310).isEmpty()
2021-03-11 12:28:22,355 [main:101] - Case = [public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@575357d8], public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@7cdb2ad0]]
2021-03-11 12:28:22,355 [main:137] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@575357d8]
2021-03-11 12:28:22,355 [main:137] - GENERATING call of type public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@7cdb2ad0]
2021-03-11 12:28:22,355 [main:105] - GENERATED CALL = (list4).listIterator().hasPrevious()
2021-03-11 12:28:22,355 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@4e690bc9], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:28:22,355 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@4e690bc9]
2021-03-11 12:28:22,444 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:22,444 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:28:22,533 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:22,534 [main:105] - GENERATED CALL = (list4).equals("gdflc").xor(false)
2021-03-11 12:28:22,534 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@57f39200]]
2021-03-11 12:28:22,534 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96]
2021-03-11 12:28:22,534 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@57f39200]
2021-03-11 12:28:22,623 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:28:22,717 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:28:22,718 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:28:22,999 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-11 12:28:22,999 [main:144] - CANT GENERATE PARAMS FOR @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@57f39200]
2021-03-11 12:28:22,999 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96], @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@59316e4a]]
2021-03-11 12:28:23,000 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96]
2021-03-11 12:28:23,000 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@59316e4a]
2021-03-11 12:28:23,000 [main:105] - GENERATED CALL = (list4).toArray().isNotEmpty()
2021-03-11 12:28:23,000 [main:101] - Case = [public open fun contains(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@60d3bf3e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:28:23,000 [main:137] - GENERATING call of type public open fun contains(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@60d3bf3e]
2021-03-11 12:28:23,090 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:23,090 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:28:23,090 [main:105] - GENERATED CALL = (list4).contains(8552936650341277404.toULong()).not()
2021-03-11 12:28:23,091 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f5a854]]
2021-03-11 12:28:23,091 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f5a854]
2021-03-11 12:28:23,180 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:28:23,180 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:28:23,181 [main:105] - GENERATED CALL = (list4).all({a: T -> true})
2021-03-11 12:28:23,181 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@444796e9], public abstract fun containsAll(elements: kotlin.collections.Collection<kotlin.ULong>): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@4b078723]]
2021-03-11 12:28:23,181 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@444796e9]
2021-03-11 12:28:23,270 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:23,359 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:23,360 [main:137] - GENERATING call of type public abstract fun containsAll(elements: kotlin.collections.Collection<kotlin.ULong>): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@4b078723]
2021-03-11 12:28:23,449 [main:302] - generating value of type = Collection<ULong> false depth = 0
2021-03-11 12:28:23,543 [main:43] - GENERATING CALL OF fun <T> listOf(elements: ULong): Collection<ULong> = TODO()
2021-03-11 12:28:23,544 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(elements: ULong): Collection<ULong> = TODO()
2021-03-11 12:28:23,632 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:28:23,633 [main:95] - GENERATED = listOf<ULong>(8724489899155159250.toULong())
2021-03-11 12:28:23,633 [main:105] - GENERATED CALL = (list4).subList(-1528953062, 1660388855).containsAll(listOf<ULong>(8724489899155159250.toULong()))
2021-03-11 12:28:23,633 [main:101] - Case = [public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@3bd8634e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@2ec76a97]]
2021-03-11 12:28:23,634 [main:137] - GENERATING call of type public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@3bd8634e]
2021-03-11 12:28:23,634 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@2ec76a97]
2021-03-11 12:28:23,732 [main:105] - GENERATED CALL = (list4).clear().equals(null)
2021-03-11 12:28:23,732 [main:63] - replacement of (hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113) of type Boolean is (list4).equals("gdflc").xor(false)
2021-03-11 12:28:23,821 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:23,821 [main:66] - Compilation checking started
2021-03-11 12:28:24,049 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((list4).equals("gdflc").xor(false)) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = ArrayList<ULong>()
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:24,053 [main:56] - replacing (ArrayList<ULong>(), ArrayList<ULong>)
2021-03-11 12:28:24,053 [main:38] - replacing ArrayList<ULong>() ArrayList<ULong>
2021-03-11 12:28:24,053 [main:42] - Getting value of type ArrayList<ULong>
2021-03-11 12:28:24,142 [main:302] - generating value of type = ArrayList<ULong> false depth = 0
2021-03-11 12:28:24,268 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: ULong): ArrayList<ULong> = TODO()
2021-03-11 12:28:24,269 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: ULong): ArrayList<ULong> = TODO()
2021-03-11 12:28:24,358 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:28:24,359 [main:95] - GENERATED = arrayListOf<ULong>(8408774435601644396.toULong())
2021-03-11 12:28:24,359 [main:46] - GENERATED VALUE OF TYPE ArrayList<ULong> = arrayListOf<ULong>(8408774435601644396.toULong())
2021-03-11 12:28:24,359 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:24,452 [main:55] - randomType = Sequence<UByte>
2021-03-11 12:28:24,455 [main:94] - GETTING ArrayList<ULong> from Boolean
2021-03-11 12:28:24,467 [main:94] - GETTING ArrayList<ULong> from ArrayList<UInt>
2021-03-11 12:28:24,578 [main:63] - replacement of ArrayList<ULong>() of type ArrayList<ULong> is list1
2021-03-11 12:28:24,667 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:28:24,667 [main:66] - Compilation checking started
2021-03-11 12:28:25,014 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:25,018 [main:56] - replacing ("Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2", String)
2021-03-11 12:28:25,018 [main:38] - replacing "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2" String
2021-03-11 12:28:25,018 [main:42] - Getting value of type String
2021-03-11 12:28:25,107 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:28:25,108 [main:46] - GENERATED VALUE OF TYPE String = "tkvdl"
2021-03-11 12:28:25,108 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:25,209 [main:55] - randomType = UShort?
2021-03-11 12:28:25,298 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:28:25,325 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@70ef6902]
2021-03-11 12:28:25,414 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:25,415 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3901601b]
2021-03-11 12:28:25,504 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:25,505 [main:66] - Generated call from random type = (31459.toUShort())?.div(29.toUByte()).toString(1066245855)
2021-03-11 12:28:25,505 [main:94] - GETTING String from Int
2021-03-11 12:28:25,535 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:28:25,535 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:28:25,535 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:28:25,625 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:25,625 [main:105] - GENERATED CALL = (list4.size).toLong().toString(-1372338954)
2021-03-11 12:28:25,625 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:28:25,625 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:28:25,626 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:28:25,714 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:25,715 [main:105] - GENERATED CALL = (list4.size).toInt().toString(-974951655)
2021-03-11 12:28:25,715 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]]
2021-03-11 12:28:25,715 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:28:25,715 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]
2021-03-11 12:28:25,716 [main:105] - GENERATED CALL = (list4.size).toChar().lowercase()
2021-03-11 12:28:25,716 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:28:25,716 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac]
2021-03-11 12:28:25,805 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:28:25,805 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:28:25,894 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:25,894 [main:105] - GENERATED CALL = (list4.size).div(-29498043962950824).toString(1668944348)
2021-03-11 12:28:25,895 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:28:25,895 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:28:25,984 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:25,984 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:28:26,073 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:26,074 [main:105] - GENERATED CALL = (list4.size).compareTo(422559096).toString(172304382)
2021-03-11 12:28:26,074 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:28:26,074 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:28:26,162 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:26,163 [main:105] - GENERATED CALL = (list4.size).toString(-1852752639)
2021-03-11 12:28:26,163 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]]
2021-03-11 12:28:26,163 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:28:26,163 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]
2021-03-11 12:28:26,163 [main:105] - GENERATED CALL = (list4.size).toChar().uppercase()
2021-03-11 12:28:26,163 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]]
2021-03-11 12:28:26,163 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:28:26,163 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]
2021-03-11 12:28:26,164 [main:105] - GENERATED CALL = (list4.size).toChar().titlecase()
2021-03-11 12:28:26,164 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]]
2021-03-11 12:28:26,164 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:28:26,164 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]
2021-03-11 12:28:26,253 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:26,254 [main:105] - GENERATED CALL = (list4.size).toShort().toString(-812169723)
2021-03-11 12:28:26,254 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]]
2021-03-11 12:28:26,254 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:28:26,254 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]
2021-03-11 12:28:26,343 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:28:26,344 [main:105] - GENERATED CALL = (list4.size).toChar().plus("sexga")
2021-03-11 12:28:26,344 [main:63] - replacement of "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list2" of type String is "tkvdl"
2021-03-11 12:28:26,433 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 12:28:26,433 [main:66] - Compilation checking started
2021-03-11 12:28:26,791 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:26,795 [main:56] - replacing (1u, UInt)
2021-03-11 12:28:26,795 [main:38] - replacing 1u UInt
2021-03-11 12:28:26,795 [main:42] - Getting value of type UInt
2021-03-11 12:28:26,912 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:26,912 [main:46] - GENERATED VALUE OF TYPE UInt = 534622715.toUInt()
2021-03-11 12:28:26,912 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:26,914 [main:55] - randomType = ULong
2021-03-11 12:28:27,002 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:27,027 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@12db8af2]
2021-03-11 12:28:27,027 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceAtMost(maximumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18a564a7]
2021-03-11 12:28:27,116 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:27,117 [main:66] - Generated call from random type = (5697201533439207887.toULong()).toUInt().coerceAtMost(905147029.toUInt())
2021-03-11 12:28:27,118 [main:94] - GETTING UInt from Int
2021-03-11 12:28:27,150 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]]
2021-03-11 12:28:27,150 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:28:27,150 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@5f95e589]
2021-03-11 12:28:27,150 [main:105] - GENERATED CALL = (list1.size).toFloat().toUInt()
2021-03-11 12:28:27,150 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:28:27,150 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:28:27,151 [main:105] - GENERATED CALL = (list1.size).toUInt()
2021-03-11 12:28:27,151 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:28:27,151 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:28:27,151 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:28:27,151 [main:105] - GENERATED CALL = (list1.size).toInt().toUInt()
2021-03-11 12:28:27,151 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:28:27,151 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:28:27,239 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:28:27,240 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:28:27,240 [main:105] - GENERATED CALL = (list1.size).div(0.40440621264898624).toUInt()
2021-03-11 12:28:27,240 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]]
2021-03-11 12:28:27,240 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:28:27,240 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@631130cb]
2021-03-11 12:28:27,240 [main:105] - GENERATED CALL = (list1.size).toLong().toUInt()
2021-03-11 12:28:27,240 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]]
2021-03-11 12:28:27,240 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:28:27,240 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:28:27,240 [main:105] - GENERATED CALL = (list1.size).toDouble().toUInt()
2021-03-11 12:28:27,240 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]]
2021-03-11 12:28:27,240 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:28:27,240 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@6e1421ff]
2021-03-11 12:28:27,241 [main:105] - GENERATED CALL = (list1.size).toByte().toUInt()
2021-03-11 12:28:27,241 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]]
2021-03-11 12:28:27,241 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:28:27,241 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@7ef8b3bd]
2021-03-11 12:28:27,241 [main:105] - GENERATED CALL = (list1.size).toShort().toUInt()
2021-03-11 12:28:27,241 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:28:27,241 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:28:27,329 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:27,330 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:28:27,330 [main:105] - GENERATED CALL = (list1.size).compareTo(1177440604).toUInt()
2021-03-11 12:28:27,330 [main:63] - replacement of 1u of type UInt is (list1.size).compareTo(1177440604).toUInt()
2021-03-11 12:28:27,419 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:27,423 [main:56] - replacing ("Wrong elements for 1u until 5u: $list1", String)
2021-03-11 12:28:27,423 [main:38] - replacing "Wrong elements for 1u until 5u: $list1" String
2021-03-11 12:28:27,424 [main:42] - Getting value of type String
2021-03-11 12:28:27,513 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:28:27,513 [main:46] - GENERATED VALUE OF TYPE String = "lsjdg"
2021-03-11 12:28:27,514 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:27,606 [main:55] - randomType = HashSet<Double>
2021-03-11 12:28:27,696 [main:302] - generating value of type = HashSet<Double> false depth = 0
2021-03-11 12:28:27,788 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Double> = TODO()
2021-03-11 12:28:27,789 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Double> = TODO()
2021-03-11 12:28:27,879 [main:95] - GENERATED = linkedSetOf<Double>()
2021-03-11 12:28:27,975 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@5292b442]
2021-03-11 12:28:27,975 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]
2021-03-11 12:28:28,065 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:28:28,158 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:28:28,159 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:28:28,346 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:28:28,347 [main:95] - GENERATED = StringBuilder("fysus")
2021-03-11 12:28:28,435 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:28:28,527 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:28:28,619 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:28:28,620 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:28:28,798 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:28:28,801 [main:95] - GENERATED = StringBuilder("nftka")
2021-03-11 12:28:28,890 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:28,980 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:28:29,072 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:28:29,073 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:28:29,077 [main:66] - Generated call from random type = (linkedSetOf<Double>()).toArray().joinToString(StringBuilder("fysus"), "xdxvv", StringBuilder("nftka"), 1357039018, StringBuilder(), {a: T -> StringBuilder()})
2021-03-11 12:28:29,078 [main:94] - GETTING String from Boolean
2021-03-11 12:28:29,086 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:28:29,086 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:28:29,175 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:29,175 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:28:29,303 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:29,304 [main:105] - GENERATED CALL = (list3.add(i)).compareTo(false).toString(1203786883)
2021-03-11 12:28:29,304 [main:63] - replacement of "Wrong elements for 1u until 5u: $list1" of type String is (linkedSetOf<Double>()).toArray().joinToString(StringBuilder("fysus"), "xdxvv", StringBuilder("nftka"), 1357039018, StringBuilder(), {a: T -> StringBuilder()})
2021-03-11 12:28:29,393 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:29,393 [main:66] - Compilation checking started
2021-03-11 12:28:29,718 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return (linkedSetOf<Double>()).toArray().joinToString(StringBuilder("fysus"), "xdxvv", StringBuilder("nftka"), 1357039018, StringBuilder(), {a: T -> StringBuilder()})
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:29,724 [main:56] - replacing (23, Int)
2021-03-11 12:28:29,724 [main:38] - replacing 23 Int
2021-03-11 12:28:29,724 [main:42] - Getting value of type Int
2021-03-11 12:28:29,853 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:29,854 [main:46] - GENERATED VALUE OF TYPE Int = -1202445217
2021-03-11 12:28:29,854 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:29,969 [main:55] - randomType = Collection<Double>
2021-03-11 12:28:29,971 [main:94] - GETTING Int from UByte
2021-03-11 12:28:30,006 [main:101] - Case = [@kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7bc34e09], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bf73503]]
2021-03-11 12:28:30,007 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7bc34e09]
2021-03-11 12:28:30,103 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:30,104 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bf73503]
2021-03-11 12:28:30,105 [main:105] - GENERATED CALL = (1u.toUByte()).compareTo(67.toUByte()).inc()
2021-03-11 12:28:30,105 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2f7262b0]]
2021-03-11 12:28:30,105 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734]
2021-03-11 12:28:30,105 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2f7262b0]
2021-03-11 12:28:30,105 [main:105] - GENERATED CALL = (1u.toUByte()).toByte().unaryMinus()
2021-03-11 12:28:30,105 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc], @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7d9619ee]]
2021-03-11 12:28:30,105 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc]
2021-03-11 12:28:30,210 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:30,211 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7d9619ee]
2021-03-11 12:28:30,211 [main:105] - GENERATED CALL = (1u.toUByte()).div(36.toUByte()).toInt()
2021-03-11 12:28:30,211 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@50715301], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d07c7a3]]
2021-03-11 12:28:30,211 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@50715301]
2021-03-11 12:28:30,211 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d07c7a3]
2021-03-11 12:28:30,212 [main:105] - GENERATED CALL = (1u.toUByte()).toShort().countLeadingZeroBits()
2021-03-11 12:28:30,212 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@50715301], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1bc98d22]]
2021-03-11 12:28:30,212 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@50715301]
2021-03-11 12:28:30,212 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1bc98d22]
2021-03-11 12:28:30,303 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:28:30,304 [main:105] - GENERATED CALL = (1u.toUByte()).toShort().plus(-124)
2021-03-11 12:28:30,304 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@247c4a32]]
2021-03-11 12:28:30,304 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734]
2021-03-11 12:28:30,304 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@247c4a32]
2021-03-11 12:28:30,304 [main:105] - GENERATED CALL = (1u.toUByte()).toByte().countLeadingZeroBits()
2021-03-11 12:28:30,305 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@37a66e55]]
2021-03-11 12:28:30,305 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734]
2021-03-11 12:28:30,305 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@37a66e55]
2021-03-11 12:28:30,401 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:28:30,402 [main:105] - GENERATED CALL = (1u.toUByte()).toByte().div(-110)
2021-03-11 12:28:30,402 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11bacd68], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@77059637]]
2021-03-11 12:28:30,402 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@11bacd68]
2021-03-11 12:28:30,402 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@77059637]
2021-03-11 12:28:30,403 [main:105] - GENERATED CALL = (1u.toUByte()).toLong().toInt()
2021-03-11 12:28:30,403 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@19c2cf53]]
2021-03-11 12:28:30,403 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734]
2021-03-11 12:28:30,403 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@19c2cf53]
2021-03-11 12:28:30,495 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:28:30,495 [main:105] - GENERATED CALL = (1u.toUByte()).toByte().compareTo(-84)
2021-03-11 12:28:30,496 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2937113c]]
2021-03-11 12:28:30,496 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52728734]
2021-03-11 12:28:30,496 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2937113c]
2021-03-11 12:28:30,496 [main:105] - GENERATED CALL = (1u.toUByte()).toByte().countTrailingZeroBits()
2021-03-11 12:28:30,496 [main:63] - replacement of 23 of type Int is (1u.toUByte()).compareTo(67.toUByte()).inc()
2021-03-11 12:28:30,587 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:30,591 [main:56] - replacing (list2, ArrayList<UInt>)
2021-03-11 12:28:30,591 [main:38] - replacing list2 ArrayList<UInt>
2021-03-11 12:28:30,591 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:28:30,682 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:28:30,790 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:28:30,792 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:28:30,885 [main:95] - GENERATED = arrayListOf<UInt>()
2021-03-11 12:28:30,885 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = arrayListOf<UInt>()
2021-03-11 12:28:30,885 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:31,074 [main:55] - randomType = HashSet<Boolean>
2021-03-11 12:28:31,166 [main:302] - generating value of type = HashSet<Boolean> false depth = 0
2021-03-11 12:28:31,259 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Boolean> = TODO()
2021-03-11 12:28:31,261 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Boolean> = TODO()
2021-03-11 12:28:31,539 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:28:31,539 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:28:31,540 [main:95] - GENERATED = HashSet<Boolean>(1731218313, 0.8922196f)
2021-03-11 12:28:31,655 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:28:31,690 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:28:31,693 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:28:31,708 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:28:31,711 [main:94] - GETTING ArrayList<UInt> from ArrayList<ULong>
2021-03-11 12:28:31,822 [main:63] - replacement of list2 of type ArrayList<UInt> is list4
2021-03-11 12:28:31,912 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:28:31,913 [main:66] - Compilation checking started
2021-03-11 12:28:32,195 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        list2.add((list1).get(150148343).inv())
        if (list1.add(1785541927.toUInt())) break
    }
    if (list4 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:32,199 [main:56] - replacing (list2, ArrayList<UInt>)
2021-03-11 12:28:32,200 [main:38] - replacing list2 ArrayList<UInt>
2021-03-11 12:28:32,200 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:28:32,291 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:28:32,386 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:28:32,388 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:28:32,479 [main:95] - GENERATED = arrayListOf<UInt>()
2021-03-11 12:28:32,479 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = arrayListOf<UInt>()
2021-03-11 12:28:32,480 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:32,663 [main:55] - randomType = Short?
2021-03-11 12:28:32,753 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:28:32,789 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:28:32,908 [main:63] - replacement of list2 of type ArrayList<UInt> is list2
2021-03-11 12:28:32,998 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:28:33,002 [main:56] - replacing (list2.add((list1).get(150148343).inv()), Boolean)
2021-03-11 12:28:33,003 [main:38] - replacing list2.add((list1).get(150148343).inv()) Boolean
2021-03-11 12:28:33,003 [main:42] - Getting value of type Boolean
2021-03-11 12:28:33,093 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:33,094 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:28:33,094 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:33,096 [main:55] - randomType = Long
2021-03-11 12:28:33,186 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:28:33,219 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:28:33,219 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e49055a]
2021-03-11 12:28:33,220 [main:66] - Generated call from random type = (-1331836856221479418).toFloat().isInfinite()
2021-03-11 12:28:33,220 [main:94] - GETTING Boolean from Boolean
2021-03-11 12:28:33,227 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:28:33,227 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:28:33,318 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:33,318 [main:105] - GENERATED CALL = (list2.add(i)).xor(true)
2021-03-11 12:28:33,318 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:28:33,318 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:28:33,319 [main:105] - GENERATED CALL = (list2.add(i)).not()
2021-03-11 12:28:33,319 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:28:33,319 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:28:33,410 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:33,410 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:28:33,501 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:33,502 [main:105] - GENERATED CALL = (list2.add(i)).compareTo(false).equals("yinkp")
2021-03-11 12:28:33,502 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:28:33,502 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:33,592 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:33,592 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:28:33,682 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:33,683 [main:105] - GENERATED CALL = (list2.add(i)).equals("pzybd").xor(true)
2021-03-11 12:28:33,683 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:28:33,683 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:28:33,773 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:33,774 [main:105] - GENERATED CALL = (list2.add(i)).or(true)
2021-03-11 12:28:33,774 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:28:33,774 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:33,865 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:33,865 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:28:33,954 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:33,955 [main:105] - GENERATED CALL = (list2.add(i)).equals("xfaas").equals("ulpot")
2021-03-11 12:28:33,955 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:28:33,955 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:34,046 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:34,046 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:28:34,137 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:34,138 [main:105] - GENERATED CALL = (list2.add(i)).equals("alhls").and(true)
2021-03-11 12:28:34,138 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:28:34,138 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:28:34,230 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:34,230 [main:105] - GENERATED CALL = (list2.add(i)).equals("ecebz")
2021-03-11 12:28:34,230 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:28:34,230 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:34,322 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:34,322 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:28:34,416 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:34,417 [main:105] - GENERATED CALL = (list2.add(i)).equals("lelpv").or(true)
2021-03-11 12:28:34,417 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:28:34,417 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:34,508 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:34,508 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:28:34,508 [main:105] - GENERATED CALL = (list2.add(i)).equals("rwojo").not()
2021-03-11 12:28:34,508 [main:63] - replacement of list2.add((list1).get(150148343).inv()) of type Boolean is (list2.add(i)).equals("alhls").and(true)
2021-03-11 12:28:34,599 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:34,599 [main:66] - Compilation checking started
2021-03-11 12:28:34,979 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:34,983 [main:56] - replacing (23, Int)
2021-03-11 12:28:34,983 [main:38] - replacing 23 Int
2021-03-11 12:28:34,983 [main:42] - Getting value of type Int
2021-03-11 12:28:35,077 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:35,077 [main:46] - GENERATED VALUE OF TYPE Int = -2107832530
2021-03-11 12:28:35,077 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:35,173 [main:55] - randomType = Map<Long, Double>
2021-03-11 12:28:35,174 [main:94] - GETTING Int from ArrayList<UInt>
2021-03-11 12:28:35,292 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@15693712], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17be8940]]
2021-03-11 12:28:35,292 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17be8940]
2021-03-11 12:28:35,382 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:35,382 [main:105] - GENERATED CALL = (list1).size.shl(794995797)
2021-03-11 12:28:35,382 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1b12911f]]
2021-03-11 12:28:35,383 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@51c30fac]
2021-03-11 12:28:35,473 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:35,473 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UInt.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1b12911f]
2021-03-11 12:28:35,474 [main:105] - GENERATED CALL = (list1).get(-544951009).countOneBits()
2021-03-11 12:28:35,474 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@2e063fa1], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a83905]]
2021-03-11 12:28:35,474 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a83905]
2021-03-11 12:28:35,564 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:35,564 [main:105] - GENERATED CALL = (list1).modCount.ushr(2072960236)
2021-03-11 12:28:35,565 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@2e063fa1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fe258f2]]
2021-03-11 12:28:35,565 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fe258f2]
2021-03-11 12:28:35,565 [main:105] - GENERATED CALL = (list1).modCount.takeLowestOneBit()
2021-03-11 12:28:35,565 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@2e063fa1], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@25e62a12]]
2021-03-11 12:28:35,565 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@25e62a12]
2021-03-11 12:28:35,654 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:35,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:35,745 [main:105] - GENERATED CALL = (list1).modCount.coerceIn(-1858959303, 1682777311)
2021-03-11 12:28:35,745 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@2e063fa1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e7c0a80]]
2021-03-11 12:28:35,745 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e7c0a80]
2021-03-11 12:28:35,835 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:35,836 [main:105] - GENERATED CALL = (list1).modCount.rotateRight(161684436)
2021-03-11 12:28:35,836 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@2e063fa1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2622f76c]]
2021-03-11 12:28:35,836 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2622f76c]
2021-03-11 12:28:35,836 [main:105] - GENERATED CALL = (list1).modCount.countTrailingZeroBits()
2021-03-11 12:28:35,836 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62585aff], public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1a5fdcae]]
2021-03-11 12:28:35,836 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62585aff]
2021-03-11 12:28:35,836 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1a5fdcae]
2021-03-11 12:28:35,931 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:28:35,932 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:28:35,933 [main:105] - GENERATED CALL = (list1).toArray().indexOfLast({a: T -> true})
2021-03-11 12:28:35,933 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@2e063fa1], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@edf15dd]]
2021-03-11 12:28:35,933 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@edf15dd]
2021-03-11 12:28:36,025 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:28:36,026 [main:105] - GENERATED CALL = (list1).modCount.times(44)
2021-03-11 12:28:36,026 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60a6b696]]
2021-03-11 12:28:36,026 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60a6b696]
2021-03-11 12:28:36,117 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 12:28:36,117 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:28:36,118 [main:105] - GENERATED CALL = (list1).sumOf({a: T -> -1174992153})
2021-03-11 12:28:36,118 [main:63] - replacement of 23 of type Int is -2107832530
2021-03-11 12:28:36,208 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 12:28:36,212 [main:56] - replacing (listOf<ULong>((list2.size).toDouble().toULong(), (list3).sum(), (linkedMapOf<Char?, Array<Int?>>()).get('甉')?.sumOf({a: T -> 1999987422832759178.toULong()})!!, (list1.size).toFloat().toULong()), List<ULong>)
2021-03-11 12:28:36,213 [main:38] - replacing listOf<ULong>((list2.size).toDouble().toULong(), (list3).sum(), (linkedMapOf<Char?, Array<Int?>>()).get('甉')?.sumOf({a: T -> 1999987422832759178.toULong()})!!, (list1.size).toFloat().toULong()) List<ULong>
2021-03-11 12:28:36,213 [main:42] - Getting value of type List<ULong>
2021-03-11 12:28:36,306 [main:302] - generating value of type = List<ULong> false depth = 0
2021-03-11 12:28:36,401 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: ULong): List<ULong> = TODO()
2021-03-11 12:28:36,402 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: ULong): List<ULong> = TODO()
2021-03-11 12:28:36,491 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:28:36,492 [main:95] - GENERATED = mutableListOf<ULong>(2230313250655624021.toULong())
2021-03-11 12:28:36,492 [main:46] - GENERATED VALUE OF TYPE List<ULong> = mutableListOf<ULong>(2230313250655624021.toULong())
2021-03-11 12:28:36,492 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:36,493 [main:55] - randomType = Long
2021-03-11 12:28:36,583 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:28:36,619 [main:94] - GETTING List<ULong> from UShort
2021-03-11 12:28:36,643 [main:94] - GETTING List<ULong> from Int
2021-03-11 12:28:36,676 [main:94] - GETTING List<ULong> from Boolean
2021-03-11 12:28:36,687 [main:94] - GETTING List<ULong> from Boolean
2021-03-11 12:28:36,690 [main:94] - GETTING List<ULong> from Int
2021-03-11 12:28:36,692 [main:94] - GETTING List<ULong> from UByte
2021-03-11 12:28:36,718 [main:94] - GETTING List<ULong> from ArrayList<UInt>
2021-03-11 12:28:36,827 [main:63] - replacement of listOf<ULong>((list2.size).toDouble().toULong(), (list3).sum(), (linkedMapOf<Char?, Array<Int?>>()).get('甉')?.sumOf({a: T -> 1999987422832759178.toULong()})!!, (list1.size).toFloat().toULong()) of type List<ULong> is mutableListOf<ULong>(2230313250655624021.toULong())
2021-03-11 12:28:36,917 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:28:36,921 [main:56] - replacing (1u.toUByte(), UByte)
2021-03-11 12:28:36,921 [main:38] - replacing 1u.toUByte() UByte
2021-03-11 12:28:36,921 [main:42] - Getting value of type UByte
2021-03-11 12:28:37,012 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:37,013 [main:46] - GENERATED VALUE OF TYPE UByte = 61.toUByte()
2021-03-11 12:28:37,013 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:37,014 [main:55] - randomType = UInt
2021-03-11 12:28:37,104 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:37,138 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5ab0d0a3]
2021-03-11 12:28:37,138 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun dec(): kotlin.UByte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@103a2527]
2021-03-11 12:28:37,139 [main:66] - Generated call from random type = (1517545039.toUInt()).toUByte().dec()
2021-03-11 12:28:37,139 [main:63] - replacement of 1u.toUByte() of type UByte is (1517545039.toUInt()).toUByte().dec()
2021-03-11 12:28:37,229 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:37,233 [main:56] - replacing ("Wrong elements for 1u until 5u: $list1", String)
2021-03-11 12:28:37,233 [main:38] - replacing "Wrong elements for 1u until 5u: $list1" String
2021-03-11 12:28:37,234 [main:42] - Getting value of type String
2021-03-11 12:28:37,324 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:28:37,325 [main:46] - GENERATED VALUE OF TYPE String = "nunsc"
2021-03-11 12:28:37,325 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:37,643 [main:55] - randomType = Triple<UInt, UByte?, Boolean>?
2021-03-11 12:28:37,732 [main:302] - generating value of type = Triple<UInt, UByte?, Boolean> false depth = 0
2021-03-11 12:28:37,826 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UInt, second: UByte?, third: Boolean): Triple<UInt, UByte?, Boolean> = TODO()
2021-03-11 12:28:37,827 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UInt, second: UByte?, third: Boolean): Triple<UInt, UByte?, Boolean> = TODO()
2021-03-11 12:28:37,917 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:28:37,917 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 12:28:37,918 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 12:28:37,919 [main:95] - GENERATED = Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false)
2021-03-11 12:28:37,939 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3901601b]
2021-03-11 12:28:38,029 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:38,030 [main:66] - Generated call from random type = (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
2021-03-11 12:28:38,030 [main:94] - GETTING String from Boolean
2021-03-11 12:28:38,042 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:28:38,042 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:28:38,131 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:38,132 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:28:38,221 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:38,222 [main:105] - GENERATED CALL = (list2.add(i)).compareTo(true).toString(1829358964)
2021-03-11 12:28:38,222 [main:63] - replacement of "Wrong elements for 1u until 5u: $list1" of type String is (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
2021-03-11 12:28:38,311 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:38,311 [main:66] - Compilation checking started
2021-03-11 12:28:38,713 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:38,719 [main:56] - replacing ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113), Boolean)
2021-03-11 12:28:38,721 [main:38] - replacing (hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113) Boolean
2021-03-11 12:28:38,721 [main:42] - Getting value of type Boolean
2021-03-11 12:28:38,823 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:38,823 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:28:38,823 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:38,825 [main:55] - randomType = UByte
2021-03-11 12:28:38,938 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:38,977 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3cec0fff]
2021-03-11 12:28:38,977 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]
2021-03-11 12:28:39,074 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:39,074 [main:66] - Generated call from random type = (29.toUByte()).toFloat().equals("ynaca")
2021-03-11 12:28:39,075 [main:94] - GETTING Boolean from Int
2021-03-11 12:28:39,130 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443e326f]]
2021-03-11 12:28:39,131 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:28:39,131 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443e326f]
2021-03-11 12:28:39,131 [main:105] - GENERATED CALL = (list2.size).toChar().isISOControl()
2021-03-11 12:28:39,131 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f74d2a1]]
2021-03-11 12:28:39,131 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:28:39,131 [main:137] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f74d2a1]
2021-03-11 12:28:39,131 [main:105] - GENERATED CALL = (list2.size).toChar().isDefined()
2021-03-11 12:28:39,131 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:28:39,131 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:28:39,131 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:28:39,231 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:39,231 [main:105] - GENERATED CALL = (list2.size).toInt().equals("ipnvk")
2021-03-11 12:28:39,231 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494be499]]
2021-03-11 12:28:39,231 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:28:39,231 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494be499]
2021-03-11 12:28:39,231 [main:105] - GENERATED CALL = (list2.size).toChar().isLetter()
2021-03-11 12:28:39,231 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4afe8f90]]
2021-03-11 12:28:39,232 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:28:39,329 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:28:39,330 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4afe8f90]
2021-03-11 12:28:39,330 [main:105] - GENERATED CALL = (list2.size).div(0.056747510350110386).isInfinite()
2021-03-11 12:28:39,330 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:28:39,330 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:28:39,426 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:39,426 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:28:39,520 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:39,521 [main:105] - GENERATED CALL = (list2.size).compareTo(-1916455173).equals("nqphu")
2021-03-11 12:28:39,521 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]]
2021-03-11 12:28:39,521 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:28:39,521 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]
2021-03-11 12:28:39,613 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:39,613 [main:105] - GENERATED CALL = (list2.size).toByte().equals("cetwy")
2021-03-11 12:28:39,614 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]]
2021-03-11 12:28:39,614 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:28:39,614 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]
2021-03-11 12:28:39,614 [main:105] - GENERATED CALL = (list2.size).toDouble().isFinite()
2021-03-11 12:28:39,614 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@6e9da3a3]]
2021-03-11 12:28:39,614 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb]
2021-03-11 12:28:39,707 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:28:39,708 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@6e9da3a3]
2021-03-11 12:28:39,708 [main:105] - GENERATED CALL = (list2.size).rangeTo(69).isEmpty()
2021-03-11 12:28:39,708 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]]
2021-03-11 12:28:39,708 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:28:39,708 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]
2021-03-11 12:28:39,801 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:39,802 [main:105] - GENERATED CALL = (list2.size).toFloat().equals("hnddk")
2021-03-11 12:28:39,802 [main:63] - replacement of (hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113) of type Boolean is (list2.size).toChar().isISOControl()
2021-03-11 12:28:39,899 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:39,899 [main:66] - Compilation checking started
2021-03-11 12:28:40,131 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((list2.size).toChar().isISOControl()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:40,135 [main:56] - replacing (list2 != (list1).filterNotNull(), Boolean)
2021-03-11 12:28:40,136 [main:38] - replacing list2 != (list1).filterNotNull() Boolean
2021-03-11 12:28:40,136 [main:42] - Getting value of type Boolean
2021-03-11 12:28:40,231 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:40,231 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:28:40,232 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:40,363 [main:55] - randomType = Boolean?
2021-03-11 12:28:40,462 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:40,478 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:40,574 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:40,574 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:28:40,574 [main:66] - Generated call from random type = (false)?.equals("xxzaq").not()
2021-03-11 12:28:40,575 [main:94] - GETTING Boolean from ArrayList<ULong>
2021-03-11 12:28:40,692 [main:101] - Case = [public open fun iterator(): kotlin.collections.MutableIterator<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3ac18729], public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.MutableIterator[DeserializedSimpleFunctionDescriptor@3755517]]
2021-03-11 12:28:40,692 [main:137] - GENERATING call of type public open fun iterator(): kotlin.collections.MutableIterator<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3ac18729]
2021-03-11 12:28:40,692 [main:137] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.MutableIterator[DeserializedSimpleFunctionDescriptor@3755517]
2021-03-11 12:28:40,693 [main:105] - GENERATED CALL = (list4).iterator().hasNext()
2021-03-11 12:28:40,693 [main:101] - Case = [public open fun add(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@693972a9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:28:40,693 [main:137] - GENERATING call of type public open fun add(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@693972a9]
2021-03-11 12:28:40,785 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:40,786 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:28:40,879 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:40,879 [main:105] - GENERATED CALL = (list4).add(6417460086504403774.toULong()).equals("dqcsg")
2021-03-11 12:28:40,880 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@59feea1c]]
2021-03-11 12:28:40,880 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@59feea1c]
2021-03-11 12:28:40,880 [main:105] - GENERATED CALL = (list4).any()
2021-03-11 12:28:40,880 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@716c9c9]]
2021-03-11 12:28:40,880 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96]
2021-03-11 12:28:40,880 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@716c9c9]
2021-03-11 12:28:40,976 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:40,976 [main:105] - GENERATED CALL = (list4).toArray().equals("hizij")
2021-03-11 12:28:40,976 [main:101] - Case = [public open fun contains(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@70c75059]]
2021-03-11 12:28:40,977 [main:137] - GENERATING call of type public open fun contains(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@70c75059]
2021-03-11 12:28:41,070 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:41,071 [main:105] - GENERATED CALL = (list4).contains(3804419817193349579.toULong())
2021-03-11 12:28:41,071 [main:101] - Case = [public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@575357d8], public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@7cdb2ad0]]
2021-03-11 12:28:41,071 [main:137] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@575357d8]
2021-03-11 12:28:41,071 [main:137] - GENERATING call of type public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@7cdb2ad0]
2021-03-11 12:28:41,071 [main:105] - GENERATED CALL = (list4).listIterator().hasPrevious()
2021-03-11 12:28:41,071 [main:101] - Case = [public open fun contains(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@1ca15128], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:28:41,071 [main:137] - GENERATING call of type public open fun contains(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@1ca15128]
2021-03-11 12:28:41,165 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:41,166 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:28:41,166 [main:105] - GENERATED CALL = (list4).contains(8977958438881221822.toULong()).not()
2021-03-11 12:28:41,166 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@444796e9], public abstract fun add(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@3d5ed109]]
2021-03-11 12:28:41,166 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@444796e9]
2021-03-11 12:28:41,260 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:41,353 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:41,353 [main:137] - GENERATING call of type public abstract fun add(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@3d5ed109]
2021-03-11 12:28:41,446 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:41,447 [main:105] - GENERATED CALL = (list4).subList(626802625, 1052646068).add(7711127060664650763.toULong())
2021-03-11 12:28:41,447 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@708e541f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:28:41,448 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:28:41,540 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:41,540 [main:105] - GENERATED CALL = (list4).size.equals("oczzr")
2021-03-11 12:28:41,541 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Array<*>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@179f9f90]]
2021-03-11 12:28:41,541 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96]
2021-03-11 12:28:41,541 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Array<*>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@179f9f90]
2021-03-11 12:28:41,541 [main:105] - GENERATED CALL = (list4).toArray().isNullOrEmpty()
2021-03-11 12:28:41,541 [main:63] - replacement of list2 != (list1).filterNotNull() of type Boolean is (list4).toArray().equals("hizij")
2021-03-11 12:28:41,633 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:41,634 [main:66] - Compilation checking started
2021-03-11 12:28:41,876 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((list4).toArray().equals("hizij")) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:41,880 [main:56] - replacing (list2 != (list1).filterNotNull(), Boolean)
2021-03-11 12:28:41,881 [main:38] - replacing list2 != (list1).filterNotNull() Boolean
2021-03-11 12:28:41,881 [main:42] - Getting value of type Boolean
2021-03-11 12:28:41,974 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:41,974 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:28:41,975 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:41,976 [main:55] - randomType = Double
2021-03-11 12:28:42,069 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:28:42,102 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c]
2021-03-11 12:28:42,103 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf3643c]
2021-03-11 12:28:42,103 [main:66] - Generated call from random type = (0.7148520418970066).toChar().isLetterOrDigit()
2021-03-11 12:28:42,103 [main:94] - GETTING Boolean from Boolean
2021-03-11 12:28:42,110 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:28:42,110 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:42,203 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:42,203 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:28:42,203 [main:105] - GENERATED CALL = (list2.add(i)).equals("gpvbq").not()
2021-03-11 12:28:42,203 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:28:42,203 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:42,295 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:42,295 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:28:42,388 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:42,389 [main:105] - GENERATED CALL = (list2.add(i)).equals("zgnym").and(false)
2021-03-11 12:28:42,389 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:28:42,389 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:28:42,482 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:42,483 [main:105] - GENERATED CALL = (list2.add(i)).xor(false)
2021-03-11 12:28:42,483 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:28:42,483 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:28:42,575 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:42,576 [main:105] - GENERATED CALL = (list2.add(i)).or(false)
2021-03-11 12:28:42,576 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:28:42,576 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:28:42,576 [main:105] - GENERATED CALL = (list2.add(i)).not()
2021-03-11 12:28:42,576 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:28:42,576 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:28:42,669 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:42,670 [main:105] - GENERATED CALL = (list2.add(i)).and(true)
2021-03-11 12:28:42,670 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:28:42,670 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:42,763 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:42,763 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:28:42,860 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:42,860 [main:105] - GENERATED CALL = (list2.add(i)).equals("gsvjm").equals("dnytk")
2021-03-11 12:28:42,860 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:28:42,860 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:42,952 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:42,952 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:28:43,045 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:43,046 [main:105] - GENERATED CALL = (list2.add(i)).equals("lmovm").xor(false)
2021-03-11 12:28:43,046 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:28:43,046 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:43,177 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:43,178 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:28:43,270 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:43,271 [main:105] - GENERATED CALL = (list2.add(i)).equals("sipcs").or(false)
2021-03-11 12:28:43,271 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:28:43,271 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:28:43,362 [main:105] - GENERATED CALL = (list2.add(i)).equals(null)
2021-03-11 12:28:43,362 [main:63] - replacement of list2 != (list1).filterNotNull() of type Boolean is (list2.add(i)).equals("gpvbq").not()
2021-03-11 12:28:43,455 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:43,455 [main:66] - Compilation checking started
2021-03-11 12:28:43,705 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113)) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((list2.add(i)).equals("gpvbq").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:43,709 [main:56] - replacing ((hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113), Boolean)
2021-03-11 12:28:43,709 [main:38] - replacing (hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113) Boolean
2021-03-11 12:28:43,710 [main:42] - Getting value of type Boolean
2021-03-11 12:28:43,810 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:43,811 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:28:43,811 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:43,812 [main:55] - randomType = UInt
2021-03-11 12:28:43,908 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:43,937 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@10518df7]
2021-03-11 12:28:43,937 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@143977f1]
2021-03-11 12:28:43,937 [main:66] - Generated call from random type = (296677903.toUInt()).toFloat().isFinite()
2021-03-11 12:28:43,937 [main:94] - GETTING Boolean from Boolean
2021-03-11 12:28:43,946 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:28:43,946 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:44,039 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:44,039 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:28:44,132 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:44,133 [main:105] - GENERATED CALL = (list1.add(i)).equals("bjvpi").or(true)
2021-03-11 12:28:44,133 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:28:44,133 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:28:44,226 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:44,227 [main:105] - GENERATED CALL = (list1.add(i)).or(true)
2021-03-11 12:28:44,227 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:28:44,227 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:44,320 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:44,320 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:28:44,411 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:44,412 [main:105] - GENERATED CALL = (list1.add(i)).equals("gsvjn").equals("akzbc")
2021-03-11 12:28:44,412 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:28:44,412 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:44,505 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:44,506 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:28:44,598 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:44,599 [main:105] - GENERATED CALL = (list1.add(i)).equals("ayvww").and(true)
2021-03-11 12:28:44,599 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:28:44,599 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:28:44,599 [main:105] - GENERATED CALL = (list1.add(i)).not()
2021-03-11 12:28:44,599 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:28:44,599 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:28:44,693 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:44,693 [main:105] - GENERATED CALL = (list1.add(i)).and(true)
2021-03-11 12:28:44,693 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:28:44,694 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:28:44,789 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:44,789 [main:105] - GENERATED CALL = (list1.add(i)).equals("wiefm")
2021-03-11 12:28:44,789 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:28:44,789 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:44,886 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:44,886 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:28:44,984 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:44,985 [main:105] - GENERATED CALL = (list1.add(i)).equals("vbghk").xor(true)
2021-03-11 12:28:44,985 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:28:44,985 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:28:45,078 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:45,079 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:28:45,171 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:45,171 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).equals("lgxdw")
2021-03-11 12:28:45,171 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:28:45,171 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:28:45,262 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:28:45,263 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:28:45,263 [main:105] - GENERATED CALL = (list1.add(i)).equals("tyfzy").not()
2021-03-11 12:28:45,263 [main:63] - replacement of (hashSetOf<String>()).size.compareTo(91) > (1u.toUByte()).toByte().rem(-113) of type Boolean is (list1.add(i)).not()
2021-03-11 12:28:45,356 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:45,356 [main:66] - Compilation checking started
2021-03-11 12:28:45,708 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in range1) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:45,714 [main:56] - replacing (range1, UIntRange)
2021-03-11 12:28:45,715 [main:38] - replacing range1 UIntRange
2021-03-11 12:28:45,715 [main:42] - Getting value of type UIntRange
2021-03-11 12:28:45,819 [main:302] - generating value of type = UIntRange false depth = 0
2021-03-11 12:28:45,918 [main:43] - GENERATING CALL OF fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-11 12:28:45,920 [main:61] - WITHOUT TYPE PARAMS = fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-11 12:28:46,242 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:28:46,243 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:28:46,244 [main:95] - GENERATED = UIntRange(649323266.toUInt(), 1934126003.toUInt())
2021-03-11 12:28:46,244 [main:46] - GENERATED VALUE OF TYPE UIntRange = UIntRange(649323266.toUInt(), 1934126003.toUInt())
2021-03-11 12:28:46,244 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:46,245 [main:55] - randomType = UInt
2021-03-11 12:28:46,336 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:46,362 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3de0725f]
2021-03-11 12:28:46,451 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:46,451 [main:66] - Generated call from random type = (90951816.toUInt()).until(1928530558.toUInt())
2021-03-11 12:28:46,452 [main:63] - replacement of range1 of type UIntRange is (90951816.toUInt()).until(1928530558.toUInt())
2021-03-11 12:28:46,542 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:46,542 [main:66] - Compilation checking started
2021-03-11 12:28:46,921 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in range3) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:46,925 [main:56] - replacing (range3, UIntRange)
2021-03-11 12:28:46,925 [main:38] - replacing range3 UIntRange
2021-03-11 12:28:46,925 [main:42] - Getting value of type UIntRange
2021-03-11 12:28:47,019 [main:302] - generating value of type = UIntRange false depth = 0
2021-03-11 12:28:47,117 [main:43] - GENERATING CALL OF fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-11 12:28:47,118 [main:61] - WITHOUT TYPE PARAMS = fun UIntRange(start: kotlin.UInt, endInclusive: kotlin.UInt): UIntRange = TODO()
2021-03-11 12:28:47,390 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:28:47,391 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:28:47,392 [main:95] - GENERATED = UIntRange(2010103393.toUInt(), 338736791.toUInt())
2021-03-11 12:28:47,392 [main:46] - GENERATED VALUE OF TYPE UIntRange = UIntRange(2010103393.toUInt(), 338736791.toUInt())
2021-03-11 12:28:47,393 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:47,394 [main:55] - randomType = UInt
2021-03-11 12:28:47,485 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:47,511 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@60ee9a6a]
2021-03-11 12:28:47,601 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:47,601 [main:66] - Generated call from random type = (2018629930.toUInt()).rangeTo(1863629228.toUInt())
2021-03-11 12:28:47,602 [main:94] - GETTING UIntRange from Boolean
2021-03-11 12:28:47,612 [main:94] - GETTING UIntRange from Int
2021-03-11 12:28:47,642 [main:94] - GETTING UIntRange from Boolean
2021-03-11 12:28:47,643 [main:94] - GETTING UIntRange from Boolean
2021-03-11 12:28:47,644 [main:94] - GETTING UIntRange from UByte
2021-03-11 12:28:47,666 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2], @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59fc7cfc]]
2021-03-11 12:28:47,666 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2]
2021-03-11 12:28:47,666 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59fc7cfc]
2021-03-11 12:28:47,756 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:28:47,757 [main:105] - GENERATED CALL = (1u.toUByte()).toUShort().rangeTo(6504.toUShort())
2021-03-11 12:28:47,757 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UByte.until(to: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3c62a22b]]
2021-03-11 12:28:47,757 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UByte.until(to: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3c62a22b]
2021-03-11 12:28:47,847 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:47,848 [main:105] - GENERATED CALL = (1u.toUByte()).until(91.toUByte())
2021-03-11 12:28:47,848 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UShort.until(to: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@30c5ce0a]]
2021-03-11 12:28:47,848 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1d6737c2]
2021-03-11 12:28:47,848 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UShort.until(to: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@30c5ce0a]
2021-03-11 12:28:47,938 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:28:47,939 [main:105] - GENERATED CALL = (1u.toUByte()).toUShort().until(2800.toUShort())
2021-03-11 12:28:47,939 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc], @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@22fbec8c]]
2021-03-11 12:28:47,939 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc]
2021-03-11 12:28:48,030 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:48,030 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@22fbec8c]
2021-03-11 12:28:48,122 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:48,122 [main:105] - GENERATED CALL = (1u.toUByte()).div(38.toUByte()).rangeTo(286417736.toUInt())
2021-03-11 12:28:48,122 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6547fe6b]]
2021-03-11 12:28:48,122 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6547fe6b]
2021-03-11 12:28:48,213 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:48,214 [main:105] - GENERATED CALL = (1u.toUByte()).rangeTo(83.toUByte())
2021-03-11 12:28:48,214 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3de0725f]]
2021-03-11 12:28:48,214 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@76974efc]
2021-03-11 12:28:48,304 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:48,305 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public infix fun kotlin.UInt.until(to: kotlin.UInt): kotlin.ranges.UIntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3de0725f]
2021-03-11 12:28:48,395 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:48,395 [main:105] - GENERATED CALL = (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())
2021-03-11 12:28:48,395 [main:63] - replacement of range3 of type UIntRange is (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())
2021-03-11 12:28:48,485 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:48,485 [main:66] - Compilation checking started
2021-03-11 12:28:48,844 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>()
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:48,848 [main:56] - replacing (5uL, ULong)
2021-03-11 12:28:48,848 [main:38] - replacing 5uL ULong
2021-03-11 12:28:48,848 [main:42] - Getting value of type ULong
2021-03-11 12:28:48,947 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:48,948 [main:46] - GENERATED VALUE OF TYPE ULong = 6535225568534703210.toULong()
2021-03-11 12:28:48,948 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:49,042 [main:55] - randomType = Byte
2021-03-11 12:28:49,167 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:28:49,199 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:28:49,199 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:28:49,199 [main:66] - Generated call from random type = (119).toInt().toULong()
2021-03-11 12:28:49,200 [main:94] - GETTING ULong from Boolean
2021-03-11 12:28:49,207 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]]
2021-03-11 12:28:49,207 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:28:49,300 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:28:49,301 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:28:49,301 [main:105] - GENERATED CALL = (list3.add(i)).compareTo(true).toULong()
2021-03-11 12:28:49,301 [main:63] - replacement of 5uL of type ULong is (119).toInt().toULong()
2021-03-11 12:28:49,393 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:49,397 [main:56] - replacing (listOf<UInt>((list4.size).toUInt(), 2u, (list3.size).toLong().toUInt(), (list1).get(55608535)), List<UInt>)
2021-03-11 12:28:49,397 [main:38] - replacing listOf<UInt>((list4.size).toUInt(), 2u, (list3.size).toLong().toUInt(), (list1).get(55608535)) List<UInt>
2021-03-11 12:28:49,397 [main:42] - Getting value of type List<UInt>
2021-03-11 12:28:49,489 [main:302] - generating value of type = List<UInt> false depth = 0
2021-03-11 12:28:49,586 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt>): List<UInt> = TODO()
2021-03-11 12:28:49,588 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt>): List<UInt> = TODO()
2021-03-11 12:28:49,773 [main:302] - generating value of type = Collection<UInt> false depth = 3
2021-03-11 12:28:49,870 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Collection<UInt> = TODO()
2021-03-11 12:28:49,871 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Collection<UInt> = TODO()
2021-03-11 12:28:49,962 [main:95] - GENERATED = hashSetOf<UInt>()
2021-03-11 12:28:49,962 [main:95] - GENERATED = ArrayDeque<UInt>(hashSetOf<UInt>())
2021-03-11 12:28:49,963 [main:46] - GENERATED VALUE OF TYPE List<UInt> = ArrayDeque<UInt>(hashSetOf<UInt>())
2021-03-11 12:28:49,963 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:49,964 [main:55] - randomType = Long
2021-03-11 12:28:50,056 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:28:50,089 [main:94] - GETTING List<UInt> from Boolean
2021-03-11 12:28:50,101 [main:94] - GETTING List<UInt> from ArrayList<UInt>
2021-03-11 12:28:50,209 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.toList(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6a736908]]
2021-03-11 12:28:50,209 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.toList(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6a736908]
2021-03-11 12:28:50,209 [main:105] - GENERATED CALL = (list3).toList()
2021-03-11 12:28:50,210 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.take(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7b9b0006]]
2021-03-11 12:28:50,210 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.take(n: kotlin.Int): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7b9b0006]
2021-03-11 12:28:50,302 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:50,303 [main:105] - GENERATED CALL = (list3).take(-368954429)
2021-03-11 12:28:50,303 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.reversed(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@701c5d4b]]
2021-03-11 12:28:50,303 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.reversed(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@701c5d4b]
2021-03-11 12:28:50,303 [main:105] - GENERATED CALL = (list3).reversed()
2021-03-11 12:28:50,303 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.minusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@48852718]]
2021-03-11 12:28:50,303 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.minusElement(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@48852718]
2021-03-11 12:28:50,395 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:28:50,492 [main:43] - GENERATING CALL OF fun <T> minOf(a: UShort, b: UShort, c: UShort): T = TODO()
2021-03-11 12:28:50,493 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UShort, b: UShort, c: UShort): T = TODO()
2021-03-11 12:28:50,584 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 12:28:50,584 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 12:28:50,585 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 12:28:50,586 [main:95] - GENERATED = minOf<UShort>(19570.toUShort(), 9428.toUShort(), 14847.toUShort())
2021-03-11 12:28:50,586 [main:105] - GENERATED CALL = (list3).minusElement(minOf<UShort>(19570.toUShort(), 9428.toUShort(), 14847.toUShort()))
2021-03-11 12:28:50,586 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.sortedWith(comparator: kotlin.Comparator<in T>): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30e24cc1]]
2021-03-11 12:28:50,586 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.sortedWith(comparator: kotlin.Comparator<in T>): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30e24cc1]
2021-03-11 12:28:50,678 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 12:28:50,774 [main:43] - GENERATING CALL OF fun <T> nullsLast(): Comparator<T> = TODO()
2021-03-11 12:28:50,775 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(): Comparator<T> = TODO()
2021-03-11 12:28:50,866 [main:95] - GENERATED = nullsLast<T>()
2021-03-11 12:28:50,866 [main:105] - GENERATED CALL = (list3).sortedWith(nullsLast<T>())
2021-03-11 12:28:50,867 [main:101] - Case = [public fun <T : kotlin.Any> kotlin.collections.Iterable<T?>.filterNotNull(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b254e2e]]
2021-03-11 12:28:50,867 [main:137] - GENERATING call of type public fun <T : kotlin.Any> kotlin.collections.Iterable<T?>.filterNotNull(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2b254e2e]
2021-03-11 12:28:50,867 [main:105] - GENERATED CALL = (list3).filterNotNull()
2021-03-11 12:28:50,867 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.dropWhile(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@68a02e00]]
2021-03-11 12:28:50,867 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.dropWhile(predicate: (T) -> kotlin.Boolean): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@68a02e00]
2021-03-11 12:28:50,959 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:28:50,960 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:28:50,961 [main:105] - GENERATED CALL = (list3).dropWhile({a: T -> false})
2021-03-11 12:28:50,961 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sorted(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@694fdebe]]
2021-03-11 12:28:50,961 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sorted(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@694fdebe]
2021-03-11 12:28:50,961 [main:105] - GENERATED CALL = (list3).sorted()
2021-03-11 12:28:50,961 [main:101] - Case = [public operator fun <T> kotlin.collections.Iterable<T>.minus(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@39da5b44]]
2021-03-11 12:28:50,961 [main:137] - GENERATING call of type public operator fun <T> kotlin.collections.Iterable<T>.minus(element: T): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@39da5b44]
2021-03-11 12:28:51,054 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:28:51,245 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: HashSet<String>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:28:51,246 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: HashSet<String>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:28:51,431 [main:302] - generating value of type = HashSet<String> false depth = 3
2021-03-11 12:28:51,527 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<String> = TODO()
2021-03-11 12:28:51,528 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<String> = TODO()
2021-03-11 12:28:51,806 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:28:51,807 [main:302] - generating value of type = Float true depth = 6
2021-03-11 12:28:51,807 [main:95] - GENERATED = HashSet<String>(913098947, 0.5448657f)
2021-03-11 12:28:51,807 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 12:28:51,808 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:28:51,808 [main:95] - GENERATED = requireNotNull<HashSet<String>>(HashSet<String>(913098947, 0.5448657f), { "kpxtw"})
2021-03-11 12:28:51,808 [main:105] - GENERATED CALL = (list3).minus(requireNotNull<HashSet<String>>(HashSet<String>(913098947, 0.5448657f), { "kpxtw"}))
2021-03-11 12:28:51,809 [main:101] - Case = [public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sortedDescending(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7e2e756f]]
2021-03-11 12:28:51,809 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.sortedDescending(): kotlin.collections.List<T> defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7e2e756f]
2021-03-11 12:28:51,809 [main:105] - GENERATED CALL = (list3).sortedDescending()
2021-03-11 12:28:51,809 [main:63] - replacement of listOf<UInt>((list4.size).toUInt(), 2u, (list3.size).toLong().toUInt(), (list1).get(55608535)) of type List<UInt> is (list3).minusElement(minOf<UShort>(19570.toUShort(), 9428.toUShort(), 14847.toUShort()))
2021-03-11 12:28:51,938 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:51,942 [main:56] - replacing (ArrayList<UInt>(), ArrayList<UInt>)
2021-03-11 12:28:51,942 [main:38] - replacing ArrayList<UInt>() ArrayList<UInt>
2021-03-11 12:28:51,942 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:28:52,035 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:28:52,131 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-11 12:28:52,133 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-11 12:28:52,224 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:28:52,225 [main:95] - GENERATED = arrayListOf<UInt>(1179380481.toUInt())
2021-03-11 12:28:52,225 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = arrayListOf<UInt>(1179380481.toUInt())
2021-03-11 12:28:52,225 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:52,226 [main:55] - randomType = UByte
2021-03-11 12:28:52,318 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:52,347 [main:94] - GETTING ArrayList<UInt> from ArrayList<ULong>
2021-03-11 12:28:52,456 [main:63] - replacement of ArrayList<UInt>() of type ArrayList<UInt> is list4
2021-03-11 12:28:52,548 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:28:52,549 [main:66] - Compilation checking started
2021-03-11 12:28:52,792 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = list4
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:52,796 [main:56] - replacing (2u, UInt)
2021-03-11 12:28:52,796 [main:38] - replacing 2u UInt
2021-03-11 12:28:52,797 [main:42] - Getting value of type UInt
2021-03-11 12:28:52,891 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:52,892 [main:46] - GENERATED VALUE OF TYPE UInt = 1135567304.toUInt()
2021-03-11 12:28:52,892 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:52,894 [main:55] - randomType = ULong
2021-03-11 12:28:52,987 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:28:53,010 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@49dc6ecb]
2021-03-11 12:28:53,010 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@616f937f]
2021-03-11 12:28:53,010 [main:66] - Generated call from random type = (1605882967008995042.toULong()).toDouble().toUInt()
2021-03-11 12:28:53,011 [main:94] - GETTING UInt from ArrayList<UInt>
2021-03-11 12:28:53,119 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.random(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:28:53,119 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.random(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:28:53,120 [main:105] - GENERATED CALL = (list2).random()
2021-03-11 12:28:53,120 [main:101] - Case = [public open fun removeAt(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@27ce7bd]]
2021-03-11 12:28:53,120 [main:137] - GENERATING call of type public open fun removeAt(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@27ce7bd]
2021-03-11 12:28:53,212 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:53,213 [main:105] - GENERATED CALL = (list2).removeAt(-1121320596)
2021-03-11 12:28:53,213 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@38fbc3b1], public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@4f6e60d5]]
2021-03-11 12:28:53,213 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@38fbc3b1]
2021-03-11 12:28:53,306 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:53,399 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:53,400 [main:137] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@4f6e60d5]
2021-03-11 12:28:53,494 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:53,495 [main:105] - GENERATED CALL = (list2).subList(-741767437, 1281616326).get(-1246029439)
2021-03-11 12:28:53,495 [main:101] - Case = [@kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7b3521db]]
2021-03-11 12:28:53,495 [main:137] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7b3521db]
2021-03-11 12:28:53,588 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-11 12:28:53,589 [main:302] - generating value of type = R false depth = 1
2021-03-11 12:28:53,877 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Boolean, block: T.()->HashMap<Short, Int>): R = TODO()
2021-03-11 12:28:53,878 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Boolean, block: T.()->HashMap<Short, Int>): R = TODO()
2021-03-11 12:28:54,066 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:28:54,067 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, HashMap<Short, Int>> false depth = 4
2021-03-11 12:28:54,068 [main:302] - generating value of type = HashMap<Short, Int> false depth = 5
2021-03-11 12:28:54,166 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Short, Int>): HashMap<Short, Int> = TODO()
2021-03-11 12:28:54,167 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Short, Int>): HashMap<Short, Int> = TODO()
2021-03-11 12:28:54,258 [main:302] - generating value of type = Pair<Short, Int> false depth = 8
2021-03-11 12:28:54,355 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Short, second: Int): Pair<Short, Int> = TODO()
2021-03-11 12:28:54,356 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Short, second: Int): Pair<Short, Int> = TODO()
2021-03-11 12:28:54,448 [main:302] - generating value of type = Short true depth = 11
2021-03-11 12:28:54,449 [main:302] - generating value of type = Int true depth = 11
2021-03-11 12:28:54,449 [main:95] - GENERATED = Pair<Short, Int>(1361, -1633019004)
2021-03-11 12:28:54,450 [main:95] - GENERATED = hashMapOf<Short, Int>(Pair<Short, Int>(1361, -1633019004))
2021-03-11 12:28:54,450 [main:95] - GENERATED = with<Boolean, HashMap<Short, Int>>(true, { hashMapOf<Short, Int>(Pair<Short, Int>(1361, -1633019004))})
2021-03-11 12:28:54,450 [main:105] - GENERATED CALL = (list2).minByOrNull({a: T -> with<Boolean, HashMap<Short, Int>>(true, { hashMapOf<Short, Int>(Pair<Short, Int>(1361, -1633019004))})})
2021-03-11 12:28:54,450 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62dd0a66], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceAtLeast(minimumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5eb82ec9]]
2021-03-11 12:28:54,450 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62dd0a66]
2021-03-11 12:28:54,544 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:54,545 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceAtLeast(minimumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5eb82ec9]
2021-03-11 12:28:54,639 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:54,640 [main:105] - GENERATED CALL = (list2).get(-755178208).coerceAtLeast(611833838.toUInt())
2021-03-11 12:28:54,640 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62dd0a66], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceIn(minimumValue: kotlin.UInt, maximumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@10d99dfa]]
2021-03-11 12:28:54,640 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@62dd0a66]
2021-03-11 12:28:54,733 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:54,734 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.coerceIn(minimumValue: kotlin.UInt, maximumValue: kotlin.UInt): kotlin.UInt defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@10d99dfa]
2021-03-11 12:28:54,827 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:54,960 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:28:54,961 [main:105] - GENERATED CALL = (list2).get(-5740681).coerceIn(1399487171.toUInt(), 264238293.toUInt())
2021-03-11 12:28:54,961 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@756b424a]]
2021-03-11 12:28:54,961 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@756b424a]
2021-03-11 12:28:55,054 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:55,055 [main:105] - GENERATED CALL = (list2).elementAt(-794341830)
2021-03-11 12:28:55,055 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeFirst(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4c57e410]]
2021-03-11 12:28:55,055 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeFirst(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4c57e410]
2021-03-11 12:28:55,055 [main:105] - GENERATED CALL = (list2).removeFirst()
2021-03-11 12:28:55,055 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@210e804b]]
2021-03-11 12:28:55,055 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@210e804b]
2021-03-11 12:28:55,055 [main:105] - GENERATED CALL = (list2).single()
2021-03-11 12:28:55,055 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d20b385], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b6e75f1]]
2021-03-11 12:28:55,056 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d20b385]
2021-03-11 12:28:55,056 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b6e75f1]
2021-03-11 12:28:55,149 [main:302] - generating value of type = Function1<T, UInt> false depth = 0
2021-03-11 12:28:55,150 [main:302] - generating value of type = UInt true depth = 1
2021-03-11 12:28:55,151 [main:105] - GENERATED CALL = (list2).toArray().sumOf({a: T -> 867632915.toUInt()})
2021-03-11 12:28:55,151 [main:63] - replacement of 2u of type UInt is (list2).minByOrNull({a: T -> with<Boolean, HashMap<Short, Int>>(true, { hashMapOf<Short, Int>(Pair<Short, Int>(1361, -1633019004))})})
2021-03-11 12:28:55,243 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:28:55,247 [main:56] - replacing (ArrayList<UInt>(), ArrayList<UInt>)
2021-03-11 12:28:55,248 [main:38] - replacing ArrayList<UInt>() ArrayList<UInt>
2021-03-11 12:28:55,248 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:28:55,339 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:28:55,434 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<UInt> = TODO()
2021-03-11 12:28:55,435 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<UInt> = TODO()
2021-03-11 12:28:55,618 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:28:55,619 [main:95] - GENERATED = ArrayList<UInt>(-1021274945)
2021-03-11 12:28:55,619 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = ArrayList<UInt>(-1021274945)
2021-03-11 12:28:55,619 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:55,621 [main:55] - randomType = UByte
2021-03-11 12:28:55,714 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:28:55,743 [main:94] - GETTING ArrayList<UInt> from UShort
2021-03-11 12:28:55,764 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:28:55,872 [main:63] - replacement of ArrayList<UInt>() of type ArrayList<UInt> is ArrayList<UInt>(-1021274945)
2021-03-11 12:28:55,966 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:28:55,966 [main:66] - Compilation checking started
2021-03-11 12:28:56,331 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:56,336 [main:56] - replacing (listOf<UInt>((13280).toShort().toUInt(), ("hntws").toUInt(), (list4).size.toUInt(), 993170678.toUInt()), List<UInt>)
2021-03-11 12:28:56,336 [main:38] - replacing listOf<UInt>((13280).toShort().toUInt(), ("hntws").toUInt(), (list4).size.toUInt(), 993170678.toUInt()) List<UInt>
2021-03-11 12:28:56,336 [main:42] - Getting value of type List<UInt>
2021-03-11 12:28:56,433 [main:302] - generating value of type = List<UInt> false depth = 0
2021-03-11 12:28:56,535 [main:43] - GENERATING CALL OF fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->UInt): List<UInt> = TODO()
2021-03-11 12:28:56,536 [main:61] - WITHOUT TYPE PARAMS = fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->UInt): List<UInt> = TODO()
2021-03-11 12:28:56,815 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:28:56,816 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, UInt> false depth = 3
2021-03-11 12:28:56,816 [main:302] - generating value of type = UInt true depth = 4
2021-03-11 12:28:56,817 [main:95] - GENERATED = MutableList<UInt>(-848914622, {a: Int -> 1577869433.toUInt()})
2021-03-11 12:28:56,817 [main:46] - GENERATED VALUE OF TYPE List<UInt> = MutableList<UInt>(-848914622, {a: Int -> 1577869433.toUInt()})
2021-03-11 12:28:56,817 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:57,108 [main:55] - randomType = Triple<UByte, Double, Array<LinkedHashMap<Long, Double>>>
2021-03-11 12:28:57,203 [main:302] - generating value of type = Triple<UByte, Double, Array<LinkedHashMap<Long, Double>>> false depth = 0
2021-03-11 12:28:57,301 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UByte, second: Double, third: Array<LinkedHashMap<Long, Double>>): Triple<UByte, Double, Array<LinkedHashMap<Long, Double>>> = TODO()
2021-03-11 12:28:57,302 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UByte, second: Double, third: Array<LinkedHashMap<Long, Double>>): Triple<UByte, Double, Array<LinkedHashMap<Long, Double>>> = TODO()
2021-03-11 12:28:57,395 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 12:28:57,396 [main:302] - generating value of type = Double true depth = 3
2021-03-11 12:28:57,396 [main:302] - generating value of type = Array<LinkedHashMap<Long, Double>> false depth = 3
2021-03-11 12:28:57,493 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<LkedHashMap<Long, Double>> = TODO()
2021-03-11 12:28:57,495 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<LkedHashMap<Long, Double>> = TODO()
2021-03-11 12:28:57,586 [main:95] - GENERATED = emptyArray<LinkedHashMap<Long, Double>>()
2021-03-11 12:28:57,586 [main:95] - GENERATED = Triple<UByte, Double, Array<LinkedHashMap<Long, Double>>>(73.toUByte(), 0.21246489363935017, emptyArray<LinkedHashMap<Long, Double>>())
2021-03-11 12:28:57,608 [main:94] - GETTING List<UInt> from ArrayList<ULong>
2021-03-11 12:28:57,717 [main:63] - replacement of listOf<UInt>((13280).toShort().toUInt(), ("hntws").toUInt(), (list4).size.toUInt(), 993170678.toUInt()) of type List<UInt> is list4
2021-03-11 12:28:57,810 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:28:57,814 [main:56] - replacing (ArrayList<UInt>(), ArrayList<UInt>)
2021-03-11 12:28:57,815 [main:38] - replacing ArrayList<UInt>() ArrayList<UInt>
2021-03-11 12:28:57,815 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:28:57,944 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:28:58,043 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:28:58,044 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:28:58,139 [main:95] - GENERATED = arrayListOf<UInt>()
2021-03-11 12:28:58,139 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = arrayListOf<UInt>()
2021-03-11 12:28:58,139 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:58,236 [main:55] - randomType = ArrayList<Float>
2021-03-11 12:28:58,328 [main:302] - generating value of type = ArrayList<Float> false depth = 0
2021-03-11 12:28:58,424 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Float> = TODO()
2021-03-11 12:28:58,425 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Float> = TODO()
2021-03-11 12:28:58,516 [main:95] - GENERATED = arrayListOf<Float>()
2021-03-11 12:28:58,635 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:28:58,666 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:28:58,778 [main:63] - replacement of ArrayList<UInt>() of type ArrayList<UInt> is list2
2021-03-11 12:28:58,871 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:28:58,871 [main:66] - Compilation checking started
2021-03-11 12:28:59,106 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = list2
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if (list2 != (list1).filterNotNull()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:28:59,110 [main:56] - replacing (list1, ArrayList<UInt>)
2021-03-11 12:28:59,110 [main:38] - replacing list1 ArrayList<UInt>
2021-03-11 12:28:59,110 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:28:59,204 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:28:59,301 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-11 12:28:59,302 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-11 12:28:59,394 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:28:59,395 [main:95] - GENERATED = arrayListOf<UInt>(1444889944.toUInt())
2021-03-11 12:28:59,395 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = arrayListOf<UInt>(1444889944.toUInt())
2021-03-11 12:28:59,395 [main:49] - GENERATED IS CALL =true
2021-03-11 12:28:59,396 [main:55] - randomType = Char
2021-03-11 12:28:59,490 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:28:59,511 [main:94] - GETTING ArrayList<UInt> from UShort
2021-03-11 12:28:59,533 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:28:59,640 [main:63] - replacement of list1 of type ArrayList<UInt> is list2
2021-03-11 12:28:59,733 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:28:59,737 [main:56] - replacing (list4.size, Int)
2021-03-11 12:28:59,737 [main:38] - replacing list4.size Int
2021-03-11 12:28:59,737 [main:42] - Getting value of type Int
2021-03-11 12:28:59,830 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:28:59,830 [main:46] - GENERATED VALUE OF TYPE Int = 1532479344
2021-03-11 12:28:59,830 [main:49] - GENERATED IS CALL =false
2021-03-11 12:28:59,832 [main:55] - randomType = String
2021-03-11 12:28:59,925 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:28:59,943 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@63a1df49]
2021-03-11 12:29:00,035 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:29:00,036 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@757023a6]
2021-03-11 12:29:00,128 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:00,129 [main:66] - Generated call from random type = ("tmtpm").compareTo("ntxpp").rotateLeft(1380017533)
2021-03-11 12:29:00,129 [main:63] - replacement of list4.size of type Int is ("tmtpm").compareTo("ntxpp").rotateLeft(1380017533)
2021-03-11 12:29:00,222 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:00,227 [main:56] - replacing (5u, UInt)
2021-03-11 12:29:00,227 [main:38] - replacing 5u UInt
2021-03-11 12:29:00,227 [main:42] - Getting value of type UInt
2021-03-11 12:29:00,321 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:29:00,321 [main:46] - GENERATED VALUE OF TYPE UInt = 1739231555.toUInt()
2021-03-11 12:29:00,321 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:00,323 [main:55] - randomType = ULong
2021-03-11 12:29:00,416 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:29:00,442 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5cc101f7]
2021-03-11 12:29:00,442 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@143210b3]
2021-03-11 12:29:00,442 [main:66] - Generated call from random type = (3068075058435617093.toULong()).toUInt().toUInt()
2021-03-11 12:29:00,442 [main:63] - replacement of 5u of type UInt is (3068075058435617093.toULong()).toUInt().toUInt()
2021-03-11 12:29:00,535 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:00,539 [main:56] - replacing (1u, UInt)
2021-03-11 12:29:00,539 [main:38] - replacing 1u UInt
2021-03-11 12:29:00,539 [main:42] - Getting value of type UInt
2021-03-11 12:29:00,631 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:29:00,632 [main:46] - GENERATED VALUE OF TYPE UInt = 1000920659.toUInt()
2021-03-11 12:29:00,632 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:00,633 [main:55] - randomType = Long
2021-03-11 12:29:00,726 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:29:00,759 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:29:00,759 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:29:00,759 [main:66] - Generated call from random type = (-682172414997446677).toInt().toUInt()
2021-03-11 12:29:00,760 [main:94] - GETTING UInt from ArrayList<ULong>
2021-03-11 12:29:00,905 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96], @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.Array<out kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e224d5e]]
2021-03-11 12:29:00,905 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96]
2021-03-11 12:29:00,906 [main:137] - GENERATING call of type @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.Array<out kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e224d5e]
2021-03-11 12:29:00,906 [main:105] - GENERATED CALL = (list4).toArray().sum()
2021-03-11 12:29:00,906 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b6e75f1]]
2021-03-11 12:29:00,906 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@725c1d96]
2021-03-11 12:29:00,906 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b6e75f1]
2021-03-11 12:29:00,999 [main:302] - generating value of type = Function1<T, UInt> false depth = 0
2021-03-11 12:29:01,000 [main:302] - generating value of type = UInt true depth = 1
2021-03-11 12:29:01,001 [main:105] - GENERATED CALL = (list4).toArray().sumOf({a: T -> 1943329147.toUInt()})
2021-03-11 12:29:01,001 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4fdad1f9], @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@74af849d]]
2021-03-11 12:29:01,001 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4fdad1f9]
2021-03-11 12:29:01,094 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:01,095 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@74af849d]
2021-03-11 12:29:01,095 [main:105] - GENERATED CALL = (list4).get(1992973093).toUInt()
2021-03-11 12:29:01,095 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@64dbb059], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:29:01,095 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:29:01,095 [main:105] - GENERATED CALL = (list4).modCount.toUInt()
2021-03-11 12:29:01,095 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@3df7bf1e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]]
2021-03-11 12:29:01,095 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toUInt(): kotlin.UInt defined in kotlin[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 12:29:01,095 [main:105] - GENERATED CALL = (list4).size.toUInt()
2021-03-11 12:29:01,095 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79303624]]
2021-03-11 12:29:01,095 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.sumOf(selector: (T) -> kotlin.UInt): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@79303624]
2021-03-11 12:29:01,188 [main:302] - generating value of type = Function1<T, UInt> false depth = 0
2021-03-11 12:29:01,189 [main:302] - generating value of type = UInt true depth = 1
2021-03-11 12:29:01,189 [main:105] - GENERATED CALL = (list4).sumOf({a: T -> 1562822774.toUInt()})
2021-03-11 12:29:01,190 [main:101] - Case = [@kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74352685]]
2021-03-11 12:29:01,190 [main:137] - GENERATING call of type @kotlin.jvm.JvmName @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.collections.Iterable<kotlin.UByte>.sum(): kotlin.UInt defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@74352685]
2021-03-11 12:29:01,190 [main:105] - GENERATED CALL = (list4).sum()
2021-03-11 12:29:01,190 [main:63] - replacement of 1u of type UInt is (list4).toArray().sum()
2021-03-11 12:29:01,283 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:01,288 [main:56] - replacing (list2 != (list1).filterNotNull(), Boolean)
2021-03-11 12:29:01,288 [main:38] - replacing list2 != (list1).filterNotNull() Boolean
2021-03-11 12:29:01,288 [main:42] - Getting value of type Boolean
2021-03-11 12:29:01,380 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:01,380 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:29:01,380 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:01,568 [main:55] - randomType = List<String?>
2021-03-11 12:29:01,569 [main:94] - GETTING Boolean from UShort
2021-03-11 12:29:01,591 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:29:01,591 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e]
2021-03-11 12:29:01,683 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:01,684 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:29:01,684 [main:105] - GENERATED CALL = (1u.toUShort()).equals("lqook").not()
2021-03-11 12:29:01,684 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@289eda4b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3f008d2d]]
2021-03-11 12:29:01,684 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@289eda4b]
2021-03-11 12:29:01,776 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:29:01,777 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3f008d2d]
2021-03-11 12:29:01,869 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:01,870 [main:105] - GENERATED CALL = (1u.toUShort()).div(70.toUByte()).equals("veuoe")
2021-03-11 12:29:01,870 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2cdcf975], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@de42c9e]]
2021-03-11 12:29:01,870 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2cdcf975]
2021-03-11 12:29:01,870 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@de42c9e]
2021-03-11 12:29:01,963 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:01,964 [main:105] - GENERATED CALL = (1u.toUShort()).toShort().equals("wpacb")
2021-03-11 12:29:01,964 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59fc7cfc], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@398f03f]]
2021-03-11 12:29:01,964 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59fc7cfc]
2021-03-11 12:29:02,056 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:29:02,057 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.UIntRange[DeserializedSimpleFunctionDescriptor@398f03f]
2021-03-11 12:29:02,057 [main:105] - GENERATED CALL = (1u.toUShort()).rangeTo(14219.toUShort()).isEmpty()
2021-03-11 12:29:02,057 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@14fafa60], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:29:02,057 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@14fafa60]
2021-03-11 12:29:02,152 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:29:02,153 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:29:02,246 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:02,247 [main:105] - GENERATED CALL = (1u.toUShort()).compareTo(47.toUByte()).equals("gobdg")
2021-03-11 12:29:02,247 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@68801771], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3d982f4c]]
2021-03-11 12:29:02,247 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@68801771]
2021-03-11 12:29:02,247 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3d982f4c]
2021-03-11 12:29:02,341 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:02,341 [main:105] - GENERATED CALL = (1u.toUShort()).toUByte().equals("ayfqi")
2021-03-11 12:29:02,341 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:29:02,341 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e]
2021-03-11 12:29:02,435 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:02,436 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:29:02,528 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:02,529 [main:105] - GENERATED CALL = (1u.toUShort()).equals("ltftr").xor(true)
2021-03-11 12:29:02,529 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:29:02,529 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e]
2021-03-11 12:29:02,624 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:02,624 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:29:02,719 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:02,719 [main:105] - GENERATED CALL = (1u.toUShort()).equals("wuelx").or(true)
2021-03-11 12:29:02,719 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:29:02,720 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4507209e]
2021-03-11 12:29:02,814 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:02,814 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:29:02,909 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:02,910 [main:105] - GENERATED CALL = (1u.toUShort()).equals("pbswp").and(false)
2021-03-11 12:29:02,910 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@47b7da3f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]]
2021-03-11 12:29:02,910 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@47b7da3f]
2021-03-11 12:29:02,910 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]
2021-03-11 12:29:03,004 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:03,004 [main:105] - GENERATED CALL = (1u.toUShort()).toByte().equals("koanc")
2021-03-11 12:29:03,004 [main:63] - replacement of list2 != (list1).filterNotNull() of type Boolean is (1u.toUShort()).equals("lqook").not()
2021-03-11 12:29:03,098 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:03,098 [main:66] - Compilation checking started
2021-03-11 12:29:03,454 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:03,460 [main:56] - replacing (ArrayList<UInt>(), ArrayList<UInt>)
2021-03-11 12:29:03,461 [main:38] - replacing ArrayList<UInt>() ArrayList<UInt>
2021-03-11 12:29:03,461 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:29:03,553 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:29:03,649 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:29:03,650 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:29:03,740 [main:95] - GENERATED = arrayListOf<UInt>()
2021-03-11 12:29:03,740 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = arrayListOf<UInt>()
2021-03-11 12:29:03,740 [main:49] - GENERATED IS CALL =true
2021-03-11 12:29:03,833 [main:55] - randomType = UShort?
2021-03-11 12:29:03,970 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:29:04,002 [main:94] - GETTING ArrayList<UInt> from Boolean
2021-03-11 12:29:04,015 [main:94] - GETTING ArrayList<UInt> from UByte
2021-03-11 12:29:04,040 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:29:04,070 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:29:04,177 [main:63] - replacement of ArrayList<UInt>() of type ArrayList<UInt> is list3
2021-03-11 12:29:04,270 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:29:04,270 [main:66] - Compilation checking started
2021-03-11 12:29:04,510 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = list3
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:04,515 [main:56] - replacing (1uL, ULong)
2021-03-11 12:29:04,515 [main:38] - replacing 1uL ULong
2021-03-11 12:29:04,515 [main:42] - Getting value of type ULong
2021-03-11 12:29:04,607 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:29:04,608 [main:46] - GENERATED VALUE OF TYPE ULong = 8743852113585995841.toULong()
2021-03-11 12:29:04,608 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:04,609 [main:55] - randomType = Long
2021-03-11 12:29:04,702 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:29:04,732 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:29:04,732 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]
2021-03-11 12:29:04,733 [main:66] - Generated call from random type = (-2798716260286287144).toDouble().toULong()
2021-03-11 12:29:04,734 [main:94] - GETTING ULong from Int
2021-03-11 12:29:04,766 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]]
2021-03-11 12:29:04,766 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:29:04,858 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:29:04,858 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]
2021-03-11 12:29:04,859 [main:105] - GENERATED CALL = (list1.size).div(0.4011980360259755).toULong()
2021-03-11 12:29:04,859 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5f1f24e3]]
2021-03-11 12:29:04,859 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:29:04,859 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Long.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5f1f24e3]
2021-03-11 12:29:04,859 [main:105] - GENERATED CALL = (list1.size).toLong().toULong()
2021-03-11 12:29:04,859 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]]
2021-03-11 12:29:04,859 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:29:04,859 [main:105] - GENERATED CALL = (list1.size).toULong()
2021-03-11 12:29:04,859 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]]
2021-03-11 12:29:04,859 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:29:04,859 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Double.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@d4c88aa]
2021-03-11 12:29:04,859 [main:105] - GENERATED CALL = (list1.size).toDouble().toULong()
2021-03-11 12:29:04,859 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@36ffee72]]
2021-03-11 12:29:04,859 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:29:04,859 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Short.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@36ffee72]
2021-03-11 12:29:04,860 [main:105] - GENERATED CALL = (list1.size).toShort().toULong()
2021-03-11 12:29:04,860 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@e31b846]]
2021-03-11 12:29:04,860 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:29:04,860 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@e31b846]
2021-03-11 12:29:04,860 [main:105] - GENERATED CALL = (list1.size).toByte().toULong()
2021-03-11 12:29:04,860 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]]
2021-03-11 12:29:04,860 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:29:04,952 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:04,953 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:29:04,953 [main:105] - GENERATED CALL = (list1.size).compareTo(-787820912).toULong()
2021-03-11 12:29:04,953 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]]
2021-03-11 12:29:04,953 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:29:04,953 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Int.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@5cef44b0]
2021-03-11 12:29:04,953 [main:105] - GENERATED CALL = (list1.size).toInt().toULong()
2021-03-11 12:29:04,953 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@67b166a0]]
2021-03-11 12:29:04,953 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:29:04,953 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.Float.toULong(): kotlin.ULong defined in kotlin[DeserializedSimpleFunctionDescriptor@67b166a0]
2021-03-11 12:29:04,953 [main:105] - GENERATED CALL = (list1.size).toFloat().toULong()
2021-03-11 12:29:04,953 [main:63] - replacement of 1uL of type ULong is (list1.size).toByte().toULong()
2021-03-11 12:29:05,045 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:05,049 [main:56] - replacing (ArrayList<UInt>(), ArrayList<UInt>)
2021-03-11 12:29:05,050 [main:38] - replacing ArrayList<UInt>() ArrayList<UInt>
2021-03-11 12:29:05,050 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:29:05,141 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:29:05,237 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:29:05,238 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UInt> = TODO()
2021-03-11 12:29:05,328 [main:95] - GENERATED = arrayListOf<UInt>()
2021-03-11 12:29:05,328 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = arrayListOf<UInt>()
2021-03-11 12:29:05,328 [main:49] - GENERATED IS CALL =true
2021-03-11 12:29:05,329 [main:55] - randomType = UByte
2021-03-11 12:29:05,421 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:29:05,450 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:29:05,480 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:29:05,589 [main:63] - replacement of ArrayList<UInt>() of type ArrayList<UInt> is list1
2021-03-11 12:29:05,681 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:29:05,681 [main:66] - Compilation checking started
2021-03-11 12:29:05,919 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = list1
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(-1808367125).rangeTo(549677369.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:05,924 [main:56] - replacing (ArrayList<UInt>(), ArrayList<UInt>)
2021-03-11 12:29:05,924 [main:38] - replacing ArrayList<UInt>() ArrayList<UInt>
2021-03-11 12:29:05,924 [main:42] - Getting value of type ArrayList<UInt>
2021-03-11 12:29:06,017 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-11 12:29:06,114 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<UInt> = TODO()
2021-03-11 12:29:06,116 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<UInt> = TODO()
2021-03-11 12:29:06,206 [main:95] - GENERATED = ArrayList<UInt>()
2021-03-11 12:29:06,206 [main:46] - GENERATED VALUE OF TYPE ArrayList<UInt> = ArrayList<UInt>()
2021-03-11 12:29:06,206 [main:49] - GENERATED IS CALL =true
2021-03-11 12:29:06,300 [main:55] - randomType = String?
2021-03-11 12:29:06,392 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:29:06,415 [main:94] - GETTING ArrayList<UInt> from UByte
2021-03-11 12:29:06,440 [main:94] - GETTING ArrayList<UInt> from Int
2021-03-11 12:29:06,470 [main:94] - GETTING ArrayList<UInt> from ArrayList<UInt>
2021-03-11 12:29:06,578 [main:63] - replacement of ArrayList<UInt>() of type ArrayList<UInt> is ArrayList<UInt>()
2021-03-11 12:29:06,670 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:29:06,769 [main:90] - TRYING TO REPLACE CONSTANT 1u
2021-03-11 12:29:06,862 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:06,862 [main:90] - TRYING TO REPLACE CONSTANT 549677369
2021-03-11 12:29:06,994 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:06,995 [main:66] - Compilation checking started
2021-03-11 12:29:07,359 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(-1808367125).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:07,360 [main:90] - TRYING TO REPLACE CONSTANT 1808367125
2021-03-11 12:29:07,457 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:07,458 [main:66] - Compilation checking started
2021-03-11 12:29:07,829 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(6955.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:07,829 [main:90] - TRYING TO REPLACE CONSTANT 1u
2021-03-11 12:29:07,950 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:07,950 [main:90] - TRYING TO REPLACE CONSTANT 6955
2021-03-11 12:29:08,042 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:08,043 [main:66] - Compilation checking started
2021-03-11 12:29:08,382 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(2102942524297010081.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:08,382 [main:90] - TRYING TO REPLACE CONSTANT 2102942524297010081
2021-03-11 12:29:08,476 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:08,476 [main:66] - Compilation checking started
2021-03-11 12:29:08,831 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 4389962157096655807.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:08,832 [main:90] - TRYING TO REPLACE CONSTANT 4389962157096655807
2021-03-11 12:29:08,943 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:08,944 [main:66] - Compilation checking started
2021-03-11 12:29:09,307 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1u.toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:09,308 [main:90] - TRYING TO REPLACE CONSTANT null
2021-03-11 12:29:09,404 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-11 12:29:09,404 [main:66] - Compilation checking started
2021-03-11 12:29:09,748 [main:90] - TRYING TO REPLACE CONSTANT 1u
2021-03-11 12:29:09,854 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:09,854 [main:66] - Compilation checking started
2021-03-11 12:29:10,210 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div(0.2782956947671227).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:10,210 [main:90] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:29:10,308 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:29:10,308 [main:90] - TRYING TO REPLACE CONSTANT 0.2782956947671227
2021-03-11 12:29:10,400 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:10,400 [main:66] - Compilation checking started
2021-03-11 12:29:10,788 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (-24401).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:10,788 [main:90] - TRYING TO REPLACE CONSTANT 24401
2021-03-11 12:29:10,885 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:10,885 [main:66] - Compilation checking started
2021-03-11 12:29:11,229 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(1281606996)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:11,230 [main:90] - TRYING TO REPLACE CONSTANT 1281606996
2021-03-11 12:29:11,324 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 12:29:11,324 [main:66] - Compilation checking started
2021-03-11 12:29:11,656 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = (1u.toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:11,656 [main:90] - TRYING TO REPLACE CONSTANT 1u
2021-03-11 12:29:11,751 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:11,751 [main:66] - Compilation checking started
2021-03-11 12:29:12,107 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(1909048582091010637.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:12,107 [main:90] - TRYING TO REPLACE CONSTANT 7994125356509667838
2021-03-11 12:29:12,202 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:12,202 [main:66] - Compilation checking started
2021-03-11 12:29:12,542 [main:90] - TRYING TO REPLACE CONSTANT 1909048582091010637
2021-03-11 12:29:12,635 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:12,635 [main:66] - Compilation checking started
2021-03-11 12:29:12,996 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:12,996 [main:90] - TRYING TO REPLACE CONSTANT 1785541927
2021-03-11 12:29:13,091 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 12:29:13,092 [main:66] - Compilation checking started
2021-03-11 12:29:13,360 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(-2012801863.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:13,361 [main:90] - TRYING TO REPLACE CONSTANT 683394101
2021-03-11 12:29:13,455 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:13,455 [main:66] - Compilation checking started
2021-03-11 12:29:13,695 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(list2.size.toUInt(), 732187662.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:13,695 [main:90] - TRYING TO REPLACE CONSTANT 732187662
2021-03-11 12:29:13,792 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:13,792 [main:66] - Compilation checking started
2021-03-11 12:29:14,193 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((-2012801863).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:14,193 [main:90] - TRYING TO REPLACE CONSTANT 2012801863
2021-03-11 12:29:14,287 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:14,288 [main:66] - Compilation checking started
2021-03-11 12:29:14,631 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div(0.10139677680474668).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:14,631 [main:90] - TRYING TO REPLACE CONSTANT 0.10139677680474668
2021-03-11 12:29:14,726 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:14,726 [main:66] - Compilation checking started
2021-03-11 12:29:15,068 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(88.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:15,068 [main:90] - TRYING TO REPLACE CONSTANT 1u
2021-03-11 12:29:15,163 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:15,163 [main:90] - TRYING TO REPLACE CONSTANT 88
2021-03-11 12:29:15,257 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:15,258 [main:66] - Compilation checking started
2021-03-11 12:29:15,617 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(722762397).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:15,617 [main:90] - TRYING TO REPLACE CONSTANT 722762397
2021-03-11 12:29:15,709 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:15,709 [main:66] - Compilation checking started
2021-03-11 12:29:16,043 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1787439505.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:16,043 [main:90] - TRYING TO REPLACE CONSTANT 1787439505
2021-03-11 12:29:16,138 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:16,138 [main:66] - Compilation checking started
2021-03-11 12:29:16,484 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1443659373.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:16,484 [main:90] - TRYING TO REPLACE CONSTANT 1996069306
2021-03-11 12:29:16,578 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 12:29:16,578 [main:66] - Compilation checking started
2021-03-11 12:29:16,812 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(630463879)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(-2012801863.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1443659373.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:16,812 [main:90] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:29:16,908 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:29:16,908 [main:90] - TRYING TO REPLACE CONSTANT 630463879
2021-03-11 12:29:17,001 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:17,002 [main:66] - Compilation checking started
2021-03-11 12:29:17,337 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), false))?.first.toString(1281606996)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1443659373.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:17,337 [main:90] - TRYING TO REPLACE CONSTANT false
2021-03-11 12:29:17,463 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 12:29:17,463 [main:66] - Compilation checking started
2021-03-11 12:29:17,705 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(2039448273.toUInt(), 126.toUByte(), equals("lqook")))?.first.toString(1281606996)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1443659373.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:17,706 [main:90] - TRYING TO REPLACE CONSTANT 2039448273
2021-03-11 12:29:17,808 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:17,808 [main:66] - Compilation checking started
2021-03-11 12:29:18,147 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(1785541927.toUInt(), 126.toUByte(), false))?.first.toString(1281606996)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1443659373.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:18,148 [main:90] - TRYING TO REPLACE CONSTANT 126
2021-03-11 12:29:18,240 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:18,241 [main:66] - Compilation checking started
2021-03-11 12:29:18,586 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(1785541927.toUInt(), 1787439505.toUByte(), false))?.first.toString(1281606996)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1443659373.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:18,587 [main:90] - TRYING TO REPLACE CONSTANT 90951816
2021-03-11 12:29:18,680 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 12:29:18,680 [main:66] - Compilation checking started
2021-03-11 12:29:18,916 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (-1021274945.toUInt()).until(1928530558.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(1785541927.toUInt(), 1787439505.toUByte(), false))?.first.toString(1281606996)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1443659373.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:18,916 [main:90] - TRYING TO REPLACE CONSTANT 1928530558
2021-03-11 12:29:19,008 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:19,009 [main:66] - Compilation checking started
2021-03-11 12:29:19,337 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1443659373.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(1785541927.toUInt(), 1787439505.toUByte(), false))?.first.toString(1281606996)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1443659373.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(1443659373.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:19,337 [main:90] - TRYING TO REPLACE CONSTANT 1u
2021-03-11 12:29:19,431 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:29:19,431 [main:90] - TRYING TO REPLACE CONSTANT 1443659373
2021-03-11 12:29:19,524 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:19,524 [main:66] - Compilation checking started
2021-03-11 12:29:19,874 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1443659373.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(1785541927.toUInt(), 1787439505.toUByte(), false))?.first.toString(1281606996)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1443659373.toUInt())
    for (i in (1u.toUByte()).div(87.toUByte()).until(list1.size.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:19,875 [main:90] - TRYING TO REPLACE CONSTANT 87
2021-03-11 12:29:19,972 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 12:29:19,972 [main:66] - Compilation checking started
2021-03-11 12:29:20,312 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1443659373.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(1785541927.toUInt(), 1787439505.toUByte(), false))?.first.toString(1281606996)
    }

    val list2 = ArrayList<UInt>(-1021274945)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1443659373.toUInt())
    for (i in (1u.toUByte()).div((722762397).toUByte()).until(list1.size.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:20,313 [main:90] - TRYING TO REPLACE CONSTANT 1021274945
2021-03-11 12:29:20,407 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 12:29:20,407 [main:66] - Compilation checking started
2021-03-11 12:29:20,749 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1443659373.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(1785541927.toUInt(), 1787439505.toUByte(), false))?.first.toString(1281606996)
    }

    val list2 = ArrayList<UInt>(-24401)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((1u.toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1443659373.toUInt())
    for (i in (1u.toUByte()).div((722762397).toUByte()).until(list1.size.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:20,749 [main:90] - TRYING TO REPLACE CONSTANT 1u
2021-03-11 12:29:20,874 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 12:29:20,874 [main:66] - Compilation checking started
2021-03-11 12:29:21,115 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = UIntRange(683394101.toUInt(), 24401.toUInt())
    for (i in (90951816.toUInt()).until(1443659373.toUInt())) {
        true
        if ((list1.add(i)).not()) break
    }
    if ((list1).equals(null)) {
        return (Triple<UInt, UByte?, Boolean>(1785541927.toUInt(), 1787439505.toUByte(), false))?.first.toString(1281606996)
    }

    val list2 = ArrayList<UInt>(-24401)
    val range2 = (list1).get(549677369).rangeTo(630463879.toUInt())
    for (i in (1u.toUByte()).toUShort().until(1808367125.toUShort())) {
        (list2.add(i)).equals("alhls").and(true)
        if (list1.add(1785541927.toUInt())) break
    }
    if ((toUInt().toUShort()).equals("lqook").not()) {
        return "tnbew"
    }

    val list3 = arrayListOf<UInt>(1996069306.toUInt())
    val range3 = (list2).get(1021274945).rangeTo(1443659373.toUInt())
    for (i in (1u.toUByte()).div((722762397).toUByte()).until(list1.size.toUInt())) {
        (1u.toUByte()).compareTo(1443659373.toUByte()).equals("gtzka")
        if ((list1.size).div((-2012801863).div(0.10139677680474668)).isFinite()) break
    }
    if ((6955).div((6955).div(0.10139677680474668)).isInfinite()) {
        return "tkvdl"
    }

    val list4 = list1
    val range4 = ((list2).get(722762397).toUByte()).div(7994125356509667838.toULong()).until(7994125356509667838.toULong())
    for (i in ULongRange(1909048582091010637.toULong(), 2102942524297010081.toULong())) {
        (1928530558.toUInt().toUShort()).equals("fegsp").xor(true)
        if ((1u.toUShort()).toFloat().isNaN()) break
    }
    if ((list2).equals("isrnx")) {
        return (722762397).toString(-24401)
    }

    return (list2.size).toChar().uppercase()
}


2021-03-11 12:29:21,136 [main:46] - AFTER TRY 0 res = fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}
2021-03-11 12:29:21,471 [main:48] - Try №0
2021-03-11 12:29:23,551 [main:71] - Trying to insert fun box616(): String {
    var prope0 = Kla0(0)
    var prope1 = Kla1(0L)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = {
        prope0 = Kla0(42)
        prope1 = Kla1(1234L)
        prope2 = Kla2("abc")
        prope3 = Kla3("def")
    }
    prope4()

    if (prope0.int != 42) throw AssertionError()
    if (prope1.long != 1234L) throw AssertionError()
    if (prope2.string != "abc") throw AssertionError()
    if (prope3.obj != "def") throw AssertionError()

    return "OK"
}
2021-03-11 12:29:23,688 [main:66] - Compilation checking started
2021-03-11 12:29:24,341 [main:99] - Trying to change 47 nodes
2021-03-11 12:29:24,341 [main:103] - replacing ("abc", String)
2021-03-11 12:29:24,345 [main:38] - replacing "abc" String
2021-03-11 12:29:24,345 [main:42] - Getting value of type String
2021-03-11 12:29:24,453 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:29:24,454 [main:46] - GENERATED VALUE OF TYPE String = "aobiv"
2021-03-11 12:29:24,454 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:24,577 [main:55] - randomType = Kla0?
2021-03-11 12:29:24,684 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:29:24,684 [main:112] - generating klass Kla0 text = inline class Kla0(val int: Int)
2021-03-11 12:29:24,792 [main:194] - Type params = []
2021-03-11 12:29:24,958 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:29:24,968 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:29:25,075 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:25,076 [main:66] - Generated call from random type = (Kla0(-568556669))?.int.toString(-232442830)
2021-03-11 12:29:25,077 [main:94] - GETTING String from ArrayList<UInt>
2021-03-11 12:29:25,260 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42850550], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3901601b]]
2021-03-11 12:29:25,261 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@42850550]
2021-03-11 12:29:25,367 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:25,367 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3901601b]
2021-03-11 12:29:25,470 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:25,470 [main:105] - GENERATED CALL = (list2).get(-1737889118).toString(955227280)
2021-03-11 12:29:25,471 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]]
2021-03-11 12:29:25,471 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]
2021-03-11 12:29:25,574 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:25,682 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:29:25,683 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:29:25,893 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:29:25,996 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:29:25,998 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:29:26,209 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-11 12:29:26,311 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:29:26,313 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:29:26,517 [main:302] - generating value of type = CharSequence false depth = 9
2021-03-11 12:29:26,521 [main:95] - GENERATED = StringBuilder("llwjr")
2021-03-11 12:29:26,521 [main:95] - GENERATED = StringBuilder(StringBuilder("llwjr"))
2021-03-11 12:29:26,521 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder("llwjr")))
2021-03-11 12:29:26,618 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:26,719 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:26,819 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:26,918 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:27,022 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:29:27,023 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:29:27,027 [main:105] - GENERATED CALL = (list2).joinToString(StringBuilder(StringBuilder(StringBuilder("llwjr"))), "mxrua", "zjfdh", -864318827, "nzfoh", {a: T -> StringBuilder()})
2021-03-11 12:29:27,027 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4171a73a], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]]
2021-03-11 12:29:27,027 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4171a73a]
2021-03-11 12:29:27,027 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]
2021-03-11 12:29:27,027 [main:105] - GENERATED CALL = (list2).toArray().contentDeepToString()
2021-03-11 12:29:27,028 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@3cf18f8e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:29:27,028 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:29:27,124 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:27,125 [main:105] - GENERATED CALL = (list2).modCount.toString(923472570)
2021-03-11 12:29:27,125 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@1e9714c8], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:29:27,125 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:29:27,222 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:27,222 [main:105] - GENERATED CALL = (list2).size.toString(-556649944)
2021-03-11 12:29:27,223 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4171a73a], @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]]
2021-03-11 12:29:27,223 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4171a73a]
2021-03-11 12:29:27,223 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]
2021-03-11 12:29:27,223 [main:105] - GENERATED CALL = (list2).toArray().contentToString()
2021-03-11 12:29:27,223 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4171a73a], public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]]
2021-03-11 12:29:27,223 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4171a73a]
2021-03-11 12:29:27,223 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]
2021-03-11 12:29:27,324 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:27,424 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:27,529 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:27,630 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:27,730 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:27,830 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:29:27,831 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:29:27,835 [main:105] - GENERATED CALL = (list2).toArray().joinToString("xohkq", "nvocl", "zfgwj", 591745330, "unmlg", {a: T -> "bbkws"})
2021-03-11 12:29:27,835 [main:110] - replacement of "abc" of type String is (list2).toArray().contentToString()
2021-03-11 12:29:27,933 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:27,933 [main:66] - Compilation checking started
2021-03-11 12:29:28,476 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(0L)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = {
        prope0 = Kla0(42)
        prope1 = Kla1(1234L)
        prope2 = Kla2("abc")
        prope3 = Kla3("def")
    }
    prope4()

    if (prope0.int != 42) throw AssertionError()
    if (prope1.long != 1234L) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if (prope3.obj != "def") throw AssertionError()

    return "OK"
}


2021-03-11 12:29:28,477 [main:103] - replacing (Kla1(1234L), Kla1)
2021-03-11 12:29:28,477 [main:38] - replacing Kla1(1234L) Kla1
2021-03-11 12:29:28,477 [main:42] - Getting value of type Kla1
2021-03-11 12:29:28,590 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:29:28,590 [main:112] - generating klass Kla1 text = inline class Kla1(val long: Long)
2021-03-11 12:29:28,701 [main:194] - Type params = []
2021-03-11 12:29:28,800 [main:302] - generating value of type = Long true depth = 2
2021-03-11 12:29:28,801 [main:46] - GENERATED VALUE OF TYPE Kla1 = Kla1(7380454055711098629)
2021-03-11 12:29:28,801 [main:49] - GENERATED IS CALL =true
2021-03-11 12:29:28,912 [main:55] - randomType = Set<Kla3>
2021-03-11 12:29:28,913 [main:94] - GETTING Kla1 from Int
2021-03-11 12:29:28,959 [main:94] - GETTING Kla1 from Int
2021-03-11 12:29:28,959 [main:94] - GETTING Kla1 from Int
2021-03-11 12:29:28,960 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:29:28,971 [main:94] - GETTING Kla1 from Int
2021-03-11 12:29:28,971 [main:94] - GETTING Kla1 from UByte
2021-03-11 12:29:29,006 [main:94] - GETTING Kla1 from UShort
2021-03-11 12:29:29,031 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:29:29,031 [main:94] - GETTING Kla1 from ArrayList<UInt>
2021-03-11 12:29:29,147 [main:94] - GETTING Kla1 from ArrayList<UInt>
2021-03-11 12:29:29,148 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:29:29,148 [main:94] - GETTING Kla1 from ArrayList<ULong>
2021-03-11 12:29:29,260 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:29:29,260 [main:94] - GETTING Kla1 from ArrayList<UInt>
2021-03-11 12:29:29,260 [main:110] - replacement of Kla1(1234L) of type Kla1 is Kla1(7380454055711098629)
2021-03-11 12:29:29,357 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:29:29,358 [main:66] - Compilation checking started
2021-03-11 12:29:29,777 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(0L)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = {
        prope0 = Kla0(42)
        prope1 = Kla1(7380454055711098629)
        prope2 = Kla2("abc")
        prope3 = Kla3("def")
    }
    prope4()

    if (prope0.int != 42) throw AssertionError()
    if (prope1.long != 1234L) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if (prope3.obj != "def") throw AssertionError()

    return "OK"
}


2021-03-11 12:29:29,777 [main:103] - replacing (prope1, Kla1)
2021-03-11 12:29:29,778 [main:38] - replacing prope1 Kla1
2021-03-11 12:29:29,778 [main:42] - Getting value of type Kla1
2021-03-11 12:29:29,926 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:29:29,927 [main:112] - generating klass Kla1 text = inline class Kla1(val long: Long)
2021-03-11 12:29:30,033 [main:194] - Type params = []
2021-03-11 12:29:30,132 [main:302] - generating value of type = Long true depth = 2
2021-03-11 12:29:30,133 [main:46] - GENERATED VALUE OF TYPE Kla1 = Kla1(-3421911346969511144)
2021-03-11 12:29:30,133 [main:49] - GENERATED IS CALL =true
2021-03-11 12:29:30,134 [main:55] - randomType = ULong
2021-03-11 12:29:30,236 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:29:30,274 [main:94] - GETTING Kla1 from UShort
2021-03-11 12:29:30,304 [main:94] - GETTING Kla1 from ArrayList<UInt>
2021-03-11 12:29:30,415 [main:94] - GETTING Kla1 from Int
2021-03-11 12:29:30,445 [main:94] - GETTING Kla1 from Int
2021-03-11 12:29:30,446 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:29:30,454 [main:94] - GETTING Kla1 from ArrayList<ULong>
2021-03-11 12:29:30,565 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:29:30,566 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:29:30,567 [main:94] - GETTING Kla1 from ArrayList<UInt>
2021-03-11 12:29:30,567 [main:94] - GETTING Kla1 from Int
2021-03-11 12:29:30,568 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:29:30,568 [main:94] - GETTING Kla1 from ArrayList<UInt>
2021-03-11 12:29:30,569 [main:94] - GETTING Kla1 from UByte
2021-03-11 12:29:30,595 [main:94] - GETTING Kla1 from Int
2021-03-11 12:29:30,595 [main:110] - replacement of prope1 of type Kla1 is Kla1(-3421911346969511144)
2021-03-11 12:29:30,696 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:29:30,696 [main:66] - Compilation checking started
2021-03-11 12:29:30,964 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(0L)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = {
        prope0 = Kla0(42)
        Kla1(-3421911346969511144) = Kla1(7380454055711098629)
        prope2 = Kla2("abc")
        prope3 = Kla3("def")
    }
    prope4()

    if (prope0.int != 42) throw AssertionError()
    if (prope1.long != 1234L) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if (prope3.obj != "def") throw AssertionError()

    return "OK"
}


2021-03-11 12:29:30,964 [main:103] - replacing (prope1.long != 1234L, Boolean)
2021-03-11 12:29:30,965 [main:38] - replacing prope1.long != 1234L Boolean
2021-03-11 12:29:30,965 [main:42] - Getting value of type Boolean
2021-03-11 12:29:31,074 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:31,075 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:29:31,075 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:31,216 [main:55] - randomType = Float
2021-03-11 12:29:31,313 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:29:31,342 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2730de43]
2021-03-11 12:29:31,439 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:29:31,439 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]
2021-03-11 12:29:31,539 [main:66] - Generated call from random type = (0.91738296f).div(0.3692025158350838).equals(null)
2021-03-11 12:29:31,539 [main:110] - replacement of prope1.long != 1234L of type Boolean is (0.91738296f).div(0.3692025158350838).equals(null)
2021-03-11 12:29:31,640 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:31,640 [main:66] - Compilation checking started
2021-03-11 12:29:32,119 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(0L)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = {
        prope0 = Kla0(42)
        prope1 = Kla1(7380454055711098629)
        prope2 = Kla2("abc")
        prope3 = Kla3("def")
    }
    prope4()

    if (prope0.int != 42) throw AssertionError()
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if (prope3.obj != "def") throw AssertionError()

    return "OK"
}


2021-03-11 12:29:32,120 [main:103] - replacing (prope4, Function0<Unit>)
2021-03-11 12:29:32,120 [main:38] - replacing prope4 Function0<Unit>
2021-03-11 12:29:32,121 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:29:32,257 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:29:32,257 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:29:32,262 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 12:29:32,262 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:32,369 [main:55] - randomType = Sequence<UInt>
2021-03-11 12:29:32,371 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:29:32,497 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:29:32,506 [main:94] - GETTING Function0<Unit> from UShort
2021-03-11 12:29:32,534 [main:94] - GETTING Function0<Unit> from UByte
2021-03-11 12:29:32,569 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:29:32,571 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:29:32,614 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:29:32,615 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:29:32,617 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:29:32,619 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:29:32,620 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:29:32,621 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:29:32,622 [main:94] - GETTING Function0<Unit> from ArrayList<ULong>
2021-03-11 12:29:32,756 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:29:32,756 [main:110] - replacement of prope4 of type Function0<Unit> is { println()}
2021-03-11 12:29:32,854 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:29:32,854 [main:66] - Compilation checking started
2021-03-11 12:29:33,294 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(0L)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = {
        prope0 = Kla0(42)
        prope1 = Kla1(7380454055711098629)
        prope2 = Kla2("abc")
        prope3 = Kla3("def")
    }
    { println()}()

    if (prope0.int != 42) throw AssertionError()
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if (prope3.obj != "def") throw AssertionError()

    return "OK"
}


2021-03-11 12:29:33,295 [main:103] - replacing ({
        prope0 = Kla0(42)
        prope1 = Kla1(7380454055711098629)
        prope2 = Kla2("abc")
        prope3 = Kla3("def")
    }, Function0<Unit>)
2021-03-11 12:29:33,296 [main:38] - replacing {
        prope0 = Kla0(42)
        prope1 = Kla1(7380454055711098629)
        prope2 = Kla2("abc")
        prope3 = Kla3("def")
    } Function0<Unit>
2021-03-11 12:29:33,296 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:29:33,401 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:29:33,402 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:29:33,504 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:29:33,506 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:29:33,736 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:29:33,737 [main:95] - GENERATED = print("bonck")
2021-03-11 12:29:33,737 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("bonck")}
2021-03-11 12:29:33,737 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:33,738 [main:55] - randomType = Double
2021-03-11 12:29:33,844 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:29:33,878 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:29:33,887 [main:94] - GETTING Function0<Unit> from UShort
2021-03-11 12:29:33,910 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:29:34,021 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:29:34,022 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:29:34,023 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:29:34,054 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:29:34,055 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:29:34,056 [main:94] - GETTING Function0<Unit> from ArrayList<ULong>
2021-03-11 12:29:34,167 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:29:34,168 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:29:34,169 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:29:34,170 [main:94] - GETTING Function0<Unit> from UByte
2021-03-11 12:29:34,193 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:29:34,193 [main:110] - replacement of {
        prope0 = Kla0(42)
        prope1 = Kla1(7380454055711098629)
        prope2 = Kla2("abc")
        prope3 = Kla3("def")
    } of type Function0<Unit> is { print("bonck")}
2021-03-11 12:29:34,290 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:29:34,290 [main:66] - Compilation checking started
2021-03-11 12:29:34,740 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(0L)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = { print("bonck")}
    { println()}()

    if (prope0.int != 42) throw AssertionError()
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if (prope3.obj != "def") throw AssertionError()

    return "OK"
}


2021-03-11 12:29:34,741 [main:103] - replacing (string, String)
2021-03-11 12:29:34,741 [main:38] - replacing string String
2021-03-11 12:29:34,741 [main:42] - Getting value of type String
2021-03-11 12:29:34,839 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:29:34,840 [main:46] - GENERATED VALUE OF TYPE String = "kizgg"
2021-03-11 12:29:34,840 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:34,841 [main:55] - randomType = Int
2021-03-11 12:29:34,938 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:34,971 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:29:34,971 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:29:35,065 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:35,066 [main:66] - Generated call from random type = (-597446416).toLong().toString(-1324840367)
2021-03-11 12:29:35,067 [main:94] - GETTING String from Int
2021-03-11 12:29:35,097 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]]
2021-03-11 12:29:35,097 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:29:35,098 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]
2021-03-11 12:29:35,098 [main:105] - GENERATED CALL = (list1.size).toChar().titlecase()
2021-03-11 12:29:35,098 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:29:35,098 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:29:35,098 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:29:35,194 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:35,195 [main:105] - GENERATED CALL = (list1.size).toLong().toString(-212488847)
2021-03-11 12:29:35,195 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]]
2021-03-11 12:29:35,195 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:29:35,195 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]
2021-03-11 12:29:35,291 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:35,292 [main:105] - GENERATED CALL = (list1.size).toByte().toString(-502408308)
2021-03-11 12:29:35,292 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]]
2021-03-11 12:29:35,292 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:29:35,292 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]
2021-03-11 12:29:35,389 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:29:35,389 [main:105] - GENERATED CALL = (list1.size).toChar().plus("ubrzl")
2021-03-11 12:29:35,390 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:29:35,390 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac]
2021-03-11 12:29:35,488 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:29:35,488 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:29:35,630 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:35,632 [main:105] - GENERATED CALL = (list1.size).div(3669058700741867053).toString(-1035280822)
2021-03-11 12:29:35,632 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]]
2021-03-11 12:29:35,632 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:29:35,632 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]
2021-03-11 12:29:35,731 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:35,732 [main:105] - GENERATED CALL = (list1.size).toShort().toString(-404131146)
2021-03-11 12:29:35,732 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]]
2021-03-11 12:29:35,732 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:29:35,732 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]
2021-03-11 12:29:35,732 [main:105] - GENERATED CALL = (list1.size).toChar().lowercase()
2021-03-11 12:29:35,733 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:29:35,733 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:29:35,733 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:29:35,839 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:35,840 [main:105] - GENERATED CALL = (list1.size).toInt().toString(-1091707939)
2021-03-11 12:29:35,840 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:29:35,841 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:29:35,940 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:35,941 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:29:36,040 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:36,041 [main:105] - GENERATED CALL = (list1.size).compareTo(1470631995).toString(248463345)
2021-03-11 12:29:36,041 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:29:36,041 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:29:36,142 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:36,143 [main:105] - GENERATED CALL = (list1.size).toString(1004172452)
2021-03-11 12:29:36,143 [main:110] - replacement of string of type String is (list1.size).toShort().toString(-404131146)
2021-03-11 12:29:36,243 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:36,244 [main:66] - Compilation checking started
2021-03-11 12:29:36,518 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(0L)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = { print("bonck")}
    { println()}()

    if (prope0.int != 42) throw AssertionError()
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if (prope2.(list1.size).toShort().toString(-404131146) != (list2).toArray().contentToString()) throw AssertionError()
    if (prope3.obj != "def") throw AssertionError()

    return "OK"
}


2021-03-11 12:29:36,518 [main:103] - replacing (AssertionError(), AssertionError)
2021-03-11 12:29:36,518 [main:38] - replacing AssertionError() AssertionError
2021-03-11 12:29:36,519 [main:42] - Getting value of type AssertionError
2021-03-11 12:29:36,616 [main:302] - generating value of type = AssertionError false depth = 0
2021-03-11 12:29:36,620 [main:46] - GENERATED VALUE OF TYPE AssertionError = AssertionError()
2021-03-11 12:29:36,620 [main:49] - GENERATED IS CALL =true
2021-03-11 12:29:36,828 [main:55] - randomType = LinkedHashMap<UByte, Long>
2021-03-11 12:29:36,923 [main:302] - generating value of type = LinkedHashMap<UByte, Long> false depth = 0
2021-03-11 12:29:37,028 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<UByte, Long>): LkedHashMap<UByte, Long> = TODO()
2021-03-11 12:29:37,029 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<UByte, Long>): LkedHashMap<UByte, Long> = TODO()
2021-03-11 12:29:37,128 [main:302] - generating value of type = Pair<UByte, Long> false depth = 3
2021-03-11 12:29:37,229 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte, second: Long): Pair<UByte, Long> = TODO()
2021-03-11 12:29:37,230 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte, second: Long): Pair<UByte, Long> = TODO()
2021-03-11 12:29:37,330 [main:302] - generating value of type = UByte true depth = 6
2021-03-11 12:29:37,330 [main:302] - generating value of type = Long true depth = 6
2021-03-11 12:29:37,331 [main:95] - GENERATED = Pair<UByte, Long>(23.toUByte(), -6016325160834545469)
2021-03-11 12:29:37,331 [main:95] - GENERATED = linkedMapOf<UByte, Long>(Pair<UByte, Long>(23.toUByte(), -6016325160834545469))
2021-03-11 12:29:37,461 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:37,491 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:37,501 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:37,502 [main:94] - GETTING AssertionError from UShort
2021-03-11 12:29:37,525 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:37,526 [main:94] - GETTING AssertionError from ArrayList<UInt>
2021-03-11 12:29:37,638 [main:94] - GETTING AssertionError from ArrayList<UInt>
2021-03-11 12:29:37,639 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:37,640 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:37,641 [main:94] - GETTING AssertionError from ArrayList<UInt>
2021-03-11 12:29:37,642 [main:94] - GETTING AssertionError from UByte
2021-03-11 12:29:37,665 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:37,666 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:37,667 [main:94] - GETTING AssertionError from ArrayList<ULong>
2021-03-11 12:29:37,778 [main:110] - replacement of AssertionError() of type AssertionError is AssertionError()
2021-03-11 12:29:37,873 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:29:37,873 [main:103] - replacing (prope3.obj != "def", Boolean)
2021-03-11 12:29:37,874 [main:38] - replacing prope3.obj != "def" Boolean
2021-03-11 12:29:37,874 [main:42] - Getting value of type Boolean
2021-03-11 12:29:37,970 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:37,971 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:29:37,971 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:38,074 [main:55] - randomType = Sequence<UByte>
2021-03-11 12:29:38,075 [main:94] - GETTING Boolean from Int
2021-03-11 12:29:38,125 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:29:38,125 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:29:38,126 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:29:38,224 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:38,224 [main:105] - GENERATED CALL = (list3.size).toInt().equals("migfr")
2021-03-11 12:29:38,224 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35af134e]]
2021-03-11 12:29:38,224 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:29:38,225 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35af134e]
2021-03-11 12:29:38,225 [main:105] - GENERATED CALL = (list3.size).toChar().isUpperCase()
2021-03-11 12:29:38,225 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]]
2021-03-11 12:29:38,225 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:29:38,225 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]
2021-03-11 12:29:38,322 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:38,323 [main:105] - GENERATED CALL = (list3.size).toFloat().equals("azcse")
2021-03-11 12:29:38,323 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6ea257]]
2021-03-11 12:29:38,323 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:29:38,323 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6ea257]
2021-03-11 12:29:38,323 [main:105] - GENERATED CALL = (list3.size).toChar().isDigit()
2021-03-11 12:29:38,323 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]]
2021-03-11 12:29:38,323 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:29:38,323 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]
2021-03-11 12:29:38,323 [main:105] - GENERATED CALL = (list3.size).toDouble().isNaN()
2021-03-11 12:29:38,323 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@de42c9e]]
2021-03-11 12:29:38,323 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:29:38,323 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@de42c9e]
2021-03-11 12:29:38,421 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:38,421 [main:105] - GENERATED CALL = (list3.size).toShort().equals("ueitt")
2021-03-11 12:29:38,421 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:29:38,421 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:29:38,516 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:38,517 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:29:38,612 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:38,612 [main:105] - GENERATED CALL = (list3.size).equals("brpmz").or(true)
2021-03-11 12:29:38,613 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443e326f]]
2021-03-11 12:29:38,613 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:29:38,613 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443e326f]
2021-03-11 12:29:38,613 [main:105] - GENERATED CALL = (list3.size).toChar().isISOControl()
2021-03-11 12:29:38,613 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f36bbc7]]
2021-03-11 12:29:38,613 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:29:38,613 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f36bbc7]
2021-03-11 12:29:38,613 [main:105] - GENERATED CALL = (list3.size).toChar().isWhitespace()
2021-03-11 12:29:38,613 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2805e3]]
2021-03-11 12:29:38,613 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:29:38,613 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2805e3]
2021-03-11 12:29:38,613 [main:105] - GENERATED CALL = (list3.size).toChar().isHighSurrogate()
2021-03-11 12:29:38,613 [main:110] - replacement of prope3.obj != "def" of type Boolean is (list3.size).toDouble().isNaN()
2021-03-11 12:29:38,710 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:38,710 [main:66] - Compilation checking started
2021-03-11 12:29:39,196 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(0L)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = { print("bonck")}
    { println()}()

    if (prope0.int != 42) throw AssertionError()
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return "OK"
}


2021-03-11 12:29:39,197 [main:103] - replacing (prope2.string, String)
2021-03-11 12:29:39,197 [main:38] - replacing prope2.string String
2021-03-11 12:29:39,197 [main:42] - Getting value of type String
2021-03-11 12:29:39,302 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:29:39,303 [main:46] - GENERATED VALUE OF TYPE String = "glfcr"
2021-03-11 12:29:39,303 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:39,613 [main:55] - randomType = Set<MutableMap<Kla0, Collection<Float>>>
2021-03-11 12:29:39,614 [main:94] - GETTING String from Boolean
2021-03-11 12:29:39,626 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:29:39,626 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:29:39,725 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:39,726 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:29:39,827 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:39,828 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).toString(-97953852)
2021-03-11 12:29:39,828 [main:110] - replacement of prope2.string of type String is (list1.add(i)).compareTo(true).toString(-97953852)
2021-03-11 12:29:39,924 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:39,924 [main:66] - Compilation checking started
2021-03-11 12:29:40,191 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(0L)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = { print("bonck")}
    { println()}()

    if (prope0.int != 42) throw AssertionError()
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if ((list1.add(i)).compareTo(true).toString(-97953852) != (list2).toArray().contentToString()) throw AssertionError()
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return "OK"
}


2021-03-11 12:29:40,192 [main:103] - replacing (Kla1(0L), Kla1)
2021-03-11 12:29:40,192 [main:38] - replacing Kla1(0L) Kla1
2021-03-11 12:29:40,192 [main:42] - Getting value of type Kla1
2021-03-11 12:29:40,287 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:29:40,287 [main:112] - generating klass Kla1 text = inline class Kla1(val long: Long)
2021-03-11 12:29:40,385 [main:194] - Type params = []
2021-03-11 12:29:40,483 [main:302] - generating value of type = Long true depth = 2
2021-03-11 12:29:40,484 [main:46] - GENERATED VALUE OF TYPE Kla1 = Kla1(2536543640245419876)
2021-03-11 12:29:40,484 [main:49] - GENERATED IS CALL =true
2021-03-11 12:29:40,689 [main:55] - randomType = ArrayList<Kla0?>
2021-03-11 12:29:40,784 [main:302] - generating value of type = ArrayList<Kla0?> false depth = 0
2021-03-11 12:29:40,883 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla0?): ArrayList<Kla0?> = TODO()
2021-03-11 12:29:40,884 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla0?): ArrayList<Kla0?> = TODO()
2021-03-11 12:29:40,986 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-11 12:29:40,987 [main:112] - generating klass Kla0 text = inline class Kla0(val int: Int)
2021-03-11 12:29:41,083 [main:194] - Type params = []
2021-03-11 12:29:41,178 [main:302] - generating value of type = Int true depth = 5
2021-03-11 12:29:41,179 [main:95] - GENERATED = arrayListOf<Kla0?>(Kla0(-1183164793))
2021-03-11 12:29:41,326 [main:94] - GETTING Kla1 from ArrayList<UInt>
2021-03-11 12:29:41,438 [main:94] - GETTING Kla1 from UShort
2021-03-11 12:29:41,460 [main:94] - GETTING Kla1 from ArrayList<UInt>
2021-03-11 12:29:41,460 [main:94] - GETTING Kla1 from Int
2021-03-11 12:29:41,494 [main:94] - GETTING Kla1 from ArrayList<UInt>
2021-03-11 12:29:41,494 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:29:41,504 [main:94] - GETTING Kla1 from UByte
2021-03-11 12:29:41,525 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:29:41,526 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:29:41,526 [main:94] - GETTING Kla1 from Int
2021-03-11 12:29:41,527 [main:94] - GETTING Kla1 from Int
2021-03-11 12:29:41,528 [main:94] - GETTING Kla1 from ArrayList<ULong>
2021-03-11 12:29:41,639 [main:94] - GETTING Kla1 from Int
2021-03-11 12:29:41,640 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:29:41,640 [main:110] - replacement of Kla1(0L) of type Kla1 is Kla1(2536543640245419876)
2021-03-11 12:29:41,734 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:29:41,735 [main:66] - Compilation checking started
2021-03-11 12:29:42,159 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = { print("bonck")}
    { println()}()

    if (prope0.int != 42) throw AssertionError()
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return "OK"
}


2021-03-11 12:29:42,159 [main:103] - replacing (prope0.int != 42, Boolean)
2021-03-11 12:29:42,160 [main:38] - replacing prope0.int != 42 Boolean
2021-03-11 12:29:42,160 [main:42] - Getting value of type Boolean
2021-03-11 12:29:42,254 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:42,255 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:29:42,255 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:42,354 [main:55] - randomType = Byte
2021-03-11 12:29:42,498 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:29:42,531 [main:137] - GENERATING call of type public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ebe1d2a]
2021-03-11 12:29:42,531 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]
2021-03-11 12:29:42,625 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:42,625 [main:66] - Generated call from random type = (-111).toByte().equals("ahtxh")
2021-03-11 12:29:42,625 [main:110] - replacement of prope0.int != 42 of type Boolean is (-111).toByte().equals("ahtxh")
2021-03-11 12:29:42,728 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:42,728 [main:66] - Compilation checking started
2021-03-11 12:29:43,126 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError()
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return "OK"
}


2021-03-11 12:29:43,127 [main:103] - replacing (AssertionError(), AssertionError)
2021-03-11 12:29:43,128 [main:38] - replacing AssertionError() AssertionError
2021-03-11 12:29:43,128 [main:42] - Getting value of type AssertionError
2021-03-11 12:29:43,228 [main:302] - generating value of type = AssertionError false depth = 0
2021-03-11 12:29:43,328 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.String?, cause: kotlin.Throwable?): AssertionError = TODO()
2021-03-11 12:29:43,329 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.String?, cause: kotlin.Throwable?): AssertionError = TODO()
2021-03-11 12:29:43,632 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:29:43,632 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 12:29:43,636 [main:95] - GENERATED = AssertionError("bolrg", NumberFormatException())
2021-03-11 12:29:43,636 [main:46] - GENERATED VALUE OF TYPE AssertionError = AssertionError("bolrg", NumberFormatException())
2021-03-11 12:29:43,637 [main:49] - GENERATED IS CALL =true
2021-03-11 12:29:43,638 [main:55] - randomType = Double
2021-03-11 12:29:43,732 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:29:43,762 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:43,771 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:43,801 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:43,802 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:43,803 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:43,804 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:43,804 [main:94] - GETTING AssertionError from UShort
2021-03-11 12:29:43,828 [main:94] - GETTING AssertionError from ArrayList<UInt>
2021-03-11 12:29:43,939 [main:94] - GETTING AssertionError from UByte
2021-03-11 12:29:43,961 [main:94] - GETTING AssertionError from ArrayList<ULong>
2021-03-11 12:29:44,069 [main:94] - GETTING AssertionError from ArrayList<UInt>
2021-03-11 12:29:44,070 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:44,071 [main:94] - GETTING AssertionError from ArrayList<UInt>
2021-03-11 12:29:44,072 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:44,072 [main:110] - replacement of AssertionError() of type AssertionError is AssertionError("bolrg", NumberFormatException())
2021-03-11 12:29:44,165 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:29:44,165 [main:66] - Compilation checking started
2021-03-11 12:29:44,582 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("")
    var prope3 = Kla3("")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return "OK"
}


2021-03-11 12:29:44,582 [main:103] - replacing (Kla3(""), Kla3)
2021-03-11 12:29:44,583 [main:38] - replacing Kla3("") Kla3
2021-03-11 12:29:44,583 [main:42] - Getting value of type Kla3
2021-03-11 12:29:44,680 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:29:44,681 [main:112] - generating klass Kla3 text = inline class Kla3(val obj: Any)
2021-03-11 12:29:44,777 [main:194] - Type params = []
2021-03-11 12:29:44,873 [main:302] - generating value of type = Any false depth = 2
2021-03-11 12:29:44,873 [main:46] - GENERATED VALUE OF TYPE Kla3 = Kla3("rvtxn")
2021-03-11 12:29:44,874 [main:49] - GENERATED IS CALL =true
2021-03-11 12:29:44,875 [main:55] - randomType = Boolean
2021-03-11 12:29:45,000 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:45,015 [main:94] - GETTING Kla3 from Boolean
2021-03-11 12:29:45,026 [main:94] - GETTING Kla3 from ArrayList<UInt>
2021-03-11 12:29:45,141 [main:94] - GETTING Kla3 from Int
2021-03-11 12:29:45,171 [main:94] - GETTING Kla3 from ArrayList<UInt>
2021-03-11 12:29:45,172 [main:94] - GETTING Kla3 from Boolean
2021-03-11 12:29:45,172 [main:94] - GETTING Kla3 from Int
2021-03-11 12:29:45,173 [main:94] - GETTING Kla3 from UByte
2021-03-11 12:29:45,196 [main:94] - GETTING Kla3 from ArrayList<UInt>
2021-03-11 12:29:45,197 [main:94] - GETTING Kla3 from Int
2021-03-11 12:29:45,198 [main:94] - GETTING Kla3 from ArrayList<ULong>
2021-03-11 12:29:45,307 [main:94] - GETTING Kla3 from UShort
2021-03-11 12:29:45,329 [main:94] - GETTING Kla3 from Boolean
2021-03-11 12:29:45,330 [main:94] - GETTING Kla3 from Boolean
2021-03-11 12:29:45,330 [main:94] - GETTING Kla3 from Int
2021-03-11 12:29:45,330 [main:110] - replacement of Kla3("") of type Kla3 is Kla3("rvtxn")
2021-03-11 12:29:45,424 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:29:45,425 [main:66] - Compilation checking started
2021-03-11 12:29:45,820 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return "OK"
}


2021-03-11 12:29:45,821 [main:103] - replacing ("", String)
2021-03-11 12:29:45,821 [main:38] - replacing "" String
2021-03-11 12:29:45,821 [main:42] - Getting value of type String
2021-03-11 12:29:45,959 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:29:45,960 [main:46] - GENERATED VALUE OF TYPE String = "tpnoa"
2021-03-11 12:29:45,960 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:46,163 [main:55] - randomType = MutableMap<Byte, Float>
2021-03-11 12:29:46,164 [main:94] - GETTING String from Boolean
2021-03-11 12:29:46,179 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:29:46,179 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:29:46,280 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:46,281 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:29:46,375 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:46,376 [main:105] - GENERATED CALL = (list3.add(i)).compareTo(true).toString(308650448)
2021-03-11 12:29:46,376 [main:110] - replacement of "" of type String is "tpnoa"
2021-03-11 12:29:46,470 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 12:29:46,470 [main:66] - Compilation checking started
2021-03-11 12:29:46,892 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("tpnoa")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return "OK"
}


2021-03-11 12:29:46,892 [main:103] - replacing ("OK", String)
2021-03-11 12:29:46,892 [main:38] - replacing "OK" String
2021-03-11 12:29:46,892 [main:42] - Getting value of type String
2021-03-11 12:29:46,989 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:29:46,989 [main:46] - GENERATED VALUE OF TYPE String = "zrcgg"
2021-03-11 12:29:46,990 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:47,090 [main:55] - randomType = Kla1?
2021-03-11 12:29:47,185 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:29:47,185 [main:112] - generating klass Kla1 text = inline class Kla1(val long: Long)
2021-03-11 12:29:47,278 [main:194] - Type params = []
2021-03-11 12:29:47,373 [main:302] - generating value of type = Long true depth = 2
2021-03-11 12:29:47,380 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:29:47,474 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:47,475 [main:66] - Generated call from random type = (Kla1(2606430520006708264))?.long.toString(-759636803)
2021-03-11 12:29:47,476 [main:94] - GETTING String from ArrayList<UInt>
2021-03-11 12:29:47,621 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@5b1ee3a5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:29:47,621 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:29:47,720 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:47,721 [main:105] - GENERATED CALL = (list1).size.toString(1592078176)
2021-03-11 12:29:47,721 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2def5ecb], public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]]
2021-03-11 12:29:47,721 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2def5ecb]
2021-03-11 12:29:47,721 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]
2021-03-11 12:29:47,818 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:47,916 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:48,013 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:48,112 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:48,207 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:48,306 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:29:48,307 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:29:48,501 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:29:48,598 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:29:48,599 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:29:48,794 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:29:48,794 [main:95] - GENERATED = StringBuilder(-1907733230)
2021-03-11 12:29:48,794 [main:95] - GENERATED = StringBuilder(StringBuilder(-1907733230))
2021-03-11 12:29:48,888 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:29:48,889 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:29:48,892 [main:105] - GENERATED CALL = (list1).toArray().joinToString("osssq", "jkyml", "mbeyq", 563404293, StringBuilder(StringBuilder(-1907733230)), {a: T -> "cfyru"})
2021-03-11 12:29:48,892 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2def5ecb], @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]]
2021-03-11 12:29:48,892 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2def5ecb]
2021-03-11 12:29:48,893 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]
2021-03-11 12:29:48,893 [main:105] - GENERATED CALL = (list1).toArray().contentToString()
2021-03-11 12:29:48,893 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2def5ecb], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]]
2021-03-11 12:29:48,893 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2def5ecb]
2021-03-11 12:29:48,893 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]
2021-03-11 12:29:48,893 [main:105] - GENERATED CALL = (list1).toArray().contentDeepToString()
2021-03-11 12:29:48,893 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]]
2021-03-11 12:29:48,893 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]
2021-03-11 12:29:48,987 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:49,083 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:49,180 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:49,324 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:49,424 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:49,521 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:29:49,522 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:29:49,526 [main:105] - GENERATED CALL = (list1).joinToString("tdtyu", "jksvo", "nrfur", 1225226302, "socrs", {a: T -> StringBuilder()})
2021-03-11 12:29:49,526 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@743e0c47], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:29:49,526 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:29:49,619 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:49,620 [main:105] - GENERATED CALL = (list1).modCount.toString(-1649308802)
2021-03-11 12:29:49,620 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@48fa8390], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3901601b]]
2021-03-11 12:29:49,620 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@48fa8390]
2021-03-11 12:29:49,718 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:49,719 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3901601b]
2021-03-11 12:29:49,814 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:49,814 [main:105] - GENERATED CALL = (list1).get(1356907229).toString(18246289)
2021-03-11 12:29:49,815 [main:110] - replacement of "OK" of type String is (list1).toArray().contentDeepToString()
2021-03-11 12:29:49,909 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:49,909 [main:66] - Compilation checking started
2021-03-11 12:29:50,326 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = Kla0(0)
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("tpnoa")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}


2021-03-11 12:29:50,326 [main:103] - replacing (Kla0(0), Kla0)
2021-03-11 12:29:50,327 [main:38] - replacing Kla0(0) Kla0
2021-03-11 12:29:50,327 [main:42] - Getting value of type Kla0
2021-03-11 12:29:50,425 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:29:50,425 [main:112] - generating klass Kla0 text = inline class Kla0(val int: Int)
2021-03-11 12:29:50,521 [main:194] - Type params = []
2021-03-11 12:29:50,618 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:29:50,619 [main:46] - GENERATED VALUE OF TYPE Kla0 = Kla0(564812299)
2021-03-11 12:29:50,619 [main:49] - GENERATED IS CALL =true
2021-03-11 12:29:50,824 [main:55] - randomType = HashSet<Kla0?>
2021-03-11 12:29:50,920 [main:302] - generating value of type = HashSet<Kla0?> false depth = 0
2021-03-11 12:29:51,017 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Kla0?> = TODO()
2021-03-11 12:29:51,018 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Kla0?> = TODO()
2021-03-11 12:29:51,115 [main:95] - GENERATED = hashSetOf<Kla0?>()
2021-03-11 12:29:51,221 [main:137] - GENERATING call of type public open fun iterator(): kotlin.collections.MutableIterator<Kla0?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@3ec87592]
2021-03-11 12:29:51,221 [main:137] - GENERATING call of type public abstract fun next(): Kla0? defined in kotlin.collections.MutableIterator[DeserializedSimpleFunctionDescriptor@7551caf2]
2021-03-11 12:29:51,221 [main:66] - Generated call from random type = (hashSetOf<Kla0?>()).iterator().next()!!
2021-03-11 12:29:51,222 [main:94] - GETTING Kla0 from Int
2021-03-11 12:29:51,253 [main:94] - GETTING Kla0 from Boolean
2021-03-11 12:29:51,261 [main:94] - GETTING Kla0 from UShort
2021-03-11 12:29:51,284 [main:94] - GETTING Kla0 from ArrayList<UInt>
2021-03-11 12:29:51,400 [main:94] - GETTING Kla0 from Int
2021-03-11 12:29:51,401 [main:94] - GETTING Kla0 from Boolean
2021-03-11 12:29:51,401 [main:94] - GETTING Kla0 from Boolean
2021-03-11 12:29:51,402 [main:94] - GETTING Kla0 from UByte
2021-03-11 12:29:51,431 [main:94] - GETTING Kla0 from Int
2021-03-11 12:29:51,432 [main:94] - GETTING Kla0 from ArrayList<UInt>
2021-03-11 12:29:51,433 [main:94] - GETTING Kla0 from ArrayList<UInt>
2021-03-11 12:29:51,433 [main:94] - GETTING Kla0 from Int
2021-03-11 12:29:51,434 [main:94] - GETTING Kla0 from Boolean
2021-03-11 12:29:51,434 [main:94] - GETTING Kla0 from ArrayList<ULong>
2021-03-11 12:29:51,596 [main:110] - replacement of Kla0(0) of type Kla0 is (hashSetOf<Kla0?>()).iterator().next()!!
2021-03-11 12:29:51,693 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-11 12:29:51,693 [main:66] - Compilation checking started
2021-03-11 12:29:52,168 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("tpnoa")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError()
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}


2021-03-11 12:29:52,169 [main:103] - replacing (AssertionError(), AssertionError)
2021-03-11 12:29:52,169 [main:38] - replacing AssertionError() AssertionError
2021-03-11 12:29:52,169 [main:42] - Getting value of type AssertionError
2021-03-11 12:29:52,271 [main:302] - generating value of type = AssertionError false depth = 0
2021-03-11 12:29:52,379 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.Any?): AssertionError = TODO()
2021-03-11 12:29:52,380 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.Any?): AssertionError = TODO()
2021-03-11 12:29:52,611 [main:302] - generating value of type = Any false depth = 3
2021-03-11 12:29:52,611 [main:95] - GENERATED = AssertionError("qubjg")
2021-03-11 12:29:52,611 [main:46] - GENERATED VALUE OF TYPE AssertionError = AssertionError("qubjg")
2021-03-11 12:29:52,611 [main:49] - GENERATED IS CALL =true
2021-03-11 12:29:52,722 [main:55] - randomType = Short
2021-03-11 12:29:52,824 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:29:52,869 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:52,881 [main:94] - GETTING AssertionError from ArrayList<ULong>
2021-03-11 12:29:53,044 [main:94] - GETTING AssertionError from ArrayList<UInt>
2021-03-11 12:29:53,154 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:53,155 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:53,186 [main:94] - GETTING AssertionError from ArrayList<UInt>
2021-03-11 12:29:53,187 [main:94] - GETTING AssertionError from UByte
2021-03-11 12:29:53,208 [main:94] - GETTING AssertionError from ArrayList<UInt>
2021-03-11 12:29:53,209 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:53,210 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:53,211 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:53,212 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:53,212 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:53,213 [main:94] - GETTING AssertionError from UShort
2021-03-11 12:29:53,235 [main:110] - replacement of AssertionError() of type AssertionError is AssertionError("qubjg")
2021-03-11 12:29:53,333 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:29:53,333 [main:66] - Compilation checking started
2021-03-11 12:29:53,779 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("tpnoa")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError()
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}


2021-03-11 12:29:53,780 [main:103] - replacing (AssertionError(), AssertionError)
2021-03-11 12:29:53,780 [main:38] - replacing AssertionError() AssertionError
2021-03-11 12:29:53,780 [main:42] - Getting value of type AssertionError
2021-03-11 12:29:53,912 [main:302] - generating value of type = AssertionError false depth = 0
2021-03-11 12:29:54,028 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.Any?): AssertionError = TODO()
2021-03-11 12:29:54,030 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.Any?): AssertionError = TODO()
2021-03-11 12:29:54,238 [main:302] - generating value of type = Any false depth = 3
2021-03-11 12:29:54,238 [main:95] - GENERATED = AssertionError("whvrp")
2021-03-11 12:29:54,238 [main:46] - GENERATED VALUE OF TYPE AssertionError = AssertionError("whvrp")
2021-03-11 12:29:54,238 [main:49] - GENERATED IS CALL =true
2021-03-11 12:29:54,567 [main:55] - randomType = MutableMap<Kla2?, UShort?>
2021-03-11 12:29:54,569 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:54,585 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:54,628 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:54,628 [main:94] - GETTING AssertionError from UShort
2021-03-11 12:29:54,650 [main:94] - GETTING AssertionError from ArrayList<ULong>
2021-03-11 12:29:54,760 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:54,761 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:54,762 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:54,763 [main:94] - GETTING AssertionError from UByte
2021-03-11 12:29:54,785 [main:94] - GETTING AssertionError from ArrayList<UInt>
2021-03-11 12:29:54,893 [main:94] - GETTING AssertionError from ArrayList<UInt>
2021-03-11 12:29:54,894 [main:94] - GETTING AssertionError from Boolean
2021-03-11 12:29:54,894 [main:94] - GETTING AssertionError from ArrayList<UInt>
2021-03-11 12:29:54,895 [main:94] - GETTING AssertionError from Int
2021-03-11 12:29:54,895 [main:110] - replacement of AssertionError() of type AssertionError is AssertionError("whvrp")
2021-03-11 12:29:55,001 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:29:55,001 [main:66] - Compilation checking started
2021-03-11 12:29:55,424 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("tpnoa")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (prope2.string != (list2).toArray().contentToString()) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}


2021-03-11 12:29:55,424 [main:103] - replacing (prope2.string, String)
2021-03-11 12:29:55,425 [main:38] - replacing prope2.string String
2021-03-11 12:29:55,425 [main:42] - Getting value of type String
2021-03-11 12:29:55,521 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:29:55,522 [main:46] - GENERATED VALUE OF TYPE String = "kgpfn"
2021-03-11 12:29:55,522 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:55,628 [main:55] - randomType = ArrayList<Kla2>
2021-03-11 12:29:55,726 [main:302] - generating value of type = ArrayList<Kla2> false depth = 0
2021-03-11 12:29:55,826 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla2): ArrayList<Kla2> = TODO()
2021-03-11 12:29:55,827 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla2): ArrayList<Kla2> = TODO()
2021-03-11 12:29:55,928 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 12:29:55,929 [main:112] - generating klass Kla2 text = inline class Kla2(val string: String)
2021-03-11 12:29:56,027 [main:194] - Type params = []
2021-03-11 12:29:56,124 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:29:56,125 [main:95] - GENERATED = arrayListOf<Kla2>(Kla2("ordix"))
2021-03-11 12:29:56,252 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]
2021-03-11 12:29:56,349 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:56,450 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:56,592 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:29:56,593 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:29:56,796 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:29:56,797 [main:95] - GENERATED = StringBuilder("nbngf")
2021-03-11 12:29:56,894 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:56,994 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:57,091 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:29:57,195 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:29:57,196 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:29:57,301 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:29:57,303 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:29:57,511 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:29:57,512 [main:95] - GENERATED = StringBuilder(1570967843)
2021-03-11 12:29:57,513 [main:66] - Generated call from random type = (arrayListOf<Kla2>(Kla2("ordix"))).joinToString("yjsfz", StringBuilder("nbngf"), "nseuk", -1747855496, "qkpac", {a: T -> StringBuilder(1570967843)})
2021-03-11 12:29:57,514 [main:94] - GETTING String from Boolean
2021-03-11 12:29:57,526 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:29:57,526 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:29:57,624 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:57,625 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:29:57,727 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:29:57,728 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).toString(391724098)
2021-03-11 12:29:57,728 [main:110] - replacement of prope2.string of type String is (list1.add(i)).compareTo(true).toString(391724098)
2021-03-11 12:29:57,825 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:29:57,825 [main:66] - Compilation checking started
2021-03-11 12:29:58,105 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("tpnoa")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if ((list1.add(i)).compareTo(true).toString(391724098) != (list2).toArray().contentToString()) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}


2021-03-11 12:29:58,106 [main:103] - replacing (prope2.string != (list2).toArray().contentToString(), Boolean)
2021-03-11 12:29:58,106 [main:38] - replacing prope2.string != (list2).toArray().contentToString() Boolean
2021-03-11 12:29:58,106 [main:42] - Getting value of type Boolean
2021-03-11 12:29:58,204 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:58,205 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:29:58,205 [main:49] - GENERATED IS CALL =false
2021-03-11 12:29:58,208 [main:55] - randomType = Kla0
2021-03-11 12:29:58,306 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:29:58,306 [main:112] - generating klass Kla0 text = inline class Kla0(val int: Int)
2021-03-11 12:29:58,405 [main:194] - Type params = []
2021-03-11 12:29:58,504 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:29:58,512 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[SimpleFunctionDescriptorImpl@448b3757]
2021-03-11 12:29:58,608 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:58,609 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:29:58,705 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:58,706 [main:66] - Generated call from random type = (Kla0(-1342109485)).equals("jbtex").or(false)
2021-03-11 12:29:58,707 [main:94] - GETTING Boolean from UShort
2021-03-11 12:29:58,736 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@131e5246], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e49055a]]
2021-03-11 12:29:58,736 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@131e5246]
2021-03-11 12:29:58,736 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e49055a]
2021-03-11 12:29:58,736 [main:105] - GENERATED CALL = (1u.toUShort()).toFloat().isInfinite()
2021-03-11 12:29:58,736 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6b684248], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]]
2021-03-11 12:29:58,736 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6b684248]
2021-03-11 12:29:58,736 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]
2021-03-11 12:29:58,737 [main:105] - GENERATED CALL = (1u.toUShort()).toDouble().isNaN()
2021-03-11 12:29:58,737 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59bc74dd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@de42c9e]]
2021-03-11 12:29:58,737 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@59bc74dd]
2021-03-11 12:29:58,737 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@de42c9e]
2021-03-11 12:29:58,833 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:58,833 [main:105] - GENERATED CALL = (1u.toUShort()).toShort().equals("zgthe")
2021-03-11 12:29:58,834 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@70ef028a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-11 12:29:58,834 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@70ef028a]
2021-03-11 12:29:58,834 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-11 12:29:58,931 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:58,931 [main:105] - GENERATED CALL = (1u.toUShort()).toLong().equals("ovtdy")
2021-03-11 12:29:58,931 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@724d9f05], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:29:58,931 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@724d9f05]
2021-03-11 12:29:59,028 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:59,028 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:29:59,125 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:29:59,126 [main:105] - GENERATED CALL = (1u.toUShort()).equals("jvyld").or(false)
2021-03-11 12:29:59,126 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6b684248], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]]
2021-03-11 12:29:59,126 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6b684248]
2021-03-11 12:29:59,126 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]
2021-03-11 12:29:59,126 [main:105] - GENERATED CALL = (1u.toUShort()).toDouble().isFinite()
2021-03-11 12:29:59,126 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2182da45], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public operator fun kotlin.ranges.UIntRange.contains(value: kotlin.UByte): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7eaedcbf]]
2021-03-11 12:29:59,126 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UShort): kotlin.ranges.UIntRange defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2182da45]
2021-03-11 12:29:59,222 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:29:59,223 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public operator fun kotlin.ranges.UIntRange.contains(value: kotlin.UByte): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7eaedcbf]
2021-03-11 12:29:59,319 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:29:59,320 [main:105] - GENERATED CALL = (1u.toUShort()).rangeTo(24292.toUShort()).contains(48.toUByte())
2021-03-11 12:29:59,320 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@131e5246], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]]
2021-03-11 12:29:59,320 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@131e5246]
2021-03-11 12:29:59,320 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2a20bb2a]
2021-03-11 12:29:59,417 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:29:59,417 [main:105] - GENERATED CALL = (1u.toUShort()).toFloat().equals("jkysh")
2021-03-11 12:29:59,417 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@131e5246], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@143977f1]]
2021-03-11 12:29:59,417 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@131e5246]
2021-03-11 12:29:59,417 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@143977f1]
2021-03-11 12:29:59,417 [main:105] - GENERATED CALL = (1u.toUShort()).toFloat().isFinite()
2021-03-11 12:29:59,417 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@131e5246], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34ffd74d]]
2021-03-11 12:29:59,417 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@131e5246]
2021-03-11 12:29:59,418 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34ffd74d]
2021-03-11 12:29:59,418 [main:105] - GENERATED CALL = (1u.toUShort()).toFloat().isNaN()
2021-03-11 12:29:59,418 [main:110] - replacement of prope2.string != (list2).toArray().contentToString() of type Boolean is true
2021-03-11 12:29:59,516 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:29:59,516 [main:66] - Compilation checking started
2021-03-11 12:29:59,925 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("tpnoa")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}


2021-03-11 12:29:59,926 [main:103] - replacing (Kla2("tpnoa"), Kla2)
2021-03-11 12:29:59,926 [main:38] - replacing Kla2("tpnoa") Kla2
2021-03-11 12:29:59,926 [main:42] - Getting value of type Kla2
2021-03-11 12:30:00,023 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 12:30:00,024 [main:112] - generating klass Kla2 text = inline class Kla2(val string: String)
2021-03-11 12:30:00,119 [main:194] - Type params = []
2021-03-11 12:30:00,267 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:30:00,268 [main:46] - GENERATED VALUE OF TYPE Kla2 = Kla2("qmtvv")
2021-03-11 12:30:00,268 [main:49] - GENERATED IS CALL =true
2021-03-11 12:30:00,583 [main:55] - randomType = Function2<Double, ArrayList<Byte>, Kla0>
2021-03-11 12:30:00,584 [main:94] - GETTING Kla2 from ArrayList<UInt>
2021-03-11 12:30:00,694 [main:94] - GETTING Kla2 from UByte
2021-03-11 12:30:00,716 [main:94] - GETTING Kla2 from ArrayList<UInt>
2021-03-11 12:30:00,717 [main:94] - GETTING Kla2 from Int
2021-03-11 12:30:00,748 [main:94] - GETTING Kla2 from Boolean
2021-03-11 12:30:00,757 [main:94] - GETTING Kla2 from Int
2021-03-11 12:30:00,758 [main:94] - GETTING Kla2 from Int
2021-03-11 12:30:00,758 [main:94] - GETTING Kla2 from Boolean
2021-03-11 12:30:00,759 [main:94] - GETTING Kla2 from Int
2021-03-11 12:30:00,760 [main:94] - GETTING Kla2 from ArrayList<UInt>
2021-03-11 12:30:00,760 [main:94] - GETTING Kla2 from Boolean
2021-03-11 12:30:00,761 [main:94] - GETTING Kla2 from UShort
2021-03-11 12:30:00,784 [main:94] - GETTING Kla2 from ArrayList<ULong>
2021-03-11 12:30:00,894 [main:94] - GETTING Kla2 from Boolean
2021-03-11 12:30:00,894 [main:110] - replacement of Kla2("tpnoa") of type Kla2 is Kla2("qmtvv")
2021-03-11 12:30:00,989 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:30:00,990 [main:66] - Compilation checking started
2021-03-11 12:30:01,395 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if ((0.91738296f).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}


2021-03-11 12:30:01,515 [main:137] - TRYING TO REPLACE CONSTANT 0.91738296f
2021-03-11 12:30:01,616 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 12:30:01,616 [main:66] - Compilation checking started
2021-03-11 12:30:02,025 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}


2021-03-11 12:30:02,025 [main:137] - TRYING TO REPLACE CONSTANT null
2021-03-11 12:30:02,122 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-11 12:30:02,122 [main:66] - Compilation checking started
2021-03-11 12:30:02,515 [main:137] - TRYING TO REPLACE CONSTANT 0.3692025158350838
2021-03-11 12:30:02,609 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 12:30:02,610 [main:66] - Compilation checking started
2021-03-11 12:30:02,869 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(toDouble()).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}


2021-03-11 12:30:02,870 [main:137] - TRYING TO REPLACE CONSTANT 2536543640245419876
2021-03-11 12:30:02,967 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:30:02,967 [main:66] - Compilation checking started
2021-03-11 12:30:03,358 [main:137] - TRYING TO REPLACE CONSTANT 111
2021-03-11 12:30:03,457 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:30:03,457 [main:66] - Compilation checking started
2021-03-11 12:30:03,711 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((size).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}


2021-03-11 12:30:03,711 [main:46] - AFTER TRY 1 res = fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}


2021-03-11 12:30:03,899 [main:112] - generating klass Kla0 text = inline class Kla0(val int: Int)
2021-03-11 12:30:04,032 [main:194] - Type params = []
2021-03-11 12:30:04,136 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:30:04,137 [main:112] - generating klass Kla1 text = inline class Kla1(val long: Long)
2021-03-11 12:30:04,230 [main:194] - Type params = []
2021-03-11 12:30:04,323 [main:302] - generating value of type = Long true depth = 1
2021-03-11 12:30:04,325 [main:112] - generating klass Kla2 text = inline class Kla2(val string: String)
2021-03-11 12:30:04,422 [main:194] - Type params = []
2021-03-11 12:30:04,515 [main:302] - generating value of type = String true depth = 1
2021-03-11 12:30:04,516 [main:112] - generating klass Kla3 text = inline class Kla3(val obj: Any)
2021-03-11 12:30:04,609 [main:194] - Type params = []
2021-03-11 12:30:04,717 [main:302] - generating value of type = Any false depth = 1
2021-03-11 12:30:04,917 [main:48] - Try №1
2021-03-11 12:30:05,865 [main:71] - Trying to insert fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()
2021-03-11 12:30:06,008 [main:66] - Compilation checking started
2021-03-11 12:30:06,722 [main:99] - Trying to change 14 nodes
2021-03-11 12:30:06,722 [main:103] - replacing (fu0.s, String)
2021-03-11 12:30:06,722 [main:38] - replacing fu0.s String
2021-03-11 12:30:06,722 [main:42] - Getting value of type String
2021-03-11 12:30:06,829 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:30:06,829 [main:46] - GENERATED VALUE OF TYPE String = "jskny"
2021-03-11 12:30:06,830 [main:49] - GENERATED IS CALL =false
2021-03-11 12:30:06,832 [main:55] - randomType = Kla1
2021-03-11 12:30:06,939 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:30:06,940 [main:112] - generating klass Kla1 text = inline class Kla1(val long: Long)
2021-03-11 12:30:07,045 [main:194] - Type params = []
2021-03-11 12:30:07,148 [main:302] - generating value of type = Long true depth = 2
2021-03-11 12:30:07,154 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:30:07,256 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:07,258 [main:66] - Generated call from random type = (Kla1(3422920293786195268)).long.toString(-401733366)
2021-03-11 12:30:07,259 [main:94] - GETTING String from Boolean
2021-03-11 12:30:07,276 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:30:07,277 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:30:07,388 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:30:07,389 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:30:07,493 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:07,494 [main:105] - GENERATED CALL = (list4.add(i)).compareTo(false).toString(1702282083)
2021-03-11 12:30:07,494 [main:110] - replacement of fu0.s of type String is (list4.add(i)).compareTo(false).toString(1702282083)
2021-03-11 12:30:07,597 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:30:07,597 [main:66] - Compilation checking started
2021-03-11 12:30:07,914 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("OK")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = fu1 {
    val prope5 = fu0()
    if (prope5 == null) throw Exception()
    prope5
}

fun box747() = (list4.add(i)).compareTo(false).toString(1702282083)


2021-03-11 12:30:07,914 [main:103] - replacing (fu0, Kla4)
2021-03-11 12:30:07,914 [main:38] - replacing fu0 Kla4
2021-03-11 12:30:07,914 [main:42] - Getting value of type Kla4
2021-03-11 12:30:08,020 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:30:08,021 [main:112] - generating klass Kla4 text = class Kla4(val s: String)
2021-03-11 12:30:08,128 [main:194] - Type params = []
2021-03-11 12:30:08,227 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:30:08,228 [main:46] - GENERATED VALUE OF TYPE Kla4 = Kla4("vgjqn")
2021-03-11 12:30:08,228 [main:49] - GENERATED IS CALL =true
2021-03-11 12:30:08,231 [main:55] - randomType = Kla4
2021-03-11 12:30:08,329 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:30:08,330 [main:112] - generating klass Kla4 text = class Kla4(val s: String)
2021-03-11 12:30:08,429 [main:194] - Type params = []
2021-03-11 12:30:08,527 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:30:08,536 [main:94] - GETTING Kla4 from MutableIterator<Kla0?>
2021-03-11 12:30:08,556 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:08,596 [main:94] - GETTING Kla4 from ArrayList<UInt>
2021-03-11 12:30:08,730 [main:94] - GETTING Kla4 from Byte
2021-03-11 12:30:08,761 [main:94] - GETTING Kla4 from ArrayList<UInt>
2021-03-11 12:30:08,762 [main:94] - GETTING Kla4 from Float
2021-03-11 12:30:08,792 [main:94] - GETTING Kla4 from Kla0?
2021-03-11 12:30:08,798 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:30:08,806 [main:94] - GETTING Kla4 from Function0<Unit>
2021-03-11 12:30:08,814 [main:94] - GETTING Kla4 from ArrayList<ULong>
2021-03-11 12:30:08,928 [main:94] - GETTING Kla4 from Double
2021-03-11 12:30:08,955 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:08,956 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:08,956 [main:94] - GETTING Kla4 from Any
2021-03-11 12:30:08,960 [main:94] - GETTING Kla4 from HashSet<Kla0?>
2021-03-11 12:30:09,093 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:09,094 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:30:09,094 [main:94] - GETTING Kla4 from UByte
2021-03-11 12:30:09,119 [main:94] - GETTING Kla4 from UShort
2021-03-11 12:30:09,144 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:09,144 [main:94] - GETTING Kla4 from Array<Any?>
2021-03-11 12:30:09,157 [main:94] - GETTING Kla4 from ArrayList<UInt>
2021-03-11 12:30:09,158 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:30:09,159 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:09,159 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:30:09,160 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:09,160 [main:94] - GETTING Kla4 from Double
2021-03-11 12:30:09,161 [main:94] - GETTING Kla4 from Long
2021-03-11 12:30:09,192 [main:94] - GETTING Kla4 from String
2021-03-11 12:30:09,208 [main:94] - GETTING Kla4 from Float
2021-03-11 12:30:09,209 [main:94] - GETTING Kla4 from HashSet<Kla0?>
2021-03-11 12:30:09,209 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:09,210 [main:94] - GETTING Kla4 from ArrayList<UInt>
2021-03-11 12:30:09,210 [main:110] - replacement of fu0 of type Kla4 is Kla4("vgjqn")
2021-03-11 12:30:09,308 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:30:09,308 [main:66] - Compilation checking started
2021-03-11 12:30:09,736 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("OK")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = fu1 {
    val prope5 = fu0()
    if (prope5 == null) throw Exception()
    prope5
}

fun box747() = Kla4("vgjqn").s


2021-03-11 12:30:09,737 [main:103] - replacing (fu1 {
    val prope5 = fu0()
    if (prope5 == null) throw Exception()
    prope5
}, Kla4)
2021-03-11 12:30:09,737 [main:38] - replacing fu1 {
    val prope5 = fu0()
    if (prope5 == null) throw Exception()
    prope5
} Kla4
2021-03-11 12:30:09,737 [main:42] - Getting value of type Kla4
2021-03-11 12:30:09,841 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:30:09,842 [main:112] - generating klass Kla4 text = class Kla4(val s: String)
2021-03-11 12:30:09,953 [main:194] - Type params = []
2021-03-11 12:30:10,060 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:30:10,061 [main:46] - GENERATED VALUE OF TYPE Kla4 = Kla4("zidgl")
2021-03-11 12:30:10,061 [main:49] - GENERATED IS CALL =true
2021-03-11 12:30:10,064 [main:55] - randomType = Kla3
2021-03-11 12:30:10,166 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:30:10,167 [main:112] - generating klass Kla3 text = inline class Kla3(val obj: Any)
2021-03-11 12:30:10,271 [main:194] - Type params = []
2021-03-11 12:30:10,372 [main:302] - generating value of type = Any false depth = 2
2021-03-11 12:30:10,379 [main:94] - GETTING Kla4 from ArrayList<UInt>
2021-03-11 12:30:10,492 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:10,522 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:30:10,531 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:10,532 [main:94] - GETTING Kla4 from Long
2021-03-11 12:30:10,562 [main:94] - GETTING Kla4 from MutableIterator<Kla0?>
2021-03-11 12:30:10,578 [main:94] - GETTING Kla4 from Kla0?
2021-03-11 12:30:10,586 [main:94] - GETTING Kla4 from ArrayList<UInt>
2021-03-11 12:30:10,587 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:30:10,587 [main:94] - GETTING Kla4 from UByte
2021-03-11 12:30:10,612 [main:94] - GETTING Kla4 from Float
2021-03-11 12:30:10,640 [main:94] - GETTING Kla4 from ArrayList<ULong>
2021-03-11 12:30:10,753 [main:94] - GETTING Kla4 from HashSet<Kla0?>
2021-03-11 12:30:10,881 [main:94] - GETTING Kla4 from Byte
2021-03-11 12:30:10,928 [main:94] - GETTING Kla4 from Double
2021-03-11 12:30:10,964 [main:94] - GETTING Kla4 from Function0<Unit>
2021-03-11 12:30:10,978 [main:94] - GETTING Kla4 from ArrayList<UInt>
2021-03-11 12:30:10,978 [main:94] - GETTING Kla4 from String
2021-03-11 12:30:11,006 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:11,007 [main:94] - GETTING Kla4 from HashSet<Kla0?>
2021-03-11 12:30:11,008 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:11,009 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:30:11,009 [main:94] - GETTING Kla4 from UShort
2021-03-11 12:30:11,046 [main:94] - GETTING Kla4 from Any
2021-03-11 12:30:11,051 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:11,052 [main:94] - GETTING Kla4 from ArrayList<UInt>
2021-03-11 12:30:11,053 [main:94] - GETTING Kla4 from Double
2021-03-11 12:30:11,053 [main:94] - GETTING Kla4 from Float
2021-03-11 12:30:11,054 [main:94] - GETTING Kla4 from Array<Any?>
2021-03-11 12:30:11,072 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:11,073 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:30:11,073 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:11,074 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:11,074 [main:110] - replacement of fu1 {
    val prope5 = fu0()
    if (prope5 == null) throw Exception()
    prope5
} of type Kla4 is Kla4("zidgl")
2021-03-11 12:30:11,174 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:30:11,174 [main:66] - Compilation checking started
2021-03-11 12:30:11,614 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("OK")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s


2021-03-11 12:30:11,614 [main:103] - replacing ("OK", String)
2021-03-11 12:30:11,614 [main:38] - replacing "OK" String
2021-03-11 12:30:11,614 [main:42] - Getting value of type String
2021-03-11 12:30:11,718 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:30:11,719 [main:46] - GENERATED VALUE OF TYPE String = "ckcjz"
2021-03-11 12:30:11,719 [main:49] - GENERATED IS CALL =false
2021-03-11 12:30:11,932 [main:55] - randomType = ArrayList<LinkedHashSet<Kla1>>
2021-03-11 12:30:12,031 [main:302] - generating value of type = ArrayList<LinkedHashSet<Kla1>> false depth = 0
2021-03-11 12:30:12,136 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: LinkedHashSet<Kla1>): ArrayList<LkedHashSet<Kla1>> = TODO()
2021-03-11 12:30:12,137 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: LinkedHashSet<Kla1>): ArrayList<LkedHashSet<Kla1>> = TODO()
2021-03-11 12:30:12,239 [main:302] - generating value of type = LinkedHashSet<Kla1> false depth = 3
2021-03-11 12:30:12,341 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Kla1> = TODO()
2021-03-11 12:30:12,343 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Kla1> = TODO()
2021-03-11 12:30:12,645 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:30:12,646 [main:302] - generating value of type = Float true depth = 6
2021-03-11 12:30:12,647 [main:95] - GENERATED = LinkedHashSet<Kla1>(-920118144, 0.59201044f)
2021-03-11 12:30:12,647 [main:95] - GENERATED = arrayListOf<LinkedHashSet<Kla1>>(LinkedHashSet<Kla1>(-920118144, 0.59201044f))
2021-03-11 12:30:12,804 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3f274bca]
2021-03-11 12:30:12,804 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]
2021-03-11 12:30:12,804 [main:66] - Generated call from random type = (arrayListOf<LinkedHashSet<Kla1>>(LinkedHashSet<Kla1>(-920118144, 0.59201044f))).toArray().contentToString()
2021-03-11 12:30:12,805 [main:94] - GETTING String from ArrayList<UInt>
2021-03-11 12:30:12,919 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@35f6de3f], @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]]
2021-03-11 12:30:12,920 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@35f6de3f]
2021-03-11 12:30:12,920 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]
2021-03-11 12:30:12,920 [main:105] - GENERATED CALL = (list3).toArray().contentToString()
2021-03-11 12:30:12,920 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@35f6de3f], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]]
2021-03-11 12:30:12,920 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@35f6de3f]
2021-03-11 12:30:12,920 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]
2021-03-11 12:30:12,920 [main:105] - GENERATED CALL = (list3).toArray().contentDeepToString()
2021-03-11 12:30:12,920 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]]
2021-03-11 12:30:12,920 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]
2021-03-11 12:30:13,018 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:13,118 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:13,221 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:13,321 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:30:13,322 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:30:13,522 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:30:13,523 [main:95] - GENERATED = StringBuilder(690827569)
2021-03-11 12:30:13,618 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:13,714 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:13,815 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:13,817 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:14,022 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:30:14,026 [main:95] - GENERATED = StringBuilder("kjomd")
2021-03-11 12:30:14,123 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:30:14,124 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:30:14,227 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:30:14,229 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:30:14,439 [main:302] - generating value of type = String true depth = 4
2021-03-11 12:30:14,440 [main:95] - GENERATED = StringBuilder("slcah")
2021-03-11 12:30:14,441 [main:105] - GENERATED CALL = (list3).joinToString("bwoyq", "rzquo", StringBuilder(690827569), 1303541708, StringBuilder("kjomd"), {a: T -> StringBuilder("slcah")})
2021-03-11 12:30:14,441 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@35f6de3f], public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]]
2021-03-11 12:30:14,441 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@35f6de3f]
2021-03-11 12:30:14,441 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]
2021-03-11 12:30:14,537 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:14,636 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:14,637 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:14,839 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:30:14,843 [main:95] - GENERATED = StringBuilder("oxeag")
2021-03-11 12:30:14,941 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:15,088 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:15,190 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:15,288 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:15,389 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:30:15,389 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:30:15,393 [main:105] - GENERATED CALL = (list3).toArray().joinToString(StringBuilder("oxeag"), StringBuilder(), "xrekt", -1666495965, "rjoyp", {a: T -> "zgmqk"})
2021-03-11 12:30:15,393 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4d95513c], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3901601b]]
2021-03-11 12:30:15,393 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4d95513c]
2021-03-11 12:30:15,490 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:15,491 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3901601b]
2021-03-11 12:30:15,587 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:15,588 [main:105] - GENERATED CALL = (list3).get(763669725).toString(-1705694460)
2021-03-11 12:30:15,588 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@48ad5682], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:30:15,588 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:30:15,685 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:15,686 [main:105] - GENERATED CALL = (list3).size.toString(1203118130)
2021-03-11 12:30:15,686 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@23e44673], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:30:15,686 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:30:15,784 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:15,785 [main:105] - GENERATED CALL = (list3).modCount.toString(938010920)
2021-03-11 12:30:15,785 [main:110] - replacement of "OK" of type String is "ckcjz"
2021-03-11 12:30:15,881 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 12:30:15,881 [main:66] - Compilation checking started
2021-03-11 12:30:16,300 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("ckcjz")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s


2021-03-11 12:30:16,300 [main:103] - replacing (Kla4("ckcjz"), Kla4)
2021-03-11 12:30:16,300 [main:38] - replacing Kla4("ckcjz") Kla4
2021-03-11 12:30:16,300 [main:42] - Getting value of type Kla4
2021-03-11 12:30:16,398 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:30:16,398 [main:112] - generating klass Kla4 text = class Kla4(val s: String)
2021-03-11 12:30:16,495 [main:194] - Type params = []
2021-03-11 12:30:16,592 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:30:16,593 [main:46] - GENERATED VALUE OF TYPE Kla4 = Kla4("iufpx")
2021-03-11 12:30:16,593 [main:49] - GENERATED IS CALL =true
2021-03-11 12:30:16,596 [main:55] - randomType = Kla4
2021-03-11 12:30:16,692 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:30:16,693 [main:112] - generating klass Kla4 text = class Kla4(val s: String)
2021-03-11 12:30:16,788 [main:194] - Type params = []
2021-03-11 12:30:16,885 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:30:16,893 [main:94] - GETTING Kla4 from HashSet<Kla0?>
2021-03-11 12:30:17,018 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:17,050 [main:94] - GETTING Kla4 from Long
2021-03-11 12:30:17,084 [main:94] - GETTING Kla4 from Float
2021-03-11 12:30:17,113 [main:94] - GETTING Kla4 from HashSet<Kla0?>
2021-03-11 12:30:17,114 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:17,114 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:17,115 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:17,115 [main:94] - GETTING Kla4 from String
2021-03-11 12:30:17,132 [main:94] - GETTING Kla4 from Function0<Unit>
2021-03-11 12:30:17,141 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:17,142 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:30:17,150 [main:94] - GETTING Kla4 from Double
2021-03-11 12:30:17,179 [main:94] - GETTING Kla4 from ArrayList<UInt>
2021-03-11 12:30:17,291 [main:94] - GETTING Kla4 from Float
2021-03-11 12:30:17,291 [main:94] - GETTING Kla4 from Byte
2021-03-11 12:30:17,321 [main:94] - GETTING Kla4 from ArrayList<UInt>
2021-03-11 12:30:17,322 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:17,322 [main:94] - GETTING Kla4 from Any
2021-03-11 12:30:17,326 [main:94] - GETTING Kla4 from Array<Any?>
2021-03-11 12:30:17,337 [main:94] - GETTING Kla4 from UByte
2021-03-11 12:30:17,364 [main:94] - GETTING Kla4 from MutableIterator<Kla0?>
2021-03-11 12:30:17,387 [main:94] - GETTING Kla4 from Kla0?
2021-03-11 12:30:17,395 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:30:17,396 [main:94] - GETTING Kla4 from Double
2021-03-11 12:30:17,396 [main:94] - GETTING Kla4 from UShort
2021-03-11 12:30:17,429 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:17,429 [main:94] - GETTING Kla4 from ArrayList<UInt>
2021-03-11 12:30:17,430 [main:94] - GETTING Kla4 from ArrayList<ULong>
2021-03-11 12:30:17,552 [main:94] - GETTING Kla4 from Int
2021-03-11 12:30:17,553 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:30:17,553 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:30:17,554 [main:94] - GETTING Kla4 from ArrayList<UInt>
2021-03-11 12:30:17,554 [main:110] - replacement of Kla4("ckcjz") of type Kla4 is Kla4("iufpx")
2021-03-11 12:30:17,648 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:30:17,649 [main:66] - Compilation checking started
2021-03-11 12:30:18,067 [main:53] - Result = true
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s


2021-03-11 12:30:18,067 [main:103] - replacing (f, Function0<Ty0>)
2021-03-11 12:30:18,067 [main:38] - replacing f Function0<Ty0>
2021-03-11 12:30:18,067 [main:42] - Getting value of type Function0<Ty0>
2021-03-11 12:30:18,165 [main:302] - generating value of type = Function0<Ty0> false depth = 0
2021-03-11 12:30:18,166 [main:302] - generating value of type = Ty0 false depth = 1
2021-03-11 12:30:18,169 [main:46] - GENERATED VALUE OF TYPE Function0<Ty0> = { }
2021-03-11 12:30:18,169 [main:49] - GENERATED IS CALL =false
2021-03-11 12:30:18,172 [main:55] - randomType = Kla4
2021-03-11 12:30:18,270 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:30:18,271 [main:112] - generating klass Kla4 text = class Kla4(val s: String)
2021-03-11 12:30:18,366 [main:194] - Type params = []
2021-03-11 12:30:18,461 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:30:18,470 [main:94] - GETTING Function0<Ty0> from ArrayList<UInt>
2021-03-11 12:30:18,594 [main:94] - GETTING Function0<Ty0> from Boolean
2021-03-11 12:30:18,603 [main:94] - GETTING Function0<Ty0> from Array<Any?>
2021-03-11 12:30:18,616 [main:94] - GETTING Function0<Ty0> from Double
2021-03-11 12:30:18,658 [main:94] - GETTING Function0<Ty0> from String
2021-03-11 12:30:18,679 [main:94] - GETTING Function0<Ty0> from MutableIterator<Kla0?>
2021-03-11 12:30:18,697 [main:94] - GETTING Function0<Ty0> from Boolean
2021-03-11 12:30:18,698 [main:94] - GETTING Function0<Ty0> from UByte
2021-03-11 12:30:18,774 [main:94] - GETTING Function0<Ty0> from Double
2021-03-11 12:30:18,775 [main:94] - GETTING Function0<Ty0> from ArrayList<UInt>
2021-03-11 12:30:18,776 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:18,815 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:18,816 [main:94] - GETTING Function0<Ty0> from HashSet<Kla0?>
2021-03-11 12:30:18,952 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:18,953 [main:94] - GETTING Function0<Ty0> from Boolean
2021-03-11 12:30:18,954 [main:94] - GETTING Function0<Ty0> from Float
2021-03-11 12:30:18,987 [main:94] - GETTING Function0<Ty0> from Any
2021-03-11 12:30:18,991 [main:94] - GETTING Function0<Ty0> from UShort
2021-03-11 12:30:19,018 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:19,019 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:19,020 [main:94] - GETTING Function0<Ty0> from HashSet<Kla0?>
2021-03-11 12:30:19,021 [main:94] - GETTING Function0<Ty0> from ArrayList<UInt>
2021-03-11 12:30:19,022 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:19,023 [main:94] - GETTING Function0<Ty0> from Byte
2021-03-11 12:30:19,062 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:19,063 [main:94] - GETTING Function0<Ty0> from ArrayList<ULong>
2021-03-11 12:30:19,172 [main:94] - GETTING Function0<Ty0> from ArrayList<UInt>
2021-03-11 12:30:19,173 [main:94] - GETTING Function0<Ty0> from Float
2021-03-11 12:30:19,174 [main:94] - GETTING Function0<Ty0> from Boolean
2021-03-11 12:30:19,175 [main:94] - GETTING Function0<Ty0> from Kla0?
2021-03-11 12:30:19,182 [main:94] - GETTING Function0<Ty0> from Long
2021-03-11 12:30:19,211 [main:94] - GETTING Function0<Ty0> from Function0<Unit>
2021-03-11 12:30:19,220 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:19,220 [main:110] - replacement of f of type Function0<Ty0> is { }
2021-03-11 12:30:19,325 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:30:19,326 [main:66] - Compilation checking started
2021-03-11 12:30:19,585 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = { }()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s


2021-03-11 12:30:19,585 [main:103] - replacing (f, Function0<Ty0>)
2021-03-11 12:30:19,585 [main:38] - replacing f Function0<Ty0>
2021-03-11 12:30:19,585 [main:42] - Getting value of type Function0<Ty0>
2021-03-11 12:30:19,683 [main:302] - generating value of type = Function0<Ty0> false depth = 0
2021-03-11 12:30:19,684 [main:302] - generating value of type = Ty0 false depth = 1
2021-03-11 12:30:19,687 [main:46] - GENERATED VALUE OF TYPE Function0<Ty0> = { }
2021-03-11 12:30:19,687 [main:49] - GENERATED IS CALL =false
2021-03-11 12:30:19,690 [main:55] - randomType = Kla0
2021-03-11 12:30:19,787 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:30:19,788 [main:112] - generating klass Kla0 text = inline class Kla0(val int: Int)
2021-03-11 12:30:19,884 [main:194] - Type params = []
2021-03-11 12:30:19,981 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:30:19,990 [main:94] - GETTING Function0<Ty0> from Boolean
2021-03-11 12:30:20,001 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:20,031 [main:94] - GETTING Function0<Ty0> from Double
2021-03-11 12:30:20,059 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:20,060 [main:94] - GETTING Function0<Ty0> from String
2021-03-11 12:30:20,083 [main:94] - GETTING Function0<Ty0> from Boolean
2021-03-11 12:30:20,084 [main:94] - GETTING Function0<Ty0> from Boolean
2021-03-11 12:30:20,085 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:20,086 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:20,087 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:20,088 [main:94] - GETTING Function0<Ty0> from Byte
2021-03-11 12:30:20,140 [main:94] - GETTING Function0<Ty0> from Boolean
2021-03-11 12:30:20,141 [main:94] - GETTING Function0<Ty0> from ArrayList<ULong>
2021-03-11 12:30:20,266 [main:94] - GETTING Function0<Ty0> from Float
2021-03-11 12:30:20,294 [main:94] - GETTING Function0<Ty0> from Float
2021-03-11 12:30:20,295 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:20,296 [main:94] - GETTING Function0<Ty0> from Function0<Unit>
2021-03-11 12:30:20,305 [main:94] - GETTING Function0<Ty0> from ArrayList<UInt>
2021-03-11 12:30:20,415 [main:94] - GETTING Function0<Ty0> from UShort
2021-03-11 12:30:20,437 [main:94] - GETTING Function0<Ty0> from ArrayList<UInt>
2021-03-11 12:30:20,438 [main:94] - GETTING Function0<Ty0> from Kla0?
2021-03-11 12:30:20,445 [main:94] - GETTING Function0<Ty0> from HashSet<Kla0?>
2021-03-11 12:30:20,564 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:20,565 [main:94] - GETTING Function0<Ty0> from ArrayList<UInt>
2021-03-11 12:30:20,566 [main:94] - GETTING Function0<Ty0> from ArrayList<UInt>
2021-03-11 12:30:20,567 [main:94] - GETTING Function0<Ty0> from MutableIterator<Kla0?>
2021-03-11 12:30:20,584 [main:94] - GETTING Function0<Ty0> from HashSet<Kla0?>
2021-03-11 12:30:20,585 [main:94] - GETTING Function0<Ty0> from Any
2021-03-11 12:30:20,589 [main:94] - GETTING Function0<Ty0> from Double
2021-03-11 12:30:20,590 [main:94] - GETTING Function0<Ty0> from UByte
2021-03-11 12:30:20,615 [main:94] - GETTING Function0<Ty0> from Array<Any?>
2021-03-11 12:30:20,626 [main:94] - GETTING Function0<Ty0> from Long
2021-03-11 12:30:20,663 [main:94] - GETTING Function0<Ty0> from Int
2021-03-11 12:30:20,663 [main:110] - replacement of f of type Function0<Ty0> is { }
2021-03-11 12:30:20,759 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:30:20,759 [main:66] - Compilation checking started
2021-03-11 12:30:21,033 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = { }()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s


2021-03-11 12:30:21,034 [main:103] - replacing (s, String)
2021-03-11 12:30:21,034 [main:38] - replacing s String
2021-03-11 12:30:21,034 [main:42] - Getting value of type String
2021-03-11 12:30:21,131 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:30:21,131 [main:46] - GENERATED VALUE OF TYPE String = "stdsn"
2021-03-11 12:30:21,132 [main:49] - GENERATED IS CALL =false
2021-03-11 12:30:21,134 [main:55] - randomType = Kla1
2021-03-11 12:30:21,231 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:30:21,231 [main:112] - generating klass Kla1 text = inline class Kla1(val long: Long)
2021-03-11 12:30:21,327 [main:194] - Type params = []
2021-03-11 12:30:21,423 [main:302] - generating value of type = Long true depth = 2
2021-03-11 12:30:21,431 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:30:21,528 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:21,529 [main:66] - Generated call from random type = (Kla1(-8519961940763154759)).long.toString(-2008549567)
2021-03-11 12:30:21,530 [main:94] - GETTING String from Boolean
2021-03-11 12:30:21,541 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:30:21,541 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:30:21,638 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:30:21,639 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:30:21,735 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:21,736 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).toString(-953570912)
2021-03-11 12:30:21,736 [main:110] - replacement of s of type String is "stdsn"
2021-03-11 12:30:21,831 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:30:21,832 [main:66] - Compilation checking started
2021-03-11 12:30:22,089 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn")."stdsn"


2021-03-11 12:30:22,089 [main:103] - replacing (s, String)
2021-03-11 12:30:22,089 [main:38] - replacing s String
2021-03-11 12:30:22,089 [main:42] - Getting value of type String
2021-03-11 12:30:22,187 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:30:22,188 [main:46] - GENERATED VALUE OF TYPE String = "dmzjf"
2021-03-11 12:30:22,188 [main:49] - GENERATED IS CALL =false
2021-03-11 12:30:22,190 [main:55] - randomType = Int
2021-03-11 12:30:22,334 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:22,388 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac]
2021-03-11 12:30:22,484 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:30:22,485 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:30:22,581 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:22,582 [main:66] - Generated call from random type = (-1255289071).div(-760085120223868293).toString(-804071554)
2021-03-11 12:30:22,583 [main:94] - GETTING String from Double
2021-03-11 12:30:22,620 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]]
2021-03-11 12:30:22,620 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c]
2021-03-11 12:30:22,620 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]
2021-03-11 12:30:22,620 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toChar().lowercase()
2021-03-11 12:30:22,620 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:30:22,620 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:30:22,620 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:30:22,715 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:22,716 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toInt().toString(857767133)
2021-03-11 12:30:22,716 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3fac6f2e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:30:22,716 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3fac6f2e]
2021-03-11 12:30:22,813 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:30:22,814 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:30:22,909 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:22,910 [main:105] - GENERATED CALL = ((list3.size).toDouble()).compareTo(68).toString(-351755889)
2021-03-11 12:30:22,911 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]]
2021-03-11 12:30:22,911 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c]
2021-03-11 12:30:22,911 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]
2021-03-11 12:30:22,911 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toChar().uppercase()
2021-03-11 12:30:22,911 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]]
2021-03-11 12:30:22,911 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c]
2021-03-11 12:30:22,911 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]
2021-03-11 12:30:23,008 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:30:23,009 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toChar().plus("qemka")
2021-03-11 12:30:23,009 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]]
2021-03-11 12:30:23,009 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c]
2021-03-11 12:30:23,009 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]
2021-03-11 12:30:23,009 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toChar().titlecase()
2021-03-11 12:30:23,009 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@599f178a], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:30:23,009 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@599f178a]
2021-03-11 12:30:23,009 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:30:23,106 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:23,107 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toLong().toString(666832645)
2021-03-11 12:30:23,107 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2300c37f], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]]
2021-03-11 12:30:23,108 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2300c37f]
2021-03-11 12:30:23,108 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]
2021-03-11 12:30:23,203 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:23,204 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toShort().toString(-1343116189)
2021-03-11 12:30:23,204 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@176dd857], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]]
2021-03-11 12:30:23,204 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@176dd857]
2021-03-11 12:30:23,204 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]
2021-03-11 12:30:23,301 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:23,302 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toByte().toString(-1707675824)
2021-03-11 12:30:23,302 [main:110] - replacement of s of type String is "dmzjf"
2021-03-11 12:30:23,399 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:30:23,399 [main:66] - Compilation checking started
2021-03-11 12:30:23,650 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn")."dmzjf"


2021-03-11 12:30:23,650 [main:103] - replacing (s, String)
2021-03-11 12:30:23,650 [main:38] - replacing s String
2021-03-11 12:30:23,650 [main:42] - Getting value of type String
2021-03-11 12:30:23,747 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:30:23,748 [main:46] - GENERATED VALUE OF TYPE String = "xwybc"
2021-03-11 12:30:23,748 [main:49] - GENERATED IS CALL =false
2021-03-11 12:30:23,749 [main:55] - randomType = ULong
2021-03-11 12:30:23,845 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:30:23,886 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@553d8221]
2021-03-11 12:30:23,987 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:30:23,988 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:30:24,083 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:24,084 [main:66] - Generated call from random type = (5083643751587626059.toULong()).compareTo(47.toUByte()).toString(1432591736)
2021-03-11 12:30:24,084 [main:94] - GETTING String from String
2021-03-11 12:30:24,105 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6476a24f]]
2021-03-11 12:30:24,105 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6476a24f]
2021-03-11 12:30:24,201 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:24,302 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:30:24,303 [main:105] - GENERATED CALL = (Kla2("vhqms").string).padStart(-1150707243, '൓')
2021-03-11 12:30:24,303 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8c8be89]]
2021-03-11 12:30:24,303 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8c8be89]
2021-03-11 12:30:24,403 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:24,509 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:30:24,511 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:30:24,712 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:30:24,713 [main:95] - GENERATED = StringBuilder("tyqts")
2021-03-11 12:30:24,713 [main:105] - GENERATED CALL = (Kla2("vhqms").string).removeSuffix(StringBuilder("tyqts"))
2021-03-11 12:30:24,713 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aba7aa1]]
2021-03-11 12:30:24,713 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aba7aa1]
2021-03-11 12:30:24,808 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:24,905 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:25,004 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:25,105 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:30:25,106 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:30:25,309 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:30:25,310 [main:95] - GENERATED = StringBuilder(65829148)
2021-03-11 12:30:25,311 [main:105] - GENERATED CALL = (Kla2("vhqms").string).replaceRange(681318723, 634004484, StringBuilder(65829148))
2021-03-11 12:30:25,311 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e843d50]]
2021-03-11 12:30:25,311 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e843d50]
2021-03-11 12:30:25,411 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:30:25,412 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:30:25,413 [main:105] - GENERATED CALL = (Kla2("vhqms").string).dropWhile({a: Char -> false})
2021-03-11 12:30:25,413 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a760d7b]]
2021-03-11 12:30:25,413 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a760d7b]
2021-03-11 12:30:25,510 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:25,510 [main:105] - GENERATED CALL = (Kla2("vhqms").string).repeat(555751591)
2021-03-11 12:30:25,511 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edb3da1]]
2021-03-11 12:30:25,511 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edb3da1]
2021-03-11 12:30:25,511 [main:105] - GENERATED CALL = (Kla2("vhqms").string).trim()
2021-03-11 12:30:25,511 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@295b0f47]]
2021-03-11 12:30:25,511 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@295b0f47]
2021-03-11 12:30:25,606 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:30:25,607 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:30:25,608 [main:105] - GENERATED CALL = (Kla2("vhqms").string).takeLastWhile({a: Char -> false})
2021-03-11 12:30:25,608 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b8ccebb]]
2021-03-11 12:30:25,608 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b8ccebb]
2021-03-11 12:30:25,608 [main:105] - GENERATED CALL = (Kla2("vhqms").string).decapitalize()
2021-03-11 12:30:25,608 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c497949], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@254baf83]]
2021-03-11 12:30:25,608 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5c497949]
2021-03-11 12:30:25,704 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:25,801 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:25,802 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@254baf83]
2021-03-11 12:30:25,947 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:30:26,044 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:30:26,046 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:30:26,362 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:30:26,363 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 12:30:26,474 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-11 12:30:26,476 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-11 12:30:26,575 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-11 12:30:26,578 [main:95] - GENERATED = hashSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)
2021-03-11 12:30:26,579 [main:95] - GENERATED = Regex("tpdwy", hashSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE))
2021-03-11 12:30:26,676 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 12:30:26,677 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:30:26,775 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:26,777 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:26,976 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-11 12:30:27,074 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:30:27,077 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:30:27,287 [main:302] - generating value of type = String true depth = 7
2021-03-11 12:30:27,288 [main:95] - GENERATED = StringBuilder("skesj")
2021-03-11 12:30:27,289 [main:95] - GENERATED = StringBuilder(StringBuilder("skesj"))
2021-03-11 12:30:27,289 [main:105] - GENERATED CALL = (Kla2("vhqms").string).subSequence(-844462577, -865082729).replace(Regex("tpdwy", hashSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)), {a: MatchResult -> StringBuilder(StringBuilder("skesj"))})
2021-03-11 12:30:27,289 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d8c607]]
2021-03-11 12:30:27,289 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70d8c607]
2021-03-11 12:30:27,289 [main:105] - GENERATED CALL = (Kla2("vhqms").string).lowercase()
2021-03-11 12:30:27,289 [main:110] - replacement of s of type String is (Kla2("vhqms").string).decapitalize()
2021-03-11 12:30:27,389 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:30:27,389 [main:66] - Compilation checking started
2021-03-11 12:30:27,651 [main:49] - Result = false
Text:
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").(Kla2("vhqms").string).decapitalize()


2021-03-11 12:30:27,748 [main:46] - AFTER TRY 2 res = fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s


2021-03-11 12:30:27,940 [main:112] - generating klass Kla0 text = inline class Kla0(val int: Int)
2021-03-11 12:30:28,036 [main:194] - Type params = []
2021-03-11 12:30:28,134 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:30:28,135 [main:112] - generating klass Kla1 text = inline class Kla1(val long: Long)
2021-03-11 12:30:28,230 [main:194] - Type params = []
2021-03-11 12:30:28,325 [main:302] - generating value of type = Long true depth = 1
2021-03-11 12:30:28,326 [main:112] - generating klass Kla2 text = inline class Kla2(val string: String)
2021-03-11 12:30:28,421 [main:194] - Type params = []
2021-03-11 12:30:28,517 [main:302] - generating value of type = String true depth = 1
2021-03-11 12:30:28,518 [main:112] - generating klass Kla3 text = inline class Kla3(val obj: Any)
2021-03-11 12:30:28,613 [main:194] - Type params = []
2021-03-11 12:30:28,708 [main:302] - generating value of type = Any false depth = 1
2021-03-11 12:30:28,709 [main:112] - generating klass Kla4 text = class Kla4(val s: String)
2021-03-11 12:30:28,804 [main:194] - Type params = []
2021-03-11 12:30:28,900 [main:302] - generating value of type = String true depth = 1
2021-03-11 12:30:29,099 [main:43] - GENERATING CALL OF fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()
2021-03-11 12:30:29,105 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu1(f: () -> Kla4?): Kla4? = f()
2021-03-11 12:30:29,307 [main:302] - generating value of type = Function0<Kla4?> false depth = 1
2021-03-11 12:30:29,308 [main:302] - generating value of type = Kla4 false depth = 2
2021-03-11 12:30:29,308 [main:112] - generating klass Kla4 text = class Kla4(val s: String)
2021-03-11 12:30:29,404 [main:194] - Type params = []
2021-03-11 12:30:29,499 [main:302] - generating value of type = String true depth = 4
2021-03-11 12:30:29,500 [main:95] - GENERATED = fu1<Kla4?>({ Kla4("kfann")})
2021-03-11 12:30:29,659 [main:48] - Try №2
2021-03-11 12:30:37,100 [main:48] - Already checked
2021-03-11 12:30:39,962 [main:71] - Trying to insert suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { prope9.resume(Unit) }
    }
2021-03-11 12:30:40,049 [main:66] - Compilation checking started
2021-03-11 12:30:41,220 [main:99] - Trying to change 141 nodes
2021-03-11 12:30:41,221 [main:103] - replacing (getOrThrow(), Ty1)
2021-03-11 12:30:41,224 [main:38] - replacing getOrThrow() Ty1
2021-03-11 12:30:41,224 [main:42] - Getting value of type Ty1
2021-03-11 12:30:41,385 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 12:30:41,391 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 12:30:41,397 [main:55] - randomType = Byte
2021-03-11 12:30:41,560 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:30:41,601 [main:94] - GETTING Ty1 from Boolean
2021-03-11 12:30:41,609 [main:94] - GETTING Ty1 from Int
2021-03-11 12:30:41,640 [main:94] - GETTING Ty1 from Int
2021-03-11 12:30:41,640 [main:94] - GETTING Ty1 from Double
2021-03-11 12:30:41,669 [main:94] - GETTING Ty1 from Boolean
2021-03-11 12:30:41,670 [main:94] - GETTING Ty1 from Int
2021-03-11 12:30:41,671 [main:94] - GETTING Ty1 from String
2021-03-11 12:30:41,688 [main:94] - GETTING Ty1 from Int
2021-03-11 12:30:41,689 [main:94] - GETTING Ty1 from Kla4?
2021-03-11 12:30:41,694 [main:94] - GETTING Ty1 from Int
2021-03-11 12:30:41,694 [main:94] - GETTING Ty1 from ArrayList<UInt>
2021-03-11 12:30:41,811 [main:94] - GETTING Ty1 from Float
2021-03-11 12:30:41,839 [main:94] - GETTING Ty1 from Long
2021-03-11 12:30:41,867 [main:94] - GETTING Ty1 from Any
2021-03-11 12:30:41,871 [main:94] - GETTING Ty1 from MutableIterator<Kla0?>
2021-03-11 12:30:41,887 [main:94] - GETTING Ty1 from Int
2021-03-11 12:30:41,888 [main:94] - GETTING Ty1 from Boolean
2021-03-11 12:30:41,889 [main:94] - GETTING Ty1 from Kla0?
2021-03-11 12:30:41,895 [main:94] - GETTING Ty1 from HashSet<Kla0?>
2021-03-11 12:30:42,013 [main:94] - GETTING Ty1 from Function0<Unit>
2021-03-11 12:30:42,021 [main:94] - GETTING Ty1 from Int
2021-03-11 12:30:42,022 [main:94] - GETTING Ty1 from Float
2021-03-11 12:30:42,023 [main:94] - GETTING Ty1 from HashSet<Kla0?>
2021-03-11 12:30:42,023 [main:94] - GETTING Ty1 from Kla4?
2021-03-11 12:30:42,024 [main:94] - GETTING Ty1 from ArrayList<UInt>
2021-03-11 12:30:42,024 [main:94] - GETTING Ty1 from Int
2021-03-11 12:30:42,025 [main:94] - GETTING Ty1 from ArrayList<ULong>
2021-03-11 12:30:42,185 [main:94] - GETTING Ty1 from Boolean
2021-03-11 12:30:42,186 [main:94] - GETTING Ty1 from UShort
2021-03-11 12:30:42,213 [main:94] - GETTING Ty1 from Double
2021-03-11 12:30:42,214 [main:94] - GETTING Ty1 from Kla4
2021-03-11 12:30:42,218 [main:94] - GETTING Ty1 from Array<Any?>
2021-03-11 12:30:42,228 [main:94] - GETTING Ty1 from String
2021-03-11 12:30:42,229 [main:94] - GETTING Ty1 from Byte
2021-03-11 12:30:42,259 [main:94] - GETTING Ty1 from ArrayList<UInt>
2021-03-11 12:30:42,260 [main:94] - GETTING Ty1 from ArrayList<UInt>
2021-03-11 12:30:42,261 [main:94] - GETTING Ty1 from UByte
2021-03-11 12:30:42,283 [main:107] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-11 12:30:42,283 [main:103] - replacing (prope12++, Int)
2021-03-11 12:30:42,283 [main:38] - replacing prope12++ Int
2021-03-11 12:30:42,283 [main:42] - Getting value of type Int
2021-03-11 12:30:42,439 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:42,442 [main:46] - GENERATED VALUE OF TYPE Int = -1196029141
2021-03-11 12:30:42,442 [main:49] - GENERATED IS CALL =false
2021-03-11 12:30:42,447 [main:55] - randomType = Int
2021-03-11 12:30:42,619 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:42,679 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:30:42,679 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51c62d81]
2021-03-11 12:30:42,679 [main:66] - Generated call from random type = (-87308703).toInt().takeHighestOneBit()
2021-03-11 12:30:42,680 [main:94] - GETTING Int from Boolean
2021-03-11 12:30:42,693 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603c041c]]
2021-03-11 12:30:42,693 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:30:42,846 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:30:42,849 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603c041c]
2021-03-11 12:30:42,999 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:30:43,002 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).div(-69)
2021-03-11 12:30:43,002 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@361986c2]]
2021-03-11 12:30:43,002 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:30:43,155 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:30:43,158 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@361986c2]
2021-03-11 12:30:43,315 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:43,318 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(false).xor(897478952)
2021-03-11 12:30:43,319 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]]
2021-03-11 12:30:43,319 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:30:43,467 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:30:43,468 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:30:43,626 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:30:43,629 [main:105] - GENERATED CALL = (list1.add(i)).equals("ihrvf").compareTo(false)
2021-03-11 12:30:43,629 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3400a4a9]]
2021-03-11 12:30:43,629 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:30:43,802 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:30:43,805 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3400a4a9]
2021-03-11 12:30:43,805 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(false).dec()
2021-03-11 12:30:43,805 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2622f76c]]
2021-03-11 12:30:43,805 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:30:43,956 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:30:43,959 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2622f76c]
2021-03-11 12:30:43,959 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).countTrailingZeroBits()
2021-03-11 12:30:43,960 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4239d51b]]
2021-03-11 12:30:43,960 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:30:44,115 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:30:44,118 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4239d51b]
2021-03-11 12:30:44,271 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:44,274 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(false).and(1797235567)
2021-03-11 12:30:44,274 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a00c980]]
2021-03-11 12:30:44,274 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:30:44,425 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:30:44,428 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a00c980]
2021-03-11 12:30:44,428 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).unaryMinus()
2021-03-11 12:30:44,428 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@757023a6]]
2021-03-11 12:30:44,428 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:30:44,575 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:30:44,578 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@757023a6]
2021-03-11 12:30:44,728 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:44,731 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(false).rotateLeft(604313043)
2021-03-11 12:30:44,731 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce9cc4f]]
2021-03-11 12:30:44,732 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:30:44,878 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:30:44,881 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce9cc4f]
2021-03-11 12:30:44,881 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(false).countLeadingZeroBits()
2021-03-11 12:30:44,882 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@296f4f62]]
2021-03-11 12:30:44,882 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:30:45,034 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:30:45,037 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@296f4f62]
2021-03-11 12:30:45,182 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:45,185 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(true).or(1675649544)
2021-03-11 12:30:45,185 [main:110] - replacement of prope12++ of type Int is (list1.add(i)).equals("ihrvf").compareTo(false)
2021-03-11 12:30:45,341 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:30:45,341 [main:66] - Compilation checking started
2021-03-11 12:30:45,788 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        if (prope9 !is CoroutineStackFrame) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        (list1.add(i)).equals("ihrvf").compareTo(false)
        prope14 = { prope9.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:30:45,790 [main:103] - replacing ("Continuation " + prope9, String)
2021-03-11 12:30:45,794 [main:38] - replacing "Continuation " + prope9 String
2021-03-11 12:30:45,794 [main:42] - Getting value of type String
2021-03-11 12:30:45,962 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:30:45,965 [main:46] - GENERATED VALUE OF TYPE String = "ueuuc"
2021-03-11 12:30:45,966 [main:49] - GENERATED IS CALL =false
2021-03-11 12:30:46,148 [main:55] - randomType = Kla11
2021-03-11 12:30:46,309 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-11 12:30:46,313 [main:112] - generating klass Kla11 text = object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:30:46,343 [main:94] - GETTING String from ArrayList<UInt>
2021-03-11 12:30:46,484 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@5ac48ad1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:30:46,484 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:30:46,644 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:46,647 [main:105] - GENERATED CALL = (list2).size.toString(-1350503927)
2021-03-11 12:30:46,647 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@2d8d1688], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:30:46,647 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:30:46,803 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:46,807 [main:105] - GENERATED CALL = (list2).modCount.toString(-440733486)
2021-03-11 12:30:46,807 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc], @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]]
2021-03-11 12:30:46,807 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc]
2021-03-11 12:30:46,807 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]
2021-03-11 12:30:46,807 [main:105] - GENERATED CALL = (list2).toArray().contentToString()
2021-03-11 12:30:46,807 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@77a5ed27], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3901601b]]
2021-03-11 12:30:46,807 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@77a5ed27]
2021-03-11 12:30:46,961 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:46,964 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3901601b]
2021-03-11 12:30:47,121 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:47,124 [main:105] - GENERATED CALL = (list2).get(130990634).toString(-1903133248)
2021-03-11 12:30:47,124 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]]
2021-03-11 12:30:47,124 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]
2021-03-11 12:30:47,282 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:47,446 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:47,647 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:47,807 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:47,961 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:48,119 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:30:48,122 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:30:48,283 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:30:48,287 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:30:48,641 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:30:48,644 [main:95] - GENERATED = StringBuilder(934962042)
2021-03-11 12:30:48,644 [main:105] - GENERATED CALL = (list2).joinToString("basri", "jntqd", "ckcsq", -397931928, "bvgxh", {a: T -> StringBuilder(934962042)})
2021-03-11 12:30:48,644 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc], public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]]
2021-03-11 12:30:48,644 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc]
2021-03-11 12:30:48,645 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]
2021-03-11 12:30:48,810 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:48,972 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:49,133 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:49,293 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:49,450 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:49,609 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:30:49,612 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:30:49,765 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:30:49,769 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:30:50,096 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:30:50,099 [main:95] - GENERATED = StringBuilder(-1377987166)
2021-03-11 12:30:50,099 [main:105] - GENERATED CALL = (list2).toArray().joinToString("eyrqm", "jqhpr", StringBuilder(), -579077919, "opivd", {a: T -> StringBuilder(-1377987166)})
2021-03-11 12:30:50,099 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]]
2021-03-11 12:30:50,099 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc]
2021-03-11 12:30:50,099 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]
2021-03-11 12:30:50,100 [main:105] - GENERATED CALL = (list2).toArray().contentDeepToString()
2021-03-11 12:30:50,100 [main:110] - replacement of "Continuation " + prope9 of type String is (list2).joinToString("basri", "jntqd", "ckcsq", -397931928, "bvgxh", {a: T -> StringBuilder(934962042)})
2021-03-11 12:30:50,251 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:30:50,251 [main:66] - Compilation checking started
2021-03-11 12:30:50,720 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list2).joinToString("basri", "jntqd", "ckcsq", -397931928, "bvgxh", {a: T -> StringBuilder(934962042)}) + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { prope9.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:30:50,722 [main:103] - replacing ({ prope9.resume(Unit) }, Function0<Unit>)
2021-03-11 12:30:50,722 [main:38] - replacing { prope9.resume(Unit) } Function0<Unit>
2021-03-11 12:30:50,722 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:30:50,872 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:30:50,875 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:30:51,033 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:30:51,037 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:30:51,554 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:30:51,557 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:30:51,560 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:30:51,560 [main:95] - GENERATED = check(true, { "aynzd"})
2021-03-11 12:30:51,560 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "aynzd"})}
2021-03-11 12:30:51,560 [main:49] - GENERATED IS CALL =false
2021-03-11 12:30:51,903 [main:55] - randomType = Sequence<Float?>
2021-03-11 12:30:51,905 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:30:52,017 [main:94] - GETTING Function0<Unit> from Kla0?
2021-03-11 12:30:52,023 [main:94] - GETTING Function0<Unit> from Kla4?
2021-03-11 12:30:52,028 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:30:52,058 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:30:52,067 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:30:52,068 [main:94] - GETTING Function0<Unit> from Array<Any?>
2021-03-11 12:30:52,079 [main:94] - GETTING Function0<Unit> from Float
2021-03-11 12:30:52,108 [main:94] - GETTING Function0<Unit> from HashSet<Kla0?>
2021-03-11 12:30:52,237 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:30:52,238 [main:94] - GETTING Function0<Unit> from Kla4
2021-03-11 12:30:52,244 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:30:52,245 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:30:52,246 [main:94] - GETTING Function0<Unit> from HashSet<Kla0?>
2021-03-11 12:30:52,247 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:30:52,248 [main:94] - GETTING Function0<Unit> from UShort
2021-03-11 12:30:52,272 [main:94] - GETTING Function0<Unit> from Any
2021-03-11 12:30:52,276 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:30:52,276 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 12:30:52,283 [main:110] - replacement of { prope9.resume(Unit) } of type Function0<Unit> is { check(true, { "aynzd"})}
2021-03-11 12:30:52,434 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:30:52,434 [main:66] - Compilation checking started
2021-03-11 12:30:53,224 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:30:53,226 [main:103] - replacing ("Continuation " + prope9 + " is not subtype of CoroutineStackFrame", String)
2021-03-11 12:30:53,227 [main:38] - replacing "Continuation " + prope9 + " is not subtype of CoroutineStackFrame" String
2021-03-11 12:30:53,227 [main:42] - Getting value of type String
2021-03-11 12:30:53,385 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:30:53,387 [main:46] - GENERATED VALUE OF TYPE String = "sxrsj"
2021-03-11 12:30:53,388 [main:49] - GENERATED IS CALL =false
2021-03-11 12:30:53,399 [main:55] - randomType = Kla5
2021-03-11 12:30:53,549 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 12:30:53,552 [main:112] - generating klass Kla5 text = class Kla5 {
    var prope8 = "failed"
}
2021-03-11 12:30:53,559 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4081dfea]
2021-03-11 12:30:53,717 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:30:53,718 [main:66] - Generated call from random type = (Kla5()).prope8.plus("trdhx")
2021-03-11 12:30:53,718 [main:94] - GETTING String from ArrayList<ULong>
2021-03-11 12:30:53,879 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@d30e2d0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:30:53,879 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:30:54,033 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:54,036 [main:105] - GENERATED CALL = (list4).modCount.toString(-715467436)
2021-03-11 12:30:54,036 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]]
2021-03-11 12:30:54,037 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]
2021-03-11 12:30:54,190 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:54,350 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:54,354 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:54,686 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:30:54,692 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-11 12:30:54,847 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:55,004 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:55,008 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:55,337 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:30:55,343 [main:95] - GENERATED = StringBuilder("zuxsh")
2021-03-11 12:30:55,493 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:55,653 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:55,657 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:55,989 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:30:55,995 [main:95] - GENERATED = StringBuilder("ubpsi")
2021-03-11 12:30:56,146 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:56,300 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:56,460 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:30:56,463 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:30:56,469 [main:105] - GENERATED CALL = (list4).joinToString(StringBuilder(StringBuilder()), StringBuilder("zuxsh"), StringBuilder("ubpsi"), 738055174, "nctin", {a: T -> "gjgqp"})
2021-03-11 12:30:56,469 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@70697cfe], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:30:56,469 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:30:56,621 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:56,624 [main:105] - GENERATED CALL = (list4).size.toString(1380452682)
2021-03-11 12:30:56,624 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@79ff17c8], @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]]
2021-03-11 12:30:56,624 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@79ff17c8]
2021-03-11 12:30:56,625 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]
2021-03-11 12:30:56,625 [main:105] - GENERATED CALL = (list4).toArray().contentToString()
2021-03-11 12:30:56,625 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@79ff17c8], public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]]
2021-03-11 12:30:56,625 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@79ff17c8]
2021-03-11 12:30:56,625 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]
2021-03-11 12:30:56,775 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:56,930 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:56,934 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:30:57,264 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:30:57,421 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:30:57,425 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:30:57,757 [main:302] - generating value of type = String true depth = 6
2021-03-11 12:30:57,760 [main:95] - GENERATED = StringBuilder("atfpo")
2021-03-11 12:30:57,760 [main:95] - GENERATED = StringBuilder(StringBuilder("atfpo"))
2021-03-11 12:30:57,909 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:58,111 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:58,262 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:58,418 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:30:58,572 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:30:58,576 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:30:58,896 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:30:58,899 [main:95] - GENERATED = StringBuilder(-1646228307)
2021-03-11 12:30:59,045 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:30:59,048 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:30:59,200 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:30:59,204 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:30:59,522 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:30:59,525 [main:95] - GENERATED = StringBuilder(1179313848)
2021-03-11 12:30:59,526 [main:105] - GENERATED CALL = (list4).toArray().joinToString(StringBuilder(StringBuilder("atfpo")), StringBuilder(), "luzso", 422665879, StringBuilder(-1646228307), {a: T -> StringBuilder(1179313848)})
2021-03-11 12:30:59,526 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@47ca1777], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d671d62]]
2021-03-11 12:30:59,526 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@47ca1777]
2021-03-11 12:30:59,671 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:59,674 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d671d62]
2021-03-11 12:30:59,822 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:30:59,825 [main:105] - GENERATED CALL = (list4).get(652238728).toString(-2004055331)
2021-03-11 12:30:59,825 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@79ff17c8], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]]
2021-03-11 12:30:59,825 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@79ff17c8]
2021-03-11 12:30:59,825 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]
2021-03-11 12:30:59,825 [main:105] - GENERATED CALL = (list4).toArray().contentDeepToString()
2021-03-11 12:30:59,825 [main:110] - replacement of "Continuation " + prope9 + " is not subtype of CoroutineStackFrame" of type String is (list4).joinToString(StringBuilder(StringBuilder()), StringBuilder("zuxsh"), StringBuilder("ubpsi"), 738055174, "nctin", {a: T -> "gjgqp"})
2021-03-11 12:30:59,970 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:30:59,970 [main:66] - Compilation checking started
2021-03-11 12:31:00,443 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list4).joinToString(StringBuilder(StringBuilder()), StringBuilder("zuxsh"), StringBuilder("ubpsi"), 738055174, "nctin", {a: T -> "gjgqp"}))
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:31:00,445 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 12:31:00,448 [main:38] - replacing getOrThrow() Any?
2021-03-11 12:31:00,448 [main:42] - Getting value of type Any?
2021-03-11 12:31:00,604 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:31:00,604 [main:46] - GENERATED VALUE OF TYPE Any? = "ykmnp"
2021-03-11 12:31:00,604 [main:49] - GENERATED IS CALL =false
2021-03-11 12:31:00,779 [main:55] - randomType = Char
2021-03-11 12:31:00,935 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:31:00,965 [main:94] - GETTING Any? from Int
2021-03-11 12:31:00,997 [main:94] - GETTING Any? from ArrayList<ULong>
2021-03-11 12:31:01,113 [main:101] - Case = [@kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@6dc2e825]]
2021-03-11 12:31:01,113 [main:137] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@6dc2e825]
2021-03-11 12:31:01,113 [main:105] - GENERATED CALL = (list4)?.toJSON()
2021-03-11 12:31:01,113 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@79ff17c8], public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@6b0bec66]]
2021-03-11 12:31:01,113 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@79ff17c8]
2021-03-11 12:31:01,114 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@6b0bec66]
2021-03-11 12:31:01,268 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:01,271 [main:105] - GENERATED CALL = (list4)?.toArray().get(-1556536645)
2021-03-11 12:31:01,272 [main:110] - replacement of getOrThrow() of type Any? is (list4)?.toJSON()
2021-03-11 12:31:01,428 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 12:31:01,428 [main:66] - Compilation checking started
2021-03-11 12:31:01,916 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.(list4)?.toJSON()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:31:01,918 [main:103] - replacing (method, String)
2021-03-11 12:31:01,923 [main:38] - replacing method String
2021-03-11 12:31:01,923 [main:42] - Getting value of type String
2021-03-11 12:31:02,101 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:31:02,104 [main:46] - GENERATED VALUE OF TYPE String = "mhluc"
2021-03-11 12:31:02,104 [main:49] - GENERATED IS CALL =false
2021-03-11 12:31:04,265 [main:55] - randomType = Function1<Kla9, Function2<MutableMap<String, String>, Kla9, LinkedHashSet<ArrayDeque<Function1<Byte, Triple<Collection<Kla9>, Byte?, Int>?>>>>>
2021-03-11 12:31:04,266 [main:94] - GETTING String from Long
2021-03-11 12:31:04,307 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:31:04,307 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:31:04,476 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:04,480 [main:105] - GENERATED CALL = (Kla1(6624106092996564953).long).toString(-932525180)
2021-03-11 12:31:04,480 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72188b01], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]]
2021-03-11 12:31:04,480 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72188b01]
2021-03-11 12:31:04,480 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]
2021-03-11 12:31:04,651 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:31:04,654 [main:105] - GENERATED CALL = (Kla1(6624106092996564953).long).toChar().plus("fhzhi")
2021-03-11 12:31:04,654 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:31:04,654 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:31:04,654 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:31:04,817 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:04,821 [main:105] - GENERATED CALL = (Kla1(6624106092996564953).long).toLong().toString(-186710454)
2021-03-11 12:31:04,821 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41f3c04c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]]
2021-03-11 12:31:04,821 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@41f3c04c]
2021-03-11 12:31:04,821 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]
2021-03-11 12:31:04,984 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:04,987 [main:105] - GENERATED CALL = (Kla1(6624106092996564953).long).toByte().toString(-771727172)
2021-03-11 12:31:04,988 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72188b01], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]]
2021-03-11 12:31:04,988 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72188b01]
2021-03-11 12:31:04,988 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]
2021-03-11 12:31:04,988 [main:105] - GENERATED CALL = (Kla1(6624106092996564953).long).toChar().titlecase()
2021-03-11 12:31:04,988 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4562769a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]]
2021-03-11 12:31:04,988 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4562769a]
2021-03-11 12:31:04,988 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]
2021-03-11 12:31:05,149 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:05,152 [main:105] - GENERATED CALL = (Kla1(6624106092996564953).long).toShort().toString(1097759461)
2021-03-11 12:31:05,153 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72188b01], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]]
2021-03-11 12:31:05,153 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72188b01]
2021-03-11 12:31:05,153 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]
2021-03-11 12:31:05,153 [main:105] - GENERATED CALL = (Kla1(6624106092996564953).long).toChar().lowercase()
2021-03-11 12:31:05,153 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:31:05,153 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:31:05,153 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:31:05,314 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:05,317 [main:105] - GENERATED CALL = (Kla1(6624106092996564953).long).toInt().toString(903067403)
2021-03-11 12:31:05,317 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@689cedb7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:31:05,317 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@689cedb7]
2021-03-11 12:31:05,477 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:31:05,481 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:31:05,643 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:05,646 [main:105] - GENERATED CALL = (Kla1(6624106092996564953).long).compareTo(94).toString(-475212686)
2021-03-11 12:31:05,646 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72188b01], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]]
2021-03-11 12:31:05,646 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72188b01]
2021-03-11 12:31:05,646 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]
2021-03-11 12:31:05,646 [main:105] - GENERATED CALL = (Kla1(6624106092996564953).long).toChar().uppercase()
2021-03-11 12:31:05,647 [main:110] - replacement of method of type String is (Kla1(6624106092996564953).long).toString(-932525180)
2021-03-11 12:31:05,807 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:31:05,807 [main:66] - Compilation checking started
2021-03-11 12:31:06,627 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(prope10.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:31:06,631 [main:103] - replacing (prope10.exceptionOrNull()!!, Throwable)
2021-03-11 12:31:06,631 [main:38] - replacing prope10.exceptionOrNull()!! Throwable
2021-03-11 12:31:06,631 [main:42] - Getting value of type Throwable
2021-03-11 12:31:06,818 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 12:31:06,992 [main:43] - GENERATING CALL OF fun ClassCastException(message: kotlin.String?): Throwable = TODO()
2021-03-11 12:31:06,997 [main:61] - WITHOUT TYPE PARAMS = fun ClassCastException(message: kotlin.String?): Throwable = TODO()
2021-03-11 12:31:07,359 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:31:07,362 [main:95] - GENERATED = ClassCastException("eekpw")
2021-03-11 12:31:07,362 [main:46] - GENERATED VALUE OF TYPE Throwable = ClassCastException("eekpw")
2021-03-11 12:31:07,363 [main:49] - GENERATED IS CALL =true
2021-03-11 12:31:07,557 [main:55] - randomType = Double?
2021-03-11 12:31:07,729 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:31:07,768 [main:94] - GETTING Throwable from Int
2021-03-11 12:31:07,800 [main:94] - GETTING Throwable from Int
2021-03-11 12:31:07,801 [main:94] - GETTING Throwable from Kla4?
2021-03-11 12:31:07,807 [main:94] - GETTING Throwable from Int
2021-03-11 12:31:07,808 [main:94] - GETTING Throwable from Boolean
2021-03-11 12:31:07,818 [main:94] - GETTING Throwable from Int
2021-03-11 12:31:07,820 [main:94] - GETTING Throwable from Kla4
2021-03-11 12:31:07,827 [main:94] - GETTING Throwable from HashSet<Kla0?>
2021-03-11 12:31:07,962 [main:94] - GETTING Throwable from Int
2021-03-11 12:31:07,964 [main:94] - GETTING Throwable from Kla0?
2021-03-11 12:31:07,970 [main:94] - GETTING Throwable from Float
2021-03-11 12:31:07,999 [main:94] - GETTING Throwable from UByte
2021-03-11 12:31:08,021 [main:94] - GETTING Throwable from Function0<Unit>
2021-03-11 12:31:08,032 [main:94] - GETTING Throwable from MutableIterator<Kla0?>
2021-03-11 12:31:08,048 [main:94] - GETTING Throwable from Boolean
2021-03-11 12:31:08,049 [main:94] - GETTING Throwable from Float
2021-03-11 12:31:08,050 [main:94] - GETTING Throwable from Boolean
2021-03-11 12:31:08,051 [main:94] - GETTING Throwable from ArrayList<UInt>
2021-03-11 12:31:08,170 [main:94] - GETTING Throwable from ArrayList<UInt>
2021-03-11 12:31:08,171 [main:94] - GETTING Throwable from Double
2021-03-11 12:31:08,200 [main:94] - GETTING Throwable from HashSet<Kla0?>
2021-03-11 12:31:08,201 [main:94] - GETTING Throwable from Double
2021-03-11 12:31:08,202 [main:94] - GETTING Throwable from String
2021-03-11 12:31:08,220 [main:94] - GETTING Throwable from String
2021-03-11 12:31:08,221 [main:94] - GETTING Throwable from UShort
2021-03-11 12:31:08,244 [main:94] - GETTING Throwable from Array<Any?>
2021-03-11 12:31:08,255 [main:94] - GETTING Throwable from Kla4?
2021-03-11 12:31:08,256 [main:94] - GETTING Throwable from ArrayList<UInt>
2021-03-11 12:31:08,257 [main:94] - GETTING Throwable from Any
2021-03-11 12:31:08,262 [main:94] - GETTING Throwable from Boolean
2021-03-11 12:31:08,263 [main:94] - GETTING Throwable from Int
2021-03-11 12:31:08,264 [main:94] - GETTING Throwable from Int
2021-03-11 12:31:08,264 [main:94] - GETTING Throwable from ArrayList<UInt>
2021-03-11 12:31:08,265 [main:94] - GETTING Throwable from Long
2021-03-11 12:31:08,296 [main:94] - GETTING Throwable from Int
2021-03-11 12:31:08,297 [main:94] - GETTING Throwable from Byte
2021-03-11 12:31:08,327 [main:94] - GETTING Throwable from ArrayList<ULong>
2021-03-11 12:31:08,483 [main:110] - replacement of prope10.exceptionOrNull()!! of type Throwable is ClassCastException("eekpw")
2021-03-11 12:31:08,645 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:31:08,646 [main:66] - Compilation checking started
2021-03-11 12:31:09,448 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:31:09,450 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i, String)
2021-03-11 12:31:09,454 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i String
2021-03-11 12:31:09,454 [main:42] - Getting value of type String
2021-03-11 12:31:09,643 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:31:09,646 [main:46] - GENERATED VALUE OF TYPE String = "vpyul"
2021-03-11 12:31:09,647 [main:49] - GENERATED IS CALL =false
2021-03-11 12:31:09,654 [main:55] - randomType = UByte
2021-03-11 12:31:09,823 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:31:09,853 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2db63c40]
2021-03-11 12:31:09,853 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c289503]
2021-03-11 12:31:10,022 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:10,026 [main:66] - Generated call from random type = (89.toUByte()).toUShort().toString(1331551839)
2021-03-11 12:31:10,027 [main:94] - GETTING String from HashSet<Kla0?>
2021-03-11 12:31:10,142 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]]
2021-03-11 12:31:10,142 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:31:10,142 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]
2021-03-11 12:31:10,142 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>()).toArray().contentToString()
2021-03-11 12:31:10,142 [main:101] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashSet[DeserializedPropertyDescriptor@11fb3006], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:31:10,142 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:31:10,312 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:10,315 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>()).size.toString(-1479863154)
2021-03-11 12:31:10,315 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]]
2021-03-11 12:31:10,316 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:31:10,316 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]
2021-03-11 12:31:10,484 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:31:10,661 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:31:10,836 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:31:10,841 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:31:11,220 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:31:11,224 [main:95] - GENERATED = StringBuilder(-261700281)
2021-03-11 12:31:11,394 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:31:11,571 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:11,745 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:31:11,921 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:31:11,924 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:31:12,100 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:31:12,105 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:31:12,474 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:31:12,477 [main:95] - GENERATED = StringBuilder(477567135)
2021-03-11 12:31:12,478 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>()).toArray().joinToString("storg", StringBuilder(-261700281), "wlcec", -216592697, "ekslx", {a: T -> StringBuilder(477567135)})
2021-03-11 12:31:12,478 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]]
2021-03-11 12:31:12,478 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:31:12,478 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]
2021-03-11 12:31:12,478 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>()).toArray().contentDeepToString()
2021-03-11 12:31:12,478 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]]
2021-03-11 12:31:12,478 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]
2021-03-11 12:31:12,656 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:31:12,831 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:31:13,007 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:31:13,183 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:31:13,188 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:31:13,560 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:31:13,738 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:31:13,743 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:31:14,180 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-11 12:31:14,187 [main:95] - GENERATED = StringBuilder("fpqss")
2021-03-11 12:31:14,187 [main:95] - GENERATED = StringBuilder(StringBuilder("fpqss"))
2021-03-11 12:31:14,362 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:14,549 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:31:14,742 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:31:14,746 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:31:14,753 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>()).joinToString("enzxw", "bzwbs", StringBuilder(StringBuilder("fpqss")), 990276735, "aocpf", {a: T -> "qgdnd"})
2021-03-11 12:31:14,753 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i of type String is (hashSetOf<Kla0?>()).toArray().joinToString("storg", StringBuilder(-261700281), "wlcec", -216592697, "ekslx", {a: T -> StringBuilder(477567135)})
2021-03-11 12:31:14,935 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:31:14,935 [main:66] - Compilation checking started
2021-03-11 12:31:15,534 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (prope12 != i) error((hashSetOf<Kla0?>()).toArray().joinToString("storg", StringBuilder(-261700281), "wlcec", -216592697, "ekslx", {a: T -> StringBuilder(477567135)}) + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:31:15,536 [main:103] - replacing (prope12, Int)
2021-03-11 12:31:15,537 [main:38] - replacing prope12 Int
2021-03-11 12:31:15,537 [main:42] - Getting value of type Int
2021-03-11 12:31:15,713 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:15,717 [main:46] - GENERATED VALUE OF TYPE Int = -350634557
2021-03-11 12:31:15,717 [main:49] - GENERATED IS CALL =false
2021-03-11 12:31:15,724 [main:55] - randomType = UByte
2021-03-11 12:31:15,895 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:31:15,935 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3224271b]
2021-03-11 12:31:16,106 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:31:16,109 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5ce698ce]
2021-03-11 12:31:16,280 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:31:16,284 [main:66] - Generated call from random type = (73.toUByte()).div(10.toUByte()).compareTo(17.toUByte())
2021-03-11 12:31:16,285 [main:94] - GETTING Int from Double
2021-03-11 12:31:16,321 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73ec0f58]]
2021-03-11 12:31:16,321 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:31:16,321 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73ec0f58]
2021-03-11 12:31:16,321 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toInt().inv()
2021-03-11 12:31:16,321 [main:101] - Case = [@kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2300c37f], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2e4a1d6]]
2021-03-11 12:31:16,321 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2300c37f]
2021-03-11 12:31:16,321 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2e4a1d6]
2021-03-11 12:31:16,492 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:31:16,496 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toShort().times(21)
2021-03-11 12:31:16,496 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@7a55f71a]]
2021-03-11 12:31:16,496 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@7a55f71a]
2021-03-11 12:31:16,496 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toInt()
2021-03-11 12:31:16,496 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@25e62a12]]
2021-03-11 12:31:16,496 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:31:16,496 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@25e62a12]
2021-03-11 12:31:16,668 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:16,842 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:16,846 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toInt().coerceIn(-1622744172, -1915775300)
2021-03-11 12:31:16,846 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a4ce2f]]
2021-03-11 12:31:16,846 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:31:16,846 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a4ce2f]
2021-03-11 12:31:16,846 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toInt().toInt()
2021-03-11 12:31:16,846 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@385329c]]
2021-03-11 12:31:16,846 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c]
2021-03-11 12:31:16,846 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@385329c]
2021-03-11 12:31:17,017 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:31:17,021 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toChar().minus('㼎')
2021-03-11 12:31:17,021 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@599f178a], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@77059637]]
2021-03-11 12:31:17,021 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@599f178a]
2021-03-11 12:31:17,021 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@77059637]
2021-03-11 12:31:17,021 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toLong().toInt()
2021-03-11 12:31:17,021 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3fac6f2e], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a83905]]
2021-03-11 12:31:17,021 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3fac6f2e]
2021-03-11 12:31:17,198 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:31:17,204 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a83905]
2021-03-11 12:31:17,382 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:17,386 [main:105] - GENERATED CALL = ((list3.size).toDouble()).compareTo(-40).ushr(83709081)
2021-03-11 12:31:17,386 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@176dd857], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@247c4a32]]
2021-03-11 12:31:17,386 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@176dd857]
2021-03-11 12:31:17,386 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@247c4a32]
2021-03-11 12:31:17,386 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toByte().countLeadingZeroBits()
2021-03-11 12:31:17,386 [main:101] - Case = [@kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@176dd857], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5c126571]]
2021-03-11 12:31:17,386 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@176dd857]
2021-03-11 12:31:17,386 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5c126571]
2021-03-11 12:31:17,557 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:31:17,560 [main:105] - GENERATED CALL = ((list3.size).toDouble()).toByte().rem(-5)
2021-03-11 12:31:17,561 [main:110] - replacement of prope12 of type Int is ((list3.size).toDouble()).toByte().rem(-5)
2021-03-11 12:31:17,731 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:31:17,731 [main:66] - Compilation checking started
2021-03-11 12:31:18,577 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:31:18,581 [main:103] - replacing (prope9 !is CoroutineStackFrame, Boolean)
2021-03-11 12:31:18,581 [main:38] - replacing prope9 !is CoroutineStackFrame Boolean
2021-03-11 12:31:18,581 [main:42] - Getting value of type Boolean
2021-03-11 12:31:18,780 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:31:18,784 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:31:18,784 [main:49] - GENERATED IS CALL =false
2021-03-11 12:31:19,002 [main:55] - randomType = Collection<Kla0>
2021-03-11 12:31:19,003 [main:94] - GETTING Boolean from Int
2021-03-11 12:31:19,056 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:31:19,056 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:31:19,233 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:19,237 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:31:19,406 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:31:19,407 [main:105] - GENERATED CALL = (list3.size).compareTo(-686667608).equals("lcztd")
2021-03-11 12:31:19,407 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@143977f1]]
2021-03-11 12:31:19,407 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:31:19,407 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@143977f1]
2021-03-11 12:31:19,407 [main:105] - GENERATED CALL = (list3.size).toFloat().isFinite()
2021-03-11 12:31:19,407 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4afe8f90]]
2021-03-11 12:31:19,407 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:31:19,407 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4afe8f90]
2021-03-11 12:31:19,407 [main:105] - GENERATED CALL = (list3.size).toDouble().isInfinite()
2021-03-11 12:31:19,407 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac74bb4]]
2021-03-11 12:31:19,407 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:31:19,407 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac74bb4]
2021-03-11 12:31:19,580 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:31:19,756 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:31:19,759 [main:105] - GENERATED CALL = (list3.size).toChar().equals('驭', true)
2021-03-11 12:31:19,759 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494be499]]
2021-03-11 12:31:19,760 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:31:19,760 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494be499]
2021-03-11 12:31:19,760 [main:105] - GENERATED CALL = (list3.size).toChar().isLetter()
2021-03-11 12:31:19,760 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:31:19,760 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:31:19,977 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:31:19,977 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:31:20,149 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:31:20,153 [main:105] - GENERATED CALL = (list3.size).equals("gliiu").or(true)
2021-03-11 12:31:20,153 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2805e3]]
2021-03-11 12:31:20,153 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:31:20,153 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2805e3]
2021-03-11 12:31:20,153 [main:105] - GENERATED CALL = (list3.size).toChar().isHighSurrogate()
2021-03-11 12:31:20,153 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:31:20,153 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:31:20,154 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:31:20,330 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:31:20,330 [main:105] - GENERATED CALL = (list3.size).toInt().equals("nhgnk")
2021-03-11 12:31:20,330 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-11 12:31:20,330 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:31:20,330 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-11 12:31:20,502 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:31:20,502 [main:105] - GENERATED CALL = (list3.size).toLong().equals("wmgjy")
2021-03-11 12:31:20,502 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]]
2021-03-11 12:31:20,502 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:31:20,502 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]
2021-03-11 12:31:20,681 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:31:20,682 [main:105] - GENERATED CALL = (list3.size).toByte().equals("abulc")
2021-03-11 12:31:20,682 [main:110] - replacement of prope9 !is CoroutineStackFrame of type Boolean is (list3.size).toLong().equals("wmgjy")
2021-03-11 12:31:20,855 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:31:20,855 [main:66] - Compilation checking started
2021-03-11 12:31:21,403 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if ((list3.size).toLong().equals("wmgjy")) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:31:21,406 [main:103] - replacing ({
        prope10.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-11 12:31:21,409 [main:38] - replacing {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let(x)
    } Unit?
2021-03-11 12:31:21,410 [main:42] - Getting value of type Unit?
2021-03-11 12:31:21,597 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 12:31:21,797 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:31:21,802 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:31:22,204 [main:95] - GENERATED = print(null)
2021-03-11 12:31:22,204 [main:46] - GENERATED VALUE OF TYPE Unit? = print(null)
2021-03-11 12:31:22,208 [main:49] - GENERATED IS CALL =true
2021-03-11 12:31:22,224 [main:55] - randomType = Kla3
2021-03-11 12:31:22,404 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:31:22,408 [main:112] - generating klass Kla3 text = inline class Kla3(val obj: Any)
2021-03-11 12:31:22,590 [main:194] - Type params = []
2021-03-11 12:31:22,772 [main:302] - generating value of type = Any false depth = 2
2021-03-11 12:31:22,781 [main:94] - GETTING Unit? from Kla4
2021-03-11 12:31:22,788 [main:94] - GETTING Unit? from ArrayList<UInt>
2021-03-11 12:31:22,939 [main:101] - Case = [public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@741d4ff5]]
2021-03-11 12:31:22,939 [main:137] - GENERATING call of type public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@741d4ff5]
2021-03-11 12:31:23,119 [main:302] - generating value of type = Function1<T, R?> false depth = 0
2021-03-11 12:31:23,123 [main:302] - generating value of type = R false depth = 1
2021-03-11 12:31:23,323 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Byte): R = TODO()
2021-03-11 12:31:23,328 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Byte): R = TODO()
2021-03-11 12:31:23,733 [main:302] - generating value of type = Function0<Byte> false depth = 4
2021-03-11 12:31:23,737 [main:302] - generating value of type = Byte true depth = 5
2021-03-11 12:31:23,741 [main:95] - GENERATED = run<Byte>({ -105})
2021-03-11 12:31:23,742 [main:105] - GENERATED CALL = (list2)?.sortByDescending({a: T -> run<Byte>({ -105})})
2021-03-11 12:31:23,742 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc], public inline fun <T> kotlin.Array<out T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2586ccb7]]
2021-03-11 12:31:23,742 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc]
2021-03-11 12:31:23,742 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2586ccb7]
2021-03-11 12:31:23,925 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Unit> false depth = 0
2021-03-11 12:31:23,929 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:31:24,119 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:31:24,124 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:31:24,523 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:31:24,523 [main:95] - GENERATED = print("lhcxg")
2021-03-11 12:31:24,523 [main:105] - GENERATED CALL = (list2)?.toArray().forEachIndexed({a: Int, b: T -> print("lhcxg")})
2021-03-11 12:31:24,524 [main:101] - Case = [@kotlin.SinceKotlin public fun <T> kotlin.collections.MutableList<T>.fill(value: T): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@c74aaf2]]
2021-03-11 12:31:24,524 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.MutableList<T>.fill(value: T): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@c74aaf2]
2021-03-11 12:31:24,707 [main:105] - GENERATED CALL = (list2)?.fill(null)
2021-03-11 12:31:24,707 [main:101] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.MutableCollection<in T>.plusAssign(element: T): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@332d2db]]
2021-03-11 12:31:24,707 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.MutableCollection<in T>.plusAssign(element: T): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@332d2db]
2021-03-11 12:31:24,891 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:31:25,087 [main:43] - GENERATING CALL OF fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<Float>)->kotlin.Unit): T = TODO()
2021-03-11 12:31:25,092 [main:61] - WITHOUT TYPE PARAMS = fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<Float>)->kotlin.Unit): T = TODO()
2021-03-11 12:31:25,512 [main:302] - generating value of type = Function1<Continuation<Float>, Unit> false depth = 3
2021-03-11 12:31:25,516 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 12:31:25,523 [main:95] - GENERATED = suspendCoroutine<Float>({a: Continuation<Float> -> println()})
2021-03-11 12:31:25,524 [main:105] - GENERATED CALL = (list2)?.plusAssign(suspendCoroutine<Float>({a: Continuation<Float> -> println()}))
2021-03-11 12:31:25,524 [main:101] - Case = [public fun <T> kotlin.collections.MutableList<T>.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@52cd65a]]
2021-03-11 12:31:25,524 [main:137] - GENERATING call of type public fun <T> kotlin.collections.MutableList<T>.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@52cd65a]
2021-03-11 12:31:25,524 [main:105] - GENERATED CALL = (list2)?.reverse()
2021-03-11 12:31:25,524 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5c5f0655], public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.MutableList<T>.sortBy(crossinline selector: (T) -> R?): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1ce6d2f2]]
2021-03-11 12:31:25,524 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5c5f0655]
2021-03-11 12:31:25,757 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:25,942 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:25,946 [main:137] - GENERATING call of type public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.MutableList<T>.sortBy(crossinline selector: (T) -> R?): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1ce6d2f2]
2021-03-11 12:31:26,124 [main:302] - generating value of type = Function1<T, R?> false depth = 0
2021-03-11 12:31:26,128 [main:302] - generating value of type = R false depth = 1
2021-03-11 12:31:28,084 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Byte, block: T.()->Function1<Array<Triple<Byte, MutableMap<Kla8<Kla10>, UShort>, UByte?>>, Collection<Kla8<Kla5>>>): R = TODO()
2021-03-11 12:31:28,089 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Byte, block: T.()->Function1<Array<Triple<Byte, MutableMap<Kla8<Kla10>, UShort>, UByte?>>, Collection<Kla8<Kla5>>>): R = TODO()
2021-03-11 12:31:28,511 [main:302] - generating value of type = Byte true depth = 4
2021-03-11 12:31:28,515 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, Function1<Array<Triple<Byte, MutableMap<Kla8<Kla10>, UShort>, UByte?>>, Collection<Kla8<Kla5>>>> false depth = 4
2021-03-11 12:31:28,518 [main:302] - generating value of type = Function1<Array<Triple<Byte, MutableMap<Kla8<Kla10>, UShort>, UByte?>>, Collection<Kla8<Kla5>>> false depth = 5
2021-03-11 12:31:28,522 [main:302] - generating value of type = Collection<Kla8<Kla5>> false depth = 6
2021-03-11 12:31:28,708 [main:43] - GENERATING CALL OF fun <T> setOf(elements: Kla8<Kla5>): Collection<Kla8<Kla5>> = TODO()
2021-03-11 12:31:28,713 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: Kla8<Kla5>): Collection<Kla8<Kla5>> = TODO()
2021-03-11 12:31:28,903 [main:302] - generating value of type = Kla8<Kla5> false depth = 9
2021-03-11 12:31:28,907 [main:112] - generating klass Kla8 text = abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 12:31:29,503 [main:302] - generating value of type = Kla11 false depth = 11
2021-03-11 12:31:29,507 [main:112] - generating klass Kla11 text = object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:31:29,507 [main:95] - GENERATED = setOf<Kla8<Kla5>>(Kla11)
2021-03-11 12:31:29,507 [main:95] - GENERATED = with<Byte, Function1<Array<Triple<Byte, MutableMap<Kla8<Kla10>, UShort>, UByte?>>, Collection<Kla8<Kla5>>>>(101, { {a: Array<Triple<Byte, MutableMap<Kla8<Kla10>, UShort>, UByte?>> -> setOf<Kla8<Kla5>>(Kla11)}})
2021-03-11 12:31:29,508 [main:105] - GENERATED CALL = (list2)?.subList(-957568440, 73393568).sortBy({a: T -> with<Byte, Function1<Array<Triple<Byte, MutableMap<Kla8<Kla10>, UShort>, UByte?>>, Collection<Kla8<Kla5>>>>(101, { {a: Array<Triple<Byte, MutableMap<Kla8<Kla10>, UShort>, UByte?>> -> setOf<Kla8<Kla5>>(Kla11)}})})
2021-03-11 12:31:29,508 [main:101] - Case = [public fun <T> kotlin.collections.MutableList<T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@380f5cac]]
2021-03-11 12:31:29,508 [main:137] - GENERATING call of type public fun <T> kotlin.collections.MutableList<T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@380f5cac]
2021-03-11 12:31:29,687 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 12:31:29,872 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-11 12:31:29,877 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-11 12:31:30,275 [main:385] - Cant generate call of fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-11 12:31:30,275 [main:144] - CANT GENERATE PARAMS FOR public fun <T> kotlin.collections.MutableList<T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@380f5cac]
2021-03-11 12:31:30,275 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5c5f0655], public fun <T : kotlin.Comparable<T>> kotlin.collections.MutableList<T>.sortDescending(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6baac161]]
2021-03-11 12:31:30,275 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5c5f0655]
2021-03-11 12:31:30,454 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:30,638 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:30,642 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.collections.MutableList<T>.sortDescending(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6baac161]
2021-03-11 12:31:30,642 [main:105] - GENERATED CALL = (list2)?.subList(-1677989996, -1170759519).sortDescending()
2021-03-11 12:31:30,642 [main:101] - Case = [@kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@51d5f038]]
2021-03-11 12:31:30,642 [main:137] - GENERATING call of type @kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@51d5f038]
2021-03-11 12:31:30,827 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-11 12:31:30,831 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:31:31,018 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:31:31,023 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:31:31,469 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:31:31,469 [main:95] - GENERATED = println("izmdh")
2021-03-11 12:31:31,469 [main:105] - GENERATED CALL = (list2)?.forEach({a: T -> println("izmdh")})
2021-03-11 12:31:31,469 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5c5f0655], public abstract fun add(index: kotlin.Int, element: kotlin.UInt): kotlin.Unit defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@611c87d4]]
2021-03-11 12:31:31,469 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5c5f0655]
2021-03-11 12:31:31,648 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:31,831 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:31,834 [main:137] - GENERATING call of type public abstract fun add(index: kotlin.Int, element: kotlin.UInt): kotlin.Unit defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@611c87d4]
2021-03-11 12:31:32,014 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:32,197 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:31:32,201 [main:105] - GENERATED CALL = (list2)?.subList(1667819831, 829554079).add(-895451936, 1858711687.toUInt())
2021-03-11 12:31:32,201 [main:110] - replacement of {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let(x)
    } of type Unit? is (list2)?.forEach({a: T -> println("izmdh")})
2021-03-11 12:31:32,380 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 12:31:32,380 [main:66] - Compilation checking started
2021-03-11 12:31:32,388 [main:71] - Wrong syntax or breaks conditions
2021-03-11 12:31:32,388 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) (list2)?.forEach({a: T -> println("izmdh")})
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:31:32,391 [main:103] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got ", String)
2021-03-11 12:31:32,391 [main:38] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " String
2021-03-11 12:31:32,391 [main:42] - Getting value of type String
2021-03-11 12:31:32,572 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:31:32,576 [main:46] - GENERATED VALUE OF TYPE String = "nkmin"
2021-03-11 12:31:32,576 [main:49] - GENERATED IS CALL =false
2021-03-11 12:31:32,591 [main:55] - randomType = Kla2
2021-03-11 12:31:32,771 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 12:31:32,774 [main:112] - generating klass Kla2 text = inline class Kla2(val string: String)
2021-03-11 12:31:32,960 [main:194] - Type params = []
2021-03-11 12:31:33,139 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:31:33,147 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edb3da1]
2021-03-11 12:31:33,147 [main:66] - Generated call from random type = (Kla2("ddnsu")).string.trim()
2021-03-11 12:31:33,148 [main:94] - GETTING String from Int
2021-03-11 12:31:33,179 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]]
2021-03-11 12:31:33,179 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:31:33,179 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]
2021-03-11 12:31:33,361 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:33,365 [main:105] - GENERATED CALL = (list3.size).toByte().toString(-1185483392)
2021-03-11 12:31:33,365 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]]
2021-03-11 12:31:33,365 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:31:33,365 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]
2021-03-11 12:31:33,365 [main:105] - GENERATED CALL = (list3.size).toChar().titlecase()
2021-03-11 12:31:33,365 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:31:33,365 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:31:33,543 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:33,547 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:31:33,727 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:33,731 [main:105] - GENERATED CALL = (list3.size).compareTo(2131513500).toString(-28467614)
2021-03-11 12:31:33,732 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]]
2021-03-11 12:31:33,732 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:31:33,732 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]
2021-03-11 12:31:33,912 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:31:33,918 [main:105] - GENERATED CALL = (list3.size).toChar().plus("eavhx")
2021-03-11 12:31:33,918 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]]
2021-03-11 12:31:33,918 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:31:33,918 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]
2021-03-11 12:31:33,918 [main:105] - GENERATED CALL = (list3.size).toChar().lowercase()
2021-03-11 12:31:33,918 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]]
2021-03-11 12:31:33,918 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:31:33,918 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]
2021-03-11 12:31:33,918 [main:105] - GENERATED CALL = (list3.size).toChar().uppercase()
2021-03-11 12:31:33,918 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]]
2021-03-11 12:31:33,918 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:31:33,918 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]
2021-03-11 12:31:34,096 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:34,100 [main:105] - GENERATED CALL = (list3.size).toShort().toString(1544082500)
2021-03-11 12:31:34,100 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:31:34,100 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:31:34,100 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:31:34,279 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:34,283 [main:105] - GENERATED CALL = (list3.size).toLong().toString(1683914352)
2021-03-11 12:31:34,283 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:31:34,283 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:31:34,283 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:31:34,463 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:34,467 [main:105] - GENERATED CALL = (list3.size).toInt().toString(663264056)
2021-03-11 12:31:34,467 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:31:34,467 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac]
2021-03-11 12:31:34,648 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:31:34,652 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:31:34,834 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:34,838 [main:105] - GENERATED CALL = (list3.size).div(-391155753948849659).toString(-1833698303)
2021-03-11 12:31:34,838 [main:110] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " of type String is (list3.size).toShort().toString(1544082500)
2021-03-11 12:31:35,018 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:31:35,018 [main:66] - Compilation checking started
2021-03-11 12:31:35,931 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:31:35,934 [main:103] - replacing (prope9, Continuation<*>)
2021-03-11 12:31:35,934 [main:38] - replacing prope9 Continuation<*>
2021-03-11 12:31:35,935 [main:42] - Getting value of type Continuation<*>
2021-03-11 12:31:36,117 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 12:31:36,302 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:31:36,307 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:31:36,918 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:31:37,172 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:31:37,178 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:31:37,585 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:31:37,778 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:31:37,783 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:31:38,411 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:31:38,411 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:31:38,411 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:31:38,411 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 12:31:38,426 [main:55] - randomType = Kla9
2021-03-11 12:31:38,616 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-11 12:31:38,620 [main:112] - generating klass Kla9 text = class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}
2021-03-11 12:31:38,628 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:31:38,676 [main:94] - GETTING Continuation<*> from ArrayList<UInt>
2021-03-11 12:31:38,804 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:31:38,812 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:31:38,813 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:31:38,814 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:31:38,814 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:31:38,815 [main:94] - GETTING Continuation<*> from HashSet<Kla0?>
2021-03-11 12:31:38,941 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:31:38,942 [main:94] - GETTING Continuation<*> from UShort
2021-03-11 12:31:38,974 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:31:38,975 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:31:38,976 [main:94] - GETTING Continuation<*> from Long
2021-03-11 12:31:39,020 [main:94] - GETTING Continuation<*> from HashSet<Kla0?>
2021-03-11 12:31:39,021 [main:94] - GETTING Continuation<*> from Double
2021-03-11 12:31:39,056 [main:94] - GETTING Continuation<*> from Any
2021-03-11 12:31:39,060 [main:94] - GETTING Continuation<*> from Double
2021-03-11 12:31:39,061 [main:94] - GETTING Continuation<*> from Byte
2021-03-11 12:31:39,098 [main:94] - GETTING Continuation<*> from Function0<Unit>
2021-03-11 12:31:39,108 [main:94] - GETTING Continuation<*> from UByte
2021-03-11 12:31:39,133 [main:94] - GETTING Continuation<*> from Kla0?
2021-03-11 12:31:39,140 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:31:39,161 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:31:39,162 [main:94] - GETTING Continuation<*> from Kla4?
2021-03-11 12:31:39,169 [main:94] - GETTING Continuation<*> from ArrayList<UInt>
2021-03-11 12:31:39,170 [main:94] - GETTING Continuation<*> from MutableIterator<Kla0?>
2021-03-11 12:31:39,190 [main:94] - GETTING Continuation<*> from ArrayList<ULong>
2021-03-11 12:31:39,304 [main:94] - GETTING Continuation<*> from Kla4
2021-03-11 12:31:39,308 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:31:39,309 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:31:39,310 [main:94] - GETTING Continuation<*> from Kla4?
2021-03-11 12:31:39,311 [main:94] - GETTING Continuation<*> from ArrayList<UInt>
2021-03-11 12:31:39,311 [main:94] - GETTING Continuation<*> from ArrayList<UInt>
2021-03-11 12:31:39,312 [main:94] - GETTING Continuation<*> from Float
2021-03-11 12:31:39,341 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:31:39,342 [main:94] - GETTING Continuation<*> from Array<Any?>
2021-03-11 12:31:39,352 [main:94] - GETTING Continuation<*> from Float
2021-03-11 12:31:39,352 [main:107] - Cant find and generate replacement for prope9 type Continuation<*>
2021-03-11 12:31:39,352 [main:103] - replacing (prope14, Function0<Unit>)
2021-03-11 12:31:39,355 [main:38] - replacing prope14 Function0<Unit>
2021-03-11 12:31:39,355 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:31:39,545 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:31:39,549 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:31:39,557 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 12:31:39,557 [main:49] - GENERATED IS CALL =false
2021-03-11 12:31:41,858 [main:55] - randomType = Triple<UByte, Kla7, Array<Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>>>
2021-03-11 12:31:42,049 [main:302] - generating value of type = Triple<UByte, Kla7, Array<Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>>> false depth = 0
2021-03-11 12:31:42,249 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UByte, second: Kla7, third: Array<Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>>): Triple<UByte, Kla7, Array<Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>>> = TODO()
2021-03-11 12:31:42,254 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UByte, second: Kla7, third: Array<Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>>): Triple<UByte, Kla7, Array<Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>>> = TODO()
2021-03-11 12:31:42,505 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 12:31:42,509 [main:302] - generating value of type = Kla7 false depth = 3
2021-03-11 12:31:42,513 [main:112] - generating klass Kla7 text = class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}
2021-03-11 12:31:42,513 [main:302] - generating value of type = Array<Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>> false depth = 3
2021-03-11 12:31:42,710 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>): Array<Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>> = TODO()
2021-03-11 12:31:42,715 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>): Array<Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>> = TODO()
2021-03-11 12:31:43,373 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:31:43,377 [main:302] - generating value of type = Function1<Int, Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>> false depth = 6
2021-03-11 12:31:43,381 [main:302] - generating value of type = Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>> false depth = 7
2021-03-11 12:31:43,384 [main:302] - generating value of type = Function2<UShort?, String, LinkedHashSet<Kla11>> false depth = 8
2021-03-11 12:31:43,388 [main:302] - generating value of type = LinkedHashSet<Kla11> false depth = 9
2021-03-11 12:31:43,584 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla11): LkedHashSet<Kla11> = TODO()
2021-03-11 12:31:43,589 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla11): LkedHashSet<Kla11> = TODO()
2021-03-11 12:31:43,785 [main:302] - generating value of type = Kla11 false depth = 12
2021-03-11 12:31:43,789 [main:112] - generating klass Kla11 text = object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:31:43,789 [main:95] - GENERATED = linkedSetOf<Kla11>(Kla11)
2021-03-11 12:31:43,790 [main:95] - GENERATED = Array<Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>>(742903246, {a: Int -> {a: HashSet<Short?>? -> {a: UShort?, b: String -> linkedSetOf<Kla11>(Kla11)}}})
2021-03-11 12:31:43,790 [main:95] - GENERATED = Triple<UByte, Kla7, Array<Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>>>(4.toUByte(), Kla7(), Array<Function1<HashSet<Short?>?, Function2<UShort?, String, LinkedHashSet<Kla11>>>>(742903246, {a: Int -> {a: HashSet<Short?>? -> {a: UShort?, b: String -> linkedSetOf<Kla11>(Kla11)}}}))
2021-03-11 12:31:43,821 [main:94] - GETTING Function0<Unit> from Any
2021-03-11 12:31:43,824 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:31:43,832 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:31:43,948 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:31:43,949 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:31:43,950 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:31:43,993 [main:94] - GETTING Function0<Unit> from HashSet<Kla0?>
2021-03-11 12:31:44,119 [main:94] - GETTING Function0<Unit> from Kla4?
2021-03-11 12:31:44,125 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:31:44,126 [main:94] - GETTING Function0<Unit> from Kla0?
2021-03-11 12:31:44,132 [main:94] - GETTING Function0<Unit> from Kla4?
2021-03-11 12:31:44,133 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 12:31:44,162 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:31:44,163 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:31:44,164 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:31:44,165 [main:94] - GETTING Function0<Unit> from HashSet<Kla0?>
2021-03-11 12:31:44,166 [main:94] - GETTING Function0<Unit> from ArrayList<ULong>
2021-03-11 12:31:44,275 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:31:44,276 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:31:44,293 [main:94] - GETTING Function0<Unit> from Byte
2021-03-11 12:31:44,324 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:31:44,325 [main:94] - GETTING Function0<Unit> from Long
2021-03-11 12:31:44,355 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:31:44,356 [main:94] - GETTING Function0<Unit> from MutableIterator<Kla0?>
2021-03-11 12:31:44,373 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 12:31:44,380 [main:110] - replacement of prope14 of type Function0<Unit> is { println()}
2021-03-11 12:31:44,566 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:31:44,566 [main:66] - Compilation checking started
2021-03-11 12:31:45,182 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        { println()} = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:31:45,185 [main:103] - replacing (let(x), Unit?)
2021-03-11 12:31:45,185 [main:38] - replacing let(x) Unit?
2021-03-11 12:31:45,185 [main:42] - Getting value of type Unit?
2021-03-11 12:31:45,377 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 12:31:45,384 [main:46] - GENERATED VALUE OF TYPE Unit? = println()
2021-03-11 12:31:45,384 [main:49] - GENERATED IS CALL =true
2021-03-11 12:31:45,598 [main:55] - randomType = Char
2021-03-11 12:31:45,789 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:31:45,811 [main:94] - GETTING Unit? from ArrayList<UInt>
2021-03-11 12:31:45,920 [main:101] - Case = [public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4e23c567], public abstract fun set(element: kotlin.UInt): kotlin.Unit defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@7bee6dfa]]
2021-03-11 12:31:45,921 [main:137] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4e23c567]
2021-03-11 12:31:45,921 [main:137] - GENERATING call of type public abstract fun set(element: kotlin.UInt): kotlin.Unit defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@7bee6dfa]
2021-03-11 12:31:46,108 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:31:46,113 [main:105] - GENERATED CALL = (list3)?.listIterator().set(881954443.toUInt())
2021-03-11 12:31:46,113 [main:101] - Case = [@kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@51d5f038]]
2021-03-11 12:31:46,113 [main:137] - GENERATING call of type @kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@51d5f038]
2021-03-11 12:31:46,301 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-11 12:31:46,305 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:31:46,497 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:31:46,502 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:31:46,929 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:31:46,933 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:31:47,132 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:31:47,137 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:31:47,841 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 12:31:47,845 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 12:31:47,849 [main:302] - generating value of type = Any false depth = 9
2021-03-11 12:31:47,850 [main:95] - GENERATED = check(true, { "dteyr"})
2021-03-11 12:31:47,850 [main:95] - GENERATED = contract({ check(true, { "dteyr"})})
2021-03-11 12:31:47,850 [main:105] - GENERATED CALL = (list3)?.forEach({a: T -> contract({ check(true, { "dteyr"})})})
2021-03-11 12:31:47,850 [main:101] - Case = [public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@741d4ff5]]
2021-03-11 12:31:47,850 [main:137] - GENERATING call of type public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@741d4ff5]
2021-03-11 12:31:48,040 [main:302] - generating value of type = Function1<T, R?> false depth = 0
2021-03-11 12:31:48,044 [main:302] - generating value of type = R false depth = 1
2021-03-11 12:31:48,462 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Short?): R = TODO()
2021-03-11 12:31:48,468 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Short?): R = TODO()
2021-03-11 12:31:49,095 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:31:49,095 [main:302] - generating value of type = Function0<Short?> false depth = 4
2021-03-11 12:31:49,099 [main:302] - generating value of type = Short true depth = 5
2021-03-11 12:31:49,103 [main:95] - GENERATED = synchronized<Short?>("wsuxv", { 25177})
2021-03-11 12:31:49,103 [main:105] - GENERATED CALL = (list3)?.sortByDescending({a: T -> synchronized<Short?>("wsuxv", { 25177})})
2021-03-11 12:31:49,103 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@6346f859], public fun <T : kotlin.Comparable<T>> kotlin.Array<out T>.sortDescending(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6ad73de1]]
2021-03-11 12:31:49,103 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@6346f859]
2021-03-11 12:31:49,104 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<out T>.sortDescending(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6ad73de1]
2021-03-11 12:31:49,104 [main:105] - GENERATED CALL = (list3)?.toArray().sortDescending()
2021-03-11 12:31:49,104 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@34638df5], public abstract fun add(index: kotlin.Int, element: kotlin.UInt): kotlin.Unit defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@242ceace]]
2021-03-11 12:31:49,104 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@34638df5]
2021-03-11 12:31:49,290 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:49,479 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:49,483 [main:137] - GENERATING call of type public abstract fun add(index: kotlin.Int, element: kotlin.UInt): kotlin.Unit defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@242ceace]
2021-03-11 12:31:49,669 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:49,858 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:31:49,862 [main:105] - GENERATED CALL = (list3)?.subList(-278130202, 853179839).add(1107949120, 2059894700.toUInt())
2021-03-11 12:31:49,863 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@34638df5], @kotlin.SinceKotlin public fun <T> kotlin.collections.MutableList<T>.shuffle(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@76efc023]]
2021-03-11 12:31:49,863 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@34638df5]
2021-03-11 12:31:50,050 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:50,239 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:50,243 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.MutableList<T>.shuffle(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@76efc023]
2021-03-11 12:31:50,243 [main:105] - GENERATED CALL = (list3)?.subList(1337465712, 1809447817).shuffle()
2021-03-11 12:31:50,243 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@6346f859], public fun <T : kotlin.Comparable<T>> kotlin.Array<out T>.sort(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e5e8adf]]
2021-03-11 12:31:50,243 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@6346f859]
2021-03-11 12:31:50,243 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<out T>.sort(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e5e8adf]
2021-03-11 12:31:50,243 [main:105] - GENERATED CALL = (list3)?.toArray().sort()
2021-03-11 12:31:50,244 [main:101] - Case = [public open fun add(index: kotlin.Int, element: kotlin.UInt): kotlin.Unit defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3daeb575]]
2021-03-11 12:31:50,244 [main:137] - GENERATING call of type public open fun add(index: kotlin.Int, element: kotlin.UInt): kotlin.Unit defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3daeb575]
2021-03-11 12:31:50,428 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:50,617 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:31:50,621 [main:105] - GENERATED CALL = (list3)?.add(-503725880, 1290859293.toUInt())
2021-03-11 12:31:50,622 [main:101] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.MutableCollection<in T>.minusAssign(element: T): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1cd9fd72]]
2021-03-11 12:31:50,622 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.MutableCollection<in T>.minusAssign(element: T): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1cd9fd72]
2021-03-11 12:31:50,807 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:31:51,005 [main:43] - GENERATING CALL OF fun <T> minOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-11 12:31:51,011 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-11 12:31:51,207 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:31:51,214 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:31:51,222 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:31:51,230 [main:95] - GENERATED = minOf<Comparable<T>>(5658355515643622313.toULong(), 25763.toUShort(), '號')
2021-03-11 12:31:51,230 [main:105] - GENERATED CALL = (list3)?.minusAssign(minOf<Comparable<T>>(5658355515643622313.toULong(), 25763.toUShort(), '號'))
2021-03-11 12:31:51,230 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@34638df5], public fun <T> kotlin.collections.MutableList<T>.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@52cd65a]]
2021-03-11 12:31:51,230 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@34638df5]
2021-03-11 12:31:51,415 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:51,606 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:51,610 [main:137] - GENERATING call of type public fun <T> kotlin.collections.MutableList<T>.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@52cd65a]
2021-03-11 12:31:51,610 [main:105] - GENERATED CALL = (list3)?.subList(1728462299, 1840032061).reverse()
2021-03-11 12:31:51,610 [main:110] - replacement of let(x) of type Unit? is (list3)?.minusAssign(minOf<Comparable<T>>(5658355515643622313.toULong(), 25763.toUShort(), '號'))
2021-03-11 12:31:51,798 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 12:31:51,798 [main:66] - Compilation checking started
2021-03-11 12:31:52,559 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.(list3)?.minusAssign(minOf<Comparable<T>>(5658355515643622313.toULong(), 25763.toUShort(), '號'))
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("Continuation " + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:31:52,562 [main:103] - replacing ("Continuation ", String)
2021-03-11 12:31:52,563 [main:38] - replacing "Continuation " String
2021-03-11 12:31:52,563 [main:42] - Getting value of type String
2021-03-11 12:31:52,761 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:31:52,765 [main:46] - GENERATED VALUE OF TYPE String = "veehz"
2021-03-11 12:31:52,765 [main:49] - GENERATED IS CALL =false
2021-03-11 12:31:52,990 [main:55] - randomType = UInt?
2021-03-11 12:31:53,179 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:31:53,212 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@556aab95]
2021-03-11 12:31:53,212 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@508f64e5]
2021-03-11 12:31:53,449 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:53,454 [main:66] - Generated call from random type = (1602668878.toUInt())?.toUByte().toString(-478986568)
2021-03-11 12:31:53,454 [main:94] - GETTING String from Int
2021-03-11 12:31:53,486 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:31:53,486 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:31:53,490 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:31:53,677 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:53,681 [main:105] - GENERATED CALL = (list1.size).toLong().toString(1411785412)
2021-03-11 12:31:53,681 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]]
2021-03-11 12:31:53,682 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:31:53,682 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]
2021-03-11 12:31:53,867 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:53,871 [main:105] - GENERATED CALL = (list1.size).toByte().toString(2067203471)
2021-03-11 12:31:53,871 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]]
2021-03-11 12:31:53,871 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:31:53,871 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]
2021-03-11 12:31:53,871 [main:105] - GENERATED CALL = (list1.size).toChar().titlecase()
2021-03-11 12:31:53,871 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:31:53,871 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:31:54,056 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:54,060 [main:105] - GENERATED CALL = (list1.size).toString(-1636625109)
2021-03-11 12:31:54,060 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]]
2021-03-11 12:31:54,060 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:31:54,060 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]
2021-03-11 12:31:54,060 [main:105] - GENERATED CALL = (list1.size).toChar().lowercase()
2021-03-11 12:31:54,061 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:31:54,061 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:31:54,245 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:54,249 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:31:54,435 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:54,439 [main:105] - GENERATED CALL = (list1.size).compareTo(-2146270251).toString(-1311656789)
2021-03-11 12:31:54,439 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]]
2021-03-11 12:31:54,439 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:31:54,439 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]
2021-03-11 12:31:54,624 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:54,628 [main:105] - GENERATED CALL = (list1.size).toShort().toString(1164216351)
2021-03-11 12:31:54,628 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:31:54,628 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:31:54,628 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:31:54,816 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:54,820 [main:105] - GENERATED CALL = (list1.size).toInt().toString(-1562170743)
2021-03-11 12:31:54,820 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:31:54,820 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac]
2021-03-11 12:31:55,006 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:31:55,010 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:31:55,198 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:55,202 [main:105] - GENERATED CALL = (list1.size).div(-840260705650715454).toString(-232915415)
2021-03-11 12:31:55,202 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]]
2021-03-11 12:31:55,202 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:31:55,202 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]
2021-03-11 12:31:55,397 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:31:55,401 [main:105] - GENERATED CALL = (list1.size).toChar().plus("ffpbs")
2021-03-11 12:31:55,401 [main:110] - replacement of "Continuation " of type String is (list1.size).compareTo(-2146270251).toString(-1311656789)
2021-03-11 12:31:55,586 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:31:55,586 [main:66] - Compilation checking started
2021-03-11 12:31:56,499 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:31:56,503 [main:103] - replacing (true, Boolean)
2021-03-11 12:31:56,503 [main:38] - replacing true Boolean
2021-03-11 12:31:56,503 [main:42] - Getting value of type Boolean
2021-03-11 12:31:56,693 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:31:56,697 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:31:56,697 [main:49] - GENERATED IS CALL =false
2021-03-11 12:31:56,713 [main:55] - randomType = Kla1
2021-03-11 12:31:56,900 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:31:56,904 [main:112] - generating klass Kla1 text = inline class Kla1(val long: Long)
2021-03-11 12:31:57,092 [main:194] - Type params = []
2021-03-11 12:31:57,279 [main:302] - generating value of type = Long true depth = 2
2021-03-11 12:31:57,290 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-11 12:31:57,478 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:31:57,479 [main:66] - Generated call from random type = (Kla1(-7479784538736908221)).long.equals("nraal")
2021-03-11 12:31:57,480 [main:94] - GETTING Boolean from Array<Any?>
2021-03-11 12:31:57,494 [main:101] - Case = [public fun <T> kotlin.Array<out T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6d16b32f]]
2021-03-11 12:31:57,494 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6d16b32f]
2021-03-11 12:31:57,494 [main:105] - GENERATED CALL = ((list1).toArray()).any()
2021-03-11 12:31:57,494 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@716c9c9]]
2021-03-11 12:31:57,495 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@716c9c9]
2021-03-11 12:31:57,683 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:31:57,684 [main:105] - GENERATED CALL = ((list1).toArray()).equals("qjgra")
2021-03-11 12:31:57,684 [main:101] - Case = [public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62ebcd4c]]
2021-03-11 12:31:57,684 [main:137] - GENERATING call of type public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62ebcd4c]
2021-03-11 12:31:57,872 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:31:58,071 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-11 12:31:58,076 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Comparable<T>, b: Comparable<T>, c: Comparable<T>): T = TODO()
2021-03-11 12:31:58,273 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:31:58,281 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:31:58,289 [main:302] - generating value of type = Comparable<T> false depth = 3
2021-03-11 12:31:58,296 [main:95] - GENERATED = maxOf<Comparable<T>>('◙', '铡', 1609645630.toUInt())
2021-03-11 12:31:58,297 [main:105] - GENERATED CALL = ((list1).toArray()).contains(maxOf<Comparable<T>>('◙', '铡', 1609645630.toUInt()))
2021-03-11 12:31:58,297 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@38671c02], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@42b35632]]
2021-03-11 12:31:58,297 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@38671c02]
2021-03-11 12:31:58,485 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:31:58,489 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@42b35632]
2021-03-11 12:31:58,677 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:31:58,678 [main:105] - GENERATED CALL = ((list1).toArray()).get(1768452302)?.equals("zswmz")
2021-03-11 12:31:58,678 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@716c9c9], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:31:58,678 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@716c9c9]
2021-03-11 12:31:58,868 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:31:58,868 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:31:59,059 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:31:59,063 [main:105] - GENERATED CALL = ((list1).toArray()).equals("emzlj").and(false)
2021-03-11 12:31:59,063 [main:101] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@5e7467f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:31:59,063 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:31:59,249 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:31:59,249 [main:105] - GENERATED CALL = ((list1).toArray()).size.equals("cgxnp")
2021-03-11 12:31:59,249 [main:101] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Any?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@26c0c8a8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@77a89051]]
2021-03-11 12:31:59,249 [main:137] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Any?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@26c0c8a8]
2021-03-11 12:31:59,249 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@77a89051]
2021-03-11 12:31:59,485 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:31:59,485 [main:105] - GENERATED CALL = ((list1).toArray()).iterator().equals("apimj")
2021-03-11 12:31:59,486 [main:101] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60cb6cf0]]
2021-03-11 12:31:59,486 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60cb6cf0]
2021-03-11 12:31:59,679 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:31:59,875 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:31:59,880 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:32:00,078 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:32:00,289 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: Kla1): T = TODO()
2021-03-11 12:32:00,294 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: Kla1): T = TODO()
2021-03-11 12:32:00,495 [main:302] - generating value of type = Kla1 false depth = 6
2021-03-11 12:32:00,499 [main:112] - generating klass Kla1 text = inline class Kla1(val long: Long)
2021-03-11 12:32:00,687 [main:194] - Type params = []
2021-03-11 12:32:00,876 [main:302] - generating value of type = Long true depth = 8
2021-03-11 12:32:00,881 [main:95] - GENERATED = requireNotNull<Kla1>(Kla1(3362728647457040710))
2021-03-11 12:32:00,881 [main:95] - GENERATED = arrayOf<T>(requireNotNull<Kla1>(Kla1(3362728647457040710)))
2021-03-11 12:32:00,881 [main:105] - GENERATED CALL = ((list1).toArray()).contentEquals(arrayOf<T>(requireNotNull<Kla1>(Kla1(3362728647457040710))))
2021-03-11 12:32:00,881 [main:101] - Case = [public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5c6d0169]]
2021-03-11 12:32:00,881 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5c6d0169]
2021-03-11 12:32:00,881 [main:105] - GENERATED CALL = ((list1).toArray()).none()
2021-03-11 12:32:00,881 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@716c9c9], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:32:00,881 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@716c9c9]
2021-03-11 12:32:01,071 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:32:01,071 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:32:01,261 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:01,265 [main:105] - GENERATED CALL = ((list1).toArray()).equals("kmuju").or(false)
2021-03-11 12:32:01,265 [main:110] - replacement of true of type Boolean is ((list1).toArray()).any()
2021-03-11 12:32:01,452 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:32:01,453 [main:66] - Compilation checking started
2021-03-11 12:32:02,072 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = ((list1).toArray()).any()) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:02,075 [main:103] - replacing (prope14, Function0<Unit>)
2021-03-11 12:32:02,078 [main:38] - replacing prope14 Function0<Unit>
2021-03-11 12:32:02,078 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:32:02,273 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:32:02,277 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:32:02,285 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 12:32:02,285 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:02,293 [main:55] - randomType = UByte
2021-03-11 12:32:02,488 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:32:02,530 [main:94] - GETTING Function0<Unit> from ArrayList<ULong>
2021-03-11 12:32:02,657 [main:94] - GETTING Function0<Unit> from HashSet<Kla0?>
2021-03-11 12:32:02,777 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:32:02,796 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:32:02,928 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:32:02,938 [main:94] - GETTING Function0<Unit> from HashSet<Kla0?>
2021-03-11 12:32:02,940 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:32:02,977 [main:94] - GETTING Function0<Unit> from UShort
2021-03-11 12:32:03,001 [main:94] - GETTING Function0<Unit> from MutableIterator<Kla0?>
2021-03-11 12:32:03,017 [main:94] - GETTING Function0<Unit> from Kla4
2021-03-11 12:32:03,025 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:32:03,026 [main:94] - GETTING Function0<Unit> from Byte
2021-03-11 12:32:03,058 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 12:32:03,086 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:32:03,087 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 12:32:03,096 [main:110] - replacement of prope14 of type Function0<Unit> is { println()}
2021-03-11 12:32:03,294 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:32:03,294 [main:66] - Compilation checking started
2021-03-11 12:32:03,949 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.{ println()} = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:03,952 [main:103] - replacing (prope12, Int)
2021-03-11 12:32:03,952 [main:38] - replacing prope12 Int
2021-03-11 12:32:03,952 [main:42] - Getting value of type Int
2021-03-11 12:32:04,149 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:04,154 [main:46] - GENERATED VALUE OF TYPE Int = 1176561839
2021-03-11 12:32:04,154 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:04,162 [main:55] - randomType = Int
2021-03-11 12:32:04,360 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:04,394 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e7c0a80]
2021-03-11 12:32:04,590 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:04,594 [main:66] - Generated call from random type = (1594076723).rotateRight(1104547320)
2021-03-11 12:32:04,595 [main:94] - GETTING Int from Kla4?
2021-03-11 12:32:04,600 [main:101] - Case = [public final val s: kotlin.String defined in Kla4[PropertyDescriptorImpl@294ee3fb], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@56b8ed40]]
2021-03-11 12:32:04,600 [main:105] - GENERATED CALL = (fu0()).s.length
2021-03-11 12:32:04,600 [main:101] - Case = [public final val s: kotlin.String defined in Kla4[PropertyDescriptorImpl@294ee3fb], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3efb5971]]
2021-03-11 12:32:04,600 [main:137] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3efb5971]
2021-03-11 12:32:04,600 [main:105] - GENERATED CALL = (fu0()).s.toInt()
2021-03-11 12:32:04,600 [main:101] - Case = [public final val s: kotlin.String defined in Kla4[PropertyDescriptorImpl@294ee3fb], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b99a810]]
2021-03-11 12:32:04,600 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b99a810]
2021-03-11 12:32:04,796 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:32:05,035 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:05,039 [main:105] - GENERATED CALL = (fu0()).s.compareTo("lfyik", false)
2021-03-11 12:32:05,040 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@4f47eab1], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]]
2021-03-11 12:32:05,040 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@4f47eab1]
2021-03-11 12:32:05,234 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:32:05,234 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:32:05,429 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:05,434 [main:105] - GENERATED CALL = (fu0()).equals("viuqk").compareTo(true)
2021-03-11 12:32:05,434 [main:110] - replacement of prope12 of type Int is (fu0()).equals("viuqk").compareTo(true)
2021-03-11 12:32:05,628 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:32:05,628 [main:66] - Compilation checking started
2021-03-11 12:32:06,283 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu0()).equals("viuqk").compareTo(true))
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:06,286 [main:103] - replacing (prope12++, Int)
2021-03-11 12:32:06,286 [main:38] - replacing prope12++ Int
2021-03-11 12:32:06,286 [main:42] - Getting value of type Int
2021-03-11 12:32:06,484 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:06,488 [main:46] - GENERATED VALUE OF TYPE Int = 516724
2021-03-11 12:32:06,488 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:06,498 [main:55] - randomType = Boolean
2021-03-11 12:32:06,699 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:06,717 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:32:06,914 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:06,918 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a83905]
2021-03-11 12:32:07,114 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:07,118 [main:66] - Generated call from random type = (false).compareTo(true).ushr(29272360)
2021-03-11 12:32:07,118 [main:94] - GETTING Int from Int
2021-03-11 12:32:07,149 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2de39c23], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@458bf662]]
2021-03-11 12:32:07,149 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2de39c23]
2021-03-11 12:32:07,345 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:32:07,349 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@458bf662]
2021-03-11 12:32:07,349 [main:105] - GENERATED CALL = (list3.size).div(0.94309217f).toBits()
2021-03-11 12:32:07,349 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6a74b59a]]
2021-03-11 12:32:07,349 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:32:07,349 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6a74b59a]
2021-03-11 12:32:07,349 [main:105] - GENERATED CALL = (list3.size).toShort().toInt()
2021-03-11 12:32:07,349 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@3abb0a0f]]
2021-03-11 12:32:07,349 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb]
2021-03-11 12:32:07,548 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:32:07,552 [main:105] - GENERATED CALL = (list3.size).rangeTo(17).start
2021-03-11 12:32:07,552 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73ec0f58]]
2021-03-11 12:32:07,552 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:32:07,552 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73ec0f58]
2021-03-11 12:32:07,552 [main:105] - GENERATED CALL = (list3.size).toInt().inv()
2021-03-11 12:32:07,552 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@3aba2e09]]
2021-03-11 12:32:07,552 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb]
2021-03-11 12:32:07,747 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:32:07,751 [main:105] - GENERATED CALL = (list3.size).rangeTo(-52).endInclusive
2021-03-11 12:32:07,751 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@25e62a12]]
2021-03-11 12:32:07,751 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:32:07,949 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:07,953 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@25e62a12]
2021-03-11 12:32:08,147 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:08,345 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:08,349 [main:105] - GENERATED CALL = (list3.size).compareTo(-1709997443).coerceIn(-1407598178, -531014080)
2021-03-11 12:32:08,350 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@7bae5d99]]
2021-03-11 12:32:08,350 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac]
2021-03-11 12:32:08,544 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:32:08,549 [main:105] - GENERATED CALL = (list3.size).div(-3107189978658398148).sign
2021-03-11 12:32:08,549 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5adfa95c]]
2021-03-11 12:32:08,549 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:32:08,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:08,748 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5adfa95c]
2021-03-11 12:32:08,748 [main:105] - GENERATED CALL = (list3.size).compareTo(1031861234).countOneBits()
2021-03-11 12:32:08,748 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e7c0a80]]
2021-03-11 12:32:08,748 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e7c0a80]
2021-03-11 12:32:08,945 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:08,949 [main:105] - GENERATED CALL = (list3.size).rotateRight(-1019410327)
2021-03-11 12:32:08,949 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a83905]]
2021-03-11 12:32:08,949 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:32:09,153 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:09,157 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a83905]
2021-03-11 12:32:09,354 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:09,358 [main:105] - GENERATED CALL = (list3.size).compareTo(1213978756).ushr(-1243844247)
2021-03-11 12:32:09,358 [main:110] - replacement of prope12++ of type Int is (list3.size).compareTo(-1709997443).coerceIn(-1407598178, -531014080)
2021-03-11 12:32:09,552 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:32:09,552 [main:66] - Compilation checking started
2021-03-11 12:32:10,214 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        (list3.size).compareTo(-1709997443).coerceIn(-1407598178, -531014080)
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:10,218 [main:103] - replacing (isSuccess, Boolean)
2021-03-11 12:32:10,218 [main:38] - replacing isSuccess Boolean
2021-03-11 12:32:10,218 [main:42] - Getting value of type Boolean
2021-03-11 12:32:10,417 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:10,421 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:32:10,421 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:10,430 [main:55] - randomType = Float
2021-03-11 12:32:10,625 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:32:10,658 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@65a6c44e]
2021-03-11 12:32:10,658 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59419d8e]
2021-03-11 12:32:10,659 [main:66] - Generated call from random type = (0.99511904f).toChar().isTitleCase()
2021-03-11 12:32:10,659 [main:94] - GETTING Boolean from ArrayList<UInt>
2021-03-11 12:32:10,768 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5c5f0655], public abstract fun remove(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@28c01060]]
2021-03-11 12:32:10,768 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5c5f0655]
2021-03-11 12:32:11,002 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:11,203 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:11,207 [main:137] - GENERATING call of type public abstract fun remove(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@28c01060]
2021-03-11 12:32:11,405 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:32:11,410 [main:105] - GENERATED CALL = (list2).subList(-916478180, -1816899300).remove(1237451249.toUInt())
2021-03-11 12:32:11,410 [main:101] - Case = [public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@ce96a09], public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@6c8bddff]]
2021-03-11 12:32:11,410 [main:137] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@ce96a09]
2021-03-11 12:32:11,410 [main:137] - GENERATING call of type public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@6c8bddff]
2021-03-11 12:32:11,410 [main:105] - GENERATED CALL = (list2).listIterator().hasPrevious()
2021-03-11 12:32:11,410 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f5a854]]
2021-03-11 12:32:11,410 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f5a854]
2021-03-11 12:32:11,610 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:32:11,614 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:32:11,618 [main:105] - GENERATED CALL = (list2).all({a: T -> true})
2021-03-11 12:32:11,618 [main:101] - Case = [public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@3a2d529b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6e299d58]]
2021-03-11 12:32:11,618 [main:137] - GENERATING call of type public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@3a2d529b]
2021-03-11 12:32:11,618 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6e299d58]
2021-03-11 12:32:11,816 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:32:11,816 [main:105] - GENERATED CALL = (list2).clear().equals("mjpxb")
2021-03-11 12:32:11,816 [main:101] - Case = [public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2981d97c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:32:11,816 [main:137] - GENERATING call of type public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2981d97c]
2021-03-11 12:32:12,015 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:32:12,019 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:32:12,216 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:12,221 [main:105] - GENERATED CALL = (list2).add(362054661.toUInt()).xor(true)
2021-03-11 12:32:12,221 [main:101] - Case = [public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2981d97c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:32:12,221 [main:137] - GENERATING call of type public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2981d97c]
2021-03-11 12:32:12,418 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:32:12,422 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:32:12,621 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:12,625 [main:105] - GENERATED CALL = (list2).add(1392560773.toUInt()).and(false)
2021-03-11 12:32:12,625 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@24c1769e]]
2021-03-11 12:32:12,625 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@24c1769e]
2021-03-11 12:32:12,821 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:32:12,821 [main:105] - GENERATED CALL = (list2).equals("uuyik")
2021-03-11 12:32:12,821 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@32c0910f], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:32:12,821 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@32c0910f]
2021-03-11 12:32:13,018 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:32:13,019 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:32:13,216 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:13,220 [main:105] - GENERATED CALL = (list2).equals("nphbu").or(false)
2021-03-11 12:32:13,220 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@57f39200]]
2021-03-11 12:32:13,220 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc]
2021-03-11 12:32:13,220 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@57f39200]
2021-03-11 12:32:13,418 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:32:13,621 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:32:13,627 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:32:13,835 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:32:14,056 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: Kla3, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:32:14,061 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: Kla3, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:32:14,503 [main:302] - generating value of type = Kla3 false depth = 6
2021-03-11 12:32:14,507 [main:112] - generating klass Kla3 text = inline class Kla3(val obj: Any)
2021-03-11 12:32:14,704 [main:194] - Type params = []
2021-03-11 12:32:14,902 [main:302] - generating value of type = Any false depth = 8
2021-03-11 12:32:14,903 [main:302] - generating value of type = Function0<Any> false depth = 6
2021-03-11 12:32:14,907 [main:302] - generating value of type = Any false depth = 7
2021-03-11 12:32:14,907 [main:95] - GENERATED = requireNotNull<Kla3>(Kla3("qleql"), { "ihyzd"})
2021-03-11 12:32:14,907 [main:95] - GENERATED = arrayOf<T>(requireNotNull<Kla3>(Kla3("qleql"), { "ihyzd"}))
2021-03-11 12:32:14,907 [main:105] - GENERATED CALL = (list2).toArray().contentDeepEquals(arrayOf<T>(requireNotNull<Kla3>(Kla3("qleql"), { "ihyzd"})))
2021-03-11 12:32:14,907 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc], public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5c6d0169]]
2021-03-11 12:32:14,907 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc]
2021-03-11 12:32:14,908 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5c6d0169]
2021-03-11 12:32:14,908 [main:105] - GENERATED CALL = (list2).toArray().none()
2021-03-11 12:32:14,908 [main:110] - replacement of isSuccess of type Boolean is (list2).all({a: T -> true})
2021-03-11 12:32:15,104 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:32:15,108 [main:103] - replacing (this.prope10, Any?)
2021-03-11 12:32:15,108 [main:38] - replacing this.prope10 Any?
2021-03-11 12:32:15,108 [main:42] - Getting value of type Any?
2021-03-11 12:32:15,306 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:32:15,306 [main:46] - GENERATED VALUE OF TYPE Any? = "nqlll"
2021-03-11 12:32:15,306 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:15,315 [main:55] - randomType = Float
2021-03-11 12:32:15,509 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:32:15,542 [main:94] - GETTING Any? from Kla4
2021-03-11 12:32:15,547 [main:94] - GETTING Any? from Int
2021-03-11 12:32:15,578 [main:94] - GETTING Any? from HashSet<Kla0?>
2021-03-11 12:32:15,692 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@18131fed]]
2021-03-11 12:32:15,692 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:32:15,692 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@18131fed]
2021-03-11 12:32:15,887 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:15,892 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>())?.toArray().get(1031732639)
2021-03-11 12:32:15,892 [main:101] - Case = [@kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@14baa056]]
2021-03-11 12:32:15,892 [main:137] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@14baa056]
2021-03-11 12:32:15,892 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>())?.toJSON()
2021-03-11 12:32:15,892 [main:110] - replacement of this.prope10 of type Any? is (hashSetOf<Kla0?>())?.toArray().get(1031732639)
2021-03-11 12:32:16,086 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:32:16,087 [main:66] - Compilation checking started
2021-03-11 12:32:16,814 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let(x)
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(hashSetOf<Kla0?>())?.toArray().get(1031732639) = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:16,818 [main:103] - replacing (x, Function1<Throwable, Unit>)
2021-03-11 12:32:16,818 [main:38] - replacing x Function1<Throwable, Unit>
2021-03-11 12:32:16,818 [main:42] - Getting value of type Function1<Throwable, Unit>
2021-03-11 12:32:17,015 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-11 12:32:17,019 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:32:17,222 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:32:17,228 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:32:17,659 [main:95] - GENERATED = print(null)
2021-03-11 12:32:17,659 [main:46] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> print(null)}
2021-03-11 12:32:17,660 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:17,668 [main:55] - randomType = Byte
2021-03-11 12:32:17,869 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:32:17,914 [main:94] - GETTING Function1<Throwable, Unit> from ArrayList<UInt>
2021-03-11 12:32:18,029 [main:94] - GETTING Function1<Throwable, Unit> from ArrayList<ULong>
2021-03-11 12:32:18,140 [main:94] - GETTING Function1<Throwable, Unit> from Byte
2021-03-11 12:32:18,172 [main:94] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-11 12:32:18,181 [main:94] - GETTING Function1<Throwable, Unit> from ArrayList<UInt>
2021-03-11 12:32:18,182 [main:94] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-11 12:32:18,183 [main:94] - GETTING Function1<Throwable, Unit> from MutableIterator<Kla0?>
2021-03-11 12:32:18,201 [main:94] - GETTING Function1<Throwable, Unit> from HashSet<Kla0?>
2021-03-11 12:32:18,318 [main:94] - GETTING Function1<Throwable, Unit> from ArrayList<UInt>
2021-03-11 12:32:18,319 [main:94] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-11 12:32:18,320 [main:94] - GETTING Function1<Throwable, Unit> from Kla4?
2021-03-11 12:32:18,326 [main:94] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 12:32:18,358 [main:94] - GETTING Function1<Throwable, Unit> from Kla4?
2021-03-11 12:32:18,359 [main:94] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 12:32:18,360 [main:94] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 12:32:18,361 [main:94] - GETTING Function1<Throwable, Unit> from Any
2021-03-11 12:32:18,365 [main:94] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 12:32:18,367 [main:94] - GETTING Function1<Throwable, Unit> from Kla4
2021-03-11 12:32:18,372 [main:94] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-11 12:32:18,373 [main:94] - GETTING Function1<Throwable, Unit> from Double
2021-03-11 12:32:18,402 [main:94] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 12:32:18,404 [main:94] - GETTING Function1<Throwable, Unit> from Kla0?
2021-03-11 12:32:18,412 [main:94] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 12:32:18,413 [main:94] - GETTING Function1<Throwable, Unit> from Long
2021-03-11 12:32:18,444 [main:94] - GETTING Function1<Throwable, Unit> from HashSet<Kla0?>
2021-03-11 12:32:18,445 [main:94] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 12:32:18,446 [main:94] - GETTING Function1<Throwable, Unit> from ArrayList<UInt>
2021-03-11 12:32:18,447 [main:94] - GETTING Function1<Throwable, Unit> from Float
2021-03-11 12:32:18,477 [main:94] - GETTING Function1<Throwable, Unit> from Function0<Unit>
2021-03-11 12:32:18,486 [main:94] - GETTING Function1<Throwable, Unit> from UByte
2021-03-11 12:32:18,510 [main:94] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 12:32:18,511 [main:94] - GETTING Function1<Throwable, Unit> from Float
2021-03-11 12:32:18,512 [main:94] - GETTING Function1<Throwable, Unit> from Double
2021-03-11 12:32:18,513 [main:94] - GETTING Function1<Throwable, Unit> from Array<Any?>
2021-03-11 12:32:18,524 [main:94] - GETTING Function1<Throwable, Unit> from UShort
2021-03-11 12:32:18,548 [main:94] - GETTING Function1<Throwable, Unit> from String
2021-03-11 12:32:18,565 [main:94] - GETTING Function1<Throwable, Unit> from String
2021-03-11 12:32:18,565 [main:110] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> print(null)}
2021-03-11 12:32:18,762 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:32:18,762 [main:66] - Compilation checking started
2021-03-11 12:32:19,743 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = {}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:19,749 [main:103] - replacing ({}, Function0<Unit>)
2021-03-11 12:32:19,749 [main:38] - replacing {} Function0<Unit>
2021-03-11 12:32:19,749 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:32:19,968 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:32:19,972 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:32:20,174 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:32:20,180 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:32:20,835 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:32:20,839 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:32:20,843 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:32:20,843 [main:95] - GENERATED = require(true, { "rqftj"})
2021-03-11 12:32:20,843 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "rqftj"})}
2021-03-11 12:32:20,843 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:20,852 [main:55] - randomType = Float
2021-03-11 12:32:21,047 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:32:21,081 [main:94] - GETTING Function0<Unit> from MutableIterator<Kla0?>
2021-03-11 12:32:21,097 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:32:21,207 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:32:21,208 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:32:21,217 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 12:32:21,248 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:32:21,264 [main:94] - GETTING Function0<Unit> from HashSet<Kla0?>
2021-03-11 12:32:21,386 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:32:21,416 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:32:21,417 [main:94] - GETTING Function0<Unit> from Byte
2021-03-11 12:32:21,449 [main:94] - GETTING Function0<Unit> from Kla4?
2021-03-11 12:32:21,456 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:32:21,457 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:32:21,458 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:32:21,458 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 12:32:21,467 [main:110] - replacement of {} of type Function0<Unit> is { require(true, { "rqftj"})}
2021-03-11 12:32:21,662 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:32:21,663 [main:66] - Compilation checking started
2021-03-11 12:32:22,667 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in 1..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:22,671 [main:103] - replacing (1, Int)
2021-03-11 12:32:22,671 [main:38] - replacing 1 Int
2021-03-11 12:32:22,671 [main:42] - Getting value of type Int
2021-03-11 12:32:22,875 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:22,879 [main:46] - GENERATED VALUE OF TYPE Int = 1743403985
2021-03-11 12:32:22,880 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:22,896 [main:55] - randomType = Kla3
2021-03-11 12:32:23,098 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:32:23,102 [main:112] - generating klass Kla3 text = inline class Kla3(val obj: Any)
2021-03-11 12:32:23,298 [main:194] - Type params = []
2021-03-11 12:32:23,494 [main:302] - generating value of type = Any false depth = 2
2021-03-11 12:32:23,500 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[SimpleFunctionDescriptorImpl@3b404ba9]
2021-03-11 12:32:23,696 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:32:23,697 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:32:23,893 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:23,898 [main:66] - Generated call from random type = (Kla3("rvqwo")).equals("pmdux").compareTo(false)
2021-03-11 12:32:23,898 [main:94] - GETTING Int from Int
2021-03-11 12:32:23,942 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2622f76c]]
2021-03-11 12:32:23,943 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2622f76c]
2021-03-11 12:32:23,943 [main:105] - GENERATED CALL = (list2.size).countTrailingZeroBits()
2021-03-11 12:32:23,943 [main:101] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@25e62a12]]
2021-03-11 12:32:23,943 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@25e62a12]
2021-03-11 12:32:24,142 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:24,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:24,350 [main:105] - GENERATED CALL = (list2.size).coerceIn(647865893, 865813119)
2021-03-11 12:32:24,350 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3fac6f2e]]
2021-03-11 12:32:24,350 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:32:24,350 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3fac6f2e]
2021-03-11 12:32:24,548 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:32:24,553 [main:105] - GENERATED CALL = (list2.size).toDouble().compareTo(-47)
2021-03-11 12:32:24,553 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1094a657]]
2021-03-11 12:32:24,553 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:32:24,553 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1094a657]
2021-03-11 12:32:24,751 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:32:24,756 [main:105] - GENERATED CALL = (list2.size).toShort().compareTo(87)
2021-03-11 12:32:24,756 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5adfa95c]]
2021-03-11 12:32:24,756 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5adfa95c]
2021-03-11 12:32:24,756 [main:105] - GENERATED CALL = (list2.size).countOneBits()
2021-03-11 12:32:24,756 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@3abb0a0f]]
2021-03-11 12:32:24,756 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb]
2021-03-11 12:32:24,954 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:32:24,958 [main:105] - GENERATED CALL = (list2.size).rangeTo(69).start
2021-03-11 12:32:24,958 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@757023a6]]
2021-03-11 12:32:24,958 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@757023a6]
2021-03-11 12:32:25,172 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:25,177 [main:105] - GENERATED CALL = (list2.size).rotateLeft(361553594)
2021-03-11 12:32:25,177 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fe258f2]]
2021-03-11 12:32:25,177 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:32:25,385 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:25,389 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fe258f2]
2021-03-11 12:32:25,389 [main:105] - GENERATED CALL = (list2.size).compareTo(-1473971731).takeLowestOneBit()
2021-03-11 12:32:25,389 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@6a46e297]]
2021-03-11 12:32:25,390 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb]
2021-03-11 12:32:25,586 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:32:25,590 [main:105] - GENERATED CALL = (list2.size).rangeTo(-92).first
2021-03-11 12:32:25,590 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce9cc4f]]
2021-03-11 12:32:25,590 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:32:25,590 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce9cc4f]
2021-03-11 12:32:25,591 [main:105] - GENERATED CALL = (list2.size).toInt().countLeadingZeroBits()
2021-03-11 12:32:25,591 [main:110] - replacement of 1 of type Int is (Kla3("rvqwo")).equals("pmdux").compareTo(false)
2021-03-11 12:32:25,787 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:32:25,788 [main:66] - Compilation checking started
2021-03-11 12:32:26,721 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:26,727 [main:103] - replacing (prope10, Result<Ty1>)
2021-03-11 12:32:26,732 [main:38] - replacing prope10 Result<Ty1>
2021-03-11 12:32:26,732 [main:42] - Getting value of type Result<Ty1>
2021-03-11 12:32:26,957 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-11 12:32:27,183 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 12:32:27,189 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 12:32:27,652 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 12:32:27,652 [main:46] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-11 12:32:27,670 [main:55] - randomType = Kla5
2021-03-11 12:32:27,876 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 12:32:27,880 [main:112] - generating klass Kla5 text = class Kla5 {
    var prope8 = "failed"
}
2021-03-11 12:32:27,886 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 12:32:27,916 [main:94] - GETTING Result<Ty1> from String
2021-03-11 12:32:27,933 [main:94] - GETTING Result<Ty1> from UShort
2021-03-11 12:32:27,956 [main:94] - GETTING Result<Ty1> from HashSet<Kla0?>
2021-03-11 12:32:28,070 [main:94] - GETTING Result<Ty1> from ArrayList<UInt>
2021-03-11 12:32:28,223 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:32:28,253 [main:94] - GETTING Result<Ty1> from String
2021-03-11 12:32:28,254 [main:94] - GETTING Result<Ty1> from ArrayList<UInt>
2021-03-11 12:32:28,255 [main:94] - GETTING Result<Ty1> from Float
2021-03-11 12:32:28,284 [main:94] - GETTING Result<Ty1> from Function0<Unit>
2021-03-11 12:32:28,294 [main:94] - GETTING Result<Ty1> from HashSet<Kla0?>
2021-03-11 12:32:28,295 [main:94] - GETTING Result<Ty1> from Kla4?
2021-03-11 12:32:28,300 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:32:28,301 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:32:28,303 [main:94] - GETTING Result<Ty1> from Any
2021-03-11 12:32:28,307 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:32:28,308 [main:94] - GETTING Result<Ty1> from ArrayList<UInt>
2021-03-11 12:32:28,309 [main:94] - GETTING Result<Ty1> from Array<Any?>
2021-03-11 12:32:28,321 [main:94] - GETTING Result<Ty1> from Kla0?
2021-03-11 12:32:28,328 [main:94] - GETTING Result<Ty1> from ArrayList<UInt>
2021-03-11 12:32:28,329 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:32:28,330 [main:94] - GETTING Result<Ty1> from Float
2021-03-11 12:32:28,331 [main:94] - GETTING Result<Ty1> from ArrayList<ULong>
2021-03-11 12:32:28,442 [main:94] - GETTING Result<Ty1> from UByte
2021-03-11 12:32:28,464 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 12:32:28,465 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 12:32:28,475 [main:94] - GETTING Result<Ty1> from Byte
2021-03-11 12:32:28,510 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:32:28,512 [main:94] - GETTING Result<Ty1> from MutableIterator<Kla0?>
2021-03-11 12:32:28,532 [main:94] - GETTING Result<Ty1> from Long
2021-03-11 12:32:28,562 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 12:32:28,564 [main:94] - GETTING Result<Ty1> from Kla4
2021-03-11 12:32:28,570 [main:94] - GETTING Result<Ty1> from Kla4?
2021-03-11 12:32:28,572 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 12:32:28,573 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:32:28,574 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:32:28,575 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 12:32:28,575 [main:107] - Cant find and generate replacement for prope10 type Result<Ty1>
2021-03-11 12:32:28,575 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:32:28,575 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:32:28,575 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:32:28,787 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:32:28,795 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:32:28,812 [main:55] - randomType = Kla6
2021-03-11 12:32:29,019 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 12:32:29,023 [main:112] - generating klass Kla6 text = open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        prope10.getOrThrow()
    }
}
2021-03-11 12:32:29,231 [main:194] - Type params = []
2021-03-11 12:32:29,438 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 12:32:29,651 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:32:29,657 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:32:30,132 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 12:32:30,352 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:32:30,358 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:32:31,076 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:32:31,076 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:32:31,090 [main:94] - GETTING EmptyCoroutineContext from ArrayList<ULong>
2021-03-11 12:32:31,200 [main:94] - GETTING EmptyCoroutineContext from UShort
2021-03-11 12:32:31,222 [main:94] - GETTING EmptyCoroutineContext from HashSet<Kla0?>
2021-03-11 12:32:31,340 [main:94] - GETTING EmptyCoroutineContext from Kla0?
2021-03-11 12:32:31,346 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:32:31,376 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:32:31,377 [main:94] - GETTING EmptyCoroutineContext from Kla4?
2021-03-11 12:32:31,382 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:32:31,383 [main:94] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-11 12:32:31,392 [main:94] - GETTING EmptyCoroutineContext from UByte
2021-03-11 12:32:31,414 [main:94] - GETTING EmptyCoroutineContext from HashSet<Kla0?>
2021-03-11 12:32:31,414 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:32:31,524 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:32:31,525 [main:94] - GETTING EmptyCoroutineContext from Byte
2021-03-11 12:32:31,559 [main:94] - GETTING EmptyCoroutineContext from MutableIterator<Kla0?>
2021-03-11 12:32:31,581 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:32:31,599 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:32:31,607 [main:94] - GETTING EmptyCoroutineContext from Array<Any?>
2021-03-11 12:32:31,618 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:32:31,619 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:32:31,619 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:32:31,620 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:32:31,621 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:32:31,621 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:32:31,622 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:32:31,622 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 12:32:31,653 [main:94] - GETTING EmptyCoroutineContext from Float
2021-03-11 12:32:31,681 [main:94] - GETTING EmptyCoroutineContext from Kla4
2021-03-11 12:32:31,687 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:32:31,688 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:32:31,688 [main:94] - GETTING EmptyCoroutineContext from Kla4?
2021-03-11 12:32:31,689 [main:94] - GETTING EmptyCoroutineContext from Long
2021-03-11 12:32:31,719 [main:94] - GETTING EmptyCoroutineContext from Any
2021-03-11 12:32:31,723 [main:94] - GETTING EmptyCoroutineContext from Float
2021-03-11 12:32:31,723 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:32:31,724 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 12:32:31,725 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:32:31,725 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:32:31,725 [main:103] - replacing (prope10, Result<Any?>)
2021-03-11 12:32:31,727 [main:38] - replacing prope10 Result<Any?>
2021-03-11 12:32:31,727 [main:42] - Getting value of type Result<Any?>
2021-03-11 12:32:31,944 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 12:32:32,169 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:32:32,175 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:32:32,652 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 12:32:32,657 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:32:32,657 [main:95] - GENERATED = runCatching<Any?>({ "mvttt"})
2021-03-11 12:32:32,657 [main:46] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "mvttt"})
2021-03-11 12:32:32,657 [main:49] - GENERATED IS CALL =true
2021-03-11 12:32:32,676 [main:55] - randomType = Kla4
2021-03-11 12:32:32,892 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:32:32,897 [main:112] - generating klass Kla4 text = class Kla4(val s: String)
2021-03-11 12:32:33,119 [main:194] - Type params = []
2021-03-11 12:32:33,374 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:32:33,385 [main:94] - GETTING Result<Any?> from ArrayList<UInt>
2021-03-11 12:32:33,495 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:33,525 [main:94] - GETTING Result<Any?> from Float
2021-03-11 12:32:33,554 [main:94] - GETTING Result<Any?> from Kla4
2021-03-11 12:32:33,560 [main:94] - GETTING Result<Any?> from ArrayList<ULong>
2021-03-11 12:32:33,670 [main:94] - GETTING Result<Any?> from HashSet<Kla0?>
2021-03-11 12:32:33,788 [main:94] - GETTING Result<Any?> from HashSet<Kla0?>
2021-03-11 12:32:33,789 [main:94] - GETTING Result<Any?> from Kla4?
2021-03-11 12:32:33,794 [main:94] - GETTING Result<Any?> from UByte
2021-03-11 12:32:33,817 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:33,818 [main:94] - GETTING Result<Any?> from Double
2021-03-11 12:32:33,847 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:32:33,865 [main:94] - GETTING Result<Any?> from Byte
2021-03-11 12:32:33,903 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:33,905 [main:94] - GETTING Result<Any?> from MutableIterator<Kla0?>
2021-03-11 12:32:33,923 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:33,924 [main:94] - GETTING Result<Any?> from Kla4?
2021-03-11 12:32:33,926 [main:94] - GETTING Result<Any?> from Kla0?
2021-03-11 12:32:33,933 [main:94] - GETTING Result<Any?> from ArrayList<UInt>
2021-03-11 12:32:33,934 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:32:33,935 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:33,936 [main:94] - GETTING Result<Any?> from Float
2021-03-11 12:32:33,937 [main:94] - GETTING Result<Any?> from Boolean
2021-03-11 12:32:33,948 [main:94] - GETTING Result<Any?> from Boolean
2021-03-11 12:32:33,949 [main:94] - GETTING Result<Any?> from Double
2021-03-11 12:32:33,950 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:33,952 [main:94] - GETTING Result<Any?> from UShort
2021-03-11 12:32:33,983 [main:94] - GETTING Result<Any?> from Array<Any?>
2021-03-11 12:32:33,996 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:33,998 [main:94] - GETTING Result<Any?> from Any
2021-03-11 12:32:34,003 [main:94] - GETTING Result<Any?> from ArrayList<UInt>
2021-03-11 12:32:34,004 [main:94] - GETTING Result<Any?> from Long
2021-03-11 12:32:34,034 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:34,035 [main:94] - GETTING Result<Any?> from Boolean
2021-03-11 12:32:34,037 [main:94] - GETTING Result<Any?> from Boolean
2021-03-11 12:32:34,039 [main:94] - GETTING Result<Any?> from Function0<Unit>
2021-03-11 12:32:34,051 [main:94] - GETTING Result<Any?> from ArrayList<UInt>
2021-03-11 12:32:34,051 [main:110] - replacement of prope10 of type Result<Any?> is runCatching<Any?>({ "mvttt"})
2021-03-11 12:32:34,275 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:32:34,276 [main:66] - Compilation checking started
2021-03-11 12:32:35,365 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope10.exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:35,371 [main:103] - replacing (prope10, Result<Any?>)
2021-03-11 12:32:35,371 [main:38] - replacing prope10 Result<Any?>
2021-03-11 12:32:35,372 [main:42] - Getting value of type Result<Any?>
2021-03-11 12:32:35,604 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 12:32:35,829 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:32:35,836 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:32:36,327 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 12:32:36,331 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:32:36,332 [main:95] - GENERATED = runCatching<Any?>({ "nrlhm"})
2021-03-11 12:32:36,332 [main:46] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "nrlhm"})
2021-03-11 12:32:36,332 [main:49] - GENERATED IS CALL =true
2021-03-11 12:32:36,586 [main:55] - randomType = Short?
2021-03-11 12:32:36,803 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:32:36,844 [main:94] - GETTING Result<Any?> from Kla0?
2021-03-11 12:32:36,851 [main:94] - GETTING Result<Any?> from Boolean
2021-03-11 12:32:36,859 [main:94] - GETTING Result<Any?> from Double
2021-03-11 12:32:36,888 [main:94] - GETTING Result<Any?> from Boolean
2021-03-11 12:32:36,889 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:36,922 [main:94] - GETTING Result<Any?> from Byte
2021-03-11 12:32:36,953 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:36,954 [main:94] - GETTING Result<Any?> from MutableIterator<Kla0?>
2021-03-11 12:32:36,971 [main:94] - GETTING Result<Any?> from HashSet<Kla0?>
2021-03-11 12:32:37,086 [main:94] - GETTING Result<Any?> from Long
2021-03-11 12:32:37,115 [main:94] - GETTING Result<Any?> from ArrayList<UInt>
2021-03-11 12:32:37,226 [main:94] - GETTING Result<Any?> from HashSet<Kla0?>
2021-03-11 12:32:37,227 [main:94] - GETTING Result<Any?> from ArrayList<UInt>
2021-03-11 12:32:37,228 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:37,229 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:37,230 [main:94] - GETTING Result<Any?> from Function0<Unit>
2021-03-11 12:32:37,240 [main:94] - GETTING Result<Any?> from ArrayList<ULong>
2021-03-11 12:32:37,351 [main:94] - GETTING Result<Any?> from Any
2021-03-11 12:32:37,355 [main:94] - GETTING Result<Any?> from Kla4?
2021-03-11 12:32:37,360 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:32:37,377 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:37,378 [main:94] - GETTING Result<Any?> from Array<Any?>
2021-03-11 12:32:37,390 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:37,391 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:37,392 [main:94] - GETTING Result<Any?> from Boolean
2021-03-11 12:32:37,393 [main:94] - GETTING Result<Any?> from Boolean
2021-03-11 12:32:37,394 [main:94] - GETTING Result<Any?> from Double
2021-03-11 12:32:37,395 [main:94] - GETTING Result<Any?> from Float
2021-03-11 12:32:37,424 [main:94] - GETTING Result<Any?> from UByte
2021-03-11 12:32:37,447 [main:94] - GETTING Result<Any?> from UShort
2021-03-11 12:32:37,468 [main:94] - GETTING Result<Any?> from Float
2021-03-11 12:32:37,470 [main:94] - GETTING Result<Any?> from ArrayList<UInt>
2021-03-11 12:32:37,471 [main:94] - GETTING Result<Any?> from Kla4
2021-03-11 12:32:37,477 [main:94] - GETTING Result<Any?> from Kla4?
2021-03-11 12:32:37,478 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:32:37,479 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:32:37,480 [main:94] - GETTING Result<Any?> from ArrayList<UInt>
2021-03-11 12:32:37,480 [main:110] - replacement of prope10 of type Result<Any?> is runCatching<Any?>({ "nrlhm"})
2021-03-11 12:32:37,698 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:32:37,698 [main:66] - Compilation checking started
2021-03-11 12:32:38,793 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:38,797 [main:103] - replacing (prope14, Function0<Unit>)
2021-03-11 12:32:38,797 [main:38] - replacing prope14 Function0<Unit>
2021-03-11 12:32:38,797 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:32:39,015 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:32:39,019 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:32:39,240 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:32:39,246 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:32:39,720 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:32:39,721 [main:95] - GENERATED = println("bmerm")
2021-03-11 12:32:39,721 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("bmerm")}
2021-03-11 12:32:39,721 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:39,731 [main:55] - randomType = UInt
2021-03-11 12:32:39,947 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:32:39,984 [main:94] - GETTING Function0<Unit> from Array<Any?>
2021-03-11 12:32:39,995 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:32:40,104 [main:94] - GETTING Function0<Unit> from Any
2021-03-11 12:32:40,108 [main:94] - GETTING Function0<Unit> from Float
2021-03-11 12:32:40,136 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:32:40,175 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:32:40,175 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 12:32:40,184 [main:110] - replacement of prope14 of type Function0<Unit> is { println("bmerm")}
2021-03-11 12:32:40,400 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:32:40,401 [main:66] - Compilation checking started
2021-03-11 12:32:41,167 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val prope9 = Kla5()
    fu2(prope9::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        { println("bmerm")} = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:41,171 [main:103] - replacing (prope9, Kla5)
2021-03-11 12:32:41,174 [main:38] - replacing prope9 Kla5
2021-03-11 12:32:41,174 [main:42] - Getting value of type Kla5
2021-03-11 12:32:41,402 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 12:32:41,406 [main:112] - generating klass Kla5 text = class Kla5 {
    var prope8 = "failed"
}
2021-03-11 12:32:41,407 [main:46] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 12:32:41,407 [main:49] - GENERATED IS CALL =true
2021-03-11 12:32:41,675 [main:55] - randomType = UShort?
2021-03-11 12:32:41,900 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:32:41,939 [main:94] - GETTING Kla5 from Float
2021-03-11 12:32:41,968 [main:94] - GETTING Kla5 from Int
2021-03-11 12:32:41,999 [main:94] - GETTING Kla5 from UShort
2021-03-11 12:32:42,021 [main:94] - GETTING Kla5 from MutableIterator<Kla0?>
2021-03-11 12:32:42,038 [main:94] - GETTING Kla5 from Function0<Unit>
2021-03-11 12:32:42,046 [main:94] - GETTING Kla5 from Int
2021-03-11 12:32:42,047 [main:94] - GETTING Kla5 from Kla4
2021-03-11 12:32:42,051 [main:94] - GETTING Kla5 from String
2021-03-11 12:32:42,069 [main:94] - GETTING Kla5 from Int
2021-03-11 12:32:42,069 [main:94] - GETTING Kla5 from ArrayList<UInt>
2021-03-11 12:32:42,184 [main:94] - GETTING Kla5 from Boolean
2021-03-11 12:32:42,192 [main:94] - GETTING Kla5 from Array<Any?>
2021-03-11 12:32:42,206 [main:94] - GETTING Kla5 from Int
2021-03-11 12:32:42,206 [main:94] - GETTING Kla5 from ArrayList<ULong>
2021-03-11 12:32:42,319 [main:94] - GETTING Kla5 from Int
2021-03-11 12:32:42,320 [main:94] - GETTING Kla5 from HashSet<Kla0?>
2021-03-11 12:32:42,435 [main:94] - GETTING Kla5 from String
2021-03-11 12:32:42,436 [main:94] - GETTING Kla5 from Int
2021-03-11 12:32:42,437 [main:94] - GETTING Kla5 from Double
2021-03-11 12:32:42,466 [main:94] - GETTING Kla5 from HashSet<Kla0?>
2021-03-11 12:32:42,467 [main:94] - GETTING Kla5 from Float
2021-03-11 12:32:42,467 [main:94] - GETTING Kla5 from ArrayList<UInt>
2021-03-11 12:32:42,468 [main:94] - GETTING Kla5 from ArrayList<UInt>
2021-03-11 12:32:42,469 [main:94] - GETTING Kla5 from Double
2021-03-11 12:32:42,469 [main:94] - GETTING Kla5 from Any
2021-03-11 12:32:42,473 [main:94] - GETTING Kla5 from Int
2021-03-11 12:32:42,474 [main:94] - GETTING Kla5 from Kla4?
2021-03-11 12:32:42,479 [main:94] - GETTING Kla5 from ArrayList<UInt>
2021-03-11 12:32:42,480 [main:94] - GETTING Kla5 from Boolean
2021-03-11 12:32:42,480 [main:94] - GETTING Kla5 from UByte
2021-03-11 12:32:42,503 [main:94] - GETTING Kla5 from Kla4?
2021-03-11 12:32:42,504 [main:94] - GETTING Kla5 from Kla0?
2021-03-11 12:32:42,510 [main:94] - GETTING Kla5 from Boolean
2021-03-11 12:32:42,511 [main:94] - GETTING Kla5 from Long
2021-03-11 12:32:42,540 [main:94] - GETTING Kla5 from Int
2021-03-11 12:32:42,541 [main:94] - GETTING Kla5 from Byte
2021-03-11 12:32:42,572 [main:94] - GETTING Kla5 from Boolean
2021-03-11 12:32:42,572 [main:110] - replacement of prope9 of type Kla5 is Kla5()
2021-03-11 12:32:42,792 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:32:42,792 [main:66] - Compilation checking started
2021-03-11 12:32:43,916 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:43,921 [main:103] - replacing ("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"), String)
2021-03-11 12:32:43,921 [main:38] - replacing "tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n") String
2021-03-11 12:32:43,922 [main:42] - Getting value of type String
2021-03-11 12:32:44,156 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:32:44,161 [main:46] - GENERATED VALUE OF TYPE String = "fszxv"
2021-03-11 12:32:44,161 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:44,181 [main:55] - randomType = Kla9
2021-03-11 12:32:44,438 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-11 12:32:44,443 [main:112] - generating klass Kla9 text = class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}
2021-03-11 12:32:44,451 [main:94] - GETTING String from Boolean
2021-03-11 12:32:44,462 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:32:44,462 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:32:44,688 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:44,693 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:32:44,918 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:44,924 [main:105] - GENERATED CALL = (list4.add(i)).compareTo(false).toString(-2000083430)
2021-03-11 12:32:44,924 [main:110] - replacement of "tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n") of type String is (list4.add(i)).compareTo(false).toString(-2000083430)
2021-03-11 12:32:45,147 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:32:45,147 [main:66] - Compilation checking started
2021-03-11 12:32:45,935 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error((list4.add(i)).compareTo(false).toString(-2000083430))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:45,939 [main:103] - replacing (prope8, String)
2021-03-11 12:32:45,942 [main:38] - replacing prope8 String
2021-03-11 12:32:45,942 [main:42] - Getting value of type String
2021-03-11 12:32:46,176 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:32:46,181 [main:46] - GENERATED VALUE OF TYPE String = "zwdcn"
2021-03-11 12:32:46,181 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:46,468 [main:55] - randomType = Set<Kla3>
2021-03-11 12:32:46,469 [main:94] - GETTING String from Kla0?
2021-03-11 12:32:46,477 [main:101] - Case = [public final val int: kotlin.Int defined in Kla0[PropertyDescriptorImpl@40efb9c8], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:32:46,477 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:32:46,712 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:46,717 [main:105] - GENERATED CALL = ((hashSetOf<Kla0?>()).iterator().next()).int.toString(-1500927779)
2021-03-11 12:32:46,717 [main:110] - replacement of prope8 of type String is ((hashSetOf<Kla0?>()).iterator().next()).int.toString(-1500927779)
2021-03-11 12:32:46,958 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:32:46,958 [main:66] - Compilation checking started
2021-03-11 12:32:47,784 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
((hashSetOf<Kla0?>()).iterator().next()).int.toString(-1500927779) = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:47,789 [main:103] - replacing (prope12, Int)
2021-03-11 12:32:47,789 [main:38] - replacing prope12 Int
2021-03-11 12:32:47,789 [main:42] - Getting value of type Int
2021-03-11 12:32:48,030 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:48,035 [main:46] - GENERATED VALUE OF TYPE Int = 1754099338
2021-03-11 12:32:48,035 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:48,045 [main:55] - randomType = ULong
2021-03-11 12:32:48,279 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:32:48,313 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@94e9c19]
2021-03-11 12:32:48,556 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:32:48,561 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b7cdc47]
2021-03-11 12:32:48,561 [main:66] - Generated call from random type = (2143426700652872585.toULong()).compareTo(21.toUByte()).unaryPlus()
2021-03-11 12:32:48,561 [main:110] - replacement of prope12 of type Int is (2143426700652872585.toULong()).compareTo(21.toUByte()).unaryPlus()
2021-03-11 12:32:48,793 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:32:48,793 [main:66] - Compilation checking started
2021-03-11 12:32:49,634 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(2143426700652872585.toULong()).compareTo(21.toUByte()).unaryPlus() = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:49,639 [main:103] - replacing ("\n", String)
2021-03-11 12:32:49,642 [main:38] - replacing "\n" String
2021-03-11 12:32:49,642 [main:42] - Getting value of type String
2021-03-11 12:32:49,884 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:32:49,889 [main:46] - GENERATED VALUE OF TYPE String = "wbfbh"
2021-03-11 12:32:49,889 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:50,494 [main:55] - randomType = Map<Kla0?, Double?>
2021-03-11 12:32:50,495 [main:94] - GETTING String from Byte
2021-03-11 12:32:50,525 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f7bbab2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]]
2021-03-11 12:32:50,525 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f7bbab2]
2021-03-11 12:32:50,525 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]
2021-03-11 12:32:50,525 [main:105] - GENERATED CALL = ((-111).toByte()).toChar().lowercase()
2021-03-11 12:32:50,525 [main:101] - Case = [public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ebe1d2a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]]
2021-03-11 12:32:50,525 [main:137] - GENERATING call of type public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3ebe1d2a]
2021-03-11 12:32:50,525 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]
2021-03-11 12:32:50,764 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:50,770 [main:105] - GENERATED CALL = ((-111).toByte()).toByte().toString(-472156618)
2021-03-11 12:32:50,770 [main:101] - Case = [public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@19c2cf53], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:32:50,770 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@19c2cf53]
2021-03-11 12:32:51,040 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:32:51,046 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:32:51,283 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:51,289 [main:105] - GENERATED CALL = ((-111).toByte()).compareTo(-126).toString(-992501466)
2021-03-11 12:32:51,289 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5505c6a], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:32:51,289 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5505c6a]
2021-03-11 12:32:51,528 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:32:51,534 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:32:51,772 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:51,777 [main:105] - GENERATED CALL = ((-111).toByte()).div(6753880431743647319).toString(670991996)
2021-03-11 12:32:51,777 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:32:51,777 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:32:51,777 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:32:52,015 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:52,020 [main:105] - GENERATED CALL = ((-111).toByte()).toInt().toString(-196265544)
2021-03-11 12:32:52,020 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f7bbab2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]]
2021-03-11 12:32:52,020 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f7bbab2]
2021-03-11 12:32:52,020 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]
2021-03-11 12:32:52,021 [main:105] - GENERATED CALL = ((-111).toByte()).toChar().uppercase()
2021-03-11 12:32:52,021 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@536c8170], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]]
2021-03-11 12:32:52,021 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@536c8170]
2021-03-11 12:32:52,021 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]
2021-03-11 12:32:52,259 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:52,265 [main:105] - GENERATED CALL = ((-111).toByte()).toShort().toString(-881134180)
2021-03-11 12:32:52,265 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f7bbab2], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]]
2021-03-11 12:32:52,265 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f7bbab2]
2021-03-11 12:32:52,265 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]
2021-03-11 12:32:52,503 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:32:52,508 [main:105] - GENERATED CALL = ((-111).toByte()).toChar().plus("syehp")
2021-03-11 12:32:52,508 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f7bbab2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]]
2021-03-11 12:32:52,508 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f7bbab2]
2021-03-11 12:32:52,508 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]
2021-03-11 12:32:52,508 [main:105] - GENERATED CALL = ((-111).toByte()).toChar().titlecase()
2021-03-11 12:32:52,508 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]]
2021-03-11 12:32:52,509 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]
2021-03-11 12:32:52,746 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:32:52,752 [main:105] - GENERATED CALL = ((-111).toByte()).toString(18955726)
2021-03-11 12:32:52,752 [main:110] - replacement of "\n" of type String is ((-111).toByte()).div(6753880431743647319).toString(670991996)
2021-03-11 12:32:52,992 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:32:52,993 [main:66] - Compilation checking started
2021-03-11 12:32:54,169 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = ((-111).toByte()).div(6753880431743647319).toString(670991996))) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (checkFinished && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:54,174 [main:103] - replacing (checkFinished, Boolean)
2021-03-11 12:32:54,174 [main:38] - replacing checkFinished Boolean
2021-03-11 12:32:54,174 [main:42] - Getting value of type Boolean
2021-03-11 12:32:54,413 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:54,420 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:32:54,420 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:54,753 [main:55] - randomType = HashMap<ULong, Int>
2021-03-11 12:32:54,993 [main:302] - generating value of type = HashMap<ULong, Int> false depth = 0
2021-03-11 12:32:55,251 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<ULong, Int> = TODO()
2021-03-11 12:32:55,260 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<ULong, Int> = TODO()
2021-03-11 12:32:55,514 [main:95] - GENERATED = linkedMapOf<ULong, Int>()
2021-03-11 12:32:55,611 [main:137] - GENERATING call of type public abstract fun contains(element: kotlin.collections.MutableMap.MutableEntry<kotlin.ULong, kotlin.Int>): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@225b136d]
2021-03-11 12:32:55,854 [main:302] - generating value of type = MutableEntry<ULong, Int> false depth = 0
2021-03-11 12:32:55,864 [main:144] - CANT GENERATE PARAMS FOR public abstract fun contains(element: kotlin.collections.MutableMap.MutableEntry<kotlin.ULong, kotlin.Int>): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@225b136d]
2021-03-11 12:32:55,865 [main:66] - Generated call from random type = (linkedMapOf<ULong, Int>()).null
2021-03-11 12:32:55,865 [main:94] - GETTING Boolean from Double
2021-03-11 12:32:55,899 [main:101] - Case = [public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@599f178a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-11 12:32:55,899 [main:137] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@599f178a]
2021-03-11 12:32:55,900 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-11 12:32:56,140 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:32:56,140 [main:105] - GENERATED CALL = (((0.91738296f)).div(0.3692025158350838)).toLong().equals("dfcxp")
2021-03-11 12:32:56,140 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443e326f]]
2021-03-11 12:32:56,140 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c]
2021-03-11 12:32:56,140 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@443e326f]
2021-03-11 12:32:56,141 [main:105] - GENERATED CALL = (((0.91738296f)).div(0.3692025158350838)).toChar().isISOControl()
2021-03-11 12:32:56,141 [main:101] - Case = [public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4afe8f90]]
2021-03-11 12:32:56,141 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4afe8f90]
2021-03-11 12:32:56,141 [main:105] - GENERATED CALL = (((0.91738296f)).div(0.3692025158350838)).isInfinite()
2021-03-11 12:32:56,141 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]]
2021-03-11 12:32:56,141 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:32:56,141 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]
2021-03-11 12:32:56,141 [main:105] - GENERATED CALL = (((0.91738296f)).div(0.3692025158350838)).toDouble().isNaN()
2021-03-11 12:32:56,141 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]]
2021-03-11 12:32:56,141 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:32:56,141 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]
2021-03-11 12:32:56,141 [main:105] - GENERATED CALL = (((0.91738296f)).div(0.3692025158350838)).toDouble().isFinite()
2021-03-11 12:32:56,141 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:32:56,141 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]
2021-03-11 12:32:56,382 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:32:56,382 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:32:56,623 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:32:56,630 [main:105] - GENERATED CALL = (((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false)
2021-03-11 12:32:56,630 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7816787d]]
2021-03-11 12:32:56,630 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c]
2021-03-11 12:32:56,630 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7816787d]
2021-03-11 12:32:56,630 [main:105] - GENERATED CALL = (((0.91738296f)).div(0.3692025158350838)).toChar().isSurrogate()
2021-03-11 12:32:56,630 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494be499]]
2021-03-11 12:32:56,630 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c]
2021-03-11 12:32:56,630 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494be499]
2021-03-11 12:32:56,630 [main:105] - GENERATED CALL = (((0.91738296f)).div(0.3692025158350838)).toChar().isLetter()
2021-03-11 12:32:56,630 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2805e3]]
2021-03-11 12:32:56,630 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@785b665c]
2021-03-11 12:32:56,630 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2805e3]
2021-03-11 12:32:56,630 [main:105] - GENERATED CALL = (((0.91738296f)).div(0.3692025158350838)).toChar().isHighSurrogate()
2021-03-11 12:32:56,630 [main:101] - Case = [public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@303284d], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e49055a]]
2021-03-11 12:32:56,630 [main:137] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@303284d]
2021-03-11 12:32:56,631 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e49055a]
2021-03-11 12:32:56,631 [main:105] - GENERATED CALL = (((0.91738296f)).div(0.3692025158350838)).toFloat().isInfinite()
2021-03-11 12:32:56,631 [main:110] - replacement of checkFinished of type Boolean is (((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false)
2021-03-11 12:32:56,872 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:32:56,873 [main:66] - Compilation checking started
2021-03-11 12:32:58,101 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = ((-111).toByte()).div(6753880431743647319).toString(670991996))) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = {
            prope7.prope13 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:32:58,105 [main:103] - replacing ({
            prope7.prope13 = true
        }, Function0<Unit>)
2021-03-11 12:32:58,106 [main:38] - replacing {
            prope7.prope13 = true
        } Function0<Unit>
2021-03-11 12:32:58,106 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:32:58,346 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:32:58,353 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:32:58,603 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:32:58,611 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:32:59,148 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:32:59,155 [main:95] - GENERATED = require(false)
2021-03-11 12:32:59,155 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 12:32:59,155 [main:49] - GENERATED IS CALL =false
2021-03-11 12:32:59,169 [main:55] - randomType = Long
2021-03-11 12:32:59,409 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:32:59,446 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:32:59,463 [main:94] - GETTING Function0<Unit> from HashSet<Kla0?>
2021-03-11 12:32:59,579 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:32:59,587 [main:94] - GETTING Function0<Unit> from HashSet<Kla0?>
2021-03-11 12:32:59,588 [main:94] - GETTING Function0<Unit> from Kla4?
2021-03-11 12:32:59,595 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:32:59,596 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 12:32:59,624 [main:94] - GETTING Function0<Unit> from UShort
2021-03-11 12:32:59,646 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:32:59,647 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:32:59,678 [main:94] - GETTING Function0<Unit> from ArrayList<ULong>
2021-03-11 12:32:59,787 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:32:59,896 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:32:59,897 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:32:59,898 [main:94] - GETTING Function0<Unit> from Array<Any?>
2021-03-11 12:32:59,908 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 12:32:59,916 [main:110] - replacement of {
            prope7.prope13 = true
        } of type Function0<Unit> is { println()}
2021-03-11 12:33:00,154 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:33:00,155 [main:66] - Compilation checking started
2021-03-11 12:33:01,353 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = ((-111).toByte()).div(6753880431743647319).toString(670991996))) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if (((list3.size).toDouble()).toByte().rem(-5) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:33:01,358 [main:103] - replacing (((list3.size).toDouble()).toByte().rem(-5) != i, Boolean)
2021-03-11 12:33:01,359 [main:38] - replacing ((list3.size).toDouble()).toByte().rem(-5) != i Boolean
2021-03-11 12:33:01,359 [main:42] - Getting value of type Boolean
2021-03-11 12:33:01,599 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:33:01,606 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:33:01,606 [main:49] - GENERATED IS CALL =false
2021-03-11 12:33:02,813 [main:55] - randomType = LinkedHashMap<ArrayDeque<UInt?>?, Kla7>
2021-03-11 12:33:03,053 [main:302] - generating value of type = LinkedHashMap<ArrayDeque<UInt?>?, Kla7> false depth = 0
2021-03-11 12:33:03,303 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(original: kotlin.collections.Map<ArrayDeque<UInt?>?, Kla7>): LinkedHashMap<ArrayDeque<UInt?>?, Kla7> = TODO()
2021-03-11 12:33:03,311 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(original: kotlin.collections.Map<ArrayDeque<UInt?>?, Kla7>): LinkedHashMap<ArrayDeque<UInt?>?, Kla7> = TODO()
2021-03-11 12:33:03,924 [main:302] - generating value of type = Map<ArrayDeque<UInt?>?, Kla7> false depth = 3
2021-03-11 12:33:04,174 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): Map<ArrayDeque<UInt?>?, Kla7> = TODO()
2021-03-11 12:33:04,182 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): Map<ArrayDeque<UInt?>?, Kla7> = TODO()
2021-03-11 12:33:04,717 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:33:04,724 [main:95] - GENERATED = LinkedHashMap<ArrayDeque<UInt?>?, Kla7>(-850680856)
2021-03-11 12:33:04,725 [main:95] - GENERATED = LinkedHashMap<ArrayDeque<UInt?>?, Kla7>(LinkedHashMap<ArrayDeque<UInt?>?, Kla7>(-850680856))
2021-03-11 12:33:04,858 [main:137] - GENERATING call of type public abstract fun containsAll(elements: kotlin.collections.Collection<kotlin.collections.ArrayDeque<kotlin.UInt?>?>): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@562b6c6]
2021-03-11 12:33:05,098 [main:302] - generating value of type = Collection<ArrayDeque<UInt?>?> false depth = 0
2021-03-11 12:33:05,346 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: ArrayDeque<UInt?>?): Collection<ArrayDeque<UInt?>?> = TODO()
2021-03-11 12:33:05,355 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: ArrayDeque<UInt?>?): Collection<ArrayDeque<UInt?>?> = TODO()
2021-03-11 12:33:05,606 [main:302] - generating value of type = ArrayDeque<UInt?> false depth = 3
2021-03-11 12:33:05,855 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<UInt?> = TODO()
2021-03-11 12:33:05,863 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<UInt?> = TODO()
2021-03-11 12:33:06,115 [main:95] - GENERATED = ArrayDeque<UInt?>()
2021-03-11 12:33:06,116 [main:95] - GENERATED = setOfNotNull<ArrayDeque<UInt?>?>(ArrayDeque<UInt?>())
2021-03-11 12:33:06,116 [main:66] - Generated call from random type = (LinkedHashMap<ArrayDeque<UInt?>?, Kla7>(LinkedHashMap<ArrayDeque<UInt?>?, Kla7>(-850680856))).keys.containsAll(setOfNotNull<ArrayDeque<UInt?>?>(ArrayDeque<UInt?>()))
2021-03-11 12:33:06,117 [main:94] - GETTING Boolean from ArrayList<UInt>
2021-03-11 12:33:06,264 [main:101] - Case = [public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@31d3c17c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:33:06,264 [main:137] - GENERATING call of type public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@31d3c17c]
2021-03-11 12:33:06,504 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:33:06,511 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:33:06,511 [main:105] - GENERATED CALL = (list1).contains(644054320.toUInt()).not()
2021-03-11 12:33:06,511 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@44b265cd], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@57f39200]]
2021-03-11 12:33:06,511 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@44b265cd]
2021-03-11 12:33:06,512 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@57f39200]
2021-03-11 12:33:06,752 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 12:33:06,999 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:33:07,008 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 12:33:07,260 [main:302] - generating value of type = T false depth = 3
2021-03-11 12:33:09,815 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Triple<Kla5, HashMap<String, Kla2>, HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:33:09,824 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Triple<Kla5, HashMap<String, Kla2>, HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:33:10,366 [main:302] - generating value of type = Triple<Kla5, HashMap<String, Kla2>, HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>> false depth = 6
2021-03-11 12:33:10,618 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla5, second: HashMap<String, Kla2>, third: HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>): Triple<Kla5, HashMap<String, Kla2>, HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>> = TODO()
2021-03-11 12:33:10,627 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla5, second: HashMap<String, Kla2>, third: HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>): Triple<Kla5, HashMap<String, Kla2>, HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>> = TODO()
2021-03-11 12:33:10,880 [main:302] - generating value of type = Kla5 false depth = 9
2021-03-11 12:33:10,887 [main:112] - generating klass Kla5 text = class Kla5 {
    var prope8 = "failed"
}
2021-03-11 12:33:10,887 [main:302] - generating value of type = HashMap<String, Kla2> false depth = 9
2021-03-11 12:33:11,135 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<String, Kla2> = TODO()
2021-03-11 12:33:11,144 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<String, Kla2> = TODO()
2021-03-11 12:33:11,677 [main:302] - generating value of type = Int true depth = 12
2021-03-11 12:33:11,684 [main:95] - GENERATED = HashMap<String, Kla2>(-130482883)
2021-03-11 12:33:11,684 [main:302] - generating value of type = HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1> false depth = 9
2021-03-11 12:33:11,934 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1> = TODO()
2021-03-11 12:33:11,942 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1> = TODO()
2021-03-11 12:33:12,475 [main:302] - generating value of type = Int true depth = 12
2021-03-11 12:33:12,482 [main:95] - GENERATED = LinkedHashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>(1484172487)
2021-03-11 12:33:12,482 [main:95] - GENERATED = Triple<Kla5, HashMap<String, Kla2>, HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>>(Kla5(), HashMap<String, Kla2>(-130482883), LinkedHashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>(1484172487))
2021-03-11 12:33:12,482 [main:302] - generating value of type = Function0<Any> false depth = 6
2021-03-11 12:33:12,489 [main:302] - generating value of type = Any false depth = 7
2021-03-11 12:33:12,490 [main:95] - GENERATED = checkNotNull<Triple<Kla5, HashMap<String, Kla2>, HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>>>(Triple<Kla5, HashMap<String, Kla2>, HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>>(Kla5(), HashMap<String, Kla2>(-130482883), LinkedHashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>(1484172487)), { "albzg"})
2021-03-11 12:33:12,490 [main:95] - GENERATED = arrayOf<T>(checkNotNull<Triple<Kla5, HashMap<String, Kla2>, HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>>>(Triple<Kla5, HashMap<String, Kla2>, HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>>(Kla5(), HashMap<String, Kla2>(-130482883), LinkedHashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>(1484172487)), { "albzg"}))
2021-03-11 12:33:12,491 [main:105] - GENERATED CALL = (list1).toArray().contentDeepEquals(arrayOf<T>(checkNotNull<Triple<Kla5, HashMap<String, Kla2>, HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>>>(Triple<Kla5, HashMap<String, Kla2>, HashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>>(Kla5(), HashMap<String, Kla2>(-130482883), LinkedHashMap<Function2<Kla8<Boolean?>, UByte, Sequence<Kla3>>, Kla1>(1484172487)), { "albzg"})))
2021-03-11 12:33:12,491 [main:101] - Case = [public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d81d59f]]
2021-03-11 12:33:12,491 [main:137] - GENERATING call of type public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d81d59f]
2021-03-11 12:33:12,731 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:33:12,738 [main:105] - GENERATED CALL = (list1).add(537063484.toUInt())
2021-03-11 12:33:12,738 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3fc824ee], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6042a618]]
2021-03-11 12:33:12,738 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.UInt defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3fc824ee]
2021-03-11 12:33:12,976 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:12,983 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6042a618]
2021-03-11 12:33:13,224 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:33:13,224 [main:105] - GENERATED CALL = (list1).get(1310834455).equals("zuvzd")
2021-03-11 12:33:13,224 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@32c0910f], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:33:13,224 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@32c0910f]
2021-03-11 12:33:13,465 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:33:13,465 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:33:13,705 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:33:13,712 [main:105] - GENERATED CALL = (list1).equals("uptia").or(false)
2021-03-11 12:33:13,712 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@68115f1e], public abstract fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@261ddf10]]
2021-03-11 12:33:13,712 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@68115f1e]
2021-03-11 12:33:13,952 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:14,199 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:14,206 [main:137] - GENERATING call of type public abstract fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@261ddf10]
2021-03-11 12:33:14,447 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:33:14,454 [main:105] - GENERATED CALL = (list1).subList(-33073200, -1163896953).contains(1954453865.toUInt())
2021-03-11 12:33:14,454 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@32c0910f], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:33:14,454 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@32c0910f]
2021-03-11 12:33:14,694 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:33:14,933 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:33:14,940 [main:105] - GENERATED CALL = (list1).equals(null).and(true)
2021-03-11 12:33:14,940 [main:101] - Case = [public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d81d59f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:33:14,940 [main:137] - GENERATING call of type public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3d81d59f]
2021-03-11 12:33:15,180 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:33:15,186 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:33:15,427 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:33:15,428 [main:105] - GENERATED CALL = (list1).add(2089565452.toUInt()).equals("tqsug")
2021-03-11 12:33:15,428 [main:101] - Case = [public open fun iterator(): kotlin.collections.MutableIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3131e49a], public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.MutableIterator[DeserializedSimpleFunctionDescriptor@6bc29fcf]]
2021-03-11 12:33:15,428 [main:137] - GENERATING call of type public open fun iterator(): kotlin.collections.MutableIterator<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3131e49a]
2021-03-11 12:33:15,428 [main:137] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.MutableIterator[DeserializedSimpleFunctionDescriptor@6bc29fcf]
2021-03-11 12:33:15,428 [main:105] - GENERATED CALL = (list1).iterator().hasNext()
2021-03-11 12:33:15,428 [main:101] - Case = [public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@3bd69402], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6e299d58]]
2021-03-11 12:33:15,428 [main:137] - GENERATING call of type public open fun clear(): kotlin.Unit defined in kotlin.collections.AbstractMutableCollection[DeserializedSimpleFunctionDescriptor@3bd69402]
2021-03-11 12:33:15,428 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6e299d58]
2021-03-11 12:33:15,669 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:33:15,669 [main:105] - GENERATED CALL = (list1).clear().equals("adcjg")
2021-03-11 12:33:15,669 [main:110] - replacement of ((list3.size).toDouble()).toByte().rem(-5) != i of type Boolean is (list1).clear().equals("adcjg")
2021-03-11 12:33:15,908 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:33:15,909 [main:66] - Compilation checking started
2021-03-11 12:33:17,265 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = ((-111).toByte()).div(6753880431743647319).toString(670991996))) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:33:17,270 [main:103] - replacing (true, Boolean)
2021-03-11 12:33:17,271 [main:38] - replacing true Boolean
2021-03-11 12:33:17,271 [main:42] - Getting value of type Boolean
2021-03-11 12:33:17,509 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:33:17,516 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:33:17,516 [main:49] - GENERATED IS CALL =false
2021-03-11 12:33:18,077 [main:55] - randomType = Char?
2021-03-11 12:33:18,315 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:33:18,340 [main:137] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@121f1fa4]
2021-03-11 12:33:18,340 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4afe8f90]
2021-03-11 12:33:18,341 [main:66] - Generated call from random type = ('禠')?.toDouble().isInfinite()
2021-03-11 12:33:18,341 [main:94] - GETTING Boolean from ArrayList<UInt>
2021-03-11 12:33:18,450 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@32c0910f], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:33:18,450 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.RandomAccess[DeserializedSimpleFunctionDescriptor@32c0910f]
2021-03-11 12:33:18,693 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:33:18,693 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:33:18,944 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:33:18,951 [main:105] - GENERATED CALL = (list2).equals("jfgaq").or(true)
2021-03-11 12:33:18,951 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@716c9c9]]
2021-03-11 12:33:18,951 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc]
2021-03-11 12:33:18,951 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@716c9c9]
2021-03-11 12:33:19,190 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:33:19,190 [main:105] - GENERATED CALL = (list2).toArray().equals("wjmml")
2021-03-11 12:33:19,190 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5c5f0655], public abstract fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@36bf5bd6]]
2021-03-11 12:33:19,190 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5c5f0655]
2021-03-11 12:33:19,431 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:19,676 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:19,683 [main:137] - GENERATING call of type public abstract fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@36bf5bd6]
2021-03-11 12:33:19,921 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:33:19,928 [main:105] - GENERATED CALL = (list2).subList(-744188260, -1112107460).add(1976797994.toUInt())
2021-03-11 12:33:19,928 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d09e514]]
2021-03-11 12:33:19,928 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5d09e514]
2021-03-11 12:33:19,928 [main:105] - GENERATED CALL = (list2).none()
2021-03-11 12:33:19,928 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f5a854]]
2021-03-11 12:33:19,928 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f5a854]
2021-03-11 12:33:20,167 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:33:20,174 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:33:20,181 [main:105] - GENERATED CALL = (list2).all({a: T -> true})
2021-03-11 12:33:20,181 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@23f22146]]
2021-03-11 12:33:20,181 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@23f22146]
2021-03-11 12:33:20,181 [main:105] - GENERATED CALL = (list2).isNullOrEmpty()
2021-03-11 12:33:20,181 [main:101] - Case = [public open fun addAll(index: kotlin.Int, elements: kotlin.collections.Collection<kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@323807c2]]
2021-03-11 12:33:20,181 [main:137] - GENERATING call of type public open fun addAll(index: kotlin.Int, elements: kotlin.collections.Collection<kotlin.UInt>): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@323807c2]
2021-03-11 12:33:20,419 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:20,664 [main:302] - generating value of type = Collection<UInt> false depth = 0
2021-03-11 12:33:20,913 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): Collection<UInt> = TODO()
2021-03-11 12:33:20,921 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): Collection<UInt> = TODO()
2021-03-11 12:33:21,336 [main:95] - GENERATED = arrayListOf<UInt>()
2021-03-11 12:33:21,336 [main:105] - GENERATED CALL = (list2).addAll(971640015, arrayListOf<UInt>())
2021-03-11 12:33:21,336 [main:101] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5c5f0655], public abstract fun isEmpty(): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@e9358c5]]
2021-03-11 12:33:21,336 [main:137] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.UInt> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5c5f0655]
2021-03-11 12:33:21,576 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:21,823 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:21,830 [main:137] - GENERATING call of type public abstract fun isEmpty(): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@e9358c5]
2021-03-11 12:33:21,830 [main:105] - GENERATED CALL = (list2).subList(1652744176, 1294323955).isEmpty()
2021-03-11 12:33:21,831 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc], public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5c6d0169]]
2021-03-11 12:33:21,831 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc]
2021-03-11 12:33:21,831 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5c6d0169]
2021-03-11 12:33:21,831 [main:105] - GENERATED CALL = (list2).toArray().none()
2021-03-11 12:33:21,831 [main:101] - Case = [public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2d306cde]]
2021-03-11 12:33:21,831 [main:137] - GENERATING call of type public open fun contains(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2d306cde]
2021-03-11 12:33:22,069 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:33:22,075 [main:105] - GENERATED CALL = (list2).contains(787503376.toUInt())
2021-03-11 12:33:22,076 [main:110] - replacement of true of type Boolean is (list2).isNullOrEmpty()
2021-03-11 12:33:22,314 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:33:22,315 [main:66] - Compilation checking started
2021-03-11 12:33:23,205 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = ((-111).toByte()).div(6753880431743647319).toString(670991996))) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (list2).isNullOrEmpty()) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:33:23,210 [main:103] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 12:33:23,211 [main:38] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 12:33:23,211 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 12:33:23,453 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 12:33:23,459 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:33:23,466 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 12:33:23,466 [main:49] - GENERATED IS CALL =false
2021-03-11 12:33:23,767 [main:55] - randomType = Kla11
2021-03-11 12:33:24,006 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-11 12:33:24,012 [main:112] - generating klass Kla11 text = object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:33:24,031 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:33:24,048 [main:94] - GETTING Function0<Boolean> from ArrayList<ULong>
2021-03-11 12:33:24,157 [main:94] - GETTING Function0<Boolean> from Float
2021-03-11 12:33:24,186 [main:94] - GETTING Function0<Boolean> from ArrayList<UInt>
2021-03-11 12:33:24,294 [main:94] - GETTING Function0<Boolean> from Byte
2021-03-11 12:33:24,324 [main:94] - GETTING Function0<Boolean> from Kla4
2021-03-11 12:33:24,328 [main:94] - GETTING Function0<Boolean> from ArrayList<UInt>
2021-03-11 12:33:24,329 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:33:24,330 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:33:24,362 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:33:24,363 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 12:33:24,372 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:33:24,373 [main:94] - GETTING Function0<Boolean> from Kla0?
2021-03-11 12:33:24,379 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:33:24,380 [main:94] - GETTING Function0<Boolean> from Double
2021-03-11 12:33:24,409 [main:94] - GETTING Function0<Boolean> from UByte
2021-03-11 12:33:24,432 [main:94] - GETTING Function0<Boolean> from HashSet<Kla0?>
2021-03-11 12:33:24,547 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:33:24,548 [main:94] - GETTING Function0<Boolean> from Kla4?
2021-03-11 12:33:24,554 [main:94] - GETTING Function0<Boolean> from ArrayList<UInt>
2021-03-11 12:33:24,555 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:33:24,556 [main:94] - GETTING Function0<Boolean> from Double
2021-03-11 12:33:24,557 [main:94] - GETTING Function0<Boolean> from Long
2021-03-11 12:33:24,587 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:33:24,588 [main:94] - GETTING Function0<Boolean> from HashSet<Kla0?>
2021-03-11 12:33:24,589 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 12:33:24,590 [main:94] - GETTING Function0<Boolean> from Float
2021-03-11 12:33:24,591 [main:94] - GETTING Function0<Boolean> from Array<Any?>
2021-03-11 12:33:24,603 [main:94] - GETTING Function0<Boolean> from MutableIterator<Kla0?>
2021-03-11 12:33:24,620 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:33:24,621 [main:94] - GETTING Function0<Boolean> from ArrayList<UInt>
2021-03-11 12:33:24,622 [main:94] - GETTING Function0<Boolean> from Function0<Unit>
2021-03-11 12:33:24,631 [main:94] - GETTING Function0<Boolean> from UShort
2021-03-11 12:33:24,654 [main:94] - GETTING Function0<Boolean> from Any
2021-03-11 12:33:24,657 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 12:33:24,658 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 12:33:24,659 [main:94] - GETTING Function0<Boolean> from Kla4?
2021-03-11 12:33:24,659 [main:110] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-11 12:33:24,898 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:33:24,898 [main:66] - Compilation checking started
2021-03-11 12:33:26,213 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = ((-111).toByte()).div(6753880431743647319).toString(670991996))) }
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:33:26,220 [main:103] - replacing ({ error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = ((-111).toByte()).div(6753880431743647319).toString(670991996))) }, Function0<Nothing>)
2021-03-11 12:33:26,220 [main:38] - replacing { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = ((-111).toByte()).div(6753880431743647319).toString(670991996))) } Function0<Nothing>
2021-03-11 12:33:26,220 [main:42] - Getting value of type Function0<Nothing>
2021-03-11 12:33:26,461 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 12:33:26,467 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 12:33:26,713 [main:43] - GENERATING CALL OF fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-11 12:33:26,722 [main:61] - WITHOUT TYPE PARAMS = fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-11 12:33:27,251 [main:302] - generating value of type = String true depth = 4
2021-03-11 12:33:27,258 [main:95] - GENERATED = TODO("iiyhn")
2021-03-11 12:33:27,258 [main:46] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO("iiyhn")}
2021-03-11 12:33:27,258 [main:49] - GENERATED IS CALL =false
2021-03-11 12:33:27,285 [main:55] - randomType = Kla3
2021-03-11 12:33:27,523 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:33:27,530 [main:112] - generating klass Kla3 text = inline class Kla3(val obj: Any)
2021-03-11 12:33:27,766 [main:194] - Type params = []
2021-03-11 12:33:28,003 [main:302] - generating value of type = Any false depth = 2
2021-03-11 12:33:28,009 [main:94] - GETTING Function0<Nothing> from HashSet<Kla0?>
2021-03-11 12:33:28,124 [main:94] - GETTING Function0<Nothing> from Kla4?
2021-03-11 12:33:28,129 [main:94] - GETTING Function0<Nothing> from Float
2021-03-11 12:33:28,157 [main:94] - GETTING Function0<Nothing> from Int
2021-03-11 12:33:28,189 [main:94] - GETTING Function0<Nothing> from Function0<Unit>
2021-03-11 12:33:28,197 [main:94] - GETTING Function0<Nothing> from Double
2021-03-11 12:33:28,226 [main:94] - GETTING Function0<Nothing> from ArrayList<ULong>
2021-03-11 12:33:28,335 [main:94] - GETTING Function0<Nothing> from ArrayList<UInt>
2021-03-11 12:33:28,444 [main:94] - GETTING Function0<Nothing> from UByte
2021-03-11 12:33:28,466 [main:94] - GETTING Function0<Nothing> from Int
2021-03-11 12:33:28,467 [main:94] - GETTING Function0<Nothing> from Int
2021-03-11 12:33:28,468 [main:94] - GETTING Function0<Nothing> from Int
2021-03-11 12:33:28,497 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 12:33:28,515 [main:94] - GETTING Function0<Nothing> from Any
2021-03-11 12:33:28,519 [main:94] - GETTING Function0<Nothing> from Boolean
2021-03-11 12:33:28,527 [main:94] - GETTING Function0<Nothing> from Float
2021-03-11 12:33:28,529 [main:94] - GETTING Function0<Nothing> from MutableIterator<Kla0?>
2021-03-11 12:33:28,545 [main:94] - GETTING Function0<Nothing> from ArrayList<UInt>
2021-03-11 12:33:28,546 [main:94] - GETTING Function0<Nothing> from Boolean
2021-03-11 12:33:28,547 [main:94] - GETTING Function0<Nothing> from Kla4
2021-03-11 12:33:28,553 [main:94] - GETTING Function0<Nothing> from Double
2021-03-11 12:33:28,554 [main:94] - GETTING Function0<Nothing> from Int
2021-03-11 12:33:28,555 [main:94] - GETTING Function0<Nothing> from HashSet<Kla0?>
2021-03-11 12:33:28,556 [main:94] - GETTING Function0<Nothing> from Boolean
2021-03-11 12:33:28,557 [main:94] - GETTING Function0<Nothing> from Kla4?
2021-03-11 12:33:28,558 [main:94] - GETTING Function0<Nothing> from Int
2021-03-11 12:33:28,559 [main:94] - GETTING Function0<Nothing> from Long
2021-03-11 12:33:28,589 [main:94] - GETTING Function0<Nothing> from Boolean
2021-03-11 12:33:28,590 [main:94] - GETTING Function0<Nothing> from Array<Any?>
2021-03-11 12:33:28,600 [main:94] - GETTING Function0<Nothing> from UShort
2021-03-11 12:33:28,623 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 12:33:28,624 [main:94] - GETTING Function0<Nothing> from ArrayList<UInt>
2021-03-11 12:33:28,625 [main:94] - GETTING Function0<Nothing> from Kla0?
2021-03-11 12:33:28,631 [main:94] - GETTING Function0<Nothing> from Int
2021-03-11 12:33:28,632 [main:94] - GETTING Function0<Nothing> from Int
2021-03-11 12:33:28,633 [main:94] - GETTING Function0<Nothing> from ArrayList<UInt>
2021-03-11 12:33:28,634 [main:94] - GETTING Function0<Nothing> from Byte
2021-03-11 12:33:28,664 [main:110] - replacement of { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope11.joinToString(separator = ((-111).toByte()).div(6753880431743647319).toString(670991996))) } of type Function0<Nothing> is { TODO("iiyhn")}
2021-03-11 12:33:28,901 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:33:28,902 [main:66] - Compilation checking started
2021-03-11 12:33:30,047 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope12)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:33:30,054 [main:103] - replacing (Kla6, Kla12)
2021-03-11 12:33:30,059 [main:38] - replacing Kla6 Kla12
2021-03-11 12:33:30,059 [main:42] - Getting value of type Kla12
2021-03-11 12:33:30,307 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-11 12:33:30,312 [main:112] - generating klass Kla12 text = companion object Kla12 : Kla6()
2021-03-11 12:33:30,312 [main:46] - GENERATED VALUE OF TYPE Kla12 = 
2021-03-11 12:33:30,334 [main:55] - randomType = Kla9
2021-03-11 12:33:30,578 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-11 12:33:30,583 [main:112] - generating klass Kla9 text = class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}
2021-03-11 12:33:30,589 [main:94] - GETTING Kla12 from Int
2021-03-11 12:33:30,619 [main:94] - GETTING Kla12 from Int
2021-03-11 12:33:30,620 [main:94] - GETTING Kla12 from Float
2021-03-11 12:33:30,648 [main:94] - GETTING Kla12 from Int
2021-03-11 12:33:30,648 [main:94] - GETTING Kla12 from UShort
2021-03-11 12:33:30,671 [main:94] - GETTING Kla12 from Array<Any?>
2021-03-11 12:33:30,680 [main:94] - GETTING Kla12 from Int
2021-03-11 12:33:30,681 [main:94] - GETTING Kla12 from Int
2021-03-11 12:33:30,682 [main:94] - GETTING Kla12 from MutableIterator<Kla0?>
2021-03-11 12:33:30,697 [main:94] - GETTING Kla12 from Boolean
2021-03-11 12:33:30,707 [main:94] - GETTING Kla12 from Boolean
2021-03-11 12:33:30,708 [main:94] - GETTING Kla12 from Kla0?
2021-03-11 12:33:30,713 [main:94] - GETTING Kla12 from Byte
2021-03-11 12:33:30,743 [main:94] - GETTING Kla12 from Boolean
2021-03-11 12:33:30,744 [main:94] - GETTING Kla12 from ArrayList<UInt>
2021-03-11 12:33:30,853 [main:94] - GETTING Kla12 from Float
2021-03-11 12:33:30,854 [main:94] - GETTING Kla12 from Boolean
2021-03-11 12:33:30,855 [main:94] - GETTING Kla12 from Kla4?
2021-03-11 12:33:30,862 [main:94] - GETTING Kla12 from ArrayList<UInt>
2021-03-11 12:33:30,862 [main:94] - GETTING Kla12 from HashSet<Kla0?>
2021-03-11 12:33:30,980 [main:94] - GETTING Kla12 from Int
2021-03-11 12:33:30,981 [main:94] - GETTING Kla12 from ArrayList<UInt>
2021-03-11 12:33:30,981 [main:94] - GETTING Kla12 from Long
2021-03-11 12:33:31,010 [main:94] - GETTING Kla12 from Kla4
2021-03-11 12:33:31,014 [main:94] - GETTING Kla12 from UByte
2021-03-11 12:33:31,036 [main:94] - GETTING Kla12 from HashSet<Kla0?>
2021-03-11 12:33:31,037 [main:94] - GETTING Kla12 from ArrayList<UInt>
2021-03-11 12:33:31,037 [main:94] - GETTING Kla12 from Double
2021-03-11 12:33:31,065 [main:94] - GETTING Kla12 from Function0<Unit>
2021-03-11 12:33:31,075 [main:94] - GETTING Kla12 from ArrayList<ULong>
2021-03-11 12:33:31,184 [main:94] - GETTING Kla12 from Double
2021-03-11 12:33:31,185 [main:94] - GETTING Kla12 from Int
2021-03-11 12:33:31,185 [main:94] - GETTING Kla12 from Kla4?
2021-03-11 12:33:31,186 [main:94] - GETTING Kla12 from String
2021-03-11 12:33:31,203 [main:94] - GETTING Kla12 from Int
2021-03-11 12:33:31,203 [main:94] - GETTING Kla12 from String
2021-03-11 12:33:31,204 [main:94] - GETTING Kla12 from Any
2021-03-11 12:33:31,206 [main:107] - Cant find and generate replacement for Kla6 type Kla12
2021-03-11 12:33:31,206 [main:103] - replacing (prope9, Continuation<*>)
2021-03-11 12:33:31,207 [main:38] - replacing prope9 Continuation<*>
2021-03-11 12:33:31,207 [main:42] - Getting value of type Continuation<*>
2021-03-11 12:33:31,450 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 12:33:31,702 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:33:31,709 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:33:32,545 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:33:32,797 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:33:32,804 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:33:33,361 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:33:33,628 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:33:33,636 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:33:34,535 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 12:33:34,794 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:33:34,801 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:33:35,644 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:33:35,644 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:33:35,644 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:33:35,644 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:33:35,644 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 12:33:35,656 [main:55] - randomType = UShort
2021-03-11 12:33:35,899 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:33:35,931 [main:94] - GETTING Continuation<*> from MutableIterator<Kla0?>
2021-03-11 12:33:35,948 [main:94] - GETTING Continuation<*> from Kla4
2021-03-11 12:33:35,953 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:33:35,962 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:33:35,992 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:33:35,993 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:33:35,994 [main:94] - GETTING Continuation<*> from ArrayList<UInt>
2021-03-11 12:33:36,103 [main:94] - GETTING Continuation<*> from Long
2021-03-11 12:33:36,131 [main:94] - GETTING Continuation<*> from ArrayList<UInt>
2021-03-11 12:33:36,132 [main:94] - GETTING Continuation<*> from UByte
2021-03-11 12:33:36,154 [main:94] - GETTING Continuation<*> from ArrayList<ULong>
2021-03-11 12:33:36,263 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:33:36,264 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:33:36,265 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:33:36,266 [main:94] - GETTING Continuation<*> from ArrayList<UInt>
2021-03-11 12:33:36,267 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:33:36,284 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:33:36,284 [main:94] - GETTING Continuation<*> from Float
2021-03-11 12:33:36,313 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:33:36,314 [main:94] - GETTING Continuation<*> from Kla4?
2021-03-11 12:33:36,319 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:33:36,319 [main:94] - GETTING Continuation<*> from HashSet<Kla0?>
2021-03-11 12:33:36,434 [main:94] - GETTING Continuation<*> from Any
2021-03-11 12:33:36,437 [main:94] - GETTING Continuation<*> from Array<Any?>
2021-03-11 12:33:36,447 [main:94] - GETTING Continuation<*> from ArrayList<UInt>
2021-03-11 12:33:36,448 [main:94] - GETTING Continuation<*> from HashSet<Kla0?>
2021-03-11 12:33:36,449 [main:94] - GETTING Continuation<*> from Kla0?
2021-03-11 12:33:36,456 [main:94] - GETTING Continuation<*> from Kla4?
2021-03-11 12:33:36,456 [main:94] - GETTING Continuation<*> from Double
2021-03-11 12:33:36,484 [main:94] - GETTING Continuation<*> from Function0<Unit>
2021-03-11 12:33:36,493 [main:94] - GETTING Continuation<*> from UShort
2021-03-11 12:33:36,515 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:33:36,516 [main:94] - GETTING Continuation<*> from Byte
2021-03-11 12:33:36,546 [main:94] - GETTING Continuation<*> from Float
2021-03-11 12:33:36,547 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:33:36,547 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:33:36,548 [main:94] - GETTING Continuation<*> from Double
2021-03-11 12:33:36,548 [main:107] - Cant find and generate replacement for prope9 type Continuation<*>
2021-03-11 12:33:36,548 [main:103] - replacing (prope12, Int)
2021-03-11 12:33:36,549 [main:38] - replacing prope12 Int
2021-03-11 12:33:36,549 [main:42] - Getting value of type Int
2021-03-11 12:33:36,790 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:36,796 [main:46] - GENERATED VALUE OF TYPE Int = -1954469780
2021-03-11 12:33:36,796 [main:49] - GENERATED IS CALL =false
2021-03-11 12:33:37,085 [main:55] - randomType = Long?
2021-03-11 12:33:37,329 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:33:37,367 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@689cedb7]
2021-03-11 12:33:37,610 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:33:37,615 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@361986c2]
2021-03-11 12:33:37,859 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:37,865 [main:66] - Generated call from random type = (-5976005418725438487)?.compareTo(94).xor(640360530)
2021-03-11 12:33:37,866 [main:94] - GETTING Int from ArrayList<ULong>
2021-03-11 12:33:37,976 [main:101] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@780d4e99], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e4fa412]]
2021-03-11 12:33:37,976 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e4fa412]
2021-03-11 12:33:38,221 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:33:38,226 [main:105] - GENERATED CALL = (list4).size.compareTo(-41)
2021-03-11 12:33:38,226 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@d30e2d0], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17be8940]]
2021-03-11 12:33:38,226 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17be8940]
2021-03-11 12:33:38,470 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:38,476 [main:105] - GENERATED CALL = (list4).modCount.shl(208443407)
2021-03-11 12:33:38,476 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@d30e2d0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5adfa95c]]
2021-03-11 12:33:38,476 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5adfa95c]
2021-03-11 12:33:38,476 [main:105] - GENERATED CALL = (list4).modCount.countOneBits()
2021-03-11 12:33:38,476 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@79ff17c8], public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@67d9b161]]
2021-03-11 12:33:38,477 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@79ff17c8]
2021-03-11 12:33:38,477 [main:105] - GENERATED CALL = (list4).toArray().size
2021-03-11 12:33:38,477 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@d30e2d0], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bf73503]]
2021-03-11 12:33:38,477 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1bf73503]
2021-03-11 12:33:38,477 [main:105] - GENERATED CALL = (list4).modCount.inc()
2021-03-11 12:33:38,477 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@79ff17c8], public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3ce30c43]]
2021-03-11 12:33:38,477 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@79ff17c8]
2021-03-11 12:33:38,477 [main:137] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3ce30c43]
2021-03-11 12:33:38,722 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:33:39,270 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: Collection<UShort>): T = TODO()
2021-03-11 12:33:39,277 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: Collection<UShort>): T = TODO()
2021-03-11 12:33:39,537 [main:302] - generating value of type = Collection<UShort> false depth = 3
2021-03-11 12:33:39,831 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): Collection<UShort> = TODO()
2021-03-11 12:33:39,838 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): Collection<UShort> = TODO()
2021-03-11 12:33:40,374 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:33:40,380 [main:95] - GENERATED = ArrayDeque<UShort>(2036259127)
2021-03-11 12:33:40,380 [main:95] - GENERATED = requireNotNull<Collection<UShort>>(ArrayDeque<UShort>(2036259127))
2021-03-11 12:33:40,380 [main:105] - GENERATED CALL = (list4).toArray().indexOf(requireNotNull<Collection<UShort>>(ArrayDeque<UShort>(2036259127)))
2021-03-11 12:33:40,380 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@d30e2d0], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@296f4f62]]
2021-03-11 12:33:40,380 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@296f4f62]
2021-03-11 12:33:40,623 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:40,629 [main:105] - GENERATED CALL = (list4).modCount.or(-2019851397)
2021-03-11 12:33:40,629 [main:101] - Case = [public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@616524a5], public abstract fun nextIndex(): kotlin.Int defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@3ed949bf]]
2021-03-11 12:33:40,629 [main:137] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.ULong> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@616524a5]
2021-03-11 12:33:40,629 [main:137] - GENERATING call of type public abstract fun nextIndex(): kotlin.Int defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@3ed949bf]
2021-03-11 12:33:40,630 [main:105] - GENERATED CALL = (list4).listIterator().nextIndex()
2021-03-11 12:33:40,630 [main:101] - Case = [public open val size: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@3a0b20d1]]
2021-03-11 12:33:40,630 [main:105] - GENERATED CALL = (list4).size
2021-03-11 12:33:40,630 [main:101] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@d30e2d0], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@edf15dd]]
2021-03-11 12:33:40,630 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@edf15dd]
2021-03-11 12:33:40,874 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:33:40,880 [main:105] - GENERATED CALL = (list4).modCount.times(-41)
2021-03-11 12:33:40,880 [main:110] - replacement of prope12 of type Int is (list4).size
2021-03-11 12:33:41,128 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:33:41,128 [main:66] - Compilation checking started
2021-03-11 12:33:42,339 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:33:42,344 [main:103] - replacing ((list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame", String)
2021-03-11 12:33:42,344 [main:38] - replacing (list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame" String
2021-03-11 12:33:42,344 [main:42] - Getting value of type String
2021-03-11 12:33:42,592 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:33:42,598 [main:46] - GENERATED VALUE OF TYPE String = "osmjl"
2021-03-11 12:33:42,598 [main:49] - GENERATED IS CALL =false
2021-03-11 12:33:43,807 [main:55] - randomType = HashMap<Kla8<Long>, Set<Boolean>>?
2021-03-11 12:33:44,055 [main:302] - generating value of type = HashMap<Kla8<Long>, Set<Boolean>> false depth = 0
2021-03-11 12:33:44,311 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Kla8<Long>, Set<Boolean>> = TODO()
2021-03-11 12:33:44,318 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Kla8<Long>, Set<Boolean>> = TODO()
2021-03-11 12:33:44,579 [main:95] - GENERATED = linkedMapOf<Kla8<Long>, Set<Boolean>>()
2021-03-11 12:33:44,719 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:33:44,963 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:44,969 [main:66] - Generated call from random type = (linkedMapOf<Kla8<Long>, Set<Boolean>>())?.size.toString(1373397530)
2021-03-11 12:33:44,969 [main:94] - GETTING String from Int
2021-03-11 12:33:45,001 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]]
2021-03-11 12:33:45,001 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:33:45,002 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]
2021-03-11 12:33:45,002 [main:105] - GENERATED CALL = (list4.size).toChar().lowercase()
2021-03-11 12:33:45,002 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]]
2021-03-11 12:33:45,002 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:33:45,002 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]
2021-03-11 12:33:45,246 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:45,251 [main:105] - GENERATED CALL = (list4.size).toByte().toString(133828414)
2021-03-11 12:33:45,251 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:33:45,252 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:33:45,252 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:33:45,494 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:45,500 [main:105] - GENERATED CALL = (list4.size).toLong().toString(-1549910709)
2021-03-11 12:33:45,500 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:33:45,500 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac]
2021-03-11 12:33:45,747 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:33:45,753 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:33:45,997 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:46,003 [main:105] - GENERATED CALL = (list4.size).div(-7672271194616469049).toString(259192379)
2021-03-11 12:33:46,003 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:33:46,003 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:33:46,003 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:33:46,248 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:46,254 [main:105] - GENERATED CALL = (list4.size).toInt().toString(1423142966)
2021-03-11 12:33:46,254 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]]
2021-03-11 12:33:46,254 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:33:46,254 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51c53eeb]
2021-03-11 12:33:46,254 [main:105] - GENERATED CALL = (list4.size).toChar().titlecase()
2021-03-11 12:33:46,254 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]]
2021-03-11 12:33:46,254 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:33:46,254 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]
2021-03-11 12:33:46,525 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:33:46,531 [main:105] - GENERATED CALL = (list4.size).toChar().plus("sqfay")
2021-03-11 12:33:46,531 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:33:46,531 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:33:46,777 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:46,783 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:33:47,031 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:47,036 [main:105] - GENERATED CALL = (list4.size).compareTo(454259660).toString(-344774571)
2021-03-11 12:33:47,036 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]]
2021-03-11 12:33:47,036 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:33:47,037 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]
2021-03-11 12:33:47,037 [main:105] - GENERATED CALL = (list4.size).toChar().uppercase()
2021-03-11 12:33:47,037 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:33:47,037 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:33:47,283 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:47,289 [main:105] - GENERATED CALL = (list4.size).toString(1829374128)
2021-03-11 12:33:47,289 [main:110] - replacement of (list1.size).compareTo(-2146270251).toString(-1311656789) + prope9 + " is not subtype of CoroutineStackFrame" of type String is "osmjl"
2021-03-11 12:33:47,534 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:33:47,534 [main:66] - Compilation checking started
2021-03-11 12:33:48,725 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:33:48,730 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 12:33:48,730 [main:38] - replacing getOrThrow() Any?
2021-03-11 12:33:48,730 [main:42] - Getting value of type Any?
2021-03-11 12:33:48,979 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:33:48,979 [main:46] - GENERATED VALUE OF TYPE Any? = "kfivt"
2021-03-11 12:33:48,979 [main:49] - GENERATED IS CALL =false
2021-03-11 12:33:49,001 [main:55] - randomType = Kla0
2021-03-11 12:33:49,249 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:33:49,254 [main:112] - generating klass Kla0 text = inline class Kla0(val int: Int)
2021-03-11 12:33:49,499 [main:194] - Type params = []
2021-03-11 12:33:49,744 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:33:49,758 [main:94] - GETTING Any? from String
2021-03-11 12:33:49,776 [main:94] - GETTING Any? from Int
2021-03-11 12:33:49,808 [main:94] - GETTING Any? from Kla0?
2021-03-11 12:33:49,814 [main:94] - GETTING Any? from Array<Any?>
2021-03-11 12:33:49,824 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@38671c02]]
2021-03-11 12:33:49,824 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@38671c02]
2021-03-11 12:33:50,065 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:50,071 [main:105] - GENERATED CALL = ((list1).toArray())?.get(-2140381570)
2021-03-11 12:33:50,071 [main:101] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Any?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@26c0c8a8], public abstract operator fun next(): kotlin.Any? defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@18f1fbc1]]
2021-03-11 12:33:50,071 [main:137] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Any?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@26c0c8a8]
2021-03-11 12:33:50,071 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Any? defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@18f1fbc1]
2021-03-11 12:33:50,071 [main:105] - GENERATED CALL = ((list1).toArray())?.iterator().next()
2021-03-11 12:33:50,071 [main:110] - replacement of getOrThrow() of type Any? is ((list1).toArray())?.get(-2140381570)
2021-03-11 12:33:50,312 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 12:33:50,313 [main:66] - Compilation checking started
2021-03-11 12:33:51,218 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.((list1).toArray())?.get(-2140381570)
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith(method) == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:33:51,223 [main:103] - replacing (method, String)
2021-03-11 12:33:51,224 [main:38] - replacing method String
2021-03-11 12:33:51,224 [main:42] - Getting value of type String
2021-03-11 12:33:51,470 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:33:51,476 [main:46] - GENERATED VALUE OF TYPE String = "xoptt"
2021-03-11 12:33:51,476 [main:49] - GENERATED IS CALL =false
2021-03-11 12:33:51,487 [main:55] - randomType = Boolean
2021-03-11 12:33:51,731 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:33:51,749 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:33:51,995 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:33:52,001 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:33:52,248 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:52,253 [main:66] - Generated call from random type = (false).compareTo(false).toString(-1979230630)
2021-03-11 12:33:52,254 [main:94] - GETTING String from HashSet<Kla0?>
2021-03-11 12:33:52,372 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]]
2021-03-11 12:33:52,372 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:33:52,373 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e44af47]
2021-03-11 12:33:52,373 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>()).toArray().contentDeepToString()
2021-03-11 12:33:52,373 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]]
2021-03-11 12:33:52,373 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:33:52,373 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@54dd7371]
2021-03-11 12:33:52,617 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:33:52,868 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:33:53,148 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:33:53,402 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:53,651 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:33:53,904 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:33:53,909 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:33:54,160 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:33:54,168 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:33:54,702 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:33:54,708 [main:95] - GENERATED = StringBuilder(-968605450)
2021-03-11 12:33:54,708 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>()).toArray().joinToString(StringBuilder(), "fwxdp", "jtipe", -2022735249, StringBuilder(), {a: T -> StringBuilder(-968605450)})
2021-03-11 12:33:54,708 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]]
2021-03-11 12:33:54,708 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:33:54,708 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e63d8d0]
2021-03-11 12:33:54,708 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>()).toArray().contentToString()
2021-03-11 12:33:54,708 [main:101] - Case = [public open val size: kotlin.Int defined in kotlin.collections.HashSet[DeserializedPropertyDescriptor@11fb3006], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:33:54,709 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:33:54,952 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:54,957 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>()).size.toString(580044466)
2021-03-11 12:33:54,958 [main:101] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]]
2021-03-11 12:33:54,958 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]
2021-03-11 12:33:55,203 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:33:55,456 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:33:55,709 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:33:55,961 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:33:56,212 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:33:56,462 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:33:56,470 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:33:57,168 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:33:57,174 [main:95] - GENERATED = StringBuilder(-456475605)
2021-03-11 12:33:57,418 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:33:57,424 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:33:57,676 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:33:57,683 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:33:58,219 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:33:58,225 [main:95] - GENERATED = StringBuilder(-170951905)
2021-03-11 12:33:58,225 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>()).joinToString("vakrp", "nbdvu", StringBuilder(), -1488881480, StringBuilder(-456475605), {a: T -> StringBuilder(-170951905)})
2021-03-11 12:33:58,225 [main:110] - replacement of method of type String is "xoptt"
2021-03-11 12:33:58,467 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:33:58,467 [main:66] - Compilation checking started
2021-03-11 12:33:59,642 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:33:59,646 [main:103] - replacing (Kla5()::fu3, KSuspendFunction0<Unit>)
2021-03-11 12:33:59,647 [main:38] - replacing Kla5()::fu3 KSuspendFunction0<Unit>
2021-03-11 12:33:59,647 [main:42] - Getting value of type KSuspendFunction0<Unit>
2021-03-11 12:33:59,919 [main:302] - generating value of type = KSuspendFunction0<Unit> false depth = 0
2021-03-11 12:33:59,927 [main:46] - GENERATED VALUE OF TYPE KSuspendFunction0<Unit> = 
2021-03-11 12:33:59,939 [main:55] - randomType = Int
2021-03-11 12:34:00,182 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:00,232 [main:94] - GETTING KSuspendFunction0<Unit> from ArrayList<UInt>
2021-03-11 12:34:00,344 [main:94] - GETTING KSuspendFunction0<Unit> from UByte
2021-03-11 12:34:00,367 [main:94] - GETTING KSuspendFunction0<Unit> from Int
2021-03-11 12:34:00,397 [main:94] - GETTING KSuspendFunction0<Unit> from Int
2021-03-11 12:34:00,398 [main:94] - GETTING KSuspendFunction0<Unit> from Kla4
2021-03-11 12:34:00,403 [main:94] - GETTING KSuspendFunction0<Unit> from Float
2021-03-11 12:34:00,431 [main:94] - GETTING KSuspendFunction0<Unit> from ArrayList<UInt>
2021-03-11 12:34:00,432 [main:94] - GETTING KSuspendFunction0<Unit> from Int
2021-03-11 12:34:00,434 [main:94] - GETTING KSuspendFunction0<Unit> from Kla4?
2021-03-11 12:34:00,440 [main:94] - GETTING KSuspendFunction0<Unit> from UShort
2021-03-11 12:34:00,466 [main:94] - GETTING KSuspendFunction0<Unit> from Long
2021-03-11 12:34:00,505 [main:94] - GETTING KSuspendFunction0<Unit> from Int
2021-03-11 12:34:00,506 [main:94] - GETTING KSuspendFunction0<Unit> from Int
2021-03-11 12:34:00,507 [main:94] - GETTING KSuspendFunction0<Unit> from Kla4?
2021-03-11 12:34:00,508 [main:94] - GETTING KSuspendFunction0<Unit> from Any
2021-03-11 12:34:00,513 [main:94] - GETTING KSuspendFunction0<Unit> from MutableIterator<Kla0?>
2021-03-11 12:34:00,533 [main:94] - GETTING KSuspendFunction0<Unit> from Double
2021-03-11 12:34:00,581 [main:94] - GETTING KSuspendFunction0<Unit> from Function0<Unit>
2021-03-11 12:34:00,595 [main:94] - GETTING KSuspendFunction0<Unit> from String
2021-03-11 12:34:00,621 [main:94] - GETTING KSuspendFunction0<Unit> from Int
2021-03-11 12:34:00,622 [main:94] - GETTING KSuspendFunction0<Unit> from Boolean
2021-03-11 12:34:00,633 [main:94] - GETTING KSuspendFunction0<Unit> from Boolean
2021-03-11 12:34:00,634 [main:94] - GETTING KSuspendFunction0<Unit> from String
2021-03-11 12:34:00,635 [main:94] - GETTING KSuspendFunction0<Unit> from ArrayList<ULong>
2021-03-11 12:34:00,745 [main:94] - GETTING KSuspendFunction0<Unit> from Boolean
2021-03-11 12:34:00,746 [main:94] - GETTING KSuspendFunction0<Unit> from Boolean
2021-03-11 12:34:00,747 [main:94] - GETTING KSuspendFunction0<Unit> from Float
2021-03-11 12:34:00,748 [main:94] - GETTING KSuspendFunction0<Unit> from HashSet<Kla0?>
2021-03-11 12:34:00,865 [main:94] - GETTING KSuspendFunction0<Unit> from Int
2021-03-11 12:34:00,866 [main:94] - GETTING KSuspendFunction0<Unit> from Double
2021-03-11 12:34:00,867 [main:94] - GETTING KSuspendFunction0<Unit> from HashSet<Kla0?>
2021-03-11 12:34:00,868 [main:94] - GETTING KSuspendFunction0<Unit> from ArrayList<UInt>
2021-03-11 12:34:00,869 [main:94] - GETTING KSuspendFunction0<Unit> from ArrayList<UInt>
2021-03-11 12:34:00,870 [main:94] - GETTING KSuspendFunction0<Unit> from Byte
2021-03-11 12:34:00,901 [main:94] - GETTING KSuspendFunction0<Unit> from Kla0?
2021-03-11 12:34:00,907 [main:94] - GETTING KSuspendFunction0<Unit> from Array<Any?>
2021-03-11 12:34:00,918 [main:94] - GETTING KSuspendFunction0<Unit> from Int
2021-03-11 12:34:00,918 [main:107] - Cant find and generate replacement for Kla5()::fu3 type KSuspendFunction0<Unit>
2021-03-11 12:34:00,918 [main:103] - replacing (runCatching<Any?>({ "mvttt"}).getOrThrow(), Any?)
2021-03-11 12:34:00,918 [main:38] - replacing runCatching<Any?>({ "mvttt"}).getOrThrow() Any?
2021-03-11 12:34:00,918 [main:42] - Getting value of type Any?
2021-03-11 12:34:01,162 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:01,163 [main:46] - GENERATED VALUE OF TYPE Any? = "xwqcy"
2021-03-11 12:34:01,163 [main:49] - GENERATED IS CALL =false
2021-03-11 12:34:01,761 [main:55] - randomType = Kla8<Collection<Kla6>>
2021-03-11 12:34:02,005 [main:302] - generating value of type = Kla8<Collection<Kla6>> false depth = 0
2021-03-11 12:34:02,011 [main:112] - generating klass Kla8 text = abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 12:34:02,840 [main:302] - generating value of type = Kla11 false depth = 2
2021-03-11 12:34:02,845 [main:112] - generating klass Kla11 text = object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:34:02,866 [main:94] - GETTING Any? from Boolean
2021-03-11 12:34:02,876 [main:94] - GETTING Any? from Kla4?
2021-03-11 12:34:02,881 [main:94] - GETTING Any? from Boolean
2021-03-11 12:34:02,882 [main:94] - GETTING Any? from Float
2021-03-11 12:34:02,910 [main:94] - GETTING Any? from Double
2021-03-11 12:34:02,939 [main:94] - GETTING Any? from Boolean
2021-03-11 12:34:02,940 [main:94] - GETTING Any? from ArrayList<UInt>
2021-03-11 12:34:03,048 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc], public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@3a53d0b1]]
2021-03-11 12:34:03,049 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7d9da1fc]
2021-03-11 12:34:03,049 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@3a53d0b1]
2021-03-11 12:34:03,292 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:03,297 [main:105] - GENERATED CALL = (list2)?.toArray().get(1752784400)
2021-03-11 12:34:03,297 [main:101] - Case = [@kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@57ccd382]]
2021-03-11 12:34:03,297 [main:137] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@57ccd382]
2021-03-11 12:34:03,297 [main:105] - GENERATED CALL = (list2)?.toJSON()
2021-03-11 12:34:03,298 [main:110] - replacement of runCatching<Any?>({ "mvttt"}).getOrThrow() of type Any? is (list2)?.toJSON()
2021-03-11 12:34:03,539 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 12:34:03,540 [main:66] - Compilation checking started
2021-03-11 12:34:04,435 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(list2)?.toJSON()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:34:04,439 [main:103] - replacing (prope14, Function0<Unit>)
2021-03-11 12:34:04,440 [main:38] - replacing prope14 Function0<Unit>
2021-03-11 12:34:04,440 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:34:04,681 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:34:04,687 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:34:04,695 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 12:34:04,695 [main:49] - GENERATED IS CALL =false
2021-03-11 12:34:04,975 [main:55] - randomType = Char
2021-03-11 12:34:05,216 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:34:05,240 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:34:05,271 [main:94] - GETTING Function0<Unit> from UShort
2021-03-11 12:34:05,294 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:34:05,435 [main:94] - GETTING Function0<Unit> from Byte
2021-03-11 12:34:05,464 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:34:05,465 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:34:05,466 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:34:05,467 [main:94] - GETTING Function0<Unit> from Long
2021-03-11 12:34:05,497 [main:94] - GETTING Function0<Unit> from ArrayList<ULong>
2021-03-11 12:34:05,605 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:34:05,606 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:34:05,623 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:34:05,624 [main:94] - GETTING Function0<Unit> from Float
2021-03-11 12:34:05,652 [main:94] - GETTING Function0<Unit> from Kla4?
2021-03-11 12:34:05,658 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:34:05,659 [main:94] - GETTING Function0<Unit> from HashSet<Kla0?>
2021-03-11 12:34:05,774 [main:94] - GETTING Function0<Unit> from Array<Any?>
2021-03-11 12:34:05,785 [main:94] - GETTING Function0<Unit> from UByte
2021-03-11 12:34:05,809 [main:94] - GETTING Function0<Unit> from MutableIterator<Kla0?>
2021-03-11 12:34:05,825 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:34:05,826 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 12:34:05,855 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 12:34:05,862 [main:110] - replacement of prope14 of type Function0<Unit> is { println()}
2021-03-11 12:34:06,110 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:34:06,110 [main:66] - Compilation checking started
2021-03-11 12:34:07,152 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        { println()} = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:34:07,158 [main:103] - replacing (prope8, String)
2021-03-11 12:34:07,159 [main:38] - replacing prope8 String
2021-03-11 12:34:07,159 [main:42] - Getting value of type String
2021-03-11 12:34:07,409 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:34:07,414 [main:46] - GENERATED VALUE OF TYPE String = "jubto"
2021-03-11 12:34:07,415 [main:49] - GENERATED IS CALL =false
2021-03-11 12:34:07,436 [main:55] - randomType = Kla5
2021-03-11 12:34:07,682 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 12:34:07,687 [main:112] - generating klass Kla5 text = class Kla5 {
    var prope8 = "failed"
}
2021-03-11 12:34:07,694 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aba7aa1]
2021-03-11 12:34:07,940 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:08,189 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:08,439 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:34:08,448 [main:66] - Generated call from random type = (Kla5()).prope8.replaceRange(536776666, -855739986, "xwwuq")
2021-03-11 12:34:08,448 [main:110] - replacement of prope8 of type String is (Kla5()).prope8.replaceRange(536776666, -855739986, "xwwuq")
2021-03-11 12:34:08,690 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:34:08,691 [main:66] - Compilation checking started
2021-03-11 12:34:09,601 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla5()).prope8.replaceRange(536776666, -855739986, "xwwuq") = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:34:09,606 [main:103] - replacing (prope9, Continuation<*>)
2021-03-11 12:34:09,607 [main:38] - replacing prope9 Continuation<*>
2021-03-11 12:34:09,607 [main:42] - Getting value of type Continuation<*>
2021-03-11 12:34:09,853 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 12:34:10,104 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:34:10,111 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:34:10,946 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:34:11,199 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:34:11,206 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:34:11,756 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:34:12,058 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:34:12,065 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:34:12,906 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:34:12,907 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:34:12,907 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:34:12,907 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 12:34:14,057 [main:55] - randomType = ArrayDeque<Array<Sequence<UByte?>>>
2021-03-11 12:34:14,301 [main:302] - generating value of type = ArrayDeque<Array<Sequence<UByte?>>> false depth = 0
2021-03-11 12:34:14,554 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Array<Sequence<UByte?>>> = TODO()
2021-03-11 12:34:14,561 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Array<Sequence<UByte?>>> = TODO()
2021-03-11 12:34:15,097 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:34:15,103 [main:95] - GENERATED = ArrayDeque<Array<Sequence<UByte?>>>(2107821538)
2021-03-11 12:34:15,284 [main:94] - GETTING Continuation<*> from UByte
2021-03-11 12:34:15,307 [main:94] - GETTING Continuation<*> from Kla4
2021-03-11 12:34:15,311 [main:94] - GETTING Continuation<*> from HashSet<Kla0?>
2021-03-11 12:34:15,428 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:34:15,437 [main:94] - GETTING Continuation<*> from Float
2021-03-11 12:34:15,464 [main:94] - GETTING Continuation<*> from Float
2021-03-11 12:34:15,465 [main:94] - GETTING Continuation<*> from ArrayList<ULong>
2021-03-11 12:34:15,594 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:34:15,627 [main:94] - GETTING Continuation<*> from Byte
2021-03-11 12:34:15,663 [main:94] - GETTING Continuation<*> from UShort
2021-03-11 12:34:15,689 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:34:15,709 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:34:15,710 [main:94] - GETTING Continuation<*> from MutableIterator<Kla0?>
2021-03-11 12:34:15,730 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:34:15,731 [main:94] - GETTING Continuation<*> from HashSet<Kla0?>
2021-03-11 12:34:15,732 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:34:15,733 [main:94] - GETTING Continuation<*> from Array<Any?>
2021-03-11 12:34:15,747 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:34:15,748 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:34:15,749 [main:94] - GETTING Continuation<*> from Long
2021-03-11 12:34:15,783 [main:94] - GETTING Continuation<*> from Function0<Unit>
2021-03-11 12:34:15,792 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:34:15,792 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:34:15,793 [main:94] - GETTING Continuation<*> from ArrayList<UInt>
2021-03-11 12:34:15,902 [main:94] - GETTING Continuation<*> from Kla0?
2021-03-11 12:34:15,908 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:34:15,909 [main:94] - GETTING Continuation<*> from Kla4?
2021-03-11 12:34:15,913 [main:94] - GETTING Continuation<*> from ArrayList<UInt>
2021-03-11 12:34:15,914 [main:94] - GETTING Continuation<*> from Kla4?
2021-03-11 12:34:15,915 [main:94] - GETTING Continuation<*> from Any
2021-03-11 12:34:15,919 [main:94] - GETTING Continuation<*> from Double
2021-03-11 12:34:15,948 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:34:15,949 [main:94] - GETTING Continuation<*> from Double
2021-03-11 12:34:15,949 [main:94] - GETTING Continuation<*> from ArrayList<UInt>
2021-03-11 12:34:15,950 [main:94] - GETTING Continuation<*> from ArrayList<UInt>
2021-03-11 12:34:15,951 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:34:15,952 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:34:15,952 [main:107] - Cant find and generate replacement for prope9 type Continuation<*>
2021-03-11 12:34:15,952 [main:103] - replacing ("tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n"), String)
2021-03-11 12:34:15,952 [main:38] - replacing "tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n") String
2021-03-11 12:34:15,952 [main:42] - Getting value of type String
2021-03-11 12:34:16,194 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:34:16,199 [main:46] - GENERATED VALUE OF TYPE String = "cxtyl"
2021-03-11 12:34:16,199 [main:49] - GENERATED IS CALL =false
2021-03-11 12:34:16,211 [main:55] - randomType = Boolean
2021-03-11 12:34:16,463 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:16,480 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:34:16,724 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:16,730 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:34:16,974 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:16,979 [main:66] - Generated call from random type = (false).compareTo(false).toString(10339145)
2021-03-11 12:34:16,980 [main:94] - GETTING String from UShort
2021-03-11 12:34:17,006 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2a174434], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]]
2021-03-11 12:34:17,006 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2a174434]
2021-03-11 12:34:17,007 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]
2021-03-11 12:34:17,251 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:17,256 [main:105] - GENERATED CALL = (1u.toUShort()).toShort().toString(1673539901)
2021-03-11 12:34:17,409 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c289503]]
2021-03-11 12:34:17,409 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c289503]
2021-03-11 12:34:17,685 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:17,690 [main:105] - GENERATED CALL = (1u.toUShort()).toString(-1755448803)
2021-03-11 12:34:17,690 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@748b593c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:34:17,690 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@748b593c]
2021-03-11 12:34:17,938 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:34:17,943 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:34:18,190 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:18,195 [main:105] - GENERATED CALL = (1u.toUShort()).compareTo(62.toUByte()).toString(-408442627)
2021-03-11 12:34:18,195 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@39ea08a0], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@508f64e5]]
2021-03-11 12:34:18,196 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@39ea08a0]
2021-03-11 12:34:18,196 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@508f64e5]
2021-03-11 12:34:18,442 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:18,448 [main:105] - GENERATED CALL = (1u.toUShort()).toUByte().toString(14388174)
2021-03-11 12:34:18,448 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@475ab731], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]]
2021-03-11 12:34:18,448 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@475ab731]
2021-03-11 12:34:18,448 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]
2021-03-11 12:34:18,693 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:18,699 [main:105] - GENERATED CALL = (1u.toUShort()).toByte().toString(-521705514)
2021-03-11 12:34:18,699 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2ea4ddc6], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3901601b]]
2021-03-11 12:34:18,699 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2ea4ddc6]
2021-03-11 12:34:18,945 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:34:18,950 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3901601b]
2021-03-11 12:34:19,195 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:19,201 [main:105] - GENERATED CALL = (1u.toUShort()).div(94.toUByte()).toString(-850447055)
2021-03-11 12:34:19,201 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7e40d386], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:34:19,201 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7e40d386]
2021-03-11 12:34:19,201 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:34:19,448 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:19,454 [main:105] - GENERATED CALL = (1u.toUShort()).toLong().toString(1262226243)
2021-03-11 12:34:19,454 [main:110] - replacement of "tail-call optimization hit: method " + (Kla1(6624106092996564953).long).toString(-932525180) + " has no state-machine " +
                prope11.joinToString(separator = "\n") of type String is (1u.toUShort()).toUByte().toString(14388174)
2021-03-11 12:34:19,700 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:34:19,700 [main:66] - Compilation checking started
2021-03-11 12:34:20,923 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:34:20,929 [main:103] - replacing (prope13, Boolean)
2021-03-11 12:34:20,930 [main:38] - replacing prope13 Boolean
2021-03-11 12:34:20,930 [main:42] - Getting value of type Boolean
2021-03-11 12:34:21,183 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:21,188 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:34:21,189 [main:49] - GENERATED IS CALL =false
2021-03-11 12:34:21,210 [main:55] - randomType = Kla10
2021-03-11 12:34:21,455 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-11 12:34:21,460 [main:112] - generating klass Kla10 text = class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if (prope13) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:34:21,470 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:34:21,713 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:21,713 [main:66] - Generated call from random type = (Kla10()).prope13.equals("kdjtq")
2021-03-11 12:34:21,714 [main:94] - GETTING Boolean from UByte
2021-03-11 12:34:21,741 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3643962f], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public operator fun kotlin.ranges.UIntRange.contains(value: kotlin.UByte): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7eaedcbf]]
2021-03-11 12:34:21,741 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.UByte): kotlin.ranges.UIntRange defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3643962f]
2021-03-11 12:34:21,987 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:34:21,992 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public operator fun kotlin.ranges.UIntRange.contains(value: kotlin.UByte): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7eaedcbf]
2021-03-11 12:34:22,237 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:34:22,243 [main:105] - GENERATED CALL = (1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())
2021-03-11 12:34:22,243 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@a1b73f4], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34ffd74d]]
2021-03-11 12:34:22,243 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@a1b73f4]
2021-03-11 12:34:22,243 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@34ffd74d]
2021-03-11 12:34:22,243 [main:105] - GENERATED CALL = (1u.toUByte()).toFloat().isNaN()
2021-03-11 12:34:22,243 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@229d755], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:34:22,243 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@229d755]
2021-03-11 12:34:22,496 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:22,497 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:34:22,497 [main:105] - GENERATED CALL = (1u.toUByte()).equals("faeew").not()
2021-03-11 12:34:22,497 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2fdd7142], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]]
2021-03-11 12:34:22,497 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2fdd7142]
2021-03-11 12:34:22,497 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b26a327]
2021-03-11 12:34:22,497 [main:105] - GENERATED CALL = (1u.toUByte()).toDouble().isNaN()
2021-03-11 12:34:22,497 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7de3bb02], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-11 12:34:22,497 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7de3bb02]
2021-03-11 12:34:22,498 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-11 12:34:22,747 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:22,747 [main:105] - GENERATED CALL = (1u.toUByte()).toLong().equals("ebgli")
2021-03-11 12:34:22,747 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@45598df6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]]
2021-03-11 12:34:22,747 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@45598df6]
2021-03-11 12:34:22,747 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79ef39ea]
2021-03-11 12:34:22,991 [main:105] - GENERATED CALL = (1u.toUByte()).toByte().equals(null)
2021-03-11 12:34:22,991 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2fdd7142], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]]
2021-03-11 12:34:22,991 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2fdd7142]
2021-03-11 12:34:22,991 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76226519]
2021-03-11 12:34:22,991 [main:105] - GENERATED CALL = (1u.toUByte()).toDouble().isFinite()
2021-03-11 12:34:22,991 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@626f9adc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2ae03f4a]]
2021-03-11 12:34:22,991 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@626f9adc]
2021-03-11 12:34:22,991 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2ae03f4a]
2021-03-11 12:34:23,234 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:23,234 [main:105] - GENERATED CALL = (1u.toUByte()).toUShort().equals("qamqd")
2021-03-11 12:34:23,234 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@a1b73f4], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e49055a]]
2021-03-11 12:34:23,234 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@a1b73f4]
2021-03-11 12:34:23,234 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e49055a]
2021-03-11 12:34:23,234 [main:105] - GENERATED CALL = (1u.toUByte()).toFloat().isInfinite()
2021-03-11 12:34:23,235 [main:101] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2fdd7142], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]]
2021-03-11 12:34:23,235 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2fdd7142]
2021-03-11 12:34:23,235 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]
2021-03-11 12:34:23,478 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:23,478 [main:105] - GENERATED CALL = (1u.toUByte()).toDouble().equals("httos")
2021-03-11 12:34:23,478 [main:110] - replacement of prope13 of type Boolean is (1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())
2021-03-11 12:34:23,720 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:34:23,720 [main:66] - Compilation checking started
2021-03-11 12:34:24,959 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..numberOfSuspensions) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:34:24,964 [main:103] - replacing (numberOfSuspensions, Int)
2021-03-11 12:34:24,964 [main:38] - replacing numberOfSuspensions Int
2021-03-11 12:34:24,964 [main:42] - Getting value of type Int
2021-03-11 12:34:25,214 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:25,220 [main:46] - GENERATED VALUE OF TYPE Int = -2016088437
2021-03-11 12:34:25,220 [main:49] - GENERATED IS CALL =false
2021-03-11 12:34:26,078 [main:55] - randomType = ArrayDeque<Char?>
2021-03-11 12:34:26,334 [main:302] - generating value of type = ArrayDeque<Char?> false depth = 0
2021-03-11 12:34:26,600 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Char?> = TODO()
2021-03-11 12:34:26,607 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Char?> = TODO()
2021-03-11 12:34:26,869 [main:95] - GENERATED = ArrayDeque<Char?>()
2021-03-11 12:34:27,029 [main:66] - Generated call from random type = (ArrayDeque<Char?>()).size.sign
2021-03-11 12:34:27,030 [main:94] - GETTING Int from Int
2021-03-11 12:34:27,063 [main:101] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@58bb2ef8]]
2021-03-11 12:34:27,063 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@58bb2ef8]
2021-03-11 12:34:27,321 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:27,327 [main:105] - GENERATED CALL = (list2.size).shr(1256036771)
2021-03-11 12:34:27,327 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@edf15dd]]
2021-03-11 12:34:27,327 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:34:27,578 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:27,584 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@edf15dd]
2021-03-11 12:34:27,992 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:34:27,998 [main:105] - GENERATED CALL = (list2.size).compareTo(-1005964439).times(-119)
2021-03-11 12:34:27,998 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e7c0a80]]
2021-03-11 12:34:27,998 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:34:27,998 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7e7c0a80]
2021-03-11 12:34:28,247 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:28,253 [main:105] - GENERATED CALL = (list2.size).toInt().rotateRight(-1801388218)
2021-03-11 12:34:28,253 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@6a46e297]]
2021-03-11 12:34:28,253 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747ac5fb]
2021-03-11 12:34:28,503 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:34:28,508 [main:105] - GENERATED CALL = (list2.size).rangeTo(-69).first
2021-03-11 12:34:28,508 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7bfab2d2]]
2021-03-11 12:34:28,508 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:34:28,509 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7bfab2d2]
2021-03-11 12:34:28,509 [main:105] - GENERATED CALL = (list2.size).toLong().countTrailingZeroBits()
2021-03-11 12:34:28,509 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4239d51b]]
2021-03-11 12:34:28,509 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:34:28,509 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4239d51b]
2021-03-11 12:34:28,767 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:28,772 [main:105] - GENERATED CALL = (list2.size).toInt().and(1776223129)
2021-03-11 12:34:28,773 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3fac6f2e]]
2021-03-11 12:34:28,773 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:34:29,022 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:34:29,027 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3fac6f2e]
2021-03-11 12:34:29,281 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:34:29,287 [main:105] - GENERATED CALL = (list2.size).div(0.178300549821773).compareTo(-31)
2021-03-11 12:34:29,287 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2e4a1d6]]
2021-03-11 12:34:29,287 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:34:29,287 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2e4a1d6]
2021-03-11 12:34:29,540 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:34:29,546 [main:105] - GENERATED CALL = (list2.size).toShort().times(-78)
2021-03-11 12:34:29,546 [main:101] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@edf15dd]]
2021-03-11 12:34:29,546 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@edf15dd]
2021-03-11 12:34:29,795 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:34:29,801 [main:105] - GENERATED CALL = (list2.size).times(-86)
2021-03-11 12:34:29,801 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e4fa412]]
2021-03-11 12:34:29,801 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:34:29,801 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e4fa412]
2021-03-11 12:34:30,050 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:34:30,056 [main:105] - GENERATED CALL = (list2.size).toInt().compareTo(-19)
2021-03-11 12:34:30,056 [main:110] - replacement of numberOfSuspensions of type Int is (list2.size).toInt().and(1776223129)
2021-03-11 12:34:30,304 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:34:30,305 [main:66] - Compilation checking started
2021-03-11 12:34:31,552 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return prope9.prope8
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:34:31,556 [main:103] - replacing (prope9.prope8, String)
2021-03-11 12:34:31,556 [main:38] - replacing prope9.prope8 String
2021-03-11 12:34:31,557 [main:42] - Getting value of type String
2021-03-11 12:34:31,807 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:34:31,812 [main:46] - GENERATED VALUE OF TYPE String = "mvyzd"
2021-03-11 12:34:31,812 [main:49] - GENERATED IS CALL =false
2021-03-11 12:34:32,117 [main:55] - randomType = HashSet<Kla6>
2021-03-11 12:34:32,367 [main:302] - generating value of type = HashSet<Kla6> false depth = 0
2021-03-11 12:34:32,624 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Kla6> = TODO()
2021-03-11 12:34:32,632 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Kla6> = TODO()
2021-03-11 12:34:32,894 [main:95] - GENERATED = linkedSetOf<Kla6>()
2021-03-11 12:34:32,990 [main:137] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@32c21fa9]
2021-03-11 12:34:33,241 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:34:33,500 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:34:33,757 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:34:33,764 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:34:34,312 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:34:34,318 [main:95] - GENERATED = StringBuilder(274665073)
2021-03-11 12:34:34,570 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:34:34,831 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:35,088 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:34:35,349 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:34:35,354 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:34:35,363 [main:66] - Generated call from random type = (linkedSetOf<Kla6>()).joinToString("hwady", StringBuilder(274665073), "gokhi", -865017497, "bkoap", {a: T -> "catqe"})
2021-03-11 12:34:35,363 [main:94] - GETTING String from Int
2021-03-11 12:34:35,398 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:34:35,398 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7b10299c]
2021-03-11 12:34:35,398 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:34:35,649 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:35,654 [main:105] - GENERATED CALL = (list2.size).toLong().toString(1181374046)
2021-03-11 12:34:35,654 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]]
2021-03-11 12:34:35,655 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:34:35,655 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68610913]
2021-03-11 12:34:35,655 [main:105] - GENERATED CALL = (list2.size).toChar().lowercase()
2021-03-11 12:34:35,655 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:34:35,655 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:34:35,906 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:35,911 [main:105] - GENERATED CALL = (list2.size).toString(1824458085)
2021-03-11 12:34:35,911 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]]
2021-03-11 12:34:35,911 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1cebbbac]
2021-03-11 12:34:36,164 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:34:36,169 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1edabd35]
2021-03-11 12:34:36,421 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:36,427 [main:105] - GENERATED CALL = (list2.size).div(-3901249505839999288).toString(1650337067)
2021-03-11 12:34:36,427 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]]
2021-03-11 12:34:36,427 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:34:36,427 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f9077e]
2021-03-11 12:34:36,427 [main:105] - GENERATED CALL = (list2.size).toChar().uppercase()
2021-03-11 12:34:36,428 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]]
2021-03-11 12:34:36,428 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:34:36,428 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e5722ad]
2021-03-11 12:34:36,679 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:36,684 [main:105] - GENERATED CALL = (list2.size).toByte().toString(-973934583)
2021-03-11 12:34:36,684 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]]
2021-03-11 12:34:36,684 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:34:36,684 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@770bc23f]
2021-03-11 12:34:36,934 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:34:36,940 [main:105] - GENERATED CALL = (list2.size).toChar().plus("ttraf")
2021-03-11 12:34:36,940 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]]
2021-03-11 12:34:36,940 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:34:36,940 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e06418b]
2021-03-11 12:34:37,190 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:37,196 [main:105] - GENERATED CALL = (list2.size).toShort().toString(1659124524)
2021-03-11 12:34:37,196 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:34:37,196 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:34:37,448 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:37,454 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:34:37,738 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:37,744 [main:105] - GENERATED CALL = (list2.size).compareTo(-2112855094).toString(99544504)
2021-03-11 12:34:37,899 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]]
2021-03-11 12:34:37,900 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:34:37,900 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a060999]
2021-03-11 12:34:38,149 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:38,154 [main:105] - GENERATED CALL = (list2.size).toInt().toString(373747980)
2021-03-11 12:34:38,154 [main:110] - replacement of prope9.prope8 of type String is (list2.size).toLong().toString(1181374046)
2021-03-11 12:34:38,401 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:34:38,402 [main:66] - Compilation checking started
2021-03-11 12:34:39,623 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:34:39,628 [main:103] - replacing ((((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13, Boolean)
2021-03-11 12:34:39,629 [main:38] - replacing (((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13 Boolean
2021-03-11 12:34:39,629 [main:42] - Getting value of type Boolean
2021-03-11 12:34:39,889 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:39,894 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:34:39,894 [main:49] - GENERATED IS CALL =false
2021-03-11 12:34:40,188 [main:55] - randomType = Boolean?
2021-03-11 12:34:40,435 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:40,451 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:34:40,705 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:40,711 [main:66] - Generated call from random type = (false)?.and(false)
2021-03-11 12:34:40,712 [main:94] - GETTING Boolean from Int
2021-03-11 12:34:40,762 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]]
2021-03-11 12:34:40,762 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@217e141a]
2021-03-11 12:34:41,011 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:34:41,016 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]
2021-03-11 12:34:41,265 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:41,265 [main:105] - GENERATED CALL = ((list3.size)).div(0.7066803537865619).equals("tcyun")
2021-03-11 12:34:41,265 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:34:41,265 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:34:41,515 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:41,515 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:34:41,764 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:41,770 [main:105] - GENERATED CALL = ((list3.size)).equals("gxzro").or(true)
2021-03-11 12:34:41,770 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:34:41,770 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:34:41,770 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:34:42,019 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:42,019 [main:105] - GENERATED CALL = ((list3.size)).toInt().equals("xqaoo")
2021-03-11 12:34:42,019 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:34:42,019 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:34:42,268 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:42,269 [main:105] - GENERATED CALL = ((list3.size)).equals("cqajg")
2021-03-11 12:34:42,269 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:34:42,269 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:34:42,518 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:34:42,523 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:34:42,772 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:42,909 [main:105] - GENERATED CALL = ((list3.size)).compareTo(-1525979090).equals("xublm")
2021-03-11 12:34:42,909 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]]
2021-03-11 12:34:42,909 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@62b69db]
2021-03-11 12:34:42,909 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1553b032]
2021-03-11 12:34:43,158 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:43,159 [main:105] - GENERATED CALL = ((list3.size)).toDouble().equals("xslfp")
2021-03-11 12:34:43,159 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf3643c]]
2021-03-11 12:34:43,159 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:34:43,159 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf3643c]
2021-03-11 12:34:43,159 [main:105] - GENERATED CALL = ((list3.size)).toChar().isLetterOrDigit()
2021-03-11 12:34:43,159 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:34:43,159 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:34:43,407 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:43,407 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:34:43,654 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:43,660 [main:105] - GENERATED CALL = ((list3.size)).equals("uldcz").and(false)
2021-03-11 12:34:43,660 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35af134e]]
2021-03-11 12:34:43,660 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:34:43,660 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35af134e]
2021-03-11 12:34:43,660 [main:105] - GENERATED CALL = ((list3.size)).toChar().isUpperCase()
2021-03-11 12:34:43,660 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2805e3]]
2021-03-11 12:34:43,660 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7578bfc]
2021-03-11 12:34:43,660 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2805e3]
2021-03-11 12:34:43,660 [main:105] - GENERATED CALL = ((list3.size)).toChar().isHighSurrogate()
2021-03-11 12:34:43,660 [main:110] - replacement of (((0.91738296f)).div(0.3692025158350838)).equals("helmi").xor(false) && !prope13 of type Boolean is ((list3.size)).equals("gxzro").or(true)
2021-03-11 12:34:43,908 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:34:43,909 [main:66] - Compilation checking started
2021-03-11 12:34:45,128 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:34:45,133 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:34:45,133 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:34:45,133 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:34:45,398 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:34:45,406 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:34:45,418 [main:55] - randomType = Long
2021-03-11 12:34:45,666 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:34:45,702 [main:94] - GETTING EmptyCoroutineContext from Kla4
2021-03-11 12:34:45,706 [main:94] - GETTING EmptyCoroutineContext from ArrayList<ULong>
2021-03-11 12:34:45,818 [main:94] - GETTING EmptyCoroutineContext from UByte
2021-03-11 12:34:45,840 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:45,869 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:34:45,978 [main:94] - GETTING EmptyCoroutineContext from Float
2021-03-11 12:34:46,006 [main:94] - GETTING EmptyCoroutineContext from UShort
2021-03-11 12:34:46,027 [main:94] - GETTING EmptyCoroutineContext from HashSet<Kla0?>
2021-03-11 12:34:46,141 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:46,142 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:34:46,143 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 12:34:46,171 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:46,172 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:34:46,172 [main:94] - GETTING EmptyCoroutineContext from Kla4?
2021-03-11 12:34:46,177 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:34:46,186 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:34:46,186 [main:94] - GETTING EmptyCoroutineContext from HashSet<Kla0?>
2021-03-11 12:34:46,187 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:34:46,187 [main:94] - GETTING EmptyCoroutineContext from Long
2021-03-11 12:34:46,217 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:34:46,234 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:46,234 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:46,235 [main:94] - GETTING EmptyCoroutineContext from Array<Any?>
2021-03-11 12:34:46,245 [main:94] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-11 12:34:46,253 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:46,254 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:46,255 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:34:46,255 [main:94] - GETTING EmptyCoroutineContext from Any
2021-03-11 12:34:46,259 [main:94] - GETTING EmptyCoroutineContext from Kla0?
2021-03-11 12:34:46,266 [main:94] - GETTING EmptyCoroutineContext from Byte
2021-03-11 12:34:46,295 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:34:46,296 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 12:34:46,297 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:46,297 [main:94] - GETTING EmptyCoroutineContext from Float
2021-03-11 12:34:46,298 [main:94] - GETTING EmptyCoroutineContext from Kla4?
2021-03-11 12:34:46,299 [main:94] - GETTING EmptyCoroutineContext from MutableIterator<Kla0?>
2021-03-11 12:34:46,315 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:34:46,315 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:34:46,315 [main:103] - replacing (false, Boolean)
2021-03-11 12:34:46,315 [main:38] - replacing false Boolean
2021-03-11 12:34:46,315 [main:42] - Getting value of type Boolean
2021-03-11 12:34:46,562 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:46,568 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:34:46,568 [main:49] - GENERATED IS CALL =false
2021-03-11 12:34:46,861 [main:55] - randomType = Kla11
2021-03-11 12:34:47,108 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-11 12:34:47,114 [main:112] - generating klass Kla11 text = object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:34:47,131 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@6b8a66bc]
2021-03-11 12:34:47,379 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:47,379 [main:66] - Generated call from random type = (Kla11).context.equals("xdmkt")
2021-03-11 12:34:47,379 [main:94] - GETTING Boolean from Boolean
2021-03-11 12:34:47,388 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:34:47,388 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:34:47,635 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:47,635 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:34:47,883 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:47,889 [main:105] - GENERATED CALL = (list1.add(i)).equals("dismq").or(false)
2021-03-11 12:34:47,889 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:34:47,889 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:34:48,137 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:48,137 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:34:48,386 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:48,392 [main:105] - GENERATED CALL = (list1.add(i)).equals("bpvho").xor(true)
2021-03-11 12:34:48,392 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:34:48,392 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:34:48,640 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:48,645 [main:105] - GENERATED CALL = (list1.add(i)).xor(true)
2021-03-11 12:34:48,646 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:34:48,646 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:34:48,894 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:48,894 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:34:49,142 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:49,143 [main:105] - GENERATED CALL = (list1.add(i)).equals("ewdjz").equals("yncyw")
2021-03-11 12:34:49,143 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:34:49,143 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:34:49,390 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:49,390 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:34:49,637 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:49,642 [main:105] - GENERATED CALL = (list1.add(i)).equals("ccset").and(true)
2021-03-11 12:34:49,643 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:34:49,643 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:34:49,891 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:49,896 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:34:50,146 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:50,146 [main:105] - GENERATED CALL = (list1.add(i)).compareTo(false).equals("afvcr")
2021-03-11 12:34:50,146 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:34:50,146 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:34:50,396 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:50,396 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:34:50,396 [main:105] - GENERATED CALL = (list1.add(i)).equals("eenon").not()
2021-03-11 12:34:50,396 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:34:50,396 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:34:50,675 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:34:50,675 [main:105] - GENERATED CALL = (list1.add(i)).equals("zsjfp")
2021-03-11 12:34:50,675 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:34:50,675 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:34:50,676 [main:105] - GENERATED CALL = (list1.add(i)).not()
2021-03-11 12:34:50,676 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:34:50,676 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:34:50,924 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:34:50,930 [main:105] - GENERATED CALL = (list1.add(i)).or(false)
2021-03-11 12:34:50,930 [main:110] - replacement of false of type Boolean is (list1.add(i)).equals("zsjfp")
2021-03-11 12:34:51,177 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:34:51,177 [main:66] - Compilation checking started
2021-03-11 12:34:52,130 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = (list1.add(i)).equals("zsjfp")
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:34:52,135 [main:103] - replacing (x, Function1<Ty1, Unit>)
2021-03-11 12:34:52,135 [main:38] - replacing x Function1<Ty1, Unit>
2021-03-11 12:34:52,135 [main:42] - Getting value of type Function1<Ty1, Unit>
2021-03-11 12:34:52,384 [main:302] - generating value of type = Function1<Ty1, Unit> false depth = 0
2021-03-11 12:34:52,389 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:34:52,646 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:34:52,654 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:34:53,210 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:34:53,215 [main:95] - GENERATED = check(true)
2021-03-11 12:34:53,215 [main:46] - GENERATED VALUE OF TYPE Function1<Ty1, Unit> = {a: Ty1 -> check(true)}
2021-03-11 12:34:53,216 [main:49] - GENERATED IS CALL =false
2021-03-11 12:34:53,809 [main:55] - randomType = Array<UByte>
2021-03-11 12:34:54,056 [main:302] - generating value of type = Array<UByte> false depth = 0
2021-03-11 12:34:54,310 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<UByte> = TODO()
2021-03-11 12:34:54,318 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<UByte> = TODO()
2021-03-11 12:34:54,581 [main:95] - GENERATED = emptyArray<UByte>()
2021-03-11 12:34:54,598 [main:94] - GETTING Function1<Ty1, Unit> from Kla4?
2021-03-11 12:34:54,606 [main:94] - GETTING Function1<Ty1, Unit> from Kla0?
2021-03-11 12:34:54,614 [main:94] - GETTING Function1<Ty1, Unit> from ArrayList<UInt>
2021-03-11 12:34:54,732 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:34:54,764 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:34:54,765 [main:94] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-11 12:34:54,776 [main:94] - GETTING Function1<Ty1, Unit> from Long
2021-03-11 12:34:54,813 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:34:54,814 [main:94] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-11 12:34:54,815 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:34:54,817 [main:94] - GETTING Function1<Ty1, Unit> from ArrayList<ULong>
2021-03-11 12:34:54,946 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:34:54,948 [main:94] - GETTING Function1<Ty1, Unit> from Array<Any?>
2021-03-11 12:34:54,960 [main:94] - GETTING Function1<Ty1, Unit> from ArrayList<UInt>
2021-03-11 12:34:54,962 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:34:54,963 [main:94] - GETTING Function1<Ty1, Unit> from HashSet<Kla0?>
2021-03-11 12:34:55,079 [main:94] - GETTING Function1<Ty1, Unit> from Function0<Unit>
2021-03-11 12:34:55,088 [main:94] - GETTING Function1<Ty1, Unit> from String
2021-03-11 12:34:55,104 [main:94] - GETTING Function1<Ty1, Unit> from MutableIterator<Kla0?>
2021-03-11 12:34:55,121 [main:94] - GETTING Function1<Ty1, Unit> from Kla4?
2021-03-11 12:34:55,122 [main:94] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-11 12:34:55,123 [main:94] - GETTING Function1<Ty1, Unit> from HashSet<Kla0?>
2021-03-11 12:34:55,124 [main:94] - GETTING Function1<Ty1, Unit> from Float
2021-03-11 12:34:55,153 [main:94] - GETTING Function1<Ty1, Unit> from ArrayList<UInt>
2021-03-11 12:34:55,155 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:34:55,156 [main:94] - GETTING Function1<Ty1, Unit> from Double
2021-03-11 12:34:55,184 [main:94] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-11 12:34:55,186 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:34:55,187 [main:94] - GETTING Function1<Ty1, Unit> from UByte
2021-03-11 12:34:55,210 [main:94] - GETTING Function1<Ty1, Unit> from Any
2021-03-11 12:34:55,213 [main:94] - GETTING Function1<Ty1, Unit> from Float
2021-03-11 12:34:55,215 [main:94] - GETTING Function1<Ty1, Unit> from Double
2021-03-11 12:34:55,216 [main:94] - GETTING Function1<Ty1, Unit> from String
2021-03-11 12:34:55,217 [main:94] - GETTING Function1<Ty1, Unit> from Byte
2021-03-11 12:34:55,248 [main:94] - GETTING Function1<Ty1, Unit> from UShort
2021-03-11 12:34:55,271 [main:94] - GETTING Function1<Ty1, Unit> from Kla4
2021-03-11 12:34:55,276 [main:94] - GETTING Function1<Ty1, Unit> from ArrayList<UInt>
2021-03-11 12:34:55,276 [main:110] - replacement of x of type Function1<Ty1, Unit> is {a: Ty1 -> check(true)}
2021-03-11 12:34:55,524 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:34:55,525 [main:66] - Compilation checking started
2021-03-11 12:34:56,472 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
{a: Ty1 -> check(true)}(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)})
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:34:56,476 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:34:56,476 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:34:56,476 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:34:56,762 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:34:56,770 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:34:57,760 [main:55] - randomType = Sequence<Function2<Kla0, Kla3, Kla2>>?
2021-03-11 12:34:57,760 [main:94] - GETTING EmptyCoroutineContext from ArrayList<ULong>
2021-03-11 12:34:57,876 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:57,906 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:57,907 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:34:57,915 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:34:58,025 [main:94] - GETTING EmptyCoroutineContext from Float
2021-03-11 12:34:58,052 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:34:58,053 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:58,053 [main:94] - GETTING EmptyCoroutineContext from Byte
2021-03-11 12:34:58,083 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:34:58,084 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 12:34:58,112 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:58,113 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:58,113 [main:94] - GETTING EmptyCoroutineContext from Array<Any?>
2021-03-11 12:34:58,124 [main:94] - GETTING EmptyCoroutineContext from Float
2021-03-11 12:34:58,125 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:58,126 [main:94] - GETTING EmptyCoroutineContext from Long
2021-03-11 12:34:58,155 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:34:58,171 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:34:58,172 [main:94] - GETTING EmptyCoroutineContext from HashSet<Kla0?>
2021-03-11 12:34:58,287 [main:94] - GETTING EmptyCoroutineContext from UShort
2021-03-11 12:34:58,309 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:58,310 [main:94] - GETTING EmptyCoroutineContext from HashSet<Kla0?>
2021-03-11 12:34:58,310 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:34:58,311 [main:94] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-11 12:34:58,321 [main:94] - GETTING EmptyCoroutineContext from Any
2021-03-11 12:34:58,324 [main:94] - GETTING EmptyCoroutineContext from Kla4?
2021-03-11 12:34:58,330 [main:94] - GETTING EmptyCoroutineContext from Kla4?
2021-03-11 12:34:58,330 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:34:58,331 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:34:58,332 [main:94] - GETTING EmptyCoroutineContext from Kla0?
2021-03-11 12:34:58,338 [main:94] - GETTING EmptyCoroutineContext from UByte
2021-03-11 12:34:58,360 [main:94] - GETTING EmptyCoroutineContext from Kla4
2021-03-11 12:34:58,364 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:34:58,365 [main:94] - GETTING EmptyCoroutineContext from MutableIterator<Kla0?>
2021-03-11 12:34:58,381 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 12:34:58,382 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:34:58,382 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:34:58,382 [main:103] - replacing (runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)}), Unit?)
2021-03-11 12:34:58,382 [main:38] - replacing runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)}) Unit?
2021-03-11 12:34:58,382 [main:42] - Getting value of type Unit?
2021-03-11 12:34:58,632 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 12:34:58,889 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:34:58,896 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:34:59,735 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:34:59,741 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-11 12:34:59,746 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 12:35:00,002 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:35:00,010 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:35:00,845 [main:302] - generating value of type = Boolean true depth = 7
2021-03-11 12:35:00,850 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-11 12:35:00,855 [main:302] - generating value of type = Any false depth = 8
2021-03-11 12:35:00,856 [main:95] - GENERATED = check(false, { "sityt"})
2021-03-11 12:35:00,856 [main:95] - GENERATED = repeat(-1470506828, {a: Int -> check(false, { "sityt"})})
2021-03-11 12:35:00,856 [main:46] - GENERATED VALUE OF TYPE Unit? = repeat(-1470506828, {a: Int -> check(false, { "sityt"})})
2021-03-11 12:35:00,856 [main:49] - GENERATED IS CALL =true
2021-03-11 12:35:00,879 [main:55] - randomType = Kla10
2021-03-11 12:35:01,126 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-11 12:35:01,132 [main:112] - generating klass Kla10 text = class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:35:01,139 [main:137] - GENERATING call of type public final fun fu11(): kotlin.Unit defined in Kla10[SimpleFunctionDescriptorImpl@7d903ebd]
2021-03-11 12:35:01,139 [main:66] - Generated call from random type = (Kla10()).fu11()
2021-03-11 12:35:01,139 [main:110] - replacement of runCatching<Any?>({ "nrlhm"}).exceptionOrNull()?.let({a: Throwable -> print(null)}) of type Unit? is (Kla10()).fu11()
2021-03-11 12:35:01,387 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:35:01,387 [main:66] - Compilation checking started
2021-03-11 12:35:02,573 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:35:02,578 [main:103] - replacing (prope14, Function0<Unit>)
2021-03-11 12:35:02,578 [main:38] - replacing prope14 Function0<Unit>
2021-03-11 12:35:02,578 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:35:02,856 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:35:02,861 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:35:03,118 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:35:03,125 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:35:03,670 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:35:03,676 [main:95] - GENERATED = require(true)
2021-03-11 12:35:03,676 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 12:35:03,676 [main:49] - GENERATED IS CALL =false
2021-03-11 12:35:03,971 [main:55] - randomType = String?
2021-03-11 12:35:04,218 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:35:04,244 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:35:04,274 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 12:35:04,302 [main:94] - GETTING Function0<Unit> from Kla0?
2021-03-11 12:35:04,308 [main:94] - GETTING Function0<Unit> from Kla4
2021-03-11 12:35:04,314 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:35:04,322 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:35:04,323 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 12:35:04,324 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:35:04,434 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:35:04,435 [main:94] - GETTING Function0<Unit> from Array<Any?>
2021-03-11 12:35:04,446 [main:94] - GETTING Function0<Unit> from ArrayList<ULong>
2021-03-11 12:35:04,556 [main:94] - GETTING Function0<Unit> from Kla4?
2021-03-11 12:35:04,562 [main:94] - GETTING Function0<Unit> from Kla4?
2021-03-11 12:35:04,563 [main:94] - GETTING Function0<Unit> from HashSet<Kla0?>
2021-03-11 12:35:04,679 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:35:04,680 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:35:04,697 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:35:04,697 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 12:35:04,705 [main:110] - replacement of prope14 of type Function0<Unit> is { require(true)}
2021-03-11 12:35:04,955 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:35:04,955 [main:66] - Compilation checking started
2021-03-11 12:35:05,857 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.{ require(true)} = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:35:05,862 [main:103] - replacing ({}, Function0<Unit>)
2021-03-11 12:35:05,862 [main:38] - replacing {} Function0<Unit>
2021-03-11 12:35:05,862 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:35:06,112 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:35:06,118 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:35:06,126 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 12:35:06,126 [main:49] - GENERATED IS CALL =false
2021-03-11 12:35:07,663 [main:55] - randomType = Map<MutableMap<Function1<Float?, UShort>, Byte>?, Byte>
2021-03-11 12:35:07,664 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:35:07,674 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:35:07,784 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:35:07,800 [main:94] - GETTING Function0<Unit> from ArrayList<UInt>
2021-03-11 12:35:07,801 [main:94] - GETTING Function0<Unit> from Double
2021-03-11 12:35:07,830 [main:94] - GETTING Function0<Unit> from Long
2021-03-11 12:35:07,860 [main:94] - GETTING Function0<Unit> from MutableIterator<Kla0?>
2021-03-11 12:35:07,877 [main:94] - GETTING Function0<Unit> from Kla4
2021-03-11 12:35:07,881 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 12:35:07,889 [main:110] - replacement of {} of type Function0<Unit> is { println()}
2021-03-11 12:35:08,138 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:35:08,138 [main:66] - Compilation checking started
2021-03-11 12:35:09,383 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = { println()}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:35:09,388 [main:103] - replacing (true, Boolean)
2021-03-11 12:35:09,389 [main:38] - replacing true Boolean
2021-03-11 12:35:09,389 [main:42] - Getting value of type Boolean
2021-03-11 12:35:09,650 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:35:09,655 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:35:09,656 [main:49] - GENERATED IS CALL =false
2021-03-11 12:35:09,667 [main:55] - randomType = UInt
2021-03-11 12:35:09,913 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:35:09,945 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@15c29dbf]
2021-03-11 12:35:10,192 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:35:10,192 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:35:10,439 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:35:10,445 [main:66] - Generated call from random type = (550677667.toUInt()).equals("gprde").and(true)
2021-03-11 12:35:10,445 [main:94] - GETTING Boolean from Boolean
2021-03-11 12:35:10,454 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:35:10,454 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:35:10,700 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:35:10,701 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:35:10,701 [main:105] - GENERATED CALL = (list4.add(i)).equals("gfbrq").not()
2021-03-11 12:35:10,701 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:35:10,701 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:35:10,948 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:35:10,948 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:35:11,196 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:35:11,202 [main:105] - GENERATED CALL = (list4.add(i)).equals("gonml").and(true)
2021-03-11 12:35:11,202 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]]
2021-03-11 12:35:11,202 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@44f6b9c5]
2021-03-11 12:35:11,473 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:35:11,473 [main:105] - GENERATED CALL = (list4.add(i)).equals("bhzqd")
2021-03-11 12:35:11,473 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]]
2021-03-11 12:35:11,473 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@128c36c0]
2021-03-11 12:35:11,474 [main:105] - GENERATED CALL = (list4.add(i)).not()
2021-03-11 12:35:11,474 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]]
2021-03-11 12:35:11,474 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:35:11,728 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:35:11,734 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:35:11,982 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:35:11,982 [main:105] - GENERATED CALL = (list4.add(i)).compareTo(true).equals("xvbir")
2021-03-11 12:35:11,982 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]]
2021-03-11 12:35:11,982 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@679a6ab2]
2021-03-11 12:35:12,230 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:35:12,236 [main:105] - GENERATED CALL = (list4.add(i)).and(false)
2021-03-11 12:35:12,236 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:35:12,236 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:35:12,484 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:35:12,484 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:35:12,734 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:35:12,739 [main:105] - GENERATED CALL = (list4.add(i)).equals("yyayl").or(true)
2021-03-11 12:35:12,739 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:35:12,739 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:35:12,990 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:35:12,996 [main:105] - GENERATED CALL = (list4.add(i)).xor(false)
2021-03-11 12:35:13,152 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]]
2021-03-11 12:35:13,153 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3140d2b5]
2021-03-11 12:35:13,403 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:35:13,403 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b294fe7]
2021-03-11 12:35:13,656 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:35:13,662 [main:105] - GENERATED CALL = (list4.add(i)).equals("tumws").xor(true)
2021-03-11 12:35:13,662 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]]
2021-03-11 12:35:13,662 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34b3127b]
2021-03-11 12:35:13,908 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:35:13,914 [main:105] - GENERATED CALL = (list4.add(i)).or(true)
2021-03-11 12:35:13,914 [main:110] - replacement of true of type Boolean is (list4.add(i)).equals("gonml").and(true)
2021-03-11 12:35:14,159 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:35:14,160 [main:66] - Compilation checking started
2021-03-11 12:35:15,073 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = 0
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = { println()}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = (list4.add(i)).equals("gonml").and(true)) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:35:15,078 [main:103] - replacing (0, Int)
2021-03-11 12:35:15,078 [main:38] - replacing 0 Int
2021-03-11 12:35:15,078 [main:42] - Getting value of type Int
2021-03-11 12:35:15,326 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:15,331 [main:46] - GENERATED VALUE OF TYPE Int = -2222355
2021-03-11 12:35:15,332 [main:49] - GENERATED IS CALL =false
2021-03-11 12:35:15,653 [main:55] - randomType = Kla11
2021-03-11 12:35:15,911 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-11 12:35:15,916 [main:112] - generating klass Kla11 text = object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:35:15,935 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla11[DeserializedSimpleFunctionDescriptor@175a15c6]
2021-03-11 12:35:16,182 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:35:16,183 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:35:16,430 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:35:16,435 [main:66] - Generated call from random type = (Kla11).equals("jjwkn").compareTo(false)
2021-03-11 12:35:16,435 [main:94] - GETTING Int from Int
2021-03-11 12:35:16,466 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@19c2cf53]]
2021-03-11 12:35:16,466 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:35:16,466 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@19c2cf53]
2021-03-11 12:35:16,713 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:35:16,719 [main:105] - GENERATED CALL = (Kla0(-310798590).int).toByte().compareTo(104)
2021-03-11 12:35:16,719 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]]
2021-03-11 12:35:16,719 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7cd72de4]
2021-03-11 12:35:16,967 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:35:16,967 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e231755]
2021-03-11 12:35:17,214 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:35:17,220 [main:105] - GENERATED CALL = (Kla0(-310798590).int).equals("ltbub").compareTo(false)
2021-03-11 12:35:17,220 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@25e62a12]]
2021-03-11 12:35:17,220 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:35:17,467 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:17,473 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@25e62a12]
2021-03-11 12:35:17,720 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:17,973 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:17,978 [main:105] - GENERATED CALL = (Kla0(-310798590).int).compareTo(-92883950).coerceIn(-57616381, -1767194994)
2021-03-11 12:35:17,978 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5adfa95c]]
2021-03-11 12:35:17,978 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:35:17,979 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5adfa95c]
2021-03-11 12:35:17,979 [main:105] - GENERATED CALL = (Kla0(-310798590).int).toInt().countOneBits()
2021-03-11 12:35:17,979 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1094a657]]
2021-03-11 12:35:17,979 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-11 12:35:17,979 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1094a657]
2021-03-11 12:35:18,225 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:35:18,231 [main:105] - GENERATED CALL = (Kla0(-310798590).int).toShort().compareTo(-29)
2021-03-11 12:35:18,388 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2f7262b0]]
2021-03-11 12:35:18,388 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:35:18,388 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2f7262b0]
2021-03-11 12:35:18,388 [main:105] - GENERATED CALL = (Kla0(-310798590).int).toByte().unaryMinus()
2021-03-11 12:35:18,388 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e4fa412]]
2021-03-11 12:35:18,388 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:35:18,388 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e4fa412]
2021-03-11 12:35:18,639 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:35:18,644 [main:105] - GENERATED CALL = (Kla0(-310798590).int).toInt().compareTo(44)
2021-03-11 12:35:18,644 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@58bb2ef8]]
2021-03-11 12:35:18,645 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:35:18,895 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:18,900 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@58bb2ef8]
2021-03-11 12:35:19,147 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:19,153 [main:105] - GENERATED CALL = (Kla0(-310798590).int).compareTo(-382668318).shr(71170171)
2021-03-11 12:35:19,153 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fe258f2]]
2021-03-11 12:35:19,153 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4fe258f2]
2021-03-11 12:35:19,153 [main:105] - GENERATED CALL = (Kla0(-310798590).int).takeLowestOneBit()
2021-03-11 12:35:19,153 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a83905]]
2021-03-11 12:35:19,153 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:35:19,153 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a83905]
2021-03-11 12:35:19,401 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:19,407 [main:105] - GENERATED CALL = (Kla0(-310798590).int).toInt().ushr(351697706)
2021-03-11 12:35:19,407 [main:110] - replacement of 0 of type Int is (Kla0(-310798590).int).equals("ltbub").compareTo(false)
2021-03-11 12:35:19,655 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:35:19,656 [main:66] - Compilation checking started
2021-03-11 12:35:20,843 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = (Kla0(-310798590).int).equals("ltbub").compareTo(false)
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = { println()}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:35:20,848 [main:103] - replacing ({
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    }, Unit?)
2021-03-11 12:35:20,848 [main:38] - replacing {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    } Unit?
2021-03-11 12:35:20,848 [main:42] - Getting value of type Unit?
2021-03-11 12:35:21,101 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 12:35:21,359 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:35:21,366 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:35:22,252 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 12:35:22,258 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 12:35:22,263 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:35:22,263 [main:95] - GENERATED = require(true, { "jpirh"})
2021-03-11 12:35:22,263 [main:46] - GENERATED VALUE OF TYPE Unit? = require(true, { "jpirh"})
2021-03-11 12:35:22,264 [main:49] - GENERATED IS CALL =true
2021-03-11 12:35:22,559 [main:55] - randomType = Float?
2021-03-11 12:35:22,809 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:35:22,853 [main:94] - GETTING Unit? from Int
2021-03-11 12:35:22,883 [main:94] - GETTING Unit? from Int
2021-03-11 12:35:22,884 [main:94] - GETTING Unit? from HashSet<Kla0?>
2021-03-11 12:35:22,999 [main:101] - Case = [public open fun clear(): kotlin.Unit defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@5ca15e25]]
2021-03-11 12:35:23,000 [main:137] - GENERATING call of type public open fun clear(): kotlin.Unit defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@5ca15e25]
2021-03-11 12:35:23,000 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>())?.clear()
2021-03-11 12:35:23,000 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], public fun <T> kotlin.Array<out T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@11c9bf6e]]
2021-03-11 12:35:23,000 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:35:23,000 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@11c9bf6e]
2021-03-11 12:35:23,250 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-11 12:35:23,517 [main:43] - GENERATING CALL OF fun <T> compareBy(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-11 12:35:23,524 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-11 12:35:24,082 [main:385] - Cant generate call of fun <T> compareBy(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-11 12:35:24,082 [main:144] - CANT GENERATE PARAMS FOR public fun <T> kotlin.Array<out T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@11c9bf6e]
2021-03-11 12:35:24,082 [main:101] - Case = [public abstract fun iterator(): kotlin.collections.Iterator<Kla0?> defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@1e5d3f6a], public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@26a814e6]]
2021-03-11 12:35:24,082 [main:137] - GENERATING call of type public abstract fun iterator(): kotlin.collections.Iterator<Kla0?> defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@1e5d3f6a]
2021-03-11 12:35:24,082 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@26a814e6]
2021-03-11 12:35:24,333 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-11 12:35:24,338 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:35:24,596 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:35:24,603 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:35:25,161 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:35:25,167 [main:95] - GENERATED = require(true)
2021-03-11 12:35:25,167 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>())?.iterator().forEach({a: T -> require(true)})
2021-03-11 12:35:25,167 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], public inline fun <T> kotlin.Array<out T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2586ccb7]]
2021-03-11 12:35:25,167 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:35:25,167 [main:137] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2586ccb7]
2021-03-11 12:35:25,415 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Unit> false depth = 0
2021-03-11 12:35:25,420 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:35:25,675 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:35:25,682 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:35:26,232 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:35:26,238 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:35:26,495 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:35:26,502 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:35:27,342 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 12:35:27,348 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 12:35:27,353 [main:302] - generating value of type = Any false depth = 9
2021-03-11 12:35:27,353 [main:95] - GENERATED = require(false, { "uakiq"})
2021-03-11 12:35:27,354 [main:95] - GENERATED = contract({ require(false, { "uakiq"})})
2021-03-11 12:35:27,354 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>())?.toArray().forEachIndexed({a: Int, b: T -> contract({ require(false, { "uakiq"})})})
2021-03-11 12:35:27,354 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], public fun <T : kotlin.Comparable<T>> kotlin.Array<out T>.sort(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e5e8adf]]
2021-03-11 12:35:27,354 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:35:27,354 [main:137] - GENERATING call of type public fun <T : kotlin.Comparable<T>> kotlin.Array<out T>.sort(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e5e8adf]
2021-03-11 12:35:27,354 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>())?.toArray().sort()
2021-03-11 12:35:27,354 [main:101] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62d9fa4a]]
2021-03-11 12:35:27,355 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@62d9fa4a]
2021-03-11 12:35:27,602 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Unit> false depth = 0
2021-03-11 12:35:27,607 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:35:27,616 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>())?.forEachIndexed({a: Int, b: T -> println()})
2021-03-11 12:35:27,616 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], public fun <T> kotlin.Array<T>.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@77ccd734]]
2021-03-11 12:35:27,616 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:35:27,616 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@77ccd734]
2021-03-11 12:35:27,616 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>())?.toArray().reverse()
2021-03-11 12:35:27,616 [main:101] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.MutableCollection<in T>.minusAssign(element: T): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1cd9fd72]]
2021-03-11 12:35:27,616 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.MutableCollection<in T>.minusAssign(element: T): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1cd9fd72]
2021-03-11 12:35:27,864 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:35:28,417 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: HashSet<Byte>): T = TODO()
2021-03-11 12:35:28,424 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: HashSet<Byte>): T = TODO()
2021-03-11 12:35:28,720 [main:302] - generating value of type = HashSet<Byte> false depth = 3
2021-03-11 12:35:28,982 [main:43] - GENERATING CALL OF fun <E> HashSet(elements: kotlin.collections.Collection<Byte>): HashSet<Byte> = TODO()
2021-03-11 12:35:28,989 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(elements: kotlin.collections.Collection<Byte>): HashSet<Byte> = TODO()
2021-03-11 12:35:29,558 [main:302] - generating value of type = Collection<Byte> false depth = 6
2021-03-11 12:35:29,819 [main:43] - GENERATING CALL OF fun <T> setOf(elements: Byte): Collection<Byte> = TODO()
2021-03-11 12:35:29,826 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: Byte): Collection<Byte> = TODO()
2021-03-11 12:35:30,088 [main:302] - generating value of type = Byte true depth = 9
2021-03-11 12:35:30,094 [main:95] - GENERATED = setOf<Byte>(2)
2021-03-11 12:35:30,094 [main:95] - GENERATED = HashSet<Byte>(setOf<Byte>(2))
2021-03-11 12:35:30,095 [main:95] - GENERATED = checkNotNull<HashSet<Byte>>(HashSet<Byte>(setOf<Byte>(2)))
2021-03-11 12:35:30,095 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>())?.minusAssign(checkNotNull<HashSet<Byte>>(HashSet<Byte>(setOf<Byte>(2))))
2021-03-11 12:35:30,095 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], @kotlin.SinceKotlin public fun <T> kotlin.Array<T>.fill(element: T, fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@167cb588]]
2021-03-11 12:35:30,095 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:35:30,095 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.Array<T>.fill(element: T, fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@167cb588]
2021-03-11 12:35:30,348 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:35:30,618 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Long, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:35:30,625 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Long, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-11 12:35:31,184 [main:302] - generating value of type = Long true depth = 3
2021-03-11 12:35:31,190 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 12:35:31,196 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:35:31,196 [main:95] - GENERATED = checkNotNull<Long>(264305024246240894, { "abtcx"})
2021-03-11 12:35:31,456 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:31,721 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:31,727 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>())?.toArray().fill(checkNotNull<Long>(264305024246240894, { "abtcx"}), 1387784645, -2115994493)
2021-03-11 12:35:31,727 [main:101] - Case = [@kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f], public final operator fun set(index: kotlin.Int, value: kotlin.Any?): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@1c1f4959]]
2021-03-11 12:35:31,727 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@58995b8f]
2021-03-11 12:35:31,727 [main:137] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.Any?): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@1c1f4959]
2021-03-11 12:35:31,978 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:32,233 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:35:32,234 [main:105] - GENERATED CALL = (hashSetOf<Kla0?>())?.toArray().set(509555603, "xemxp")
2021-03-11 12:35:32,234 [main:110] - replacement of {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    } of type Unit? is (hashSetOf<Kla0?>())?.iterator().forEach({a: T -> require(true)})
2021-03-11 12:35:32,485 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:35:32,485 [main:66] - Compilation checking started
2021-03-11 12:35:32,497 [main:71] - Wrong syntax or breaks conditions
2021-03-11 12:35:32,497 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) (hashSetOf<Kla0?>())?.iterator().forEach({a: T -> require(true)})
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = (Kla0(-310798590).int).equals("ltbub").compareTo(false)
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = { println()}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:35:32,502 [main:103] - replacing ({ prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 12:35:32,502 [main:38] - replacing { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    } Function1<Continuation<Unit>, Unit>
2021-03-11 12:35:32,502 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 12:35:32,752 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 12:35:32,758 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:35:32,767 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println()}
2021-03-11 12:35:32,767 [main:49] - GENERATED IS CALL =false
2021-03-11 12:35:33,100 [main:55] - randomType = HashMap<Boolean, Float>
2021-03-11 12:35:33,354 [main:302] - generating value of type = HashMap<Boolean, Float> false depth = 0
2021-03-11 12:35:33,612 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): HashMap<Boolean, Float> = TODO()
2021-03-11 12:35:33,619 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): HashMap<Boolean, Float> = TODO()
2021-03-11 12:35:33,882 [main:95] - GENERATED = LinkedHashMap<Boolean, Float>()
2021-03-11 12:35:33,992 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 12:35:34,001 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from ArrayList<ULong>
2021-03-11 12:35:34,113 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from ArrayList<UInt>
2021-03-11 12:35:34,226 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:35:34,258 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from ArrayList<UInt>
2021-03-11 12:35:34,259 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Float
2021-03-11 12:35:34,290 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:35:34,291 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-11 12:35:34,315 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Float
2021-03-11 12:35:34,316 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:35:34,318 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Kla0?
2021-03-11 12:35:34,326 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from UShort
2021-03-11 12:35:34,349 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 12:35:34,350 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:35:34,352 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from ArrayList<UInt>
2021-03-11 12:35:34,353 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:35:34,371 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from ArrayList<UInt>
2021-03-11 12:35:34,373 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Kla4?
2021-03-11 12:35:34,378 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Double
2021-03-11 12:35:34,408 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Any
2021-03-11 12:35:34,413 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Kla4?
2021-03-11 12:35:34,415 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 12:35:34,416 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:35:34,418 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:35:34,419 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from MutableIterator<Kla0?>
2021-03-11 12:35:34,436 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-11 12:35:34,496 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 12:35:34,498 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Array<Any?>
2021-03-11 12:35:34,514 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:35:34,515 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Kla4
2021-03-11 12:35:34,523 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Byte
2021-03-11 12:35:34,557 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:35:34,558 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from HashSet<Kla0?>
2021-03-11 12:35:34,676 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-11 12:35:34,686 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Double
2021-03-11 12:35:34,687 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from HashSet<Kla0?>
2021-03-11 12:35:34,688 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:35:34,688 [main:110] - replacement of { prope9 ->
        prope12++
        prope14 = { check(true, { "aynzd"})}
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println()}
2021-03-11 12:35:34,937 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:35:34,938 [main:66] - Compilation checking started
2021-03-11 12:35:36,132 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = (Kla0(-310798590).int).equals("ltbub").compareTo(false)
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = { println()}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:35:36,136 [main:103] - replacing (prope10.getOrThrow(), Ty1)
2021-03-11 12:35:36,136 [main:38] - replacing prope10.getOrThrow() Ty1
2021-03-11 12:35:36,137 [main:42] - Getting value of type Ty1
2021-03-11 12:35:36,383 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 12:35:36,391 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 12:35:36,672 [main:55] - randomType = Char
2021-03-11 12:35:36,926 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:35:36,949 [main:94] - GETTING Ty1 from ArrayList<UInt>
2021-03-11 12:35:37,060 [main:94] - GETTING Ty1 from Boolean
2021-03-11 12:35:37,068 [main:94] - GETTING Ty1 from ArrayList<UInt>
2021-03-11 12:35:37,069 [main:94] - GETTING Ty1 from ArrayList<ULong>
2021-03-11 12:35:37,177 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:37,207 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:37,208 [main:94] - GETTING Ty1 from UByte
2021-03-11 12:35:37,229 [main:94] - GETTING Ty1 from Long
2021-03-11 12:35:37,258 [main:94] - GETTING Ty1 from Byte
2021-03-11 12:35:37,287 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:37,288 [main:94] - GETTING Ty1 from Kla4?
2021-03-11 12:35:37,292 [main:94] - GETTING Ty1 from String
2021-03-11 12:35:37,309 [main:94] - GETTING Ty1 from UShort
2021-03-11 12:35:37,332 [main:94] - GETTING Ty1 from String
2021-03-11 12:35:37,332 [main:94] - GETTING Ty1 from Kla4?
2021-03-11 12:35:37,333 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:37,334 [main:94] - GETTING Ty1 from HashSet<Kla0?>
2021-03-11 12:35:37,451 [main:94] - GETTING Ty1 from Boolean
2021-03-11 12:35:37,451 [main:94] - GETTING Ty1 from Kla0?
2021-03-11 12:35:37,458 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:37,458 [main:94] - GETTING Ty1 from Any
2021-03-11 12:35:37,461 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:37,462 [main:94] - GETTING Ty1 from Double
2021-03-11 12:35:37,491 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:37,491 [main:94] - GETTING Ty1 from Float
2021-03-11 12:35:37,520 [main:94] - GETTING Ty1 from ArrayList<UInt>
2021-03-11 12:35:37,520 [main:94] - GETTING Ty1 from Float
2021-03-11 12:35:37,521 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:37,521 [main:94] - GETTING Ty1 from HashSet<Kla0?>
2021-03-11 12:35:37,522 [main:94] - GETTING Ty1 from Kla4
2021-03-11 12:35:37,527 [main:94] - GETTING Ty1 from Double
2021-03-11 12:35:37,527 [main:94] - GETTING Ty1 from Function0<Unit>
2021-03-11 12:35:37,536 [main:94] - GETTING Ty1 from Boolean
2021-03-11 12:35:37,536 [main:94] - GETTING Ty1 from Array<Any?>
2021-03-11 12:35:37,547 [main:94] - GETTING Ty1 from Boolean
2021-03-11 12:35:37,548 [main:94] - GETTING Ty1 from MutableIterator<Kla0?>
2021-03-11 12:35:37,564 [main:94] - GETTING Ty1 from ArrayList<UInt>
2021-03-11 12:35:37,564 [main:107] - Cant find and generate replacement for prope10.getOrThrow() type Ty1
2021-03-11 12:35:37,564 [main:103] - replacing (getOrThrow(), Ty1)
2021-03-11 12:35:37,564 [main:38] - replacing getOrThrow() Ty1
2021-03-11 12:35:37,564 [main:42] - Getting value of type Ty1
2021-03-11 12:35:37,810 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 12:35:37,817 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 12:35:37,837 [main:55] - randomType = Kla3
2021-03-11 12:35:38,083 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:35:38,088 [main:112] - generating klass Kla3 text = inline class Kla3(val obj: Any)
2021-03-11 12:35:38,342 [main:194] - Type params = []
2021-03-11 12:35:38,588 [main:302] - generating value of type = Any false depth = 2
2021-03-11 12:35:38,594 [main:94] - GETTING Ty1 from ArrayList<UInt>
2021-03-11 12:35:38,703 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:38,732 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:38,866 [main:94] - GETTING Ty1 from Boolean
2021-03-11 12:35:38,875 [main:94] - GETTING Ty1 from Boolean
2021-03-11 12:35:38,875 [main:94] - GETTING Ty1 from Array<Any?>
2021-03-11 12:35:38,886 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:38,886 [main:94] - GETTING Ty1 from HashSet<Kla0?>
2021-03-11 12:35:39,002 [main:94] - GETTING Ty1 from Boolean
2021-03-11 12:35:39,003 [main:94] - GETTING Ty1 from Byte
2021-03-11 12:35:39,032 [main:94] - GETTING Ty1 from Long
2021-03-11 12:35:39,061 [main:94] - GETTING Ty1 from Kla4?
2021-03-11 12:35:39,068 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:39,068 [main:94] - GETTING Ty1 from MutableIterator<Kla0?>
2021-03-11 12:35:39,084 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:39,084 [main:94] - GETTING Ty1 from ArrayList<UInt>
2021-03-11 12:35:39,085 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:39,085 [main:94] - GETTING Ty1 from ArrayList<ULong>
2021-03-11 12:35:39,195 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:39,196 [main:94] - GETTING Ty1 from Boolean
2021-03-11 12:35:39,196 [main:94] - GETTING Ty1 from Double
2021-03-11 12:35:39,224 [main:94] - GETTING Ty1 from ArrayList<UInt>
2021-03-11 12:35:39,225 [main:94] - GETTING Ty1 from Int
2021-03-11 12:35:39,226 [main:94] - GETTING Ty1 from Function0<Unit>
2021-03-11 12:35:39,234 [main:94] - GETTING Ty1 from UByte
2021-03-11 12:35:39,257 [main:94] - GETTING Ty1 from Any
2021-03-11 12:35:39,260 [main:94] - GETTING Ty1 from String
2021-03-11 12:35:39,276 [main:94] - GETTING Ty1 from Float
2021-03-11 12:35:39,304 [main:94] - GETTING Ty1 from Kla4
2021-03-11 12:35:39,308 [main:94] - GETTING Ty1 from HashSet<Kla0?>
2021-03-11 12:35:39,308 [main:94] - GETTING Ty1 from Kla0?
2021-03-11 12:35:39,314 [main:94] - GETTING Ty1 from ArrayList<UInt>
2021-03-11 12:35:39,315 [main:94] - GETTING Ty1 from String
2021-03-11 12:35:39,316 [main:94] - GETTING Ty1 from Kla4?
2021-03-11 12:35:39,316 [main:94] - GETTING Ty1 from UShort
2021-03-11 12:35:39,338 [main:94] - GETTING Ty1 from Double
2021-03-11 12:35:39,339 [main:94] - GETTING Ty1 from Float
2021-03-11 12:35:39,339 [main:107] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-11 12:35:39,339 [main:103] - replacing (prope10, Result<Ty1>)
2021-03-11 12:35:39,339 [main:38] - replacing prope10 Result<Ty1>
2021-03-11 12:35:39,339 [main:42] - Getting value of type Result<Ty1>
2021-03-11 12:35:39,585 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-11 12:35:39,879 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 12:35:39,886 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 12:35:40,429 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-11 12:35:40,429 [main:46] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-11 12:35:40,717 [main:55] - randomType = Long?
2021-03-11 12:35:40,963 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:35:40,999 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:35:41,031 [main:94] - GETTING Result<Ty1> from Byte
2021-03-11 12:35:41,066 [main:94] - GETTING Result<Ty1> from String
2021-03-11 12:35:41,084 [main:94] - GETTING Result<Ty1> from Long
2021-03-11 12:35:41,114 [main:94] - GETTING Result<Ty1> from UByte
2021-03-11 12:35:41,136 [main:94] - GETTING Result<Ty1> from HashSet<Kla0?>
2021-03-11 12:35:41,252 [main:94] - GETTING Result<Ty1> from Any
2021-03-11 12:35:41,256 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 12:35:41,264 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:35:41,266 [main:94] - GETTING Result<Ty1> from MutableIterator<Kla0?>
2021-03-11 12:35:41,283 [main:94] - GETTING Result<Ty1> from Function0<Unit>
2021-03-11 12:35:41,292 [main:94] - GETTING Result<Ty1> from ArrayList<ULong>
2021-03-11 12:35:41,414 [main:94] - GETTING Result<Ty1> from HashSet<Kla0?>
2021-03-11 12:35:41,415 [main:94] - GETTING Result<Ty1> from ArrayList<UInt>
2021-03-11 12:35:41,536 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:35:41,537 [main:94] - GETTING Result<Ty1> from Array<Any?>
2021-03-11 12:35:41,551 [main:94] - GETTING Result<Ty1> from String
2021-03-11 12:35:41,553 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 12:35:41,554 [main:94] - GETTING Result<Ty1> from Kla4
2021-03-11 12:35:41,562 [main:94] - GETTING Result<Ty1> from ArrayList<UInt>
2021-03-11 12:35:41,564 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 12:35:41,565 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 12:35:41,607 [main:94] - GETTING Result<Ty1> from Kla4?
2021-03-11 12:35:41,612 [main:94] - GETTING Result<Ty1> from Kla0?
2021-03-11 12:35:41,619 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:35:41,620 [main:94] - GETTING Result<Ty1> from UShort
2021-03-11 12:35:41,643 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:35:41,644 [main:94] - GETTING Result<Ty1> from Kla4?
2021-03-11 12:35:41,645 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:35:41,646 [main:94] - GETTING Result<Ty1> from Float
2021-03-11 12:35:41,675 [main:94] - GETTING Result<Ty1> from Float
2021-03-11 12:35:41,676 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:35:41,678 [main:94] - GETTING Result<Ty1> from ArrayList<UInt>
2021-03-11 12:35:41,679 [main:94] - GETTING Result<Ty1> from ArrayList<UInt>
2021-03-11 12:35:41,680 [main:94] - GETTING Result<Ty1> from Boolean
2021-03-11 12:35:41,681 [main:94] - GETTING Result<Ty1> from Double
2021-03-11 12:35:41,682 [main:94] - GETTING Result<Ty1> from Int
2021-03-11 12:35:41,682 [main:107] - Cant find and generate replacement for prope10 type Result<Ty1>
2021-03-11 12:35:41,682 [main:103] - replacing (Kla9(), Kla9)
2021-03-11 12:35:41,682 [main:38] - replacing Kla9() Kla9
2021-03-11 12:35:41,682 [main:42] - Getting value of type Kla9
2021-03-11 12:35:41,928 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-11 12:35:41,933 [main:112] - generating klass Kla9 text = class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}
2021-03-11 12:35:41,934 [main:46] - GENERATED VALUE OF TYPE Kla9 = Kla9()
2021-03-11 12:35:41,934 [main:49] - GENERATED IS CALL =true
2021-03-11 12:35:42,221 [main:55] - randomType = Kla11
2021-03-11 12:35:42,466 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-11 12:35:42,471 [main:112] - generating klass Kla11 text = object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:35:42,489 [main:94] - GETTING Kla9 from HashSet<Kla0?>
2021-03-11 12:35:42,604 [main:94] - GETTING Kla9 from ArrayList<UInt>
2021-03-11 12:35:42,714 [main:94] - GETTING Kla9 from Boolean
2021-03-11 12:35:42,721 [main:94] - GETTING Kla9 from Int
2021-03-11 12:35:42,751 [main:94] - GETTING Kla9 from Float
2021-03-11 12:35:42,779 [main:94] - GETTING Kla9 from Any
2021-03-11 12:35:42,782 [main:94] - GETTING Kla9 from UByte
2021-03-11 12:35:42,804 [main:94] - GETTING Kla9 from Int
2021-03-11 12:35:42,804 [main:94] - GETTING Kla9 from ArrayList<UInt>
2021-03-11 12:35:42,805 [main:94] - GETTING Kla9 from MutableIterator<Kla0?>
2021-03-11 12:35:42,821 [main:94] - GETTING Kla9 from Int
2021-03-11 12:35:42,822 [main:94] - GETTING Kla9 from Kla4?
2021-03-11 12:35:42,826 [main:94] - GETTING Kla9 from Long
2021-03-11 12:35:42,856 [main:94] - GETTING Kla9 from Array<Any?>
2021-03-11 12:35:42,867 [main:94] - GETTING Kla9 from Boolean
2021-03-11 12:35:42,867 [main:94] - GETTING Kla9 from HashSet<Kla0?>
2021-03-11 12:35:42,868 [main:94] - GETTING Kla9 from Kla0?
2021-03-11 12:35:42,874 [main:94] - GETTING Kla9 from Boolean
2021-03-11 12:35:42,875 [main:94] - GETTING Kla9 from Int
2021-03-11 12:35:42,875 [main:94] - GETTING Kla9 from String
2021-03-11 12:35:42,895 [main:94] - GETTING Kla9 from ArrayList<ULong>
2021-03-11 12:35:43,012 [main:94] - GETTING Kla9 from Kla4
2021-03-11 12:35:43,016 [main:94] - GETTING Kla9 from Boolean
2021-03-11 12:35:43,017 [main:94] - GETTING Kla9 from Function0<Unit>
2021-03-11 12:35:43,025 [main:94] - GETTING Kla9 from Int
2021-03-11 12:35:43,026 [main:94] - GETTING Kla9 from Float
2021-03-11 12:35:43,026 [main:94] - GETTING Kla9 from Kla4?
2021-03-11 12:35:43,027 [main:94] - GETTING Kla9 from Int
2021-03-11 12:35:43,028 [main:94] - GETTING Kla9 from Int
2021-03-11 12:35:43,028 [main:94] - GETTING Kla9 from ArrayList<UInt>
2021-03-11 12:35:43,029 [main:94] - GETTING Kla9 from String
2021-03-11 12:35:43,029 [main:94] - GETTING Kla9 from UShort
2021-03-11 12:35:43,053 [main:94] - GETTING Kla9 from Byte
2021-03-11 12:35:43,083 [main:94] - GETTING Kla9 from Double
2021-03-11 12:35:43,111 [main:94] - GETTING Kla9 from ArrayList<UInt>
2021-03-11 12:35:43,111 [main:94] - GETTING Kla9 from Int
2021-03-11 12:35:43,112 [main:94] - GETTING Kla9 from Double
2021-03-11 12:35:43,112 [main:110] - replacement of Kla9() of type Kla9 is Kla9()
2021-03-11 12:35:43,357 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:35:43,362 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:35:43,362 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:35:43,362 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:35:43,608 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:35:43,616 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:35:43,627 [main:55] - randomType = Float
2021-03-11 12:35:43,872 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:35:43,907 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:35:44,144 [main:94] - GETTING EmptyCoroutineContext from Float
2021-03-11 12:35:44,172 [main:94] - GETTING EmptyCoroutineContext from Kla4?
2021-03-11 12:35:44,179 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:35:44,211 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:35:44,212 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:35:44,212 [main:94] - GETTING EmptyCoroutineContext from MutableIterator<Kla0?>
2021-03-11 12:35:44,228 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:35:44,238 [main:94] - GETTING EmptyCoroutineContext from Byte
2021-03-11 12:35:44,269 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:35:44,269 [main:94] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-11 12:35:44,278 [main:94] - GETTING EmptyCoroutineContext from UShort
2021-03-11 12:35:44,301 [main:94] - GETTING EmptyCoroutineContext from HashSet<Kla0?>
2021-03-11 12:35:44,419 [main:94] - GETTING EmptyCoroutineContext from Long
2021-03-11 12:35:44,455 [main:94] - GETTING EmptyCoroutineContext from UByte
2021-03-11 12:35:44,476 [main:94] - GETTING EmptyCoroutineContext from Float
2021-03-11 12:35:44,477 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:35:44,477 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:35:44,478 [main:94] - GETTING EmptyCoroutineContext from Kla4?
2021-03-11 12:35:44,479 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:35:44,479 [main:94] - GETTING EmptyCoroutineContext from Array<Any?>
2021-03-11 12:35:44,519 [main:94] - GETTING EmptyCoroutineContext from Kla4
2021-03-11 12:35:44,523 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:35:44,540 [main:94] - GETTING EmptyCoroutineContext from ArrayList<ULong>
2021-03-11 12:35:44,651 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:35:44,652 [main:94] - GETTING EmptyCoroutineContext from Any
2021-03-11 12:35:44,655 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 12:35:44,682 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:35:44,683 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:35:44,684 [main:94] - GETTING EmptyCoroutineContext from Double
2021-03-11 12:35:44,684 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:35:44,685 [main:94] - GETTING EmptyCoroutineContext from ArrayList<UInt>
2021-03-11 12:35:44,686 [main:94] - GETTING EmptyCoroutineContext from HashSet<Kla0?>
2021-03-11 12:35:44,686 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:35:44,687 [main:94] - GETTING EmptyCoroutineContext from Kla0?
2021-03-11 12:35:44,693 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:35:44,694 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:35:44,694 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:35:44,694 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-11 12:35:44,695 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-11 12:35:44,695 [main:42] - Getting value of type String
2021-03-11 12:35:44,940 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:35:44,945 [main:46] - GENERATED VALUE OF TYPE String = "oufxz"
2021-03-11 12:35:44,945 [main:49] - GENERATED IS CALL =false
2021-03-11 12:35:45,232 [main:55] - randomType = ULong?
2021-03-11 12:35:45,478 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:35:45,510 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@78a5a781]
2021-03-11 12:35:45,510 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@508f64e5]
2021-03-11 12:35:45,756 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:45,760 [main:66] - Generated call from random type = (6864068212789513334.toULong())?.toUByte().toString(-1102608778)
2021-03-11 12:35:45,761 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is (6864068212789513334.toULong())?.toUByte().toString(-1102608778)
2021-03-11 12:35:46,013 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:35:46,014 [main:66] - Compilation checking started
2021-03-11 12:35:47,218 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = (Kla0(-310798590).int).equals("ltbub").compareTo(false)
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = { println()}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error((6864068212789513334.toULong())?.toUByte().toString(-1102608778) + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:35:47,223 [main:103] - replacing (prope12, Int)
2021-03-11 12:35:47,223 [main:38] - replacing prope12 Int
2021-03-11 12:35:47,223 [main:42] - Getting value of type Int
2021-03-11 12:35:47,473 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:47,478 [main:46] - GENERATED VALUE OF TYPE Int = -1410760293
2021-03-11 12:35:47,478 [main:49] - GENERATED IS CALL =false
2021-03-11 12:35:47,770 [main:55] - randomType = Byte?
2021-03-11 12:35:48,018 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:35:48,056 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@19c2cf53]
2021-03-11 12:35:48,304 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:35:48,309 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18a83905]
2021-03-11 12:35:48,563 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:48,568 [main:66] - Generated call from random type = (35)?.compareTo(67).ushr(-1943472484)
2021-03-11 12:35:48,568 [main:94] - GETTING Int from Int
2021-03-11 12:35:48,601 [main:101] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@58bb2ef8]]
2021-03-11 12:35:48,601 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@58bb2ef8]
2021-03-11 12:35:48,850 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:48,855 [main:105] - GENERATED CALL = (list4.size).shr(-1631371001)
2021-03-11 12:35:48,855 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7c149660]]
2021-03-11 12:35:48,855 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:35:48,855 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7c149660]
2021-03-11 12:35:48,855 [main:105] - GENERATED CALL = (list4.size).toByte().toInt()
2021-03-11 12:35:48,855 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5e47e463]]
2021-03-11 12:35:48,856 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@26e6233f]
2021-03-11 12:35:48,856 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5e47e463]
2021-03-11 12:35:48,856 [main:105] - GENERATED CALL = (list4.size).toFloat().toRawBits()
2021-03-11 12:35:48,856 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2937113c]]
2021-03-11 12:35:48,856 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a65fa63]
2021-03-11 12:35:48,856 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2937113c]
2021-03-11 12:35:48,856 [main:105] - GENERATED CALL = (list4.size).toByte().countTrailingZeroBits()
2021-03-11 12:35:48,856 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603c041c]]
2021-03-11 12:35:48,856 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:35:48,856 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603c041c]
2021-03-11 12:35:49,107 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:35:49,112 [main:105] - GENERATED CALL = (list4.size).toInt().div(-123)
2021-03-11 12:35:49,113 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1542447f]]
2021-03-11 12:35:49,113 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@687f2d84]
2021-03-11 12:35:49,113 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1542447f]
2021-03-11 12:35:49,365 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:35:49,370 [main:105] - GENERATED CALL = (list4.size).toInt().plus(-123)
2021-03-11 12:35:49,370 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2622f76c]]
2021-03-11 12:35:49,370 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:35:49,620 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:49,625 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2622f76c]
2021-03-11 12:35:49,625 [main:105] - GENERATED CALL = (list4.size).compareTo(137630468).countTrailingZeroBits()
2021-03-11 12:35:49,625 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a4ce2f]]
2021-03-11 12:35:49,625 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a4ce2f]
2021-03-11 12:35:49,625 [main:105] - GENERATED CALL = (list4.size).toInt()
2021-03-11 12:35:49,625 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e4fa412]]
2021-03-11 12:35:49,626 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3c63d57e]
2021-03-11 12:35:49,875 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:49,881 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e4fa412]
2021-03-11 12:35:50,130 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:35:50,135 [main:105] - GENERATED CALL = (list4.size).compareTo(1645357838).compareTo(-23)
2021-03-11 12:35:50,135 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce9cc4f]]
2021-03-11 12:35:50,135 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6ce9cc4f]
2021-03-11 12:35:50,135 [main:105] - GENERATED CALL = (list4.size).countLeadingZeroBits()
2021-03-11 12:35:50,136 [main:110] - replacement of prope12 of type Int is (35)?.compareTo(67).ushr(-1943472484)
2021-03-11 12:35:50,384 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:35:50,385 [main:66] - Compilation checking started
2021-03-11 12:35:51,374 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = (Kla0(-310798590).int).equals("ltbub").compareTo(false)
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(35)?.compareTo(67).ushr(-1943472484) = 0
        prope13 = false
        prope14 = { println()}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error((6864068212789513334.toULong())?.toUByte().toString(-1102608778) + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:35:51,379 [main:103] - replacing ({
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }, Any?)
2021-03-11 12:35:51,379 [main:38] - replacing {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    } Any?
2021-03-11 12:35:51,379 [main:42] - Getting value of type Any?
2021-03-11 12:35:51,630 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:35:51,630 [main:46] - GENERATED VALUE OF TYPE Any? = "bmljc"
2021-03-11 12:35:51,630 [main:49] - GENERATED IS CALL =false
2021-03-11 12:35:52,514 [main:55] - randomType = MutableMap<Long?, Float?>
2021-03-11 12:35:52,515 [main:94] - GETTING Any? from Function0<Unit>
2021-03-11 12:35:52,524 [main:94] - GETTING Any? from Int
2021-03-11 12:35:52,555 [main:94] - GETTING Any? from Kla4
2021-03-11 12:35:52,561 [main:94] - GETTING Any? from UShort
2021-03-11 12:35:52,584 [main:94] - GETTING Any? from Int
2021-03-11 12:35:52,585 [main:94] - GETTING Any? from Array<Any?>
2021-03-11 12:35:52,594 [main:101] - Case = [public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Any?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@26c0c8a8], public abstract operator fun next(): kotlin.Any? defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@18f1fbc1]]
2021-03-11 12:35:52,594 [main:137] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.Any?> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@26c0c8a8]
2021-03-11 12:35:52,594 [main:137] - GENERATING call of type public abstract operator fun next(): kotlin.Any? defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@18f1fbc1]
2021-03-11 12:35:52,594 [main:105] - GENERATED CALL = ((list1).toArray())?.iterator().next()
2021-03-11 12:35:52,594 [main:101] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@38671c02]]
2021-03-11 12:35:52,594 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@38671c02]
2021-03-11 12:35:52,844 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:52,849 [main:105] - GENERATED CALL = ((list1).toArray())?.get(1297846786)
2021-03-11 12:35:52,849 [main:110] - replacement of {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    } of type Any? is ((list1).toArray())?.get(1297846786)
2021-03-11 12:35:53,098 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 12:35:53,098 [main:66] - Compilation checking started
2021-03-11 12:35:53,109 [main:71] - Wrong syntax or breaks conditions
2021-03-11 12:35:53,109 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) ((list1).toArray())?.get(1297846786)
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = (Kla0(-310798590).int).equals("ltbub").compareTo(false)
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = { println()}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error((6864068212789513334.toULong())?.toUByte().toString(-1102608778) + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:35:53,114 [main:103] - replacing (x, Function1<Ty1, Unit>)
2021-03-11 12:35:53,114 [main:38] - replacing x Function1<Ty1, Unit>
2021-03-11 12:35:53,114 [main:42] - Getting value of type Function1<Ty1, Unit>
2021-03-11 12:35:53,366 [main:302] - generating value of type = Function1<Ty1, Unit> false depth = 0
2021-03-11 12:35:53,371 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:35:53,629 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:35:53,636 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:35:54,200 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:35:54,206 [main:95] - GENERATED = require(true)
2021-03-11 12:35:54,206 [main:46] - GENERATED VALUE OF TYPE Function1<Ty1, Unit> = {a: Ty1 -> require(true)}
2021-03-11 12:35:54,206 [main:49] - GENERATED IS CALL =false
2021-03-11 12:35:54,227 [main:55] - randomType = Kla0
2021-03-11 12:35:54,479 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:35:54,485 [main:112] - generating klass Kla0 text = inline class Kla0(val int: Int)
2021-03-11 12:35:54,736 [main:194] - Type params = []
2021-03-11 12:35:54,988 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:35:55,002 [main:94] - GETTING Function1<Ty1, Unit> from String
2021-03-11 12:35:55,027 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:35:55,070 [main:94] - GETTING Function1<Ty1, Unit> from Any
2021-03-11 12:35:55,074 [main:94] - GETTING Function1<Ty1, Unit> from UShort
2021-03-11 12:35:55,101 [main:94] - GETTING Function1<Ty1, Unit> from ArrayList<UInt>
2021-03-11 12:35:55,213 [main:94] - GETTING Function1<Ty1, Unit> from Array<Any?>
2021-03-11 12:35:55,226 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:35:55,227 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:35:55,228 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:35:55,229 [main:94] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-11 12:35:55,243 [main:94] - GETTING Function1<Ty1, Unit> from Long
2021-03-11 12:35:55,281 [main:94] - GETTING Function1<Ty1, Unit> from Kla4
2021-03-11 12:35:55,286 [main:94] - GETTING Function1<Ty1, Unit> from Float
2021-03-11 12:35:55,315 [main:94] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-11 12:35:55,316 [main:94] - GETTING Function1<Ty1, Unit> from Kla4?
2021-03-11 12:35:55,321 [main:94] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-11 12:35:55,322 [main:94] - GETTING Function1<Ty1, Unit> from Kla4?
2021-03-11 12:35:55,323 [main:94] - GETTING Function1<Ty1, Unit> from Function0<Unit>
2021-03-11 12:35:55,334 [main:94] - GETTING Function1<Ty1, Unit> from ArrayList<UInt>
2021-03-11 12:35:55,335 [main:94] - GETTING Function1<Ty1, Unit> from Float
2021-03-11 12:35:55,336 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:35:55,337 [main:94] - GETTING Function1<Ty1, Unit> from HashSet<Kla0?>
2021-03-11 12:35:55,456 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:35:55,457 [main:94] - GETTING Function1<Ty1, Unit> from String
2021-03-11 12:35:55,459 [main:94] - GETTING Function1<Ty1, Unit> from ArrayList<UInt>
2021-03-11 12:35:55,460 [main:94] - GETTING Function1<Ty1, Unit> from ArrayList<UInt>
2021-03-11 12:35:55,461 [main:94] - GETTING Function1<Ty1, Unit> from ArrayList<ULong>
2021-03-11 12:35:55,573 [main:94] - GETTING Function1<Ty1, Unit> from Byte
2021-03-11 12:35:55,605 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:35:55,606 [main:94] - GETTING Function1<Ty1, Unit> from Kla0?
2021-03-11 12:35:55,612 [main:94] - GETTING Function1<Ty1, Unit> from HashSet<Kla0?>
2021-03-11 12:35:55,614 [main:94] - GETTING Function1<Ty1, Unit> from Double
2021-03-11 12:35:55,642 [main:94] - GETTING Function1<Ty1, Unit> from MutableIterator<Kla0?>
2021-03-11 12:35:55,659 [main:94] - GETTING Function1<Ty1, Unit> from UByte
2021-03-11 12:35:55,682 [main:94] - GETTING Function1<Ty1, Unit> from Int
2021-03-11 12:35:55,684 [main:94] - GETTING Function1<Ty1, Unit> from Double
2021-03-11 12:35:55,685 [main:94] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-11 12:35:55,685 [main:110] - replacement of x of type Function1<Ty1, Unit> is {a: Ty1 -> require(true)}
2021-03-11 12:35:55,938 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:35:55,939 [main:66] - Compilation checking started
2021-03-11 12:35:56,874 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
{a: Ty1 -> require(true)}(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
this.prope10 = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = (Kla0(-310798590).int).equals("ltbub").compareTo(false)
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = { println()}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error((6864068212789513334.toULong())?.toUByte().toString(-1102608778) + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:35:56,879 [main:103] - replacing (this.prope10, Any?)
2021-03-11 12:35:56,879 [main:38] - replacing this.prope10 Any?
2021-03-11 12:35:56,879 [main:42] - Getting value of type Any?
2021-03-11 12:35:57,174 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:35:57,174 [main:46] - GENERATED VALUE OF TYPE Any? = "wzxor"
2021-03-11 12:35:57,175 [main:49] - GENERATED IS CALL =false
2021-03-11 12:35:57,186 [main:55] - randomType = Float
2021-03-11 12:35:57,458 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:35:57,497 [main:94] - GETTING Any? from String
2021-03-11 12:35:57,514 [main:94] - GETTING Any? from ArrayList<UInt>
2021-03-11 12:35:57,632 [main:101] - Case = [@kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@1e99490c]]
2021-03-11 12:35:57,632 [main:137] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@1e99490c]
2021-03-11 12:35:57,632 [main:105] - GENERATED CALL = (list1)?.toJSON()
2021-03-11 12:35:57,632 [main:101] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@44b265cd], public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@289902cd]]
2021-03-11 12:35:57,632 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@44b265cd]
2021-03-11 12:35:57,633 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@289902cd]
2021-03-11 12:35:57,883 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:35:57,889 [main:105] - GENERATED CALL = (list1)?.toArray().get(950088416)
2021-03-11 12:35:57,889 [main:110] - replacement of this.prope10 of type Any? is "wzxor"
2021-03-11 12:35:58,138 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:35:58,139 [main:66] - Compilation checking started
2021-03-11 12:35:59,092 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun box(): String {
    val list1 = ArrayList<UInt>()
    val range1 = 1u until 5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u until 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 1u.toUByte() until 5u.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUByte() until 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 1u.toUShort() until 5u.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1u.toUShort() until 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 1uL until 5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(1u, 2u, 3u, 4u)) {
        return "Wrong elements for 1uL until 5uL: $list4"
    }

    return "OK"
}

inline class Kla0(val int: Int)

inline class Kla1(val long: Long)

inline class Kla2(val string: String)

inline class Kla3(val obj: Any)

fun box616(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
    var prope1 = Kla1(2536543640245419876)
    var prope2 = Kla2("qmtvv")
    var prope3 = Kla3("rvtxn")

    val prope4 = { print("bonck")}
    { println()}()

    if ((-111).toByte().equals("ahtxh")) throw AssertionError("bolrg", NumberFormatException())
    if (((0.91738296f)).div(0.3692025158350838).equals(null)) throw AssertionError("qubjg")
    if (true) throw AssertionError("whvrp")
    if ((list3.size).toDouble().isNaN()) throw AssertionError()

    return (list1).toArray().contentDeepToString()
}

class Kla4(val s: String)

fun fu0(): Kla4? = Kla4("iufpx")

fun <Ty0> fu1(f: () -> Ty0): Ty0 = f()

val fu0: Kla4 = Kla4("zidgl")

fun box747() = Kla4("vgjqn").s

fun fu2(prope9: suspend () -> Unit) {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope9.startCoroutine(Kla6)
}

class Kla5 {
    var prope8 = "failed"
}

fun Kla5.fu3() {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope8 = "OK"
}

fun box210(): String {
    val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
val prope9 = Kla5()
    fu2(Kla5()::fu3)
    return (list2.size).toLong().toString(1181374046)
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
x(prope10.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
(Kla10()).fu11()
    }
}

open class Kla6(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla12 : Kla6()
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
runCatching<Any?>({ "mvttt"}).getOrThrow()
    }
}

class Kla7 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Any?>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
"wzxor" = prope10.getOrThrow()
    }

    var prope10: Any? = null
}

abstract class Kla8<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope10: Result<Ty1>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope10.isSuccess) {
            resume(prope10.getOrThrow())
        } else {
            fu6(ClassCastException("eekpw"))
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla9 {
    private val prope11 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(prope9: Continuation<*>) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
if (prope9 !is CoroutineStackFrame) error("osmjl")
        prope11.clear()
        var prope15: CoroutineStackFrame? = prope9
        while (prope15 != null) {
            prope11.add(prope15.getStackTraceElement())
            prope15 = prope15.callerFrame
        }
    }

    fun fu9(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { it?.methodName?.startsWith("xoptt") == true }?.let { TODO("iiyhn")}
    }

    fun fu10(method: String) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope11.find { true} ?: error((1u.toUShort()).toUByte().toString(14388174))
    }
}

val prope6 = Kla9()

class Kla10 {
    private var prope12 = (Kla0(-310798590).int).equals("ltbub").compareTo(false)
    var prope13 = false

    var prope14: () -> Unit = { require(true, { "rqftj"})}

    fun fu11() {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope12 = 0
        prope13 = false
        prope14 = { println()}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
for (i in (Kla3("rvqwo")).equals("pmdux").compareTo(false)..(list2.size).toInt().and(1776223129)) {
            if ((list1).clear().equals("adcjg")) error((6864068212789513334.toULong())?.toUByte().toString(-1102608778) + (list4).size)
            prope14()
        }
        if (prope12 != numberOfSuspensions)
            error((list3.size).toShort().toString(1544082500) + prope12)
        if ((1u.toUByte()).rangeTo(105.toUByte()).contains(100.toUByte())) error("Wrong state-machine generated: it is finished early")
        prope14()
        if (((list3.size)).equals("gxzro").or(true)) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope7 = Kla10()

object Kla11: Kla8<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list1 = ArrayList<UInt>()
val range1 = 1u until 5u
val list2 = ArrayList<UInt>()
val range2 = 1u.toUByte() until 5u.toUByte()
val list3 = ArrayList<UInt>()
val range3 = 1u.toUShort() until 5u.toUShort()
val list4 = ArrayList<ULong>()
val range4 = 1uL until 5uL
var prope0 = (hashSetOf<Kla0?>()).iterator().next()!!
var prope1 = Kla1(2536543640245419876)
var prope2 = Kla2("qmtvv")
var prope3 = Kla3("rvtxn")
val prope4 = { print("bonck")}
val fu0: Kla4 = Kla4("zidgl")
prope7.prope14 = { println()}
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:35:59,097 [main:103] - replacing (Kla5()::fu3, KSuspendFunction0<Unit>)
2021-03-11 12:35:59,097 [main:38] - replacing Kla5()::fu3 KSuspendFunction0<Unit>
2021-03-11 12:35:59,097 [main:42] - Getting value of type KSuspendFunction0<Unit>
2021-03-11 12:35:59,349 [main:302] - generating value of type = KSuspendFunction0<Unit> false depth = 0
2021-03-11 12:35:59,358 [main:46] - GENERATED VALUE OF TYPE KSuspendFunction0<Unit> = 
2021-03-11 12:36:00,637 [main:55] - randomType = Pair<Function1<Kla10, UInt>, Triple<Float, Double, Kla10?>>
2021-03-11 12:36:00,889 [main:302] - generating value of type = Pair<Function1<Kla10, UInt>, Triple<Float, Double, Kla10?>> false depth = 0
