2021-03-12 06:18:50,703 [main:66] - Compilation checking started
2021-03-12 06:18:52,132 [main:50] - replacing x : A.Companion.Season Season
2021-03-12 06:18:52,132 [main:54] - Getting value of type Season
2021-03-12 06:18:52,329 [main:302] - generating value of type = Season false depth = 0
2021-03-12 06:18:52,331 [main:112] - generating klass Season text = enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
2021-03-12 06:18:52,332 [main:58] - GENERATED VALUE OF TYPE Season = 
2021-03-12 06:18:52,335 [main:67] - randomType = String
2021-03-12 06:18:52,486 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:18:53,311 [main:112] - generating klass A text = class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}
2021-03-12 06:18:53,312 [main:112] - generating klass Companion text = companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
2021-03-12 06:18:53,313 [main:112] - generating klass Season text = enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
2021-03-12 06:18:53,313 [main:112] - generating klass WINTER text = WINTER,
2021-03-12 06:18:53,313 [main:112] - generating klass SPRING text = SPRING,
2021-03-12 06:18:53,313 [main:112] - generating klass SUMMER text = SUMMER,
2021-03-12 06:18:53,314 [main:112] - generating klass AUTUMN text = AUTUMN
2021-03-12 06:18:53,595 [main:43] - GENERATING CALL OF fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}
2021-03-12 06:18:53,599 [main:61] - WITHOUT TYPE PARAMS = fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}
2021-03-12 06:18:53,913 [main:302] - generating value of type = Season false depth = 1
2021-03-12 06:18:53,913 [main:112] - generating klass Season text = enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
2021-03-12 06:18:54,026 [main:45] - Trying to change 22 nodes
2021-03-12 06:18:54,029 [main:53] - replacing (A.Companion.Season.AUTUMN, Season)
2021-03-12 06:18:54,029 [main:50] - replacing A.Companion.Season.AUTUMN Season
2021-03-12 06:18:54,029 [main:54] - Getting value of type Season
2021-03-12 06:18:54,144 [main:302] - generating value of type = Season false depth = 0
2021-03-12 06:18:54,144 [main:112] - generating klass Season text = enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
2021-03-12 06:18:54,144 [main:58] - GENERATED VALUE OF TYPE Season = 
2021-03-12 06:18:54,292 [main:67] - randomType = ULong
2021-03-12 06:18:54,429 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 06:18:54,563 [main:58] - Cant find and generate replacement for A.Companion.Season.AUTUMN type Season
2021-03-12 06:18:54,565 [main:53] - replacing (A.Companion.Season.SPRING, Season)
2021-03-12 06:18:54,565 [main:50] - replacing A.Companion.Season.SPRING Season
2021-03-12 06:18:54,565 [main:54] - Getting value of type Season
2021-03-12 06:18:54,709 [main:302] - generating value of type = Season false depth = 0
2021-03-12 06:18:54,710 [main:112] - generating klass Season text = enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
2021-03-12 06:18:54,710 [main:58] - GENERATED VALUE OF TYPE Season = 
2021-03-12 06:18:54,831 [main:67] - randomType = UByte
2021-03-12 06:18:54,966 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:18:55,048 [main:106] - GETTING Season from Season
2021-03-12 06:18:55,087 [main:61] - replacement of A.Companion.Season.SPRING of type Season is x
2021-03-12 06:18:55,186 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 06:18:55,186 [main:66] - Compilation checking started
2021-03-12 06:18:55,678 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        x -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}
2021-03-12 06:18:55,678 [main:53] - replacing (A.Companion.Season.SPRING, Season)
2021-03-12 06:18:55,678 [main:50] - replacing A.Companion.Season.SPRING Season
2021-03-12 06:18:55,678 [main:54] - Getting value of type Season
2021-03-12 06:18:55,778 [main:302] - generating value of type = Season false depth = 0
2021-03-12 06:18:55,779 [main:112] - generating klass Season text = enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
2021-03-12 06:18:55,779 [main:58] - GENERATED VALUE OF TYPE Season = 
2021-03-12 06:18:55,886 [main:67] - randomType = Int
2021-03-12 06:18:55,985 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:18:56,049 [main:58] - Cant find and generate replacement for A.Companion.Season.SPRING type Season
2021-03-12 06:18:56,049 [main:53] - replacing (A.Companion.Season.SUMMER, Season)
2021-03-12 06:18:56,050 [main:50] - replacing A.Companion.Season.SUMMER Season
2021-03-12 06:18:56,050 [main:54] - Getting value of type Season
2021-03-12 06:18:56,144 [main:302] - generating value of type = Season false depth = 0
2021-03-12 06:18:56,145 [main:112] - generating klass Season text = enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
2021-03-12 06:18:56,145 [main:58] - GENERATED VALUE OF TYPE Season = 
2021-03-12 06:18:56,251 [main:67] - randomType = A
2021-03-12 06:18:56,385 [main:302] - generating value of type = A false depth = 0
2021-03-12 06:18:56,386 [main:112] - generating klass A text = class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}
2021-03-12 06:18:56,393 [main:58] - Cant find and generate replacement for A.Companion.Season.SUMMER type Season
2021-03-12 06:18:56,395 [main:53] - replacing ("summer", String)
2021-03-12 06:18:56,395 [main:50] - replacing "summer" String
2021-03-12 06:18:56,395 [main:54] - Getting value of type String
2021-03-12 06:18:56,512 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:18:56,512 [main:58] - GENERATED VALUE OF TYPE String = "fodta"
2021-03-12 06:18:56,512 [main:61] - GENERATED IS CALL =false
2021-03-12 06:18:57,106 [main:67] - randomType = Map<ArrayList<Float>, String?>?
2021-03-12 06:18:57,121 [main:106] - GETTING String from Season
2021-03-12 06:18:57,161 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@237e162a]]
2021-03-12 06:18:57,161 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@237e162a]
2021-03-12 06:18:57,269 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:18:57,366 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:18:57,459 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:18:57,460 [main:117] - GENERATED CALL = (x).name.replaceAfterLast('', "reptl", "mgnjv")
2021-03-12 06:18:57,461 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]]
2021-03-12 06:18:57,461 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]
2021-03-12 06:18:57,462 [main:117] - GENERATED CALL = (x).name.reversed()
2021-03-12 06:18:57,463 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c4988e1]]
2021-03-12 06:18:57,464 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c4988e1]
2021-03-12 06:18:57,563 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:18:57,564 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:18:57,567 [main:117] - GENERATED CALL = (x).name.filterNot({a: Char -> false})
2021-03-12 06:18:57,567 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ba3fd40]]
2021-03-12 06:18:57,567 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ba3fd40]
2021-03-12 06:18:57,712 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:18:57,713 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:18:57,714 [main:117] - GENERATED CALL = (x).name.filter({a: Char -> false})
2021-03-12 06:18:57,714 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d9e8e4]]
2021-03-12 06:18:57,715 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d9e8e4]
2021-03-12 06:18:57,715 [main:117] - GENERATED CALL = (x).name.trimIndent()
2021-03-12 06:18:57,715 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@85845d6]]
2021-03-12 06:18:57,715 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@85845d6]
2021-03-12 06:18:57,716 [main:117] - GENERATED CALL = (x).name.decapitalize()
2021-03-12 06:18:57,716 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dd2a02e]]
2021-03-12 06:18:57,716 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dd2a02e]
2021-03-12 06:18:57,717 [main:117] - GENERATED CALL = (x).name.capitalize()
2021-03-12 06:18:57,717 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a3cb49]]
2021-03-12 06:18:57,717 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a3cb49]
2021-03-12 06:18:57,811 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:18:57,812 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:18:57,813 [main:117] - GENERATED CALL = (x).name.dropLastWhile({a: Char -> false})
2021-03-12 06:18:57,813 [main:113] - Case = [public abstract operator fun compareTo(other: A.Companion.Season): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@58c7c705], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]]
2021-03-12 06:18:57,814 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: A.Companion.Season): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@58c7c705]
2021-03-12 06:18:57,814 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]
2021-03-12 06:18:57,901 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:18:57,902 [main:117] - GENERATED CALL = (x).compareTo(x).toString(-522672069)
2021-03-12 06:18:57,903 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cb7e27c]]
2021-03-12 06:18:57,903 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cb7e27c]
2021-03-12 06:18:58,022 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 06:18:58,023 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:18:58,024 [main:117] - GENERATED CALL = (x).name.filterIndexed({a: Int, b: Char -> false})
2021-03-12 06:18:58,024 [main:61] - replacement of "summer" of type String is (x).name.capitalize()
2021-03-12 06:18:58,124 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:18:58,125 [main:66] - Compilation checking started
2021-03-12 06:18:58,649 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        x -> "spring"
        A.Companion.Season.SUMMER -> (x).name.capitalize()
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}
2021-03-12 06:18:58,650 [main:53] - replacing ("winter", String)
2021-03-12 06:18:58,651 [main:50] - replacing "winter" String
2021-03-12 06:18:58,651 [main:54] - Getting value of type String
2021-03-12 06:18:58,755 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:18:58,756 [main:58] - GENERATED VALUE OF TYPE String = "shwtd"
2021-03-12 06:18:58,756 [main:61] - GENERATED IS CALL =false
2021-03-12 06:18:58,984 [main:67] - randomType = Set<A>
2021-03-12 06:18:58,985 [main:61] - replacement of "winter" of type String is "shwtd"
2021-03-12 06:18:59,081 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 06:18:59,082 [main:66] - Compilation checking started
2021-03-12 06:18:59,529 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        x -> "spring"
        A.Companion.Season.SUMMER -> (x).name.capitalize()
        else -> "other"
    }
}

fun box() : String {
    assertEquals("shwtd", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}
2021-03-12 06:18:59,530 [main:53] - replacing ("winter", String)
2021-03-12 06:18:59,530 [main:50] - replacing "winter" String
2021-03-12 06:18:59,530 [main:54] - Getting value of type String
2021-03-12 06:18:59,627 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:18:59,627 [main:58] - GENERATED VALUE OF TYPE String = "mihcs"
2021-03-12 06:18:59,628 [main:61] - GENERATED IS CALL =false
2021-03-12 06:18:59,927 [main:67] - randomType = Sequence<A>
2021-03-12 06:18:59,929 [main:106] - GETTING String from Season
2021-03-12 06:18:59,965 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]]
2021-03-12 06:18:59,965 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]
2021-03-12 06:18:59,965 [main:117] - GENERATED CALL = (x).name.reversed()
2021-03-12 06:18:59,966 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@237e162a]]
2021-03-12 06:18:59,966 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@237e162a]
2021-03-12 06:19:00,053 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:00,140 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:00,225 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:00,226 [main:117] - GENERATED CALL = (x).name.replaceAfterLast('䭴', "wuvqz", "wspqa")
2021-03-12 06:19:00,226 [main:113] - Case = [public abstract operator fun compareTo(other: A.Companion.Season): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@54de1613], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]]
2021-03-12 06:19:00,226 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: A.Companion.Season): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@54de1613]
2021-03-12 06:19:00,309 [main:302] - generating value of type = Season false depth = 0
2021-03-12 06:19:00,309 [main:112] - generating klass Season text = enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
2021-03-12 06:19:00,309 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun compareTo(other: A.Companion.Season): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@54de1613]
2021-03-12 06:19:00,309 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58acd3f1]]
2021-03-12 06:19:00,309 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58acd3f1]
2021-03-12 06:19:00,410 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:19:00,410 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:19:00,412 [main:117] - GENERATED CALL = (x).name.dropWhile({a: Char -> true})
2021-03-12 06:19:00,412 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f9c5c88]]
2021-03-12 06:19:00,412 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f9c5c88]
2021-03-12 06:19:00,511 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:00,609 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:00,695 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:19:00,794 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:19:00,797 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:19:01,003 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:19:01,004 [main:95] - GENERATED = StringBuilder("lbsgl")
2021-03-12 06:19:01,004 [main:117] - GENERATED CALL = (x).name.replaceRange(1135762838, -2015522130, StringBuilder("lbsgl"))
2021-03-12 06:19:01,004 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2864a84]]
2021-03-12 06:19:01,005 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2864a84]
2021-03-12 06:19:01,088 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:01,170 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:01,252 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:01,253 [main:117] - GENERATED CALL = (x).name.replaceBefore('', "ourdf", "fzkcw")
2021-03-12 06:19:01,253 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d631a58]]
2021-03-12 06:19:01,254 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d631a58]
2021-03-12 06:19:01,337 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:01,460 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:01,554 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:01,555 [main:117] - GENERATED CALL = (x).name.replaceBeforeLast('', "hxabe", "jiway")
2021-03-12 06:19:01,555 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]]
2021-03-12 06:19:01,555 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]
2021-03-12 06:19:01,637 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:01,638 [main:117] - GENERATED CALL = (x).name.drop(136816676)
2021-03-12 06:19:01,638 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6434d8d9]]
2021-03-12 06:19:01,638 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6434d8d9]
2021-03-12 06:19:01,721 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:01,811 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:01,812 [main:117] - GENERATED CALL = (x).name.padEnd(271792360, '銊')
2021-03-12 06:19:01,812 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c4988e1]]
2021-03-12 06:19:01,812 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c4988e1]
2021-03-12 06:19:01,919 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:19:01,920 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:19:01,921 [main:117] - GENERATED CALL = (x).name.filterNot({a: Char -> true})
2021-03-12 06:19:01,921 [main:61] - replacement of "winter" of type String is (x).name.padEnd(271792360, '銊')
2021-03-12 06:19:02,005 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:19:02,005 [main:66] - Compilation checking started
2021-03-12 06:19:02,407 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> (x).name.padEnd(271792360, '銊')
        x -> "spring"
        A.Companion.Season.SUMMER -> (x).name.capitalize()
        else -> "other"
    }
}

fun box() : String {
    assertEquals("shwtd", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}


2021-03-12 06:19:02,409 [main:53] - replacing (when (x) {
        A.Companion.Season.WINTER -> (x).name.padEnd(271792360, '銊')
        x -> "spring"
        A.Companion.Season.SUMMER -> (x).name.capitalize()
        else -> "other"
    }, String)
2021-03-12 06:19:02,409 [main:50] - replacing when (x) {
        A.Companion.Season.WINTER -> (x).name.padEnd(271792360, '銊')
        x -> "spring"
        A.Companion.Season.SUMMER -> (x).name.capitalize()
        else -> "other"
    } String
2021-03-12 06:19:02,409 [main:54] - Getting value of type String
2021-03-12 06:19:02,494 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:02,495 [main:58] - GENERATED VALUE OF TYPE String = "tpqun"
2021-03-12 06:19:02,495 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:02,698 [main:67] - randomType = Char?
2021-03-12 06:19:02,793 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:02,849 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3a54a40f]
2021-03-12 06:19:02,850 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@979d6a8]
2021-03-12 06:19:02,939 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:02,940 [main:78] - Generated call from random type = ('⼗')?.toByte().toString(-1693485921)
2021-03-12 06:19:02,942 [main:106] - GETTING String from Season
2021-03-12 06:19:02,973 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14901bf4]]
2021-03-12 06:19:02,973 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14901bf4]
2021-03-12 06:19:03,058 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:03,144 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:03,145 [main:117] - GENERATED CALL = (x).name.replaceIndentByMargin("bedfb", "duqke")
2021-03-12 06:19:03,145 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@237e162a]]
2021-03-12 06:19:03,145 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@237e162a]
2021-03-12 06:19:03,229 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:03,329 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:03,424 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:03,425 [main:117] - GENERATED CALL = (x).name.replaceAfterLast('鳗', "qslas", "cbgvz")
2021-03-12 06:19:03,425 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f9c5c88]]
2021-03-12 06:19:03,425 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f9c5c88]
2021-03-12 06:19:03,508 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:03,591 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:03,679 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:19:03,686 [main:117] - GENERATED CALL = (x).name.replaceRange(-1758188847, 2000311137, "wwvck")
2021-03-12 06:19:03,686 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]]
2021-03-12 06:19:03,686 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]
2021-03-12 06:19:03,793 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:03,793 [main:117] - GENERATED CALL = (x).name.drop(-1101591345)
2021-03-12 06:19:03,794 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6434d8d9]]
2021-03-12 06:19:03,794 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6434d8d9]
2021-03-12 06:19:03,890 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:03,981 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:03,982 [main:117] - GENERATED CALL = (x).name.padEnd(874309649, '뽗')
2021-03-12 06:19:03,982 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36f5aa2a]]
2021-03-12 06:19:03,982 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36f5aa2a]
2021-03-12 06:19:04,069 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:04,070 [main:117] - GENERATED CALL = (x).name.trimMargin("lrcli")
2021-03-12 06:19:04,071 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69d73398]]
2021-03-12 06:19:04,071 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69d73398]
2021-03-12 06:19:04,071 [main:117] - GENERATED CALL = (x).name.trimStart()
2021-03-12 06:19:04,071 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1668f4]]
2021-03-12 06:19:04,071 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1668f4]
2021-03-12 06:19:04,163 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:04,270 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:04,272 [main:117] - GENERATED CALL = (x).name.substringAfter('쩶', "yfrmx")
2021-03-12 06:19:04,272 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a3cb49]]
2021-03-12 06:19:04,272 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a3cb49]
2021-03-12 06:19:04,392 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:19:04,392 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:19:04,393 [main:117] - GENERATED CALL = (x).name.dropLastWhile({a: Char -> false})
2021-03-12 06:19:04,393 [main:113] - Case = [public final val name: kotlin.String defined in A.Companion.Season[DeserializedPropertyDescriptor@6811a128], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31bd2630]]
2021-03-12 06:19:04,393 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31bd2630]
2021-03-12 06:19:04,483 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:04,485 [main:117] - GENERATED CALL = (x).name.concat("kacza")
2021-03-12 06:19:04,485 [main:61] - replacement of when (x) {
        A.Companion.Season.WINTER -> (x).name.padEnd(271792360, '銊')
        x -> "spring"
        A.Companion.Season.SUMMER -> (x).name.capitalize()
        else -> "other"
    } of type String is (x).name.replaceIndentByMargin("bedfb", "duqke")
2021-03-12 06:19:04,567 [main:33] - Trying to replace Element(WHEN) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:19:04,567 [main:66] - Compilation checking started
2021-03-12 06:19:04,894 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return (x).name.replaceIndentByMargin("bedfb", "duqke")
}

fun box() : String {
    assertEquals("shwtd", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}


2021-03-12 06:19:04,895 [main:53] - replacing (foo(A.Companion.Season.AUTUMN), String)
2021-03-12 06:19:04,895 [main:50] - replacing foo(A.Companion.Season.AUTUMN) String
2021-03-12 06:19:04,895 [main:54] - Getting value of type String
2021-03-12 06:19:04,984 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:04,984 [main:58] - GENERATED VALUE OF TYPE String = "ugkyl"
2021-03-12 06:19:04,984 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:05,065 [main:67] - randomType = A
2021-03-12 06:19:05,142 [main:302] - generating value of type = A false depth = 0
2021-03-12 06:19:05,142 [main:112] - generating klass A text = class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}
2021-03-12 06:19:05,147 [main:61] - replacement of foo(A.Companion.Season.AUTUMN) of type String is "ugkyl"
2021-03-12 06:19:05,225 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:19:05,226 [main:66] - Compilation checking started
2021-03-12 06:19:05,593 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return (x).name.replaceIndentByMargin("bedfb", "duqke")
}

fun box() : String {
    assertEquals("shwtd", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", "ugkyl")
    return "OK"
}


2021-03-12 06:19:05,594 [main:53] - replacing ("summer", String)
2021-03-12 06:19:05,594 [main:50] - replacing "summer" String
2021-03-12 06:19:05,594 [main:54] - Getting value of type String
2021-03-12 06:19:05,668 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:05,669 [main:58] - GENERATED VALUE OF TYPE String = "pdopd"
2021-03-12 06:19:05,669 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:05,760 [main:67] - randomType = UShort
2021-03-12 06:19:05,839 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:19:05,896 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5e799d06]
2021-03-12 06:19:05,896 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ac7fab]
2021-03-12 06:19:05,979 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:05,979 [main:78] - Generated call from random type = (21686.toUShort()).toShort().toString(1178304862)
2021-03-12 06:19:05,979 [main:61] - replacement of "summer" of type String is (21686.toUShort()).toShort().toString(1178304862)
2021-03-12 06:19:06,055 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:19:06,056 [main:66] - Compilation checking started
2021-03-12 06:19:06,515 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return (x).name.replaceIndentByMargin("bedfb", "duqke")
}

fun box() : String {
    assertEquals("shwtd", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals((21686.toUShort()).toShort().toString(1178304862), foo(A.Companion.Season.SUMMER))
    assertEquals("other", "ugkyl")
    return "OK"
}


2021-03-12 06:19:06,516 [main:53] - replacing ("winter", String)
2021-03-12 06:19:06,516 [main:50] - replacing "winter" String
2021-03-12 06:19:06,516 [main:54] - Getting value of type String
2021-03-12 06:19:06,612 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:06,613 [main:58] - GENERATED VALUE OF TYPE String = "onquj"
2021-03-12 06:19:06,613 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:06,728 [main:67] - randomType = A
2021-03-12 06:19:06,835 [main:302] - generating value of type = A false depth = 0
2021-03-12 06:19:06,835 [main:112] - generating klass A text = class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}
2021-03-12 06:19:06,843 [main:61] - replacement of "winter" of type String is "onquj"
2021-03-12 06:19:06,944 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 06:19:06,945 [main:53] - replacing ("spring", String)
2021-03-12 06:19:06,946 [main:50] - replacing "spring" String
2021-03-12 06:19:06,946 [main:54] - Getting value of type String
2021-03-12 06:19:07,046 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:07,046 [main:58] - GENERATED VALUE OF TYPE String = "zzerk"
2021-03-12 06:19:07,046 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:07,134 [main:67] - randomType = Byte
2021-03-12 06:19:07,223 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:19:07,283 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@20a7e171]
2021-03-12 06:19:07,284 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ac7fab]
2021-03-12 06:19:07,369 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:07,370 [main:78] - Generated call from random type = (-45).toShort().toString(258540048)
2021-03-12 06:19:07,370 [main:61] - replacement of "spring" of type String is "zzerk"
2021-03-12 06:19:07,459 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 06:19:07,460 [main:66] - Compilation checking started
2021-03-12 06:19:07,862 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return (x).name.replaceIndentByMargin("bedfb", "duqke")
}

fun box() : String {
    assertEquals("shwtd", foo(A.Companion.Season.WINTER))
    assertEquals("zzerk", foo(A.Companion.Season.SPRING))
    assertEquals((21686.toUShort()).toShort().toString(1178304862), foo(A.Companion.Season.SUMMER))
    assertEquals("other", "ugkyl")
    return "OK"
}


2021-03-12 06:19:07,863 [main:53] - replacing ("summer", String)
2021-03-12 06:19:07,863 [main:50] - replacing "summer" String
2021-03-12 06:19:07,863 [main:54] - Getting value of type String
2021-03-12 06:19:07,946 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:07,947 [main:58] - GENERATED VALUE OF TYPE String = "vnoaj"
2021-03-12 06:19:07,947 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:08,032 [main:67] - randomType = A
2021-03-12 06:19:08,111 [main:302] - generating value of type = A false depth = 0
2021-03-12 06:19:08,111 [main:112] - generating klass A text = class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}
2021-03-12 06:19:08,116 [main:61] - replacement of "summer" of type String is "vnoaj"
2021-03-12 06:19:08,193 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 06:19:08,193 [main:53] - replacing ("spring", String)
2021-03-12 06:19:08,193 [main:50] - replacing "spring" String
2021-03-12 06:19:08,193 [main:54] - Getting value of type String
2021-03-12 06:19:08,271 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:08,271 [main:58] - GENERATED VALUE OF TYPE String = "apotb"
2021-03-12 06:19:08,272 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:08,355 [main:67] - randomType = UByte
2021-03-12 06:19:08,434 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:19:08,472 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4daf0168]
2021-03-12 06:19:08,472 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e5dea56]
2021-03-12 06:19:08,552 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:08,552 [main:78] - Generated call from random type = (98.toUByte()).toLong().toString(1909426647)
2021-03-12 06:19:08,552 [main:61] - replacement of "spring" of type String is (98.toUByte()).toLong().toString(1909426647)
2021-03-12 06:19:08,663 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:19:08,664 [main:53] - replacing (foo(A.Companion.Season.SPRING), String)
2021-03-12 06:19:08,664 [main:50] - replacing foo(A.Companion.Season.SPRING) String
2021-03-12 06:19:08,664 [main:54] - Getting value of type String
2021-03-12 06:19:08,768 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:08,769 [main:58] - GENERATED VALUE OF TYPE String = "unxuf"
2021-03-12 06:19:08,769 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:08,850 [main:67] - randomType = A
2021-03-12 06:19:08,928 [main:302] - generating value of type = A false depth = 0
2021-03-12 06:19:08,928 [main:112] - generating klass A text = class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}
2021-03-12 06:19:08,932 [main:61] - replacement of foo(A.Companion.Season.SPRING) of type String is "unxuf"
2021-03-12 06:19:09,012 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:19:09,013 [main:66] - Compilation checking started
2021-03-12 06:19:09,320 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return (x).name.replaceIndentByMargin("bedfb", "duqke")
}

fun box() : String {
    assertEquals("shwtd", foo(A.Companion.Season.WINTER))
    assertEquals("zzerk", "unxuf")
    assertEquals((21686.toUShort()).toShort().toString(1178304862), foo(A.Companion.Season.SUMMER))
    assertEquals("other", "ugkyl")
    return "OK"
}


2021-03-12 06:19:09,405 [main:119] - TRYING TO REPLACE CONSTANT 21686
2021-03-12 06:19:09,502 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 06:19:09,503 [main:66] - Compilation checking started
2021-03-12 06:19:09,810 [main:53] - Result = true
Text:
import kotlin.test.assertEquals

class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return (x).name.replaceIndentByMargin("bedfb", "duqke")
}

fun box() : String {
    assertEquals("shwtd", foo(A.Companion.Season.WINTER))
    assertEquals("zzerk", "unxuf")
    assertEquals((1178304862.toUShort()).toShort().toString(1178304862), foo(A.Companion.Season.SUMMER))
    assertEquals("other", "ugkyl")
    return "OK"
}


2021-03-12 06:19:09,810 [main:119] - TRYING TO REPLACE CONSTANT 1178304862
2021-03-12 06:19:09,893 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 06:19:09,893 [main:66] - Compilation checking started
2021-03-12 06:19:10,208 [main:41] - AFTER TRY 0 res = import kotlin.test.assertEquals

class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}
2021-03-12 06:19:10,359 [main:112] - generating klass A text = class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}
2021-03-12 06:19:10,360 [main:112] - generating klass Companion text = companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
2021-03-12 06:19:10,360 [main:112] - generating klass Season text = enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
2021-03-12 06:19:10,360 [main:112] - generating klass WINTER text = WINTER,
2021-03-12 06:19:10,360 [main:112] - generating klass SPRING text = SPRING,
2021-03-12 06:19:10,360 [main:112] - generating klass SUMMER text = SUMMER,
2021-03-12 06:19:10,360 [main:112] - generating klass AUTUMN text = AUTUMN
2021-03-12 06:19:10,528 [main:43] - GENERATING CALL OF fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}
2021-03-12 06:19:10,529 [main:61] - WITHOUT TYPE PARAMS = fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}
2021-03-12 06:19:10,686 [main:302] - generating value of type = Season false depth = 1
2021-03-12 06:19:10,686 [main:112] - generating klass Season text = enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
2021-03-12 06:19:10,763 [main:43] - Try №0
2021-03-12 06:19:12,046 [main:69] - Trying to insert fun box768(): String {
    return fu1()
}
2021-03-12 06:19:12,151 [main:66] - Compilation checking started
2021-03-12 06:19:12,727 [main:103] - Trying to change 14 nodes
2021-03-12 06:19:12,727 [main:107] - replacing (prope0, String)
2021-03-12 06:19:12,727 [main:50] - replacing prope0 String
2021-03-12 06:19:12,728 [main:54] - Getting value of type String
2021-03-12 06:19:12,822 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:12,822 [main:58] - GENERATED VALUE OF TYPE String = "heohw"
2021-03-12 06:19:12,823 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:12,922 [main:67] - randomType = UInt
2021-03-12 06:19:13,011 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 06:19:13,055 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@49ac5f4]
2021-03-12 06:19:13,152 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:19:13,153 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]
2021-03-12 06:19:13,248 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:13,249 [main:78] - Generated call from random type = (1147020126.toUInt()).compareTo(5.toUByte()).toString(-1637360142)
2021-03-12 06:19:13,249 [main:114] - replacement of prope0 of type String is (1147020126.toUInt()).compareTo(5.toUByte()).toString(-1637360142)
2021-03-12 06:19:13,399 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:19:13,400 [main:66] - Compilation checking started
2021-03-12 06:19:13,694 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*


class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "FAIL"
    fu0 {
        (1147020126.toUInt()).compareTo(5.toUByte()).toString(-1637360142) = Ty0
    }
    return prope0
}

fun box768(): String {
    return fu1()
}


2021-03-12 06:19:13,694 [main:107] - replacing ({
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }, [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit>)
2021-03-12 06:19:13,695 [main:50] - replacing {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    } [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit>
2021-03-12 06:19:13,695 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit>
2021-03-12 06:19:13,811 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 0
2021-03-12 06:19:13,812 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:19:13,915 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:19:13,917 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:19:14,113 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:19:14,114 [main:95] - GENERATED = print("fjfdb")
2021-03-12 06:19:14,114 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> = { print("fjfdb")}
2021-03-12 06:19:14,114 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:14,641 [main:67] - randomType = HashMap<MutableMap<Long, Int>, Long>
2021-03-12 06:19:14,734 [main:302] - generating value of type = HashMap<MutableMap<Long, Int>, Long> false depth = 0
2021-03-12 06:19:14,841 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<MutableMap<Long, Int>, Long>): HashMap<MutableMap<Long, Int>, Long> = TODO()
2021-03-12 06:19:14,843 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<MutableMap<Long, Int>, Long>): HashMap<MutableMap<Long, Int>, Long> = TODO()
2021-03-12 06:19:15,006 [main:302] - generating value of type = Pair<MutableMap<Long, Int>, Long> false depth = 3
2021-03-12 06:19:15,118 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: MutableMap<Long, Int>, second: Long): Pair<MutableMap<Long, Int>, Long> = TODO()
2021-03-12 06:19:15,120 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: MutableMap<Long, Int>, second: Long): Pair<MutableMap<Long, Int>, Long> = TODO()
2021-03-12 06:19:15,215 [main:302] - generating value of type = MutableMap<Long, Int> false depth = 6
2021-03-12 06:19:15,307 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(pairs: Pair<Long, Int>): MutableMap<Long, Int> = TODO()
2021-03-12 06:19:15,309 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(pairs: Pair<Long, Int>): MutableMap<Long, Int> = TODO()
2021-03-12 06:19:15,402 [main:302] - generating value of type = Pair<Long, Int> false depth = 9
2021-03-12 06:19:15,496 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long, second: Int): Pair<Long, Int> = TODO()
2021-03-12 06:19:15,497 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long, second: Int): Pair<Long, Int> = TODO()
2021-03-12 06:19:15,611 [main:302] - generating value of type = Long true depth = 12
2021-03-12 06:19:15,612 [main:302] - generating value of type = Int true depth = 12
2021-03-12 06:19:15,613 [main:95] - GENERATED = Pair<Long, Int>(-8102156983846703963, 1782986755)
2021-03-12 06:19:15,613 [main:95] - GENERATED = mutableMapOf<Long, Int>(Pair<Long, Int>(-8102156983846703963, 1782986755))
2021-03-12 06:19:15,614 [main:302] - generating value of type = Long true depth = 6
2021-03-12 06:19:15,614 [main:95] - GENERATED = Pair<MutableMap<Long, Int>, Long>(mutableMapOf<Long, Int>(Pair<Long, Int>(-8102156983846703963, 1782986755)), -8740742096243529057)
2021-03-12 06:19:15,615 [main:95] - GENERATED = hashMapOf<MutableMap<Long, Int>, Long>(Pair<MutableMap<Long, Int>, Long>(mutableMapOf<Long, Int>(Pair<Long, Int>(-8102156983846703963, 1782986755)), -8740742096243529057))
2021-03-12 06:19:15,829 [main:114] - replacement of {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    } of type [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> is { print("fjfdb")}
2021-03-12 06:19:15,938 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:19:15,938 [main:66] - Compilation checking started
2021-03-12 06:19:16,174 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*


class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract { print("fjfdb")}
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "FAIL"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return fu1()
}


2021-03-12 06:19:16,175 [main:107] - replacing ("FAIL", String)
2021-03-12 06:19:16,175 [main:50] - replacing "FAIL" String
2021-03-12 06:19:16,175 [main:54] - Getting value of type String
2021-03-12 06:19:16,262 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:16,262 [main:58] - GENERATED VALUE OF TYPE String = "rhdwh"
2021-03-12 06:19:16,263 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:16,938 [main:67] - randomType = Function2<A, Map<Float, ULong>, List<A>>
2021-03-12 06:19:16,938 [main:114] - replacement of "FAIL" of type String is "rhdwh"
2021-03-12 06:19:17,033 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 06:19:17,033 [main:66] - Compilation checking started
2021-03-12 06:19:17,358 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*


class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return fu1()
}


2021-03-12 06:19:17,359 [main:107] - replacing (InvocationKind.EXACTLY_ONCE, InvocationKind)
2021-03-12 06:19:17,359 [main:50] - replacing InvocationKind.EXACTLY_ONCE InvocationKind
2021-03-12 06:19:17,359 [main:54] - Getting value of type InvocationKind
2021-03-12 06:19:17,460 [main:302] - generating value of type = InvocationKind false depth = 0
2021-03-12 06:19:17,463 [main:58] - GENERATED VALUE OF TYPE InvocationKind = kotlin.contracts.InvocationKind.UNKNOWN
2021-03-12 06:19:17,463 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:17,610 [main:67] - randomType = UShort
2021-03-12 06:19:17,703 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:19:17,750 [main:114] - replacement of InvocationKind.EXACTLY_ONCE of type InvocationKind is kotlin.contracts.InvocationKind.UNKNOWN
2021-03-12 06:19:17,840 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:19:17,841 [main:66] - Compilation checking started
2021-03-12 06:19:18,135 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*


class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.UNKNOWN)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return fu1()
}


2021-03-12 06:19:18,136 [main:107] - replacing (InvocationKind.EXACTLY_ONCE, InvocationKind)
2021-03-12 06:19:18,136 [main:50] - replacing InvocationKind.EXACTLY_ONCE InvocationKind
2021-03-12 06:19:18,136 [main:54] - Getting value of type InvocationKind
2021-03-12 06:19:18,270 [main:302] - generating value of type = InvocationKind false depth = 0
2021-03-12 06:19:18,271 [main:58] - GENERATED VALUE OF TYPE InvocationKind = kotlin.contracts.InvocationKind.EXACTLY_ONCE
2021-03-12 06:19:18,272 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:18,376 [main:67] - randomType = A
2021-03-12 06:19:18,483 [main:302] - generating value of type = A false depth = 0
2021-03-12 06:19:18,484 [main:112] - generating klass A text = class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}
2021-03-12 06:19:18,491 [main:114] - replacement of InvocationKind.EXACTLY_ONCE of type InvocationKind is kotlin.contracts.InvocationKind.EXACTLY_ONCE
2021-03-12 06:19:18,587 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:19:18,587 [main:66] - Compilation checking started
2021-03-12 06:19:18,918 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*


class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return fu1()
}


2021-03-12 06:19:18,919 [main:107] - replacing (fu1(), String)
2021-03-12 06:19:18,919 [main:50] - replacing fu1() String
2021-03-12 06:19:18,919 [main:54] - Getting value of type String
2021-03-12 06:19:19,005 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:19,005 [main:58] - GENERATED VALUE OF TYPE String = "qygvt"
2021-03-12 06:19:19,005 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:19,098 [main:67] - randomType = UInt
2021-03-12 06:19:19,189 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 06:19:19,235 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26353e78]
2021-03-12 06:19:19,320 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:19,321 [main:78] - Generated call from random type = (436547302.toUInt()).toString(1400319179)
2021-03-12 06:19:19,321 [main:114] - replacement of fu1() of type String is "qygvt"
2021-03-12 06:19:19,431 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:19:19,432 [main:66] - Compilation checking started
2021-03-12 06:19:19,785 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*


class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}


2021-03-12 06:19:19,786 [main:107] - replacing ({
        prope0 = Ty0
    }, Function0<Unit>)
2021-03-12 06:19:19,786 [main:50] - replacing {
        prope0 = Ty0
    } Function0<Unit>
2021-03-12 06:19:19,786 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:19:19,878 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:19:19,879 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:19:19,977 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:19:19,978 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:19:20,158 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:19:20,158 [main:95] - GENERATED = require(true)
2021-03-12 06:19:20,159 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-12 06:19:20,159 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:20,759 [main:67] - randomType = LinkedHashSet<Triple<Double, Boolean, ULong?>>
2021-03-12 06:19:20,847 [main:302] - generating value of type = LinkedHashSet<Triple<Double, Boolean, ULong?>> false depth = 0
2021-03-12 06:19:20,955 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Triple<Double, Boolean, ULong?>> = TODO()
2021-03-12 06:19:20,957 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Triple<Double, Boolean, ULong?>> = TODO()
2021-03-12 06:19:21,074 [main:95] - GENERATED = linkedSetOf<Triple<Double, Boolean, ULong?>>()
2021-03-12 06:19:21,323 [main:114] - replacement of {
        prope0 = Ty0
    } of type Function0<Unit> is { require(true)}
2021-03-12 06:19:21,415 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:19:21,415 [main:66] - Compilation checking started
2021-03-12 06:19:21,643 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*


class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 { require(true)}
    return prope0
}

fun box768(): String {
    return "qygvt"
}


2021-03-12 06:19:21,728 [main:41] - AFTER TRY 1 res = import kotlin.test.assertEquals
import kotlin.contracts.*


class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}


2021-03-12 06:19:21,917 [main:112] - generating klass A text = class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}
2021-03-12 06:19:21,918 [main:112] - generating klass Companion text = companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
2021-03-12 06:19:21,918 [main:112] - generating klass Season text = enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
2021-03-12 06:19:21,918 [main:112] - generating klass WINTER text = WINTER,
2021-03-12 06:19:21,918 [main:112] - generating klass SPRING text = SPRING,
2021-03-12 06:19:21,918 [main:112] - generating klass SUMMER text = SUMMER,
2021-03-12 06:19:21,918 [main:112] - generating klass AUTUMN text = AUTUMN
2021-03-12 06:19:22,090 [main:43] - GENERATING CALL OF fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}
2021-03-12 06:19:22,091 [main:61] - WITHOUT TYPE PARAMS = fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}
2021-03-12 06:19:22,260 [main:302] - generating value of type = Season false depth = 1
2021-03-12 06:19:22,261 [main:112] - generating klass Season text = enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
2021-03-12 06:19:22,344 [main:43] - GENERATING CALL OF fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}
2021-03-12 06:19:22,345 [main:61] - WITHOUT TYPE PARAMS = fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}
2021-03-12 06:19:22,543 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-12 06:19:22,543 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 06:19:22,639 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:19:22,640 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:19:22,813 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 5
2021-03-12 06:19:22,813 [main:302] - generating value of type = Unit false depth = 6
2021-03-12 06:19:22,913 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:19:22,915 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:19:23,090 [main:302] - generating value of type = Any false depth = 9
2021-03-12 06:19:23,090 [main:95] - GENERATED = print("cappu")
2021-03-12 06:19:23,090 [main:95] - GENERATED = contract({ print("cappu")})
2021-03-12 06:19:23,091 [main:95] - GENERATED = fu0({ contract({ print("cappu")})})
2021-03-12 06:19:23,184 [main:43] - Try №1
2021-03-12 06:19:38,081 [main:48] - Already checked
2021-03-12 06:19:42,201 [main:69] - Trying to insert fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
2021-03-12 06:19:42,303 [main:66] - Compilation checking started
2021-03-12 06:19:43,410 [main:103] - Trying to change 219 nodes
2021-03-12 06:19:43,410 [main:107] - replacing (" has no state-machine ", String)
2021-03-12 06:19:43,410 [main:50] - replacing " has no state-machine " String
2021-03-12 06:19:43,410 [main:54] - Getting value of type String
2021-03-12 06:19:43,583 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:43,585 [main:58] - GENERATED VALUE OF TYPE String = "khmia"
2021-03-12 06:19:43,585 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:44,280 [main:67] - randomType = Set<HashSet<A>>?
2021-03-12 06:19:44,280 [main:106] - GETTING String from String
2021-03-12 06:19:44,311 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c4988e1]]
2021-03-12 06:19:44,311 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c4988e1]
2021-03-12 06:19:44,472 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:19:44,475 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:19:44,478 [main:117] - GENERATED CALL = (fu1()).filterNot({a: Char -> false})
2021-03-12 06:19:44,478 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265aba52]]
2021-03-12 06:19:44,478 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:19:44,703 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:44,707 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265aba52]
2021-03-12 06:19:44,708 [main:117] - GENERATED CALL = (fu1()).get(754014260).plus(fu1())
2021-03-12 06:19:44,708 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f967db]]
2021-03-12 06:19:44,708 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f967db]
2021-03-12 06:19:44,884 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:44,888 [main:117] - GENERATED CALL = (fu1()).repeat(1928134892)
2021-03-12 06:19:44,888 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588b5090]]
2021-03-12 06:19:44,888 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588b5090]
2021-03-12 06:19:45,055 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:45,200 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:19:45,203 [main:117] - GENERATED CALL = (fu1()).replaceAfter('浀', fu1(), "eggoy")
2021-03-12 06:19:45,203 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b9235d4]]
2021-03-12 06:19:45,203 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:19:45,348 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:45,352 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b9235d4]
2021-03-12 06:19:45,352 [main:117] - GENERATED CALL = (fu1()).get(2052493614).titlecase()
2021-03-12 06:19:45,352 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]]
2021-03-12 06:19:45,352 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]
2021-03-12 06:19:45,352 [main:117] - GENERATED CALL = (fu1()).reversed()
2021-03-12 06:19:45,353 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]]
2021-03-12 06:19:45,353 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]
2021-03-12 06:19:45,498 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:45,500 [main:117] - GENERATED CALL = (fu1()).drop(215274972)
2021-03-12 06:19:45,501 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19f6fc7d]]
2021-03-12 06:19:45,501 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19f6fc7d]
2021-03-12 06:19:45,638 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:45,640 [main:117] - GENERATED CALL = (fu1()).dropLast(539873478)
2021-03-12 06:19:45,640 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6434d8d9]]
2021-03-12 06:19:45,641 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6434d8d9]
2021-03-12 06:19:45,778 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:45,993 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:45,995 [main:117] - GENERATED CALL = (fu1()).padEnd(-483401306, '醠')
2021-03-12 06:19:45,996 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f14a6dd]]
2021-03-12 06:19:45,996 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:19:46,140 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:46,286 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:46,289 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f14a6dd]
2021-03-12 06:19:46,432 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:19:46,585 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 06:19:46,589 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 06:19:46,902 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:19:46,905 [main:95] - GENERATED = Regex("alkzh")
2021-03-12 06:19:47,047 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 06:19:47,049 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 06:19:47,056 [main:117] - GENERATED CALL = (fu1()).subSequence(-1513705418, 1293923810).replace(Regex("alkzh"), {a: MatchResult -> "azcod"})
2021-03-12 06:19:47,056 [main:114] - replacement of " has no state-machine " of type String is (fu1()).dropLast(539873478)
2021-03-12 06:19:47,205 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:19:47,205 [main:66] - Compilation checking started
2021-03-12 06:19:47,895 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8()))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = Kla2().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:19:47,898 [main:107] - replacing (prope3 != "OK", Boolean)
2021-03-12 06:19:47,898 [main:50] - replacing prope3 != "OK" Boolean
2021-03-12 06:19:47,898 [main:54] - Getting value of type Boolean
2021-03-12 06:19:48,048 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:19:48,051 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:19:48,051 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:48,062 [main:67] - randomType = Kla8
2021-03-12 06:19:48,202 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 06:19:48,204 [main:112] - generating klass Kla8 text = class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 06:19:48,212 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla8[DeserializedSimpleFunctionDescriptor@562b207]
2021-03-12 06:19:48,364 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:19:48,364 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@416f3cd1]
2021-03-12 06:19:48,510 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:19:48,513 [main:78] - Generated call from random type = (Kla8()).equals("assko").or(true)
2021-03-12 06:19:48,514 [main:106] - GETTING Boolean from String
2021-03-12 06:19:48,546 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76566baf]]
2021-03-12 06:19:48,546 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76566baf]
2021-03-12 06:19:48,546 [main:117] - GENERATED CALL = (fu1()).isEmpty()
2021-03-12 06:19:48,547 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e151a4d]]
2021-03-12 06:19:48,547 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:19:48,701 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:48,862 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:48,865 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e151a4d]
2021-03-12 06:19:49,025 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:19:49,028 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:19:49,031 [main:117] - GENERATED CALL = (fu1()).subSequence(-1391615015, 1822438957).all({a: Char -> true})
2021-03-12 06:19:49,031 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61d7144a]]
2021-03-12 06:19:49,031 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:19:49,181 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:49,323 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:49,326 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61d7144a]
2021-03-12 06:19:49,326 [main:117] - GENERATED CALL = (fu1()).subSequence(95094193, 590573164).isNotBlank()
2021-03-12 06:19:49,326 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@432caca6]]
2021-03-12 06:19:49,326 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:19:49,467 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:49,469 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@432caca6]
2021-03-12 06:19:49,470 [main:117] - GENERATED CALL = (fu1()).get(-1121989689).isSurrogate()
2021-03-12 06:19:49,470 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13436781]]
2021-03-12 06:19:49,470 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13436781]
2021-03-12 06:19:49,609 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:49,612 [main:117] - GENERATED CALL = (fu1()).hasSurrogatePairAt(-2103246669)
2021-03-12 06:19:49,612 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280775a9]]
2021-03-12 06:19:49,612 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280775a9]
2021-03-12 06:19:49,612 [main:117] - GENERATED CALL = (fu1()).any()
2021-03-12 06:19:49,612 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280775a9]]
2021-03-12 06:19:49,612 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:19:49,745 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:49,887 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:49,889 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280775a9]
2021-03-12 06:19:49,890 [main:117] - GENERATED CALL = (fu1()).subSequence(959568694, -1322487257).any()
2021-03-12 06:19:49,890 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563df5eb]]
2021-03-12 06:19:49,890 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@563df5eb]
2021-03-12 06:19:50,024 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:19:50,027 [main:117] - GENERATED CALL = (fu1()).endsWith(fu1(), true)
2021-03-12 06:19:50,027 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26fad7b]]
2021-03-12 06:19:50,027 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:19:50,162 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:50,347 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:50,349 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26fad7b]
2021-03-12 06:19:50,489 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:50,643 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:19:50,645 [main:117] - GENERATED CALL = (fu1()).subSequence(1592741039, -1625573202).endsWith('鋥', true)
2021-03-12 06:19:50,646 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25774671]]
2021-03-12 06:19:50,646 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25774671]
2021-03-12 06:19:50,781 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:19:50,784 [main:117] - GENERATED CALL = (fu1()).startsWith(fu1(), true)
2021-03-12 06:19:50,784 [main:114] - replacement of prope3 != "OK" of type Boolean is (fu1()).subSequence(95094193, 590573164).isNotBlank()
2021-03-12 06:19:50,921 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:19:50,922 [main:66] - Compilation checking started
2021-03-12 06:19:51,601 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8()))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = Kla2().fu10().fu3()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return "FAIL 1 $prope3"

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:19:51,605 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 06:19:51,605 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 06:19:51,605 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 06:19:51,753 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 06:19:51,758 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 06:19:52,219 [main:67] - randomType = Function1<Kla6?, UShort>
2021-03-12 06:19:52,221 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 06:19:52,240 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 06:19:52,240 [main:107] - replacing ({
        prope3.getOrThrow()
    }, Any?)
2021-03-12 06:19:52,241 [main:50] - replacing {
        prope3.getOrThrow()
    } Any?
2021-03-12 06:19:52,241 [main:54] - Getting value of type Any?
2021-03-12 06:19:52,370 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:19:52,371 [main:58] - GENERATED VALUE OF TYPE Any? = "zfflp"
2021-03-12 06:19:52,371 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:52,381 [main:67] - randomType = Kla0
2021-03-12 06:19:52,527 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:19:52,531 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:19:52,675 [main:194] - Type params = []
2021-03-12 06:19:52,815 [main:302] - generating value of type = Int true depth = 2
2021-03-12 06:19:52,827 [main:106] - GETTING Any? from String
2021-03-12 06:19:52,855 [main:114] - replacement of {
        prope3.getOrThrow()
    } of type Any? is "zfflp"
2021-03-12 06:19:52,992 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 06:19:52,992 [main:66] - Compilation checking started
2021-03-12 06:19:52,998 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:19:52,998 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8()))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = Kla2().fu10().fu3()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return "FAIL 1 $prope3"

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) "zfflp"
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:19:53,000 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 06:19:53,000 [main:50] - replacing getOrThrow() Any?
2021-03-12 06:19:53,000 [main:54] - Getting value of type Any?
2021-03-12 06:19:53,137 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:19:53,137 [main:58] - GENERATED VALUE OF TYPE Any? = "wnofe"
2021-03-12 06:19:53,137 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:53,286 [main:67] - randomType = Char
2021-03-12 06:19:53,419 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:53,447 [main:106] - GETTING Any? from String
2021-03-12 06:19:53,467 [main:114] - replacement of getOrThrow() of type Any? is "wnofe"
2021-03-12 06:19:53,667 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:19:53,668 [main:66] - Compilation checking started
2021-03-12 06:19:54,083 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8()))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = Kla2().fu10().fu3()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return "FAIL 1 $prope3"

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3."wnofe"
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:19:54,085 [main:107] - replacing (prope3, Result<Any?>)
2021-03-12 06:19:54,085 [main:50] - replacing prope3 Result<Any?>
2021-03-12 06:19:54,085 [main:54] - Getting value of type Result<Any?>
2021-03-12 06:19:54,215 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 06:19:54,357 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 06:19:54,361 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 06:19:54,667 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 06:19:54,669 [main:95] - GENERATED = runCatching<Any?>({ null})
2021-03-12 06:19:54,669 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ null})
2021-03-12 06:19:54,669 [main:61] - GENERATED IS CALL =true
2021-03-12 06:19:54,816 [main:67] - randomType = Byte
2021-03-12 06:19:54,944 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:19:54,982 [main:106] - GETTING Result<Any?> from String
2021-03-12 06:19:54,999 [main:114] - replacement of prope3 of type Result<Any?> is runCatching<Any?>({ null})
2021-03-12 06:19:55,138 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:19:55,139 [main:66] - Compilation checking started
2021-03-12 06:19:55,822 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8()))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = Kla2().fu10().fu3()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return "FAIL 1 $prope3"

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:19:55,837 [main:107] - replacing (true, Boolean)
2021-03-12 06:19:55,837 [main:50] - replacing true Boolean
2021-03-12 06:19:55,837 [main:54] - Getting value of type Boolean
2021-03-12 06:19:55,978 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:19:55,981 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:19:55,981 [main:61] - GENERATED IS CALL =false
2021-03-12 06:19:56,142 [main:67] - randomType = Double
2021-03-12 06:19:56,281 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:19:56,322 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@72653b9d]
2021-03-12 06:19:56,456 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:19:56,456 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@416f3cd1]
2021-03-12 06:19:56,586 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:19:56,589 [main:78] - Generated call from random type = (0.4641165696170322).equals("vrnvd").or(false)
2021-03-12 06:19:56,590 [main:106] - GETTING Boolean from String
2021-03-12 06:19:56,615 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53b2678]]
2021-03-12 06:19:56,615 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683]
2021-03-12 06:19:56,746 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:19:56,746 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53b2678]
2021-03-12 06:19:56,894 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:19:56,895 [main:117] - GENERATED CALL = (fu1()).equals("edhgt").equals("mwgmp")
2021-03-12 06:19:56,895 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dbbb96]]
2021-03-12 06:19:56,895 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:19:57,043 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:57,045 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dbbb96]
2021-03-12 06:19:57,046 [main:117] - GENERATED CALL = (fu1()).get(538391077).isISOControl()
2021-03-12 06:19:57,046 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a6a318b]]
2021-03-12 06:19:57,046 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:19:57,178 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:57,180 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a6a318b]
2021-03-12 06:19:57,181 [main:117] - GENERATED CALL = (fu1()).get(1009507543).isDefined()
2021-03-12 06:19:57,181 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ffc864e]]
2021-03-12 06:19:57,181 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ffc864e]
2021-03-12 06:19:57,181 [main:117] - GENERATED CALL = (fu1()).none()
2021-03-12 06:19:57,181 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58203408]]
2021-03-12 06:19:57,181 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:19:57,309 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:57,312 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58203408]
2021-03-12 06:19:57,312 [main:117] - GENERATED CALL = (fu1()).get(-1017148371).isLowSurrogate()
2021-03-12 06:19:57,312 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683]]
2021-03-12 06:19:57,312 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683]
2021-03-12 06:19:57,441 [main:117] - GENERATED CALL = (fu1()).equals(null)
2021-03-12 06:19:57,441 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14299c1b]]
2021-03-12 06:19:57,441 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:19:57,569 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:57,572 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14299c1b]
2021-03-12 06:19:57,572 [main:117] - GENERATED CALL = (fu1()).get(-1658617611).isWhitespace()
2021-03-12 06:19:57,572 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280775a9]]
2021-03-12 06:19:57,572 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:19:57,717 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:57,858 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:57,860 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280775a9]
2021-03-12 06:19:57,860 [main:117] - GENERATED CALL = (fu1()).subSequence(-1779284303, 30591903).any()
2021-03-12 06:19:57,861 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6876408b]]
2021-03-12 06:19:57,861 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:19:57,993 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:57,996 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6876408b]
2021-03-12 06:19:57,996 [main:117] - GENERATED CALL = (fu1()).get(693277854).isTitleCase()
2021-03-12 06:19:57,996 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d861f40]]
2021-03-12 06:19:57,996 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:19:58,130 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:58,265 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:58,268 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d861f40]
2021-03-12 06:19:58,394 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:19:58,549 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:19:58,552 [main:117] - GENERATED CALL = (fu1()).subSequence(-1712946872, 50521165).contains('௚', true)
2021-03-12 06:19:58,552 [main:114] - replacement of true of type Boolean is (fu1()).none()
2021-03-12 06:19:58,680 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:19:58,681 [main:66] - Compilation checking started
2021-03-12 06:19:59,381 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8()))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = Kla2().fu10().fu3()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return "FAIL 1 $prope3"

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:19:59,384 [main:107] - replacing (fu8(), Int)
2021-03-12 06:19:59,384 [main:50] - replacing fu8() Int
2021-03-12 06:19:59,384 [main:54] - Getting value of type Int
2021-03-12 06:19:59,550 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:19:59,552 [main:58] - GENERATED VALUE OF TYPE Int = 1624512730
2021-03-12 06:19:59,552 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:00,173 [main:67] - randomType = Pair<Float, LinkedHashMap<Int, Kla9?>>
2021-03-12 06:20:00,300 [main:302] - generating value of type = Pair<Float, LinkedHashMap<Int, Kla9?>> false depth = 0
2021-03-12 06:20:00,435 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Float, second: LinkedHashMap<Int, Kla9?>): Pair<Float, LinkedHashMap<Int, Kla9?>> = TODO()
2021-03-12 06:20:00,439 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Float, second: LinkedHashMap<Int, Kla9?>): Pair<Float, LinkedHashMap<Int, Kla9?>> = TODO()
2021-03-12 06:20:00,573 [main:302] - generating value of type = Float true depth = 3
2021-03-12 06:20:00,576 [main:302] - generating value of type = LinkedHashMap<Int, Kla9?> false depth = 3
2021-03-12 06:20:00,738 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Int, Kla9?>): LkedHashMap<Int, Kla9?> = TODO()
2021-03-12 06:20:00,751 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Int, Kla9?>): LkedHashMap<Int, Kla9?> = TODO()
2021-03-12 06:20:00,888 [main:302] - generating value of type = Pair<Int, Kla9?> false depth = 6
2021-03-12 06:20:01,024 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Int, second: Kla9?): Pair<Int, Kla9?> = TODO()
2021-03-12 06:20:01,028 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Int, second: Kla9?): Pair<Int, Kla9?> = TODO()
2021-03-12 06:20:01,171 [main:302] - generating value of type = Int true depth = 9
2021-03-12 06:20:01,173 [main:302] - generating value of type = Kla9 false depth = 9
2021-03-12 06:20:01,176 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:20:01,176 [main:95] - GENERATED = Pair<Int, Kla9?>(1829818951, Kla9())
2021-03-12 06:20:01,176 [main:95] - GENERATED = linkedMapOf<Int, Kla9?>(Pair<Int, Kla9?>(1829818951, Kla9()))
2021-03-12 06:20:01,176 [main:95] - GENERATED = Pair<Float, LinkedHashMap<Int, Kla9?>>(0.20983785f, linkedMapOf<Int, Kla9?>(Pair<Int, Kla9?>(1829818951, Kla9())))
2021-03-12 06:20:01,203 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@26f70ce0]
2021-03-12 06:20:01,204 [main:78] - Generated call from random type = (Pair<Float, LinkedHashMap<Int, Kla9?>>(0.20983785f, linkedMapOf<Int, Kla9?>(Pair<Int, Kla9?>(1829818951, Kla9())))).first.toInt()
2021-03-12 06:20:01,205 [main:106] - GETTING Int from String
2021-03-12 06:20:01,235 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@30393db8]]
2021-03-12 06:20:01,235 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:20:01,372 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:01,375 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@30393db8]
2021-03-12 06:20:01,505 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:01,507 [main:117] - GENERATED CALL = (fu1()).get(-1069626680).compareTo('䕥')
2021-03-12 06:20:01,507 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@575e2c6f]]
2021-03-12 06:20:01,507 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:20:01,664 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:01,667 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@575e2c6f]
2021-03-12 06:20:01,667 [main:117] - GENERATED CALL = (fu1()).compareTo("hbdts").toInt()
2021-03-12 06:20:01,668 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6219f4aa]]
2021-03-12 06:20:01,668 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:20:01,812 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:01,815 [main:117] - GENERATED CALL = (fu1()).compareTo("zxsev").absoluteValue
2021-03-12 06:20:01,815 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@2bc1cc26]]
2021-03-12 06:20:01,815 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:20:01,950 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:01,953 [main:117] - GENERATED CALL = (fu1()).get(158150706).code
2021-03-12 06:20:01,954 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f59ea2e]]
2021-03-12 06:20:01,954 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f59ea2e]
2021-03-12 06:20:01,954 [main:117] - GENERATED CALL = (fu1()).length.countOneBits()
2021-03-12 06:20:01,954 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@219fee72]]
2021-03-12 06:20:01,954 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@219fee72]
2021-03-12 06:20:02,089 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:02,226 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:02,229 [main:117] - GENERATED CALL = (fu1()).compareTo("boczt", false)
2021-03-12 06:20:02,229 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5]]
2021-03-12 06:20:02,229 [main:117] - GENERATED CALL = (fu1()).length
2021-03-12 06:20:02,229 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fcbf387]]
2021-03-12 06:20:02,229 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fcbf387]
2021-03-12 06:20:02,230 [main:117] - GENERATED CALL = (fu1()).length.inv()
2021-03-12 06:20:02,230 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aa686cf]]
2021-03-12 06:20:02,230 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aa686cf]
2021-03-12 06:20:02,230 [main:117] - GENERATED CALL = (fu1()).length.unaryPlus()
2021-03-12 06:20:02,230 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15758028]]
2021-03-12 06:20:02,230 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:02,360 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:02,526 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:02,528 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15758028]
2021-03-12 06:20:02,661 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:20:02,664 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:20:02,666 [main:117] - GENERATED CALL = (fu1()).subSequence(-1945167322, 576265155).indexOfLast({a: Char -> false})
2021-03-12 06:20:02,666 [main:114] - replacement of fu8() of type Int is (fu1()).get(158150706).code
2021-03-12 06:20:02,793 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:20:02,794 [main:66] - Compilation checking started
2021-03-12 06:20:03,503 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = Kla2().fu10().fu3()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return "FAIL 1 $prope3"

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:03,506 [main:107] - replacing (prope3.exceptionOrNull()!!, Throwable)
2021-03-12 06:20:03,506 [main:50] - replacing prope3.exceptionOrNull()!! Throwable
2021-03-12 06:20:03,506 [main:54] - Getting value of type Throwable
2021-03-12 06:20:03,655 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 06:20:03,815 [main:43] - GENERATING CALL OF fun ClassCastException(message: kotlin.String?): Throwable = TODO()
2021-03-12 06:20:03,819 [main:61] - WITHOUT TYPE PARAMS = fun ClassCastException(message: kotlin.String?): Throwable = TODO()
2021-03-12 06:20:04,122 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:20:04,125 [main:95] - GENERATED = ClassCastException("aqbmz")
2021-03-12 06:20:04,125 [main:58] - GENERATED VALUE OF TYPE Throwable = ClassCastException("aqbmz")
2021-03-12 06:20:04,125 [main:61] - GENERATED IS CALL =true
2021-03-12 06:20:04,580 [main:67] - randomType = Set<Kla10>
2021-03-12 06:20:04,581 [main:106] - GETTING Throwable from String
2021-03-12 06:20:04,599 [main:114] - replacement of prope3.exceptionOrNull()!! of type Throwable is ClassCastException("aqbmz")
2021-03-12 06:20:04,760 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:20:04,761 [main:66] - Compilation checking started
2021-03-12 06:20:05,448 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = Kla2().fu10().fu3()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return "FAIL 1 $prope3"

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:05,450 [main:107] - replacing (true, Boolean)
2021-03-12 06:20:05,450 [main:50] - replacing true Boolean
2021-03-12 06:20:05,451 [main:54] - Getting value of type Boolean
2021-03-12 06:20:05,595 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:05,598 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:20:05,598 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:05,755 [main:67] - randomType = UByte
2021-03-12 06:20:05,885 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:20:05,944 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1b3117bb]
2021-03-12 06:20:05,944 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2a336787]
2021-03-12 06:20:05,945 [main:78] - Generated call from random type = (6.toUByte()).toFloat().isFinite()
2021-03-12 06:20:05,945 [main:106] - GETTING Boolean from String
2021-03-12 06:20:05,967 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1124628a]]
2021-03-12 06:20:05,967 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1124628a]
2021-03-12 06:20:05,967 [main:117] - GENERATED CALL = (fu1()).isNotEmpty()
2021-03-12 06:20:05,968 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@142e0283]]
2021-03-12 06:20:05,968 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683]
2021-03-12 06:20:06,096 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:20:06,096 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@142e0283]
2021-03-12 06:20:06,227 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:06,230 [main:117] - GENERATED CALL = (fu1()).equals("hwxoa").and(false)
2021-03-12 06:20:06,230 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ba26ce4]]
2021-03-12 06:20:06,230 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ba26ce4]
2021-03-12 06:20:06,230 [main:117] - GENERATED CALL = (fu1()).toBoolean()
2021-03-12 06:20:06,230 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1124628a]]
2021-03-12 06:20:06,230 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:06,366 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:06,495 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:06,498 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1124628a]
2021-03-12 06:20:06,498 [main:117] - GENERATED CALL = (fu1()).subSequence(-1522277330, 1248857262).isNotEmpty()
2021-03-12 06:20:06,498 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa4642d]]
2021-03-12 06:20:06,498 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:06,625 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:06,759 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:06,762 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa4642d]
2021-03-12 06:20:06,920 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:20:07,072 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:20:07,076 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:20:07,494 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:20:07,497 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 06:20:07,499 [main:95] - GENERATED = Regex("lwshe", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 06:20:07,500 [main:117] - GENERATED CALL = (fu1()).subSequence(-394110796, 1526278576).matches(Regex("lwshe", kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 06:20:07,500 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73f4c35f]]
2021-03-12 06:20:07,500 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73f4c35f]
2021-03-12 06:20:07,630 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:20:07,631 [main:117] - GENERATED CALL = (fu1()).length.equals("omrhh")
2021-03-12 06:20:07,631 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280775a9]]
2021-03-12 06:20:07,631 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:07,787 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:07,934 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:07,936 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280775a9]
2021-03-12 06:20:07,937 [main:117] - GENERATED CALL = (fu1()).subSequence(-491474344, -1843882880).any()
2021-03-12 06:20:07,937 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25774671]]
2021-03-12 06:20:07,937 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25774671]
2021-03-12 06:20:08,073 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:08,076 [main:117] - GENERATED CALL = (fu1()).startsWith(fu1(), false)
2021-03-12 06:20:08,076 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b8c9010]]
2021-03-12 06:20:08,076 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:08,206 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:08,336 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:08,339 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b8c9010]
2021-03-12 06:20:08,466 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:08,629 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:08,632 [main:117] - GENERATED CALL = (fu1()).subSequence(-1058815124, -426589221).startsWith('判', false)
2021-03-12 06:20:08,633 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d861f40]]
2021-03-12 06:20:08,633 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d861f40]
2021-03-12 06:20:08,774 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:08,909 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:08,912 [main:117] - GENERATED CALL = (fu1()).contains('ゥ', true)
2021-03-12 06:20:08,912 [main:114] - replacement of true of type Boolean is false
2021-03-12 06:20:09,044 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 06:20:09,045 [main:66] - Compilation checking started
2021-03-12 06:20:09,678 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = Kla2().fu10().fu3()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return "FAIL 1 $prope3"

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:09,680 [main:107] - replacing (Kla2().fu10().fu3(), String)
2021-03-12 06:20:09,680 [main:50] - replacing Kla2().fu10().fu3() String
2021-03-12 06:20:09,680 [main:54] - Getting value of type String
2021-03-12 06:20:09,829 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:09,832 [main:58] - GENERATED VALUE OF TYPE String = "biccx"
2021-03-12 06:20:09,832 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:09,837 [main:67] - randomType = Boolean
2021-03-12 06:20:09,966 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:09,978 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e1affe8]
2021-03-12 06:20:10,105 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:10,107 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]
2021-03-12 06:20:10,237 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:10,239 [main:78] - Generated call from random type = (false).compareTo(false).toString(-917637077)
2021-03-12 06:20:10,239 [main:106] - GETTING String from String
2021-03-12 06:20:10,265 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c4988e1]]
2021-03-12 06:20:10,265 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c4988e1]
2021-03-12 06:20:10,395 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:20:10,397 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:20:10,400 [main:117] - GENERATED CALL = (fu1()).filterNot({a: Char -> true})
2021-03-12 06:20:10,400 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265aba52]]
2021-03-12 06:20:10,401 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:20:10,535 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:10,537 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265aba52]
2021-03-12 06:20:10,538 [main:117] - GENERATED CALL = (fu1()).get(-476040202).plus(fu1())
2021-03-12 06:20:10,538 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62337ef9]]
2021-03-12 06:20:10,538 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62337ef9]
2021-03-12 06:20:10,538 [main:117] - GENERATED CALL = (fu1()).lowercase()
2021-03-12 06:20:10,538 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14901bf4]]
2021-03-12 06:20:10,538 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14901bf4]
2021-03-12 06:20:10,538 [main:117] - GENERATED CALL = (fu1()).replaceIndentByMargin(fu1(), fu1())
2021-03-12 06:20:10,538 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ad9c62d]]
2021-03-12 06:20:10,538 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ad9c62d]
2021-03-12 06:20:10,667 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:10,670 [main:117] - GENERATED CALL = (fu1()).substringBeforeLast('?', fu1())
2021-03-12 06:20:10,670 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f14a6dd]]
2021-03-12 06:20:10,670 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:10,831 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:10,979 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:10,981 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f14a6dd]
2021-03-12 06:20:11,112 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:20:11,243 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:20:11,246 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:20:11,709 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:20:11,712 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 06:20:11,858 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 06:20:11,862 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 06:20:11,998 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 06:20:12,001 [main:95] - GENERATED = hashSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 06:20:12,001 [main:95] - GENERATED = Regex("swnvw", hashSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 06:20:12,134 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 06:20:12,136 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 06:20:12,271 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:20:12,275 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:20:12,553 [main:302] - generating value of type = String true depth = 4
2021-03-12 06:20:12,556 [main:95] - GENERATED = StringBuilder("vphvf")
2021-03-12 06:20:12,557 [main:117] - GENERATED CALL = (fu1()).subSequence(1929392282, 2066219236).replace(Regex("swnvw", hashSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)), {a: MatchResult -> StringBuilder("vphvf")})
2021-03-12 06:20:12,557 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f6f4ba7]]
2021-03-12 06:20:12,557 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f6f4ba7]
2021-03-12 06:20:12,706 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:12,846 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:12,849 [main:117] - GENERATED CALL = (fu1()).removeRange(241176086, -1428751012)
2021-03-12 06:20:12,849 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d9e8e4]]
2021-03-12 06:20:12,849 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d9e8e4]
2021-03-12 06:20:12,849 [main:117] - GENERATED CALL = (fu1()).trimIndent()
2021-03-12 06:20:12,849 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b9235d4]]
2021-03-12 06:20:12,849 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:20:12,974 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:12,977 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b9235d4]
2021-03-12 06:20:12,977 [main:117] - GENERATED CALL = (fu1()).get(1296609721).titlecase()
2021-03-12 06:20:12,977 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f9c5c88]]
2021-03-12 06:20:12,977 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f9c5c88]
2021-03-12 06:20:13,103 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:13,231 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:13,360 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:20:13,512 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:20:13,517 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:20:13,806 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:20:13,811 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 06:20:13,812 [main:117] - GENERATED CALL = (fu1()).replaceRange(1384310339, 1201819092, StringBuilder(StringBuilder()))
2021-03-12 06:20:13,812 [main:114] - replacement of Kla2().fu10().fu3() of type String is (fu1()).get(1296609721).titlecase()
2021-03-12 06:20:13,936 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:20:13,936 [main:66] - Compilation checking started
2021-03-12 06:20:14,557 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return "FAIL 1 $prope3"

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:14,560 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 06:20:14,560 [main:50] - replacing {} Function0<Unit>
2021-03-12 06:20:14,560 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:20:14,720 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:20:14,722 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:20:14,853 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:20:14,857 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:20:15,130 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:20:15,130 [main:95] - GENERATED = println("lxoab")
2021-03-12 06:20:15,130 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("lxoab")}
2021-03-12 06:20:15,130 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:15,277 [main:67] - randomType = Short
2021-03-12 06:20:15,413 [main:302] - generating value of type = Short true depth = 0
2021-03-12 06:20:15,473 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:20:15,503 [main:114] - replacement of {} of type Function0<Unit> is { println("lxoab")}
2021-03-12 06:20:15,637 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:20:15,638 [main:66] - Compilation checking started
2021-03-12 06:20:16,300 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return "FAIL 1 $prope3"

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:16,302 [main:107] - replacing ("FAIL 1 $prope3", String)
2021-03-12 06:20:16,302 [main:50] - replacing "FAIL 1 $prope3" String
2021-03-12 06:20:16,302 [main:54] - Getting value of type String
2021-03-12 06:20:16,434 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:16,436 [main:58] - GENERATED VALUE OF TYPE String = "mpqhc"
2021-03-12 06:20:16,437 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:16,737 [main:67] - randomType = Array<Short>
2021-03-12 06:20:16,863 [main:302] - generating value of type = Array<Short> false depth = 0
2021-03-12 06:20:17,004 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Short> = TODO()
2021-03-12 06:20:17,007 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Short> = TODO()
2021-03-12 06:20:17,157 [main:95] - GENERATED = emptyArray<Short>()
2021-03-12 06:20:17,172 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Short defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5e615621]
2021-03-12 06:20:17,301 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:17,304 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51ac7fab]
2021-03-12 06:20:17,428 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:17,431 [main:78] - Generated call from random type = (emptyArray<Short>()).get(-144905936).toString(-1929857288)
2021-03-12 06:20:17,431 [main:106] - GETTING String from String
2021-03-12 06:20:17,448 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b9235d4]]
2021-03-12 06:20:17,448 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:20:17,574 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:17,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b9235d4]
2021-03-12 06:20:17,577 [main:117] - GENERATED CALL = (fu1()).get(-1614157636).titlecase()
2021-03-12 06:20:17,577 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1668f4]]
2021-03-12 06:20:17,577 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1668f4]
2021-03-12 06:20:17,703 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:17,706 [main:117] - GENERATED CALL = (fu1()).substringAfter('㶒', fu1())
2021-03-12 06:20:17,706 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79c10c28]]
2021-03-12 06:20:17,706 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79c10c28]
2021-03-12 06:20:17,834 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:17,837 [main:117] - GENERATED CALL = (fu1()).substringBefore('఻', fu1())
2021-03-12 06:20:17,837 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ba3fd40]]
2021-03-12 06:20:17,837 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ba3fd40]
2021-03-12 06:20:17,964 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:20:17,967 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:20:17,970 [main:117] - GENERATED CALL = (fu1()).filter({a: Char -> true})
2021-03-12 06:20:17,970 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a25814]]
2021-03-12 06:20:17,970 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a25814]
2021-03-12 06:20:18,096 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:18,276 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:18,435 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:18,438 [main:117] - GENERATED CALL = (fu1()).replaceFirst('踢', 'ᛏ', true)
2021-03-12 06:20:18,438 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]]
2021-03-12 06:20:18,438 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]
2021-03-12 06:20:18,438 [main:117] - GENERATED CALL = (fu1()).reversed()
2021-03-12 06:20:18,439 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229767f9]]
2021-03-12 06:20:18,439 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229767f9]
2021-03-12 06:20:18,567 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 06:20:18,569 [main:302] - generating value of type = Char true depth = 1
2021-03-12 06:20:18,572 [main:117] - GENERATED CALL = (fu1()).replaceFirstChar({a: Char -> 'ﰁ'})
2021-03-12 06:20:18,572 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@172a9fb6]]
2021-03-12 06:20:18,572 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@172a9fb6]
2021-03-12 06:20:18,696 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:18,698 [main:117] - GENERATED CALL = (fu1()).takeLast(1597865418)
2021-03-12 06:20:18,699 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69d73398]]
2021-03-12 06:20:18,699 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69d73398]
2021-03-12 06:20:18,699 [main:117] - GENERATED CALL = (fu1()).trimStart()
2021-03-12 06:20:18,699 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a3cb49]]
2021-03-12 06:20:18,699 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a3cb49]
2021-03-12 06:20:18,828 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:20:18,831 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:20:18,833 [main:117] - GENERATED CALL = (fu1()).dropLastWhile({a: Char -> false})
2021-03-12 06:20:18,833 [main:114] - replacement of "FAIL 1 $prope3" of type String is (fu1()).substringBefore('఻', fu1())
2021-03-12 06:20:18,961 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:20:18,962 [main:66] - Compilation checking started
2021-03-12 06:20:19,572 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (prope3 != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:19,574 [main:107] - replacing (prope3, Any)
2021-03-12 06:20:19,574 [main:50] - replacing prope3 Any
2021-03-12 06:20:19,574 [main:54] - Getting value of type Any
2021-03-12 06:20:19,700 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:20:19,700 [main:58] - GENERATED VALUE OF TYPE Any = "qpali"
2021-03-12 06:20:19,700 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:19,994 [main:67] - randomType = Sequence<ULong>
2021-03-12 06:20:19,999 [main:106] - GETTING Any from String
2021-03-12 06:20:20,026 [main:114] - replacement of prope3 of type Any is fu1()
2021-03-12 06:20:20,151 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:20:20,152 [main:66] - Compilation checking started
2021-03-12 06:20:20,743 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:20,745 [main:107] - replacing (this.prope3, Any?)
2021-03-12 06:20:20,746 [main:50] - replacing this.prope3 Any?
2021-03-12 06:20:20,746 [main:54] - Getting value of type Any?
2021-03-12 06:20:20,892 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:20:20,892 [main:58] - GENERATED VALUE OF TYPE Any? = "enyni"
2021-03-12 06:20:20,892 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:21,348 [main:67] - randomType = Kla7<ArrayDeque<Collection<Char>>>
2021-03-12 06:20:21,477 [main:302] - generating value of type = Kla7<ArrayDeque<Collection<Char>>> false depth = 0
2021-03-12 06:20:21,479 [main:112] - generating klass Kla7 text = abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}
2021-03-12 06:20:21,913 [main:302] - generating value of type = Kla10 false depth = 2
2021-03-12 06:20:21,915 [main:112] - generating klass Kla10 text = object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:20:21,934 [main:106] - GETTING Any? from String
2021-03-12 06:20:21,951 [main:114] - replacement of this.prope3 of type Any? is "enyni"
2021-03-12 06:20:22,094 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:20:22,094 [main:66] - Compilation checking started
2021-03-12 06:20:22,480 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        "enyni" = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:22,483 [main:107] - replacing (prope3.getOrThrow(), Any?)
2021-03-12 06:20:22,483 [main:50] - replacing prope3.getOrThrow() Any?
2021-03-12 06:20:22,483 [main:54] - Getting value of type Any?
2021-03-12 06:20:22,608 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:20:22,608 [main:58] - GENERATED VALUE OF TYPE Any? = "owlbf"
2021-03-12 06:20:22,608 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:22,618 [main:67] - randomType = Kla9
2021-03-12 06:20:22,749 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 06:20:22,751 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:20:22,763 [main:106] - GETTING Any? from String
2021-03-12 06:20:22,791 [main:114] - replacement of prope3.getOrThrow() of type Any? is "owlbf"
2021-03-12 06:20:22,920 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:20:22,920 [main:66] - Compilation checking started
2021-03-12 06:20:23,553 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(s))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:23,556 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 06:20:23,556 [main:50] - replacing c Continuation<Unit>
2021-03-12 06:20:23,556 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 06:20:23,690 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 06:20:23,821 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 06:20:23,825 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 06:20:24,257 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:20:24,386 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:20:24,390 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:20:24,701 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:20:24,838 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:20:24,842 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:20:25,314 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:20:25,314 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:20:25,314 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 06:20:25,314 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 06:20:25,462 [main:67] - randomType = ULong
2021-03-12 06:20:25,588 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 06:20:25,620 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 06:20:25,636 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 06:20:25,636 [main:107] - replacing (Kla0(s), Kla0)
2021-03-12 06:20:25,636 [main:50] - replacing Kla0(s) Kla0
2021-03-12 06:20:25,636 [main:54] - Getting value of type Kla0
2021-03-12 06:20:25,761 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:20:25,764 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:20:25,892 [main:194] - Type params = []
2021-03-12 06:20:26,035 [main:302] - generating value of type = Int true depth = 2
2021-03-12 06:20:26,038 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0(-659643967)
2021-03-12 06:20:26,038 [main:61] - GENERATED IS CALL =true
2021-03-12 06:20:26,180 [main:67] - randomType = Short
2021-03-12 06:20:26,304 [main:302] - generating value of type = Short true depth = 0
2021-03-12 06:20:26,342 [main:106] - GETTING Kla0 from String
2021-03-12 06:20:26,364 [main:114] - replacement of Kla0(s) of type Kla0 is Kla0(-659643967)
2021-03-12 06:20:26,487 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:20:26,488 [main:66] - Compilation checking started
2021-03-12 06:20:27,147 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-659643967))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:27,149 [main:107] - replacing (this.prope3, Any?)
2021-03-12 06:20:27,149 [main:50] - replacing this.prope3 Any?
2021-03-12 06:20:27,149 [main:54] - Getting value of type Any?
2021-03-12 06:20:27,278 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:20:27,278 [main:58] - GENERATED VALUE OF TYPE Any? = "puknh"
2021-03-12 06:20:27,279 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:27,284 [main:67] - randomType = Char
2021-03-12 06:20:27,408 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:27,429 [main:106] - GETTING Any? from String
2021-03-12 06:20:27,445 [main:114] - replacement of this.prope3 of type Any? is "puknh"
2021-03-12 06:20:27,574 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:20:27,575 [main:66] - Compilation checking started
2021-03-12 06:20:27,944 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-659643967))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        "puknh" = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:27,946 [main:107] - replacing (Kla5, Kla11)
2021-03-12 06:20:27,946 [main:50] - replacing Kla5 Kla11
2021-03-12 06:20:27,946 [main:54] - Getting value of type Kla11
2021-03-12 06:20:28,076 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-12 06:20:28,078 [main:112] - generating klass Kla11 text = companion object Kla11 : Kla5()
2021-03-12 06:20:28,078 [main:58] - GENERATED VALUE OF TYPE Kla11 = 
2021-03-12 06:20:28,083 [main:67] - randomType = Char
2021-03-12 06:20:28,206 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:28,227 [main:106] - GETTING Kla11 from String
2021-03-12 06:20:28,243 [main:111] - Cant find and generate replacement for Kla5 type Kla11
2021-03-12 06:20:28,243 [main:107] - replacing ({ error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-12 06:20:28,243 [main:50] - replacing { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-12 06:20:28,243 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 06:20:28,371 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 06:20:28,374 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 06:20:28,379 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO()}
2021-03-12 06:20:28,379 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:28,674 [main:67] - randomType = Kla2?
2021-03-12 06:20:28,801 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 06:20:28,803 [main:112] - generating klass Kla2 text = class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}
2021-03-12 06:20:28,934 [main:194] - Type params = []
2021-03-12 06:20:29,088 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 06:20:29,110 [main:114] - replacement of { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) } of type Function0<Nothing> is { TODO()}
2021-03-12 06:20:29,233 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:20:29,234 [main:66] - Compilation checking started
2021-03-12 06:20:29,810 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-659643967))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != "OK") return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:29,812 [main:107] - replacing ("OK", String)
2021-03-12 06:20:29,812 [main:50] - replacing "OK" String
2021-03-12 06:20:29,812 [main:54] - Getting value of type String
2021-03-12 06:20:29,946 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:29,949 [main:58] - GENERATED VALUE OF TYPE String = "tlwln"
2021-03-12 06:20:29,949 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:30,103 [main:67] - randomType = String?
2021-03-12 06:20:30,227 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:30,249 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:30,373 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:30,508 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:30,511 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dedbef1]
2021-03-12 06:20:30,636 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:20:30,764 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:20:30,767 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:20:31,038 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:20:31,167 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:20:31,171 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:20:31,443 [main:302] - generating value of type = Int true depth = 6
2021-03-12 06:20:31,446 [main:95] - GENERATED = StringBuilder(-1564903090)
2021-03-12 06:20:31,446 [main:95] - GENERATED = StringBuilder(StringBuilder(-1564903090))
2021-03-12 06:20:31,576 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:31,579 [main:78] - Generated call from random type = ("sydja")?.subSequence(1695065750, -1395293906).commonSuffixWith(StringBuilder(StringBuilder(-1564903090)), true)
2021-03-12 06:20:31,580 [main:106] - GETTING String from String
2021-03-12 06:20:31,602 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f9c5c88]]
2021-03-12 06:20:31,602 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f9c5c88]
2021-03-12 06:20:31,730 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:31,877 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:32,023 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:20:32,028 [main:117] - GENERATED CALL = (fu1()).replaceRange(498255967, 1684179759, "suznl")
2021-03-12 06:20:32,028 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]]
2021-03-12 06:20:32,028 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]
2021-03-12 06:20:32,150 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:32,153 [main:117] - GENERATED CALL = (fu1()).length.toString(-1340461363)
2021-03-12 06:20:32,153 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a6d3eb]]
2021-03-12 06:20:32,153 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a6d3eb]
2021-03-12 06:20:32,153 [main:117] - GENERATED CALL = (fu1()).trim()
2021-03-12 06:20:32,153 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f63465f]]
2021-03-12 06:20:32,153 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f63465f]
2021-03-12 06:20:32,278 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:20:32,409 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 06:20:32,413 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 06:20:32,541 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:20:32,544 [main:95] - GENERATED = linkedSetOf<Int>(-1687041416)
2021-03-12 06:20:32,544 [main:117] - GENERATED CALL = (fu1()).slice(linkedSetOf<Int>(-1687041416))
2021-03-12 06:20:32,544 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2749eb49]]
2021-03-12 06:20:32,544 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2749eb49]
2021-03-12 06:20:32,544 [main:117] - GENERATED CALL = (fu1()).toLowerCase()
2021-03-12 06:20:32,544 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33144317]]
2021-03-12 06:20:32,544 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33144317]
2021-03-12 06:20:32,545 [main:117] - GENERATED CALL = (fu1()).trimEnd()
2021-03-12 06:20:32,545 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b2d25c3]]
2021-03-12 06:20:32,545 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:32,666 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:32,790 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:32,792 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b2d25c3]
2021-03-12 06:20:32,933 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:20:33,081 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:20:33,084 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:20:33,502 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:20:33,505 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 06:20:33,632 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): Set<RegexOption> = TODO()
2021-03-12 06:20:33,636 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): Set<RegexOption> = TODO()
2021-03-12 06:20:33,764 [main:95] - GENERATED = LinkedHashSet<RegexOption>()
2021-03-12 06:20:33,765 [main:95] - GENERATED = Regex("pjoxx", LinkedHashSet<RegexOption>())
2021-03-12 06:20:33,765 [main:117] - GENERATED CALL = (fu1()).subSequence(285198980, -1522907671).replaceFirst(Regex("pjoxx", LinkedHashSet<RegexOption>()), fu1())
2021-03-12 06:20:33,765 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]]
2021-03-12 06:20:33,765 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:20:33,765 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]
2021-03-12 06:20:33,888 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:33,890 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).toString(1499267112)
2021-03-12 06:20:33,890 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188fd882]]
2021-03-12 06:20:33,890 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188fd882]
2021-03-12 06:20:34,042 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:34,182 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:34,185 [main:117] - GENERATED CALL = (fu1()).padStart(-872529154, '醫')
2021-03-12 06:20:34,185 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36f5aa2a]]
2021-03-12 06:20:34,185 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36f5aa2a]
2021-03-12 06:20:34,313 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:34,315 [main:117] - GENERATED CALL = (fu1()).trimMargin("iyflp")
2021-03-12 06:20:34,315 [main:114] - replacement of "OK" of type String is (fu1()).toLowerCase()
2021-03-12 06:20:34,437 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:20:34,437 [main:66] - Compilation checking started
2021-03-12 06:20:35,009 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-659643967))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:35,013 [main:107] - replacing (false, Boolean)
2021-03-12 06:20:35,013 [main:50] - replacing false Boolean
2021-03-12 06:20:35,013 [main:54] - Getting value of type Boolean
2021-03-12 06:20:35,138 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:35,140 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:20:35,141 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:35,150 [main:67] - randomType = Kla8
2021-03-12 06:20:35,271 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 06:20:35,274 [main:112] - generating klass Kla8 text = class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 06:20:35,279 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla8[DeserializedSimpleFunctionDescriptor@5426b223]
2021-03-12 06:20:35,411 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@18d3759c]
2021-03-12 06:20:35,412 [main:78] - Generated call from random type = (Kla8()).equals(null).not()
2021-03-12 06:20:35,413 [main:106] - GETTING Boolean from String
2021-03-12 06:20:35,429 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76566baf]]
2021-03-12 06:20:35,429 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76566baf]
2021-03-12 06:20:35,429 [main:117] - GENERATED CALL = (fu1()).isEmpty()
2021-03-12 06:20:35,430 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dbbb96]]
2021-03-12 06:20:35,430 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:20:35,552 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:35,555 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dbbb96]
2021-03-12 06:20:35,555 [main:117] - GENERATED CALL = (fu1()).get(1088180439).isISOControl()
2021-03-12 06:20:35,555 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b8c9010]]
2021-03-12 06:20:35,555 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:35,676 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:35,803 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:35,806 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b8c9010]
2021-03-12 06:20:35,928 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:36,053 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:36,056 [main:117] - GENERATED CALL = (fu1()).subSequence(1764309130, -1983843126).startsWith('', false)
2021-03-12 06:20:36,056 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73f4c35f]]
2021-03-12 06:20:36,056 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:20:36,056 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73f4c35f]
2021-03-12 06:20:36,179 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:20:36,180 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).equals("vnzrw")
2021-03-12 06:20:36,180 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@323d646f]]
2021-03-12 06:20:36,180 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:20:36,303 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:36,305 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@323d646f]
2021-03-12 06:20:36,428 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:36,583 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:36,586 [main:117] - GENERATED CALL = (fu1()).get(551244268).equals('੉', true)
2021-03-12 06:20:36,586 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13436781]]
2021-03-12 06:20:36,586 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:36,725 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:36,850 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:36,853 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13436781]
2021-03-12 06:20:36,975 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:36,978 [main:117] - GENERATED CALL = (fu1()).subSequence(1588435840, -1987614115).hasSurrogatePairAt(-2111552062)
2021-03-12 06:20:36,978 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68671848]]
2021-03-12 06:20:36,978 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:20:37,102 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:37,105 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68671848]
2021-03-12 06:20:37,105 [main:117] - GENERATED CALL = (fu1()).get(1656465952).isHighSurrogate()
2021-03-12 06:20:37,105 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59b56969]]
2021-03-12 06:20:37,105 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59b56969]
2021-03-12 06:20:37,228 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:37,354 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:20:37,484 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:20:37,488 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:20:37,818 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:20:37,821 [main:95] - GENERATED = StringBuilder("efqux")
2021-03-12 06:20:37,944 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:38,068 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:38,194 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:38,197 [main:117] - GENERATED CALL = (fu1()).regionMatches(-1803577667, StringBuilder("efqux"), -1270070855, 1476771794, true)
2021-03-12 06:20:38,197 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a6a318b]]
2021-03-12 06:20:38,197 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:20:38,320 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:38,322 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a6a318b]
2021-03-12 06:20:38,323 [main:117] - GENERATED CALL = (fu1()).get(512032049).isDefined()
2021-03-12 06:20:38,323 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e151a4d]]
2021-03-12 06:20:38,323 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e151a4d]
2021-03-12 06:20:38,446 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:20:38,448 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:20:38,451 [main:117] - GENERATED CALL = (fu1()).all({a: Char -> true})
2021-03-12 06:20:38,451 [main:114] - replacement of false of type Boolean is true
2021-03-12 06:20:38,572 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 06:20:38,572 [main:66] - Compilation checking started
2021-03-12 06:20:39,183 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-659643967))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:39,186 [main:107] - replacing (Kla1(Kla0(-659643967)), Kla1)
2021-03-12 06:20:39,186 [main:50] - replacing Kla1(Kla0(-659643967)) Kla1
2021-03-12 06:20:39,186 [main:54] - Getting value of type Kla1
2021-03-12 06:20:39,332 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:20:39,335 [main:112] - generating klass Kla1 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)
2021-03-12 06:20:39,457 [main:194] - Type params = []
2021-03-12 06:20:39,582 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-12 06:20:39,585 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:20:39,707 [main:194] - Type params = []
2021-03-12 06:20:39,828 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:20:39,830 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1(Kla0(-1905585661))
2021-03-12 06:20:39,830 [main:61] - GENERATED IS CALL =true
2021-03-12 06:20:40,128 [main:67] - randomType = Pair<Float, String>
2021-03-12 06:20:40,265 [main:302] - generating value of type = Pair<Float, String> false depth = 0
2021-03-12 06:20:40,394 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Float, second: String): Pair<Float, String> = TODO()
2021-03-12 06:20:40,398 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Float, second: String): Pair<Float, String> = TODO()
2021-03-12 06:20:40,526 [main:302] - generating value of type = Float true depth = 3
2021-03-12 06:20:40,528 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:20:40,531 [main:95] - GENERATED = Pair<Float, String>(0.55271965f, "mliuk")
2021-03-12 06:20:40,543 [main:106] - GETTING Kla1 from String
2021-03-12 06:20:40,559 [main:114] - replacement of Kla1(Kla0(-659643967)) of type Kla1 is Kla1(Kla0(-1905585661))
2021-03-12 06:20:40,680 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:20:40,681 [main:66] - Compilation checking started
2021-03-12 06:20:41,297 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:41,300 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 06:20:41,300 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 06:20:41,300 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 06:20:41,428 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 06:20:41,430 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:20:41,558 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:20:41,562 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:20:41,992 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:20:41,994 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:20:41,997 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:20:41,997 [main:95] - GENERATED = check(true, { "vwncs"})
2021-03-12 06:20:41,997 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> check(true, { "vwncs"})}
2021-03-12 06:20:41,997 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:42,281 [main:67] - randomType = Collection<Float>
2021-03-12 06:20:42,283 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 06:20:42,299 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> check(true, { "vwncs"})}
2021-03-12 06:20:42,422 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:20:42,423 [main:66] - Compilation checking started
2021-03-12 06:20:43,020 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:43,022 [main:107] - replacing ("Continuation ", String)
2021-03-12 06:20:43,023 [main:50] - replacing "Continuation " String
2021-03-12 06:20:43,023 [main:54] - Getting value of type String
2021-03-12 06:20:43,166 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:43,168 [main:58] - GENERATED VALUE OF TYPE String = "awpuk"
2021-03-12 06:20:43,168 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:43,174 [main:67] - randomType = Int
2021-03-12 06:20:43,308 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:43,340 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b67805a]
2021-03-12 06:20:43,340 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@796828fa]
2021-03-12 06:20:43,340 [main:78] - Generated call from random type = (752613949).toChar().uppercase()
2021-03-12 06:20:43,340 [main:106] - GETTING String from String
2021-03-12 06:20:43,356 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]]
2021-03-12 06:20:43,356 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]
2021-03-12 06:20:43,356 [main:117] - GENERATED CALL = (fu1()).reversed()
2021-03-12 06:20:43,356 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dedbef1]]
2021-03-12 06:20:43,356 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:43,485 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:43,619 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:43,622 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dedbef1]
2021-03-12 06:20:43,743 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:20:43,872 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:43,874 [main:117] - GENERATED CALL = (fu1()).subSequence(2094767517, -1973441283).commonSuffixWith("ajhzq", false)
2021-03-12 06:20:43,874 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f967db]]
2021-03-12 06:20:43,874 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:43,996 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:44,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:44,125 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f967db]
2021-03-12 06:20:44,249 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:44,252 [main:117] - GENERATED CALL = (fu1()).subSequence(-644896242, -2068359479).repeat(-341006478)
2021-03-12 06:20:44,252 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e6a54de]]
2021-03-12 06:20:44,252 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e6a54de]
2021-03-12 06:20:44,375 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:20:44,505 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:20:44,509 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:20:44,804 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:20:44,807 [main:95] - GENERATED = StringBuilder(-1221555072)
2021-03-12 06:20:44,941 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:44,944 [main:117] - GENERATED CALL = (fu1()).commonPrefixWith(StringBuilder(-1221555072), true)
2021-03-12 06:20:44,944 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14901bf4]]
2021-03-12 06:20:44,944 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14901bf4]
2021-03-12 06:20:45,067 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:45,069 [main:117] - GENERATED CALL = (fu1()).replaceIndentByMargin("cfzzc", fu1())
2021-03-12 06:20:45,070 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@237e162a]]
2021-03-12 06:20:45,070 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@237e162a]
2021-03-12 06:20:45,191 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:45,194 [main:117] - GENERATED CALL = (fu1()).replaceAfterLast('ꢞ', fu1(), fu1())
2021-03-12 06:20:45,353 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588b5090]]
2021-03-12 06:20:45,354 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588b5090]
2021-03-12 06:20:45,478 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:45,480 [main:117] - GENERATED CALL = (fu1()).replaceAfter('?', fu1(), fu1())
2021-03-12 06:20:45,481 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1586f37e]]
2021-03-12 06:20:45,481 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1586f37e]
2021-03-12 06:20:45,602 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:20:45,605 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:20:45,607 [main:117] - GENERATED CALL = (fu1()).takeWhile({a: Char -> true})
2021-03-12 06:20:45,608 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3247a129]]
2021-03-12 06:20:45,608 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3247a129]
2021-03-12 06:20:45,735 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:45,865 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:45,992 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:45,995 [main:117] - GENERATED CALL = (fu1()).replace('咐', '丣', false)
2021-03-12 06:20:45,995 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c51cc2c]]
2021-03-12 06:20:45,995 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:46,154 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:46,334 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:46,337 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c51cc2c]
2021-03-12 06:20:46,463 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:46,591 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:46,593 [main:117] - GENERATED CALL = (fu1()).subSequence(2077990613, -1387089559).substring(481296523, -623753773)
2021-03-12 06:20:46,593 [main:114] - replacement of "Continuation " of type String is (752613949).toChar().uppercase()
2021-03-12 06:20:46,716 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:20:46,717 [main:66] - Compilation checking started
2021-03-12 06:20:47,294 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:47,296 [main:107] - replacing (prope5, Int)
2021-03-12 06:20:47,296 [main:50] - replacing prope5 Int
2021-03-12 06:20:47,297 [main:54] - Getting value of type Int
2021-03-12 06:20:47,427 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:47,429 [main:58] - GENERATED VALUE OF TYPE Int = 1246067645
2021-03-12 06:20:47,429 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:47,743 [main:67] - randomType = LinkedHashMap<Byte, Kla9>
2021-03-12 06:20:47,864 [main:302] - generating value of type = LinkedHashMap<Byte, Kla9> false depth = 0
2021-03-12 06:20:47,992 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Byte, Kla9>): LkedHashMap<Byte, Kla9> = TODO()
2021-03-12 06:20:47,995 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Byte, Kla9>): LkedHashMap<Byte, Kla9> = TODO()
2021-03-12 06:20:48,123 [main:302] - generating value of type = Pair<Byte, Kla9> false depth = 3
2021-03-12 06:20:48,254 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte, second: Kla9): Pair<Byte, Kla9> = TODO()
2021-03-12 06:20:48,257 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte, second: Kla9): Pair<Byte, Kla9> = TODO()
2021-03-12 06:20:48,386 [main:302] - generating value of type = Byte true depth = 6
2021-03-12 06:20:48,389 [main:302] - generating value of type = Kla9 false depth = 6
2021-03-12 06:20:48,391 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:20:48,391 [main:95] - GENERATED = Pair<Byte, Kla9>(98, Kla9())
2021-03-12 06:20:48,391 [main:95] - GENERATED = linkedMapOf<Byte, Kla9>(Pair<Byte, Kla9>(98, Kla9()))
2021-03-12 06:20:48,507 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@318821c7]
2021-03-12 06:20:48,637 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:48,640 [main:78] - Generated call from random type = (linkedMapOf<Byte, Kla9>(Pair<Byte, Kla9>(98, Kla9()))).size.coerceAtLeast(-395894130)
2021-03-12 06:20:48,641 [main:106] - GETTING Int from String
2021-03-12 06:20:48,663 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60c69660]]
2021-03-12 06:20:48,663 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:20:48,663 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60c69660]
2021-03-12 06:20:48,810 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:48,812 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).or(2001878438)
2021-03-12 06:20:48,813 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@7c17e024]]
2021-03-12 06:20:48,813 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:20:48,937 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:48,940 [main:117] - GENERATED CALL = (fu1()).compareTo("prgpc").sign
2021-03-12 06:20:48,940 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2dd14806]]
2021-03-12 06:20:48,940 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2dd14806]
2021-03-12 06:20:49,062 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:49,188 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:49,191 [main:117] - GENERATED CALL = (fu1()).length.coerceIn(-2007997686, 2040310014)
2021-03-12 06:20:49,191 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6d5a43c1]]
2021-03-12 06:20:49,191 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6d5a43c1]
2021-03-12 06:20:49,191 [main:117] - GENERATED CALL = (fu1()).length.takeHighestOneBit()
2021-03-12 06:20:49,191 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@547795ca]]
2021-03-12 06:20:49,191 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:20:49,192 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@547795ca]
2021-03-12 06:20:49,320 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:49,323 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).coerceAtMost(-1173885120)
2021-03-12 06:20:49,323 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@4458ecb8]]
2021-03-12 06:20:49,323 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:49,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:49,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:49,573 [main:117] - GENERATED CALL = (fu1()).subSequence(1951621761, 857446966).length
2021-03-12 06:20:49,573 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78863bf8]]
2021-03-12 06:20:49,573 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:20:49,573 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78863bf8]
2021-03-12 06:20:49,696 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:49,699 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).and(-384676650)
2021-03-12 06:20:49,699 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63c9df77]]
2021-03-12 06:20:49,699 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:20:49,699 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63c9df77]
2021-03-12 06:20:49,699 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).dec()
2021-03-12 06:20:49,699 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63d3006a]]
2021-03-12 06:20:49,699 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:20:49,821 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:49,824 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63d3006a]
2021-03-12 06:20:49,824 [main:117] - GENERATED CALL = (fu1()).compareTo("qmgld").inc()
2021-03-12 06:20:49,824 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@550ae683]]
2021-03-12 06:20:49,824 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:20:49,946 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:49,949 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@550ae683]
2021-03-12 06:20:49,949 [main:117] - GENERATED CALL = (fu1()).compareTo("gdixq").takeLowestOneBit()
2021-03-12 06:20:49,949 [main:114] - replacement of prope5 of type Int is (fu1()).compareTo(fu1()).coerceAtMost(-1173885120)
2021-03-12 06:20:50,100 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:20:50,100 [main:66] - Compilation checking started
2021-03-12 06:20:50,727 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:50,729 [main:107] - replacing ({
        prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "vwncs"})})
    }, Unit?)
2021-03-12 06:20:50,729 [main:50] - replacing {
        prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "vwncs"})})
    } Unit?
2021-03-12 06:20:50,730 [main:54] - Getting value of type Unit?
2021-03-12 06:20:50,861 [main:58] - GENERATED VALUE OF TYPE Unit? = null
2021-03-12 06:20:50,861 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:51,016 [main:67] - randomType = Kla2
2021-03-12 06:20:51,143 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 06:20:51,146 [main:112] - generating klass Kla2 text = class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}
2021-03-12 06:20:51,275 [main:194] - Type params = []
2021-03-12 06:20:51,410 [main:106] - GETTING Unit? from String
2021-03-12 06:20:51,427 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f6c37b]]
2021-03-12 06:20:51,427 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:51,577 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:51,706 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:51,709 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f6c37b]
2021-03-12 06:20:51,836 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 06:20:51,839 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:20:51,972 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:20:51,975 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:20:52,398 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:20:52,401 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:20:52,403 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:20:52,403 [main:95] - GENERATED = check(true, { "qlohr"})
2021-03-12 06:20:52,404 [main:117] - GENERATED CALL = (fu1())?.subSequence(1416173920, -464327665).forEachIndexed({a: Int, b: Char -> check(true, { "qlohr"})})
2021-03-12 06:20:52,404 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac46097]]
2021-03-12 06:20:52,404 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:20:52,535 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:52,665 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:52,668 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac46097]
2021-03-12 06:20:52,794 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 06:20:52,796 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:20:52,970 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:20:52,974 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:20:53,275 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:20:53,275 [main:95] - GENERATED = println("tvkdi")
2021-03-12 06:20:53,276 [main:117] - GENERATED CALL = (fu1())?.subSequence(-12792337, -1954915937).forEach({a: Char -> println("tvkdi")})
2021-03-12 06:20:53,276 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac46097]]
2021-03-12 06:20:53,276 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac46097]
2021-03-12 06:20:53,403 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 06:20:53,405 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:20:53,539 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:20:53,543 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:20:53,970 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:20:53,973 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:20:53,975 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:20:53,976 [main:95] - GENERATED = check(false, { "ssvxr"})
2021-03-12 06:20:53,976 [main:117] - GENERATED CALL = (fu1())?.forEach({a: Char -> check(false, { "ssvxr"})})
2021-03-12 06:20:53,976 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f6c37b]]
2021-03-12 06:20:53,976 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f6c37b]
2021-03-12 06:20:54,102 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 06:20:54,105 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:20:54,269 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:20:54,273 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:20:54,573 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:20:54,576 [main:95] - GENERATED = require(true)
2021-03-12 06:20:54,576 [main:117] - GENERATED CALL = (fu1())?.forEachIndexed({a: Int, b: Char -> require(true)})
2021-03-12 06:20:54,576 [main:114] - replacement of {
        prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "vwncs"})})
    } of type Unit? is (fu1())?.forEachIndexed({a: Int, b: Char -> require(true)})
2021-03-12 06:20:54,701 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 06:20:54,702 [main:66] - Compilation checking started
2021-03-12 06:20:54,707 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:20:54,707 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) (fu1())?.forEachIndexed({a: Int, b: Char -> require(true)})
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:54,709 [main:107] - replacing (s, Kla0)
2021-03-12 06:20:54,709 [main:50] - replacing s Kla0
2021-03-12 06:20:54,709 [main:54] - Getting value of type Kla0
2021-03-12 06:20:54,836 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:20:54,838 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:20:54,964 [main:194] - Type params = []
2021-03-12 06:20:55,087 [main:302] - generating value of type = Int true depth = 2
2021-03-12 06:20:55,090 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0(-1145700887)
2021-03-12 06:20:55,090 [main:61] - GENERATED IS CALL =true
2021-03-12 06:20:56,082 [main:67] - randomType = Function2<Pair<Kla7<Double>, Kla0>?, Kla4, Kla5>
2021-03-12 06:20:56,083 [main:106] - GETTING Kla0 from String
2021-03-12 06:20:56,110 [main:114] - replacement of s of type Kla0 is Kla0(-1145700887)
2021-03-12 06:20:56,240 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:20:56,240 [main:66] - Compilation checking started
2021-03-12 06:20:56,618 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().Kla0(-1145700887).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) "OK" else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:20:56,620 [main:107] - replacing (value, Ty2)
2021-03-12 06:20:56,620 [main:50] - replacing value Ty2
2021-03-12 06:20:56,620 [main:54] - Getting value of type Ty2
2021-03-12 06:20:56,745 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-12 06:20:56,750 [main:58] - GENERATED VALUE OF TYPE Ty2 = 
2021-03-12 06:20:57,060 [main:67] - randomType = UShort?
2021-03-12 06:20:57,187 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:20:57,232 [main:106] - GETTING Ty2 from String
2021-03-12 06:20:57,259 [main:111] - Cant find and generate replacement for value type Ty2
2021-03-12 06:20:57,259 [main:107] - replacing ("OK", String)
2021-03-12 06:20:57,259 [main:50] - replacing "OK" String
2021-03-12 06:20:57,259 [main:54] - Getting value of type String
2021-03-12 06:20:57,390 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:20:57,393 [main:58] - GENERATED VALUE OF TYPE String = "bhvwn"
2021-03-12 06:20:57,393 [main:61] - GENERATED IS CALL =false
2021-03-12 06:20:57,542 [main:67] - randomType = LinkedHashSet<Boolean>
2021-03-12 06:20:57,664 [main:302] - generating value of type = LinkedHashSet<Boolean> false depth = 0
2021-03-12 06:20:57,793 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Boolean> = TODO()
2021-03-12 06:20:57,796 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Boolean> = TODO()
2021-03-12 06:20:57,926 [main:95] - GENERATED = linkedSetOf<Boolean>()
2021-03-12 06:20:58,040 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@3d7e8f61]
2021-03-12 06:20:58,040 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d742035]
2021-03-12 06:20:58,040 [main:78] - Generated call from random type = (linkedSetOf<Boolean>()).toArray().contentToString()
2021-03-12 06:20:58,040 [main:106] - GETTING String from String
2021-03-12 06:20:58,056 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dedbef1]]
2021-03-12 06:20:58,056 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dedbef1]
2021-03-12 06:20:58,179 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:20:58,312 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:20:58,315 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:20:58,616 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:20:58,619 [main:95] - GENERATED = StringBuilder("mlwrw")
2021-03-12 06:20:58,742 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:20:58,745 [main:117] - GENERATED CALL = (fu1()).commonSuffixWith(StringBuilder("mlwrw"), true)
2021-03-12 06:20:58,745 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f63465f]]
2021-03-12 06:20:58,745 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f63465f]
2021-03-12 06:20:58,872 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:20:59,003 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 06:20:59,006 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 06:20:59,137 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:20:59,139 [main:95] - GENERATED = mutableSetOf<Int>(1151059170)
2021-03-12 06:20:59,140 [main:117] - GENERATED CALL = (fu1()).slice(mutableSetOf<Int>(1151059170))
2021-03-12 06:20:59,140 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]]
2021-03-12 06:20:59,140 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]
2021-03-12 06:20:59,140 [main:117] - GENERATED CALL = (fu1()).reversed()
2021-03-12 06:20:59,140 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ad9c62d]]
2021-03-12 06:20:59,140 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ad9c62d]
2021-03-12 06:20:59,263 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:59,266 [main:117] - GENERATED CALL = (fu1()).substringBeforeLast('뵜', fu1())
2021-03-12 06:20:59,266 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]]
2021-03-12 06:20:59,266 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]
2021-03-12 06:20:59,391 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:59,393 [main:117] - GENERATED CALL = (fu1()).length.toString(-1149098129)
2021-03-12 06:20:59,393 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34f03547]]
2021-03-12 06:20:59,393 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34f03547]
2021-03-12 06:20:59,518 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:20:59,520 [main:117] - GENERATED CALL = (fu1()).take(2062285198)
2021-03-12 06:20:59,521 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cb7e27c]]
2021-03-12 06:20:59,521 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cb7e27c]
2021-03-12 06:20:59,643 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 06:20:59,646 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:20:59,649 [main:117] - GENERATED CALL = (fu1()).filterIndexed({a: Int, b: Char -> false})
2021-03-12 06:20:59,649 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c4f507]]
2021-03-12 06:20:59,649 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c4f507]
2021-03-12 06:20:59,775 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:20:59,778 [main:117] - GENERATED CALL = (fu1()).substringAfterLast('', fu1())
2021-03-12 06:20:59,778 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ba3fd40]]
2021-03-12 06:20:59,778 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ba3fd40]
2021-03-12 06:20:59,941 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:20:59,943 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:20:59,946 [main:117] - GENERATED CALL = (fu1()).filter({a: Char -> true})
2021-03-12 06:20:59,946 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265aba52]]
2021-03-12 06:20:59,947 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:21:00,088 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:00,091 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265aba52]
2021-03-12 06:21:00,091 [main:117] - GENERATED CALL = (fu1()).get(821097661).plus(fu1())
2021-03-12 06:21:00,091 [main:114] - replacement of "OK" of type String is (linkedSetOf<Boolean>()).toArray().contentToString()
2021-03-12 06:21:00,215 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:00,215 [main:66] - Compilation checking started
2021-03-12 06:21:00,958 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:00,960 [main:107] - replacing (prope3.exceptionOrNull(), Throwable?)
2021-03-12 06:21:00,960 [main:50] - replacing prope3.exceptionOrNull() Throwable?
2021-03-12 06:21:00,960 [main:54] - Getting value of type Throwable?
2021-03-12 06:21:01,099 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 06:21:01,234 [main:43] - GENERATING CALL OF fun NoWhenBranchMatchedException(message: kotlin.String?): Throwable = TODO()
2021-03-12 06:21:01,238 [main:61] - WITHOUT TYPE PARAMS = fun NoWhenBranchMatchedException(message: kotlin.String?): Throwable = TODO()
2021-03-12 06:21:01,523 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:21:01,526 [main:95] - GENERATED = NoWhenBranchMatchedException("gckgd")
2021-03-12 06:21:01,526 [main:58] - GENERATED VALUE OF TYPE Throwable? = NoWhenBranchMatchedException("gckgd")
2021-03-12 06:21:01,526 [main:61] - GENERATED IS CALL =true
2021-03-12 06:21:02,164 [main:67] - randomType = MutableMap<UByte?, Float>
2021-03-12 06:21:02,165 [main:106] - GETTING Throwable? from String
2021-03-12 06:21:02,183 [main:114] - replacement of prope3.exceptionOrNull() of type Throwable? is NoWhenBranchMatchedException("gckgd")
2021-03-12 06:21:02,316 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:21:02,316 [main:66] - Compilation checking started
2021-03-12 06:21:02,970 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:02,971 [main:107] - replacing (method, String)
2021-03-12 06:21:02,972 [main:50] - replacing method String
2021-03-12 06:21:02,972 [main:54] - Getting value of type String
2021-03-12 06:21:03,106 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:03,109 [main:58] - GENERATED VALUE OF TYPE String = "cagyp"
2021-03-12 06:21:03,109 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:03,398 [main:67] - randomType = Double?
2021-03-12 06:21:03,524 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:21:03,556 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@287f0369]
2021-03-12 06:21:03,557 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]
2021-03-12 06:21:03,702 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:03,704 [main:78] - Generated call from random type = (0.9946630176022305)?.toInt().toString(674732964)
2021-03-12 06:21:03,705 [main:106] - GETTING String from String
2021-03-12 06:21:03,727 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19f6fc7d]]
2021-03-12 06:21:03,727 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19f6fc7d]
2021-03-12 06:21:03,857 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:03,860 [main:117] - GENERATED CALL = (fu1()).dropLast(-651649866)
2021-03-12 06:21:03,860 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dd2a02e]]
2021-03-12 06:21:03,860 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dd2a02e]
2021-03-12 06:21:03,860 [main:117] - GENERATED CALL = (fu1()).capitalize()
2021-03-12 06:21:03,860 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e6a54de]]
2021-03-12 06:21:03,860 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:21:03,988 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:04,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:04,124 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e6a54de]
2021-03-12 06:21:04,251 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:21:04,383 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:21:04,387 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:21:04,665 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:21:04,668 [main:95] - GENERATED = StringBuilder(580651682)
2021-03-12 06:21:04,795 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:04,797 [main:117] - GENERATED CALL = (fu1()).subSequence(-923740491, -216959322).commonPrefixWith(StringBuilder(580651682), false)
2021-03-12 06:21:04,797 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c05dbf1]]
2021-03-12 06:21:04,798 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:21:04,923 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:04,926 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c05dbf1]
2021-03-12 06:21:04,926 [main:117] - GENERATED CALL = (fu1()).get(244555903).lowercase()
2021-03-12 06:21:04,926 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34f03547]]
2021-03-12 06:21:04,926 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34f03547]
2021-03-12 06:21:05,053 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:05,055 [main:117] - GENERATED CALL = (fu1()).take(1467062650)
2021-03-12 06:21:05,056 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2864a84]]
2021-03-12 06:21:05,056 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2864a84]
2021-03-12 06:21:05,183 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:05,329 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:05,459 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:05,462 [main:117] - GENERATED CALL = (fu1()).replaceBefore('態', "yfrnd", "wpxqc")
2021-03-12 06:21:05,462 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cb7e27c]]
2021-03-12 06:21:05,462 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cb7e27c]
2021-03-12 06:21:05,590 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 06:21:05,593 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:21:05,596 [main:117] - GENERATED CALL = (fu1()).filterIndexed({a: Int, b: Char -> false})
2021-03-12 06:21:05,596 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3247a129]]
2021-03-12 06:21:05,596 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3247a129]
2021-03-12 06:21:05,723 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:05,854 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:05,984 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:05,986 [main:117] - GENERATED CALL = (fu1()).replace('輲', '焪', false)
2021-03-12 06:21:05,987 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188fd882]]
2021-03-12 06:21:05,987 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188fd882]
2021-03-12 06:21:06,114 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:06,244 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:06,247 [main:117] - GENERATED CALL = (fu1()).padStart(1357580774, 'ﹸ')
2021-03-12 06:21:06,247 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@172a9fb6]]
2021-03-12 06:21:06,247 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@172a9fb6]
2021-03-12 06:21:06,376 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:06,379 [main:117] - GENERATED CALL = (fu1()).takeLast(-918140580)
2021-03-12 06:21:06,379 [main:114] - replacement of method of type String is (fu1()).dropLast(-651649866)
2021-03-12 06:21:06,512 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:06,513 [main:66] - Compilation checking started
2021-03-12 06:21:07,168 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:07,171 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 06:21:07,171 [main:50] - replacing numberOfSuspensions Int
2021-03-12 06:21:07,171 [main:54] - Getting value of type Int
2021-03-12 06:21:07,312 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:07,315 [main:58] - GENERATED VALUE OF TYPE Int = 1132635412
2021-03-12 06:21:07,315 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:07,327 [main:67] - randomType = Kla6
2021-03-12 06:21:07,458 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 06:21:07,460 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:21:07,478 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ffefe13]
2021-03-12 06:21:07,479 [main:78] - Generated call from random type = (Kla6()).prope3?.hashCode()!!
2021-03-12 06:21:07,479 [main:106] - GETTING Int from String
2021-03-12 06:21:07,501 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b2220c]]
2021-03-12 06:21:07,501 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b2220c]
2021-03-12 06:21:07,628 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:07,630 [main:117] - GENERATED CALL = (fu1()).length.compareTo(53)
2021-03-12 06:21:07,631 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@30393db8]]
2021-03-12 06:21:07,631 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:21:07,757 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:07,760 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@30393db8]
2021-03-12 06:21:07,886 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:07,889 [main:117] - GENERATED CALL = (fu1()).get(-790998334).compareTo('')
2021-03-12 06:21:07,889 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a360264]]
2021-03-12 06:21:07,889 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a360264]
2021-03-12 06:21:07,889 [main:117] - GENERATED CALL = (fu1()).length.unaryMinus()
2021-03-12 06:21:07,889 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a360264]]
2021-03-12 06:21:07,889 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:07,889 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a360264]
2021-03-12 06:21:07,890 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).unaryMinus()
2021-03-12 06:21:07,890 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@710b7f09]]
2021-03-12 06:21:07,890 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:21:08,020 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:08,150 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:08,153 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@710b7f09]
2021-03-12 06:21:08,285 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 06:21:08,419 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 06:21:08,423 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 06:21:08,563 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:21:08,566 [main:95] - GENERATED = charArrayOf('쾷')
2021-03-12 06:21:08,693 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:08,844 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:08,847 [main:117] - GENERATED CALL = (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true)
2021-03-12 06:21:08,847 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6d5a43c1]]
2021-03-12 06:21:08,847 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6d5a43c1]
2021-03-12 06:21:08,848 [main:117] - GENERATED CALL = (fu1()).length.takeHighestOneBit()
2021-03-12 06:21:08,848 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e3a9bf]]
2021-03-12 06:21:08,848 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e3a9bf]
2021-03-12 06:21:08,977 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:08,980 [main:117] - GENERATED CALL = (fu1()).length.ushr(1442260581)
2021-03-12 06:21:08,980 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5]]
2021-03-12 06:21:08,980 [main:117] - GENERATED CALL = (fu1()).length
2021-03-12 06:21:08,980 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4941a87d]]
2021-03-12 06:21:08,980 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:21:09,108 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:09,238 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:09,241 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4941a87d]
2021-03-12 06:21:09,369 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 06:21:09,372 [main:302] - generating value of type = Int true depth = 1
2021-03-12 06:21:09,375 [main:117] - GENERATED CALL = (fu1()).subSequence(533787368, -1127383639).sumOf({a: Char -> 179968997})
2021-03-12 06:21:09,375 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63c9df77]]
2021-03-12 06:21:09,375 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63c9df77]
2021-03-12 06:21:09,375 [main:117] - GENERATED CALL = (fu1()).length.dec()
2021-03-12 06:21:09,375 [main:114] - replacement of numberOfSuspensions of type Int is (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true)
2021-03-12 06:21:09,503 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:09,504 [main:66] - Compilation checking started
2021-03-12 06:21:10,178 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu13(it)
    }

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:10,182 [main:107] - replacing ({
        fu13(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 06:21:10,182 [main:50] - replacing {
        fu13(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 06:21:10,182 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 06:21:10,333 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 06:21:10,336 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:21:10,342 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println()}
2021-03-12 06:21:10,342 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:10,825 [main:67] - randomType = Collection<Set<Kla3>>?
2021-03-12 06:21:10,827 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 06:21:10,862 [main:114] - replacement of {
        fu13(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println()}
2021-03-12 06:21:10,993 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:21:10,994 [main:66] - Compilation checking started
2021-03-12 06:21:11,624 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:11,627 [main:107] - replacing (prope5 != numberOfSuspensions, Boolean)
2021-03-12 06:21:11,627 [main:50] - replacing prope5 != numberOfSuspensions Boolean
2021-03-12 06:21:11,627 [main:54] - Getting value of type Boolean
2021-03-12 06:21:11,760 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:11,762 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:21:11,763 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:11,773 [main:67] - randomType = Kla3
2021-03-12 06:21:11,903 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 06:21:11,905 [main:112] - generating klass Kla3 text = class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}
2021-03-12 06:21:11,912 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@73445b32]
2021-03-12 06:21:12,045 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:21:12,045 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@142e0283]
2021-03-12 06:21:12,174 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:12,177 [main:78] - Generated call from random type = (Kla3()).equals("rqgut").and(true)
2021-03-12 06:21:12,178 [main:106] - GETTING Boolean from String
2021-03-12 06:21:12,199 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1124628a]]
2021-03-12 06:21:12,199 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1124628a]
2021-03-12 06:21:12,200 [main:117] - GENERATED CALL = (fu1()).isNotEmpty()
2021-03-12 06:21:12,200 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25774671]]
2021-03-12 06:21:12,200 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25774671]
2021-03-12 06:21:12,330 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:12,333 [main:117] - GENERATED CALL = (fu1()).startsWith(fu1(), false)
2021-03-12 06:21:12,333 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59b56969]]
2021-03-12 06:21:12,334 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:21:12,464 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:12,596 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:12,599 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59b56969]
2021-03-12 06:21:12,727 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:12,874 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:21:13,008 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:13,139 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:13,272 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:13,275 [main:117] - GENERATED CALL = (fu1()).subSequence(-1665572187, -783911781).regionMatches(-632757496, "vcvvw", -354829005, -1568889487, false)
2021-03-12 06:21:13,275 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb85afd]]
2021-03-12 06:21:13,275 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:21:13,403 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:13,406 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb85afd]
2021-03-12 06:21:13,406 [main:117] - GENERATED CALL = (fu1()).get(-1702069763).isLetter()
2021-03-12 06:21:13,406 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3420a696]]
2021-03-12 06:21:13,406 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:21:13,536 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:13,538 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3420a696]
2021-03-12 06:21:13,539 [main:117] - GENERATED CALL = (fu1()).get(171319343).isLowerCase()
2021-03-12 06:21:13,539 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73f4c35f]]
2021-03-12 06:21:13,539 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:13,675 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:13,678 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73f4c35f]
2021-03-12 06:21:13,809 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:21:13,810 [main:117] - GENERATED CALL = (fu1()).compareTo("kfzkt").equals("wwxhg")
2021-03-12 06:21:13,810 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@18d3759c]]
2021-03-12 06:21:13,810 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683]
2021-03-12 06:21:13,948 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:21:13,948 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@18d3759c]
2021-03-12 06:21:13,948 [main:117] - GENERATED CALL = (fu1()).equals("cxetq").not()
2021-03-12 06:21:13,948 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32df1b82]]
2021-03-12 06:21:13,948 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:21:14,079 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:14,082 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32df1b82]
2021-03-12 06:21:14,082 [main:117] - GENERATED CALL = (fu1()).get(-2571136).isDigit()
2021-03-12 06:21:14,082 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280775a9]]
2021-03-12 06:21:14,082 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280775a9]
2021-03-12 06:21:14,083 [main:117] - GENERATED CALL = (fu1()).any()
2021-03-12 06:21:14,083 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73f4c35f]]
2021-03-12 06:21:14,083 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73f4c35f]
2021-03-12 06:21:14,212 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:21:14,212 [main:117] - GENERATED CALL = (fu1()).length.equals("utffw")
2021-03-12 06:21:14,212 [main:114] - replacement of prope5 != numberOfSuspensions of type Boolean is (fu1()).isNotEmpty()
2021-03-12 06:21:14,349 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:14,349 [main:66] - Compilation checking started
2021-03-12 06:21:14,989 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:14,992 [main:107] - replacing (1, Int)
2021-03-12 06:21:14,992 [main:50] - replacing 1 Int
2021-03-12 06:21:14,992 [main:54] - Getting value of type Int
2021-03-12 06:21:15,126 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:15,129 [main:58] - GENERATED VALUE OF TYPE Int = -1840685
2021-03-12 06:21:15,129 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:15,428 [main:67] - randomType = HashSet<ULong>
2021-03-12 06:21:15,556 [main:302] - generating value of type = HashSet<ULong> false depth = 0
2021-03-12 06:21:15,690 [main:43] - GENERATING CALL OF fun <E> HashSet(elements: kotlin.collections.Collection<ULong>): HashSet<ULong> = TODO()
2021-03-12 06:21:15,694 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(elements: kotlin.collections.Collection<ULong>): HashSet<ULong> = TODO()
2021-03-12 06:21:15,982 [main:302] - generating value of type = Collection<ULong> false depth = 3
2021-03-12 06:21:16,116 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: ULong): Collection<ULong> = TODO()
2021-03-12 06:21:16,120 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: ULong): Collection<ULong> = TODO()
2021-03-12 06:21:16,257 [main:302] - generating value of type = ULong true depth = 6
2021-03-12 06:21:16,260 [main:95] - GENERATED = listOfNotNull<ULong>(5993824478160694100.toULong())
2021-03-12 06:21:16,260 [main:95] - GENERATED = HashSet<ULong>(listOfNotNull<ULong>(5993824478160694100.toULong()))
2021-03-12 06:21:16,381 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60c69660]
2021-03-12 06:21:16,513 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:16,516 [main:78] - Generated call from random type = (HashSet<ULong>(listOfNotNull<ULong>(5993824478160694100.toULong()))).size.or(819584783)
2021-03-12 06:21:16,517 [main:106] - GETTING Int from String
2021-03-12 06:21:16,535 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3436da82]]
2021-03-12 06:21:16,535 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3436da82]
2021-03-12 06:21:16,663 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:16,665 [main:117] - GENERATED CALL = (fu1()).length.rotateLeft(-744753200)
2021-03-12 06:21:16,665 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fcbf387]]
2021-03-12 06:21:16,666 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fcbf387]
2021-03-12 06:21:16,666 [main:117] - GENERATED CALL = (fu1()).length.inv()
2021-03-12 06:21:16,666 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@575e2c6f]]
2021-03-12 06:21:16,666 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@575e2c6f]
2021-03-12 06:21:16,666 [main:117] - GENERATED CALL = (fu1()).length.toInt()
2021-03-12 06:21:16,666 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63c9df77]]
2021-03-12 06:21:16,666 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:16,666 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63c9df77]
2021-03-12 06:21:16,666 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).dec()
2021-03-12 06:21:16,666 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1edd6c8c]]
2021-03-12 06:21:16,666 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:16,816 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:16,819 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1edd6c8c]
2021-03-12 06:21:16,947 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:16,950 [main:117] - GENERATED CALL = (fu1()).compareTo("ummjh").div(-31)
2021-03-12 06:21:16,950 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fa3b707]]
2021-03-12 06:21:16,950 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:21:17,078 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:17,211 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:17,214 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fa3b707]
2021-03-12 06:21:17,342 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:21:17,345 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:21:17,348 [main:117] - GENERATED CALL = (fu1()).subSequence(626721408, 687493598).indexOfFirst({a: Char -> true})
2021-03-12 06:21:17,348 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b2220c]]
2021-03-12 06:21:17,348 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:17,476 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:17,479 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b2220c]
2021-03-12 06:21:17,606 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:17,609 [main:117] - GENERATED CALL = (fu1()).compareTo("xhjjf").compareTo(-72)
2021-03-12 06:21:17,609 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63c9df77]]
2021-03-12 06:21:17,609 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63c9df77]
2021-03-12 06:21:17,609 [main:117] - GENERATED CALL = (fu1()).length.dec()
2021-03-12 06:21:17,609 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@28d6d970]]
2021-03-12 06:21:17,609 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:17,609 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@28d6d970]
2021-03-12 06:21:17,738 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:17,741 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).rotateRight(1856999244)
2021-03-12 06:21:17,741 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45ae53aa]]
2021-03-12 06:21:17,741 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45ae53aa]
2021-03-12 06:21:17,868 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:17,871 [main:117] - GENERATED CALL = (fu1()).length.plus(88)
2021-03-12 06:21:17,872 [main:114] - replacement of 1 of type Int is (fu1()).compareTo(fu1()).rotateRight(1856999244)
2021-03-12 06:21:17,998 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:17,998 [main:66] - Compilation checking started
2021-03-12 06:21:18,608 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).compareTo(fu1()).rotateRight(1856999244)..numberOfSuspensions) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:18,610 [main:107] - replacing (prope2, Kla9)
2021-03-12 06:21:18,610 [main:50] - replacing prope2 Kla9
2021-03-12 06:21:18,610 [main:54] - Getting value of type Kla9
2021-03-12 06:21:18,739 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 06:21:18,742 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).compareTo(fu1()).rotateRight(1856999244)..numberOfSuspensions) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:21:18,742 [main:58] - GENERATED VALUE OF TYPE Kla9 = Kla9()
2021-03-12 06:21:18,742 [main:61] - GENERATED IS CALL =true
2021-03-12 06:21:19,061 [main:67] - randomType = Kla10?
2021-03-12 06:21:19,197 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-12 06:21:19,200 [main:112] - generating klass Kla10 text = object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:21:19,219 [main:106] - GETTING Kla9 from String
2021-03-12 06:21:19,234 [main:114] - replacement of prope2 of type Kla9 is Kla9()
2021-03-12 06:21:19,362 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:21:19,362 [main:66] - Compilation checking started
2021-03-12 06:21:19,976 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).compareTo(fu1()).rotateRight(1856999244)..numberOfSuspensions) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:19,978 [main:107] - replacing ((fu1()).compareTo(fu1()).rotateRight(1856999244)..numberOfSuspensions, IntRange)
2021-03-12 06:21:19,979 [main:50] - replacing (fu1()).compareTo(fu1()).rotateRight(1856999244)..numberOfSuspensions IntRange
2021-03-12 06:21:19,979 [main:54] - Getting value of type IntRange
2021-03-12 06:21:20,114 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 06:21:20,250 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 06:21:20,254 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 06:21:20,691 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:21:20,696 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:21:20,700 [main:95] - GENERATED = IntRange(-395686671, 49809127)
2021-03-12 06:21:20,700 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-395686671, 49809127)
2021-03-12 06:21:20,700 [main:61] - GENERATED IS CALL =true
2021-03-12 06:21:20,850 [main:67] - randomType = ULong
2021-03-12 06:21:21,002 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 06:21:21,034 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4948e2ce]
2021-03-12 06:21:21,034 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@48b193f0]
2021-03-12 06:21:21,162 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:21,165 [main:78] - Generated call from random type = (6135625570932460256.toULong()).toByte().rangeTo(45)
2021-03-12 06:21:21,166 [main:106] - GETTING IntRange from String
2021-03-12 06:21:21,182 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@262d6ef0]]
2021-03-12 06:21:21,183 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@262d6ef0]
2021-03-12 06:21:21,310 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:21,312 [main:117] - GENERATED CALL = (fu1()).length.until(-112)
2021-03-12 06:21:21,313 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@262d6ef0]]
2021-03-12 06:21:21,313 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:21,442 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:21,445 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@262d6ef0]
2021-03-12 06:21:21,573 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:21,576 [main:117] - GENERATED CALL = (fu1()).compareTo("rykzy").until(-59)
2021-03-12 06:21:21,576 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68a395f1]]
2021-03-12 06:21:21,576 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:21,576 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68a395f1]
2021-03-12 06:21:21,705 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:21,708 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).rangeTo(-100)
2021-03-12 06:21:21,708 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@48d4b17a]]
2021-03-12 06:21:21,708 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:21:21,841 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:21,972 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:21,975 [main:117] - GENERATED CALL = (fu1()).subSequence(-1743728968, 647755156).indices
2021-03-12 06:21:21,975 [main:113] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@48d4b17a]]
2021-03-12 06:21:21,975 [main:117] - GENERATED CALL = (fu1()).indices
2021-03-12 06:21:21,975 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68a395f1]]
2021-03-12 06:21:21,975 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68a395f1]
2021-03-12 06:21:22,105 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:22,108 [main:117] - GENERATED CALL = (fu1()).length.rangeTo(-81)
2021-03-12 06:21:22,108 [main:114] - replacement of (fu1()).compareTo(fu1()).rotateRight(1856999244)..numberOfSuspensions of type IntRange is (fu1()).length.until(-112)
2021-03-12 06:21:22,236 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:22,236 [main:66] - Compilation checking started
2021-03-12 06:21:22,856 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:22,858 [main:107] - replacing (fu9().s, Kla0)
2021-03-12 06:21:22,858 [main:50] - replacing fu9().s Kla0
2021-03-12 06:21:22,858 [main:54] - Getting value of type Kla0
2021-03-12 06:21:22,998 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:21:23,001 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:21:23,150 [main:194] - Type params = []
2021-03-12 06:21:23,280 [main:302] - generating value of type = Int true depth = 2
2021-03-12 06:21:23,284 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0(1835796833)
2021-03-12 06:21:23,284 [main:61] - GENERATED IS CALL =true
2021-03-12 06:21:23,433 [main:67] - randomType = UShort
2021-03-12 06:21:23,564 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:21:23,600 [main:106] - GETTING Kla0 from String
2021-03-12 06:21:23,623 [main:114] - replacement of fu9().s of type Kla0 is Kla0(1835796833)
2021-03-12 06:21:23,752 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:21:23,752 [main:66] - Compilation checking started
2021-03-12 06:21:24,367 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:24,370 [main:107] - replacing (prope5, Int)
2021-03-12 06:21:24,370 [main:50] - replacing prope5 Int
2021-03-12 06:21:24,370 [main:54] - Getting value of type Int
2021-03-12 06:21:24,499 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:24,502 [main:58] - GENERATED VALUE OF TYPE Int = 2048679997
2021-03-12 06:21:24,502 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:24,513 [main:67] - randomType = Kla0
2021-03-12 06:21:24,642 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:21:24,645 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:21:24,774 [main:194] - Type params = []
2021-03-12 06:21:24,902 [main:302] - generating value of type = Int true depth = 2
2021-03-12 06:21:24,910 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2dd14806]
2021-03-12 06:21:25,041 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:25,192 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:25,195 [main:78] - Generated call from random type = (Kla0(-74712225)).x.coerceIn(2144735662, 895856593)
2021-03-12 06:21:25,196 [main:106] - GETTING Int from String
2021-03-12 06:21:25,213 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@28d6d970]]
2021-03-12 06:21:25,214 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:25,214 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@28d6d970]
2021-03-12 06:21:25,343 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:25,346 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).rotateRight(-1895699012)
2021-03-12 06:21:25,346 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f59ea2e]]
2021-03-12 06:21:25,346 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:25,346 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f59ea2e]
2021-03-12 06:21:25,346 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).countOneBits()
2021-03-12 06:21:25,346 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e632c01]]
2021-03-12 06:21:25,346 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e632c01]
2021-03-12 06:21:25,475 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:25,477 [main:117] - GENERATED CALL = (fu1()).length.shl(659182737)
2021-03-12 06:21:25,478 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b2220c]]
2021-03-12 06:21:25,478 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:25,478 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b2220c]
2021-03-12 06:21:25,608 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:25,611 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).compareTo(-68)
2021-03-12 06:21:25,611 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3436da82]]
2021-03-12 06:21:25,611 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3436da82]
2021-03-12 06:21:25,739 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:25,742 [main:117] - GENERATED CALL = (fu1()).length.rotateLeft(933082433)
2021-03-12 06:21:25,742 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60c69660]]
2021-03-12 06:21:25,742 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:25,742 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60c69660]
2021-03-12 06:21:25,869 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:25,872 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).or(922691460)
2021-03-12 06:21:25,872 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1af03f1a]]
2021-03-12 06:21:25,872 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:25,873 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1af03f1a]
2021-03-12 06:21:26,002 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:26,005 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).minus(112)
2021-03-12 06:21:26,005 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c543742]]
2021-03-12 06:21:26,005 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:26,005 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c543742]
2021-03-12 06:21:26,134 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:26,137 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).rem(-84)
2021-03-12 06:21:26,137 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fcbf387]]
2021-03-12 06:21:26,137 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fcbf387]
2021-03-12 06:21:26,137 [main:117] - GENERATED CALL = (fu1()).length.inv()
2021-03-12 06:21:26,137 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@550ae683]]
2021-03-12 06:21:26,137 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:26,267 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:26,270 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@550ae683]
2021-03-12 06:21:26,270 [main:117] - GENERATED CALL = (fu1()).compareTo("fwqtl").takeLowestOneBit()
2021-03-12 06:21:26,270 [main:114] - replacement of prope5 of type Int is (fu1()).length.inv()
2021-03-12 06:21:26,399 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:26,399 [main:66] - Compilation checking started
2021-03-12 06:21:27,019 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((752613949).toChar().uppercase() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:27,021 [main:107] - replacing ((752613949).toChar().uppercase() + c, String)
2021-03-12 06:21:27,021 [main:50] - replacing (752613949).toChar().uppercase() + c String
2021-03-12 06:21:27,021 [main:54] - Getting value of type String
2021-03-12 06:21:27,152 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:27,155 [main:58] - GENERATED VALUE OF TYPE String = "kvpvx"
2021-03-12 06:21:27,155 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:27,166 [main:67] - randomType = Kla6
2021-03-12 06:21:27,316 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 06:21:27,319 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:21:27,337 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@77d252d6]
2021-03-12 06:21:27,338 [main:78] - Generated call from random type = (Kla6()).prope3?.toString()!!
2021-03-12 06:21:27,338 [main:106] - GETTING String from String
2021-03-12 06:21:27,361 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229767f9]]
2021-03-12 06:21:27,362 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229767f9]
2021-03-12 06:21:27,498 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 06:21:27,501 [main:302] - generating value of type = Char true depth = 1
2021-03-12 06:21:27,504 [main:117] - GENERATED CALL = (fu1()).replaceFirstChar({a: Char -> '拔'})
2021-03-12 06:21:27,504 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@796828fa]]
2021-03-12 06:21:27,504 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:21:27,635 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:27,638 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@796828fa]
2021-03-12 06:21:27,638 [main:117] - GENERATED CALL = (fu1()).get(-1367608557).uppercase()
2021-03-12 06:21:27,638 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c4f507]]
2021-03-12 06:21:27,638 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c4f507]
2021-03-12 06:21:27,768 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:27,771 [main:117] - GENERATED CALL = (fu1()).substringAfterLast('㇪', fu1())
2021-03-12 06:21:27,771 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f967db]]
2021-03-12 06:21:27,771 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:21:27,900 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:28,032 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:28,035 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f967db]
2021-03-12 06:21:28,168 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:28,171 [main:117] - GENERATED CALL = (fu1()).subSequence(-210425638, 2118267358).repeat(-499565637)
2021-03-12 06:21:28,171 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749d3ade]]
2021-03-12 06:21:28,171 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749d3ade]
2021-03-12 06:21:28,171 [main:117] - GENERATED CALL = (fu1()).prependIndent(fu1())
2021-03-12 06:21:28,171 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2864a84]]
2021-03-12 06:21:28,171 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2864a84]
2021-03-12 06:21:28,300 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:28,431 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:28,434 [main:117] - GENERATED CALL = (fu1()).replaceBefore('㋁', fu1(), "otmej")
2021-03-12 06:21:28,434 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13381232]]
2021-03-12 06:21:28,434 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13381232]
2021-03-12 06:21:28,563 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:21:28,566 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:21:28,569 [main:117] - GENERATED CALL = (fu1()).takeLastWhile({a: Char -> true})
2021-03-12 06:21:28,569 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d631a58]]
2021-03-12 06:21:28,569 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d631a58]
2021-03-12 06:21:28,700 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:28,703 [main:117] - GENERATED CALL = (fu1()).replaceBeforeLast('ღ', fu1(), fu1())
2021-03-12 06:21:28,703 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]]
2021-03-12 06:21:28,703 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]
2021-03-12 06:21:28,834 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:28,837 [main:117] - GENERATED CALL = (fu1()).length.toString(-976666928)
2021-03-12 06:21:28,837 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14901bf4]]
2021-03-12 06:21:28,837 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14901bf4]
2021-03-12 06:21:28,837 [main:117] - GENERATED CALL = (fu1()).replaceIndentByMargin(fu1(), fu1())
2021-03-12 06:21:28,837 [main:114] - replacement of (752613949).toChar().uppercase() + c of type String is (fu1()).replaceIndentByMargin(fu1(), fu1())
2021-03-12 06:21:28,968 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:28,968 [main:66] - Compilation checking started
2021-03-12 06:21:29,594 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = 42

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:29,597 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 06:21:29,597 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 06:21:29,597 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 06:21:29,733 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 06:21:29,738 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 06:21:30,231 [main:67] - randomType = HashMap<Function1<Float, Kla4>, Boolean>
2021-03-12 06:21:30,361 [main:302] - generating value of type = HashMap<Function1<Float, Kla4>, Boolean> false depth = 0
2021-03-12 06:21:30,496 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Function1<Float, Kla4>, Boolean> = TODO()
2021-03-12 06:21:30,500 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Function1<Float, Kla4>, Boolean> = TODO()
2021-03-12 06:21:30,637 [main:95] - GENERATED = hashMapOf<Function1<Float, Kla4>, Boolean>()
2021-03-12 06:21:30,759 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 06:21:30,777 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 06:21:30,777 [main:107] - replacing (42, Int)
2021-03-12 06:21:30,777 [main:50] - replacing 42 Int
2021-03-12 06:21:30,777 [main:54] - Getting value of type Int
2021-03-12 06:21:30,907 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:30,910 [main:58] - GENERATED VALUE OF TYPE Int = 1872094433
2021-03-12 06:21:30,910 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:31,233 [main:67] - randomType = Pair<Kla5?, Char>
2021-03-12 06:21:31,363 [main:302] - generating value of type = Pair<Kla5?, Char> false depth = 0
2021-03-12 06:21:31,529 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla5?, second: Char): Pair<Kla5?, Char> = TODO()
2021-03-12 06:21:31,533 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla5?, second: Char): Pair<Kla5?, Char> = TODO()
2021-03-12 06:21:31,671 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-12 06:21:31,674 [main:112] - generating klass Kla5 text = open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}
2021-03-12 06:21:31,803 [main:194] - Type params = []
2021-03-12 06:21:31,931 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 06:21:32,066 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:21:32,070 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:21:32,365 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 06:21:32,508 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:21:32,512 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:21:32,965 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 06:21:33,105 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:21:33,109 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:21:33,556 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:21:33,556 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:21:33,556 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:21:33,557 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:21:33,559 [main:95] - GENERATED = Pair<Kla5?, Char>(Kla5(), '靳')
2021-03-12 06:21:33,570 [main:78] - Generated call from random type = (Pair<Kla5?, Char>(Kla5(), '靳')).second.code
2021-03-12 06:21:33,571 [main:106] - GETTING Int from String
2021-03-12 06:21:33,587 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4fe7ba]]
2021-03-12 06:21:33,587 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:33,588 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4fe7ba]
2021-03-12 06:21:33,742 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:33,745 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).shr(-1576908663)
2021-03-12 06:21:33,745 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c9d8975]]
2021-03-12 06:21:33,745 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:21:33,875 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:34,007 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:34,010 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c9d8975]
2021-03-12 06:21:34,139 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 06:21:34,274 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 06:21:34,278 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 06:21:34,414 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:21:34,417 [main:95] - GENERATED = charArrayOf('ᑑ')
2021-03-12 06:21:34,549 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:34,682 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:34,685 [main:117] - GENERATED CALL = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)
2021-03-12 06:21:34,685 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@28d6d970]]
2021-03-12 06:21:34,685 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@28d6d970]
2021-03-12 06:21:34,814 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:34,817 [main:117] - GENERATED CALL = (fu1()).length.rotateRight(1908096193)
2021-03-12 06:21:34,817 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6d5a43c1]]
2021-03-12 06:21:34,817 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6d5a43c1]
2021-03-12 06:21:34,818 [main:117] - GENERATED CALL = (fu1()).length.takeHighestOneBit()
2021-03-12 06:21:34,818 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e632c01]]
2021-03-12 06:21:34,818 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:34,818 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e632c01]
2021-03-12 06:21:34,947 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:34,949 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).shl(519548662)
2021-03-12 06:21:34,950 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@707f6ab1]]
2021-03-12 06:21:34,950 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:35,079 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:35,082 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@707f6ab1]
2021-03-12 06:21:35,211 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:35,214 [main:117] - GENERATED CALL = (fu1()).compareTo("qdhwu").xor(-499987935)
2021-03-12 06:21:35,214 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6f0bae12]]
2021-03-12 06:21:35,214 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:35,343 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:35,346 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6f0bae12]
2021-03-12 06:21:35,346 [main:117] - GENERATED CALL = (fu1()).compareTo("gqytb").countLeadingZeroBits()
2021-03-12 06:21:35,346 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e518d5c]]
2021-03-12 06:21:35,346 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e518d5c]
2021-03-12 06:21:35,346 [main:117] - GENERATED CALL = (fu1()).toInt()
2021-03-12 06:21:35,346 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a360264]]
2021-03-12 06:21:35,346 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:35,477 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:35,479 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a360264]
2021-03-12 06:21:35,480 [main:117] - GENERATED CALL = (fu1()).compareTo("oitby").unaryMinus()
2021-03-12 06:21:35,480 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@707f6ab1]]
2021-03-12 06:21:35,480 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@707f6ab1]
2021-03-12 06:21:35,610 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:35,613 [main:117] - GENERATED CALL = (fu1()).length.xor(-1566385710)
2021-03-12 06:21:35,613 [main:114] - replacement of 42 of type Int is (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)
2021-03-12 06:21:35,771 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:35,772 [main:66] - Compilation checking started
2021-03-12 06:21:36,402 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return prope3 as String
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:36,404 [main:107] - replacing (prope3 as String, String)
2021-03-12 06:21:36,404 [main:50] - replacing prope3 as String String
2021-03-12 06:21:36,404 [main:54] - Getting value of type String
2021-03-12 06:21:36,538 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:36,541 [main:58] - GENERATED VALUE OF TYPE String = "kenwk"
2021-03-12 06:21:36,541 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:37,465 [main:67] - randomType = LinkedHashMap<Kla10?, ArrayDeque<ArrayDeque<UInt>>>
2021-03-12 06:21:37,594 [main:302] - generating value of type = LinkedHashMap<Kla10?, ArrayDeque<ArrayDeque<UInt>>> false depth = 0
2021-03-12 06:21:37,731 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Kla10?, ArrayDeque<ArrayDeque<UInt>>> = TODO()
2021-03-12 06:21:37,735 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Kla10?, ArrayDeque<ArrayDeque<UInt>>> = TODO()
2021-03-12 06:21:38,021 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:21:38,024 [main:95] - GENERATED = LinkedHashMap<Kla10?, ArrayDeque<ArrayDeque<UInt>>>(1997754214)
2021-03-12 06:21:38,229 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]
2021-03-12 06:21:38,362 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:38,365 [main:78] - Generated call from random type = (LinkedHashMap<Kla10?, ArrayDeque<ArrayDeque<UInt>>>(1997754214)).size.toString(176391758)
2021-03-12 06:21:38,365 [main:106] - GETTING String from String
2021-03-12 06:21:38,382 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f1153bb]]
2021-03-12 06:21:38,382 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f1153bb]
2021-03-12 06:21:38,382 [main:117] - GENERATED CALL = (fu1()).replaceIndent(fu1())
2021-03-12 06:21:38,382 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a25814]]
2021-03-12 06:21:38,382 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a25814]
2021-03-12 06:21:38,513 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:38,647 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:38,782 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:38,785 [main:117] - GENERATED CALL = (fu1()).replaceFirst('ﲘ', '⺦', false)
2021-03-12 06:21:38,785 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19f6fc7d]]
2021-03-12 06:21:38,785 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19f6fc7d]
2021-03-12 06:21:38,918 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:38,921 [main:117] - GENERATED CALL = (fu1()).dropLast(1413316148)
2021-03-12 06:21:38,921 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@172a9fb6]]
2021-03-12 06:21:38,921 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@172a9fb6]
2021-03-12 06:21:39,060 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:39,063 [main:117] - GENERATED CALL = (fu1()).takeLast(580120576)
2021-03-12 06:21:39,063 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58acd3f1]]
2021-03-12 06:21:39,063 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58acd3f1]
2021-03-12 06:21:39,195 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:21:39,198 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:21:39,201 [main:117] - GENERATED CALL = (fu1()).dropWhile({a: Char -> true})
2021-03-12 06:21:39,201 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ad9c62d]]
2021-03-12 06:21:39,201 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ad9c62d]
2021-03-12 06:21:39,332 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:39,335 [main:117] - GENERATED CALL = (fu1()).substringBeforeLast('밓', fu1())
2021-03-12 06:21:39,335 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a3cb49]]
2021-03-12 06:21:39,335 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a3cb49]
2021-03-12 06:21:39,467 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:21:39,470 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:21:39,473 [main:117] - GENERATED CALL = (fu1()).dropLastWhile({a: Char -> true})
2021-03-12 06:21:39,473 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1586f37e]]
2021-03-12 06:21:39,473 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1586f37e]
2021-03-12 06:21:39,605 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:21:39,608 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:21:39,610 [main:117] - GENERATED CALL = (fu1()).takeWhile({a: Char -> false})
2021-03-12 06:21:39,611 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588b5090]]
2021-03-12 06:21:39,611 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588b5090]
2021-03-12 06:21:39,741 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:39,744 [main:117] - GENERATED CALL = (fu1()).replaceAfter('?', fu1(), fu1())
2021-03-12 06:21:39,744 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fd53033]]
2021-03-12 06:21:39,744 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fd53033]
2021-03-12 06:21:39,875 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:21:39,881 [main:117] - GENERATED CALL = (fu1()).removeSurrounding("biigc")
2021-03-12 06:21:39,881 [main:114] - replacement of prope3 as String of type String is (fu1()).replaceFirst('ﲘ', '⺦', false)
2021-03-12 06:21:40,011 [main:33] - Trying to replace Element(BINARY_WITH_TYPE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:40,011 [main:66] - Compilation checking started
2021-03-12 06:21:40,632 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 {
        prope3 = (fu1()).get(1296609721).titlecase()
    }

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:40,634 [main:107] - replacing (Kla8(), Kla8)
2021-03-12 06:21:40,634 [main:50] - replacing Kla8() Kla8
2021-03-12 06:21:40,634 [main:54] - Getting value of type Kla8
2021-03-12 06:21:40,764 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 06:21:40,767 [main:112] - generating klass Kla8 text = class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 06:21:40,767 [main:58] - GENERATED VALUE OF TYPE Kla8 = Kla8()
2021-03-12 06:21:40,767 [main:61] - GENERATED IS CALL =true
2021-03-12 06:21:40,773 [main:67] - randomType = String
2021-03-12 06:21:40,903 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:40,923 [main:106] - GETTING Kla8 from String
2021-03-12 06:21:40,938 [main:114] - replacement of Kla8() of type Kla8 is Kla8()
2021-03-12 06:21:41,068 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:21:41,071 [main:107] - replacing ({
        prope3 = (fu1()).get(1296609721).titlecase()
    }, SuspendFunction0<Unit>)
2021-03-12 06:21:41,071 [main:50] - replacing {
        prope3 = (fu1()).get(1296609721).titlecase()
    } SuspendFunction0<Unit>
2021-03-12 06:21:41,071 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 06:21:41,200 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 06:21:41,203 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:21:41,340 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:21:41,344 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:21:41,630 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:21:41,630 [main:95] - GENERATED = print("jbnef")
2021-03-12 06:21:41,630 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { print("jbnef")}
2021-03-12 06:21:41,630 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:41,789 [main:67] - randomType = Kla1?
2021-03-12 06:21:41,919 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:21:41,922 [main:112] - generating klass Kla1 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)
2021-03-12 06:21:42,052 [main:194] - Type params = []
2021-03-12 06:21:42,182 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-12 06:21:42,185 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:21:42,318 [main:194] - Type params = []
2021-03-12 06:21:42,454 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:21:42,463 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 06:21:42,478 [main:114] - replacement of {
        prope3 = (fu1()).get(1296609721).titlecase()
    } of type SuspendFunction0<Unit> is { print("jbnef")}
2021-03-12 06:21:42,610 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:21:42,611 [main:66] - Compilation checking started
2021-03-12 06:21:43,243 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:43,245 [main:107] - replacing ("UNSUPPORTED_FEATURE", String)
2021-03-12 06:21:43,245 [main:50] - replacing "UNSUPPORTED_FEATURE" String
2021-03-12 06:21:43,245 [main:54] - Getting value of type String
2021-03-12 06:21:43,377 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:43,380 [main:58] - GENERATED VALUE OF TYPE String = "ywfpo"
2021-03-12 06:21:43,380 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:43,696 [main:67] - randomType = List<String>
2021-03-12 06:21:43,696 [main:106] - GETTING String from String
2021-03-12 06:21:43,713 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dedbef1]]
2021-03-12 06:21:43,713 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dedbef1]
2021-03-12 06:21:43,842 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:21:43,979 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:43,982 [main:117] - GENERATED CALL = (fu1()).commonSuffixWith("vlsak", true)
2021-03-12 06:21:43,982 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@237e162a]]
2021-03-12 06:21:43,982 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@237e162a]
2021-03-12 06:21:44,113 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:44,245 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:44,378 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:44,381 [main:117] - GENERATED CALL = (fu1()).replaceAfterLast('㖻', "zzziq", "nhwvg")
2021-03-12 06:21:44,381 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]]
2021-03-12 06:21:44,381 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]
2021-03-12 06:21:44,381 [main:117] - GENERATED CALL = (fu1()).reversed()
2021-03-12 06:21:44,381 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749d3ade]]
2021-03-12 06:21:44,381 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749d3ade]
2021-03-12 06:21:44,511 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:44,514 [main:117] - GENERATED CALL = (fu1()).prependIndent("bxpqf")
2021-03-12 06:21:44,514 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ba3fd40]]
2021-03-12 06:21:44,514 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ba3fd40]
2021-03-12 06:21:44,643 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:21:44,646 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:21:44,649 [main:117] - GENERATED CALL = (fu1()).filter({a: Char -> false})
2021-03-12 06:21:44,649 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69d73398]]
2021-03-12 06:21:44,649 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69d73398]
2021-03-12 06:21:44,649 [main:117] - GENERATED CALL = (fu1()).trimStart()
2021-03-12 06:21:44,649 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@796828fa]]
2021-03-12 06:21:44,649 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:21:44,779 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:44,782 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@796828fa]
2021-03-12 06:21:44,782 [main:117] - GENERATED CALL = (fu1()).get(93103735).uppercase()
2021-03-12 06:21:44,782 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49fa4080]]
2021-03-12 06:21:44,782 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49fa4080]
2021-03-12 06:21:44,782 [main:117] - GENERATED CALL = (fu1()).uppercase()
2021-03-12 06:21:44,782 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@278f5435]]
2021-03-12 06:21:44,782 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@278f5435]
2021-03-12 06:21:44,782 [main:117] - GENERATED CALL = (fu1()).toUpperCase()
2021-03-12 06:21:44,782 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588b5090]]
2021-03-12 06:21:44,782 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588b5090]
2021-03-12 06:21:44,912 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:44,915 [main:117] - GENERATED CALL = (fu1()).replaceAfter('움', fu1(), fu1())
2021-03-12 06:21:44,915 [main:114] - replacement of "UNSUPPORTED_FEATURE" of type String is (fu1()).replaceAfter('움', fu1(), fu1())
2021-03-12 06:21:45,048 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:45,049 [main:66] - Compilation checking started
2021-03-12 06:21:45,483 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress((fu1()).replaceAfter('움', fu1(), fu1()))
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(ss.s)

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:45,486 [main:107] - replacing (Kla1(ss.s), Kla1)
2021-03-12 06:21:45,486 [main:50] - replacing Kla1(ss.s) Kla1
2021-03-12 06:21:45,486 [main:54] - Getting value of type Kla1
2021-03-12 06:21:45,617 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:21:45,620 [main:112] - generating klass Kla1 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)
2021-03-12 06:21:45,752 [main:194] - Type params = []
2021-03-12 06:21:45,882 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-12 06:21:45,885 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:21:46,017 [main:194] - Type params = []
2021-03-12 06:21:46,147 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:21:46,150 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1(Kla0(-1464996671))
2021-03-12 06:21:46,150 [main:61] - GENERATED IS CALL =true
2021-03-12 06:21:46,155 [main:67] - randomType = Boolean
2021-03-12 06:21:46,285 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:46,298 [main:106] - GETTING Kla1 from String
2021-03-12 06:21:46,314 [main:114] - replacement of Kla1(ss.s) of type Kla1 is Kla1(Kla0(-1464996671))
2021-03-12 06:21:46,444 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:21:46,445 [main:66] - Compilation checking started
2021-03-12 06:21:47,030 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:47,033 [main:107] - replacing (x, Int)
2021-03-12 06:21:47,033 [main:50] - replacing x Int
2021-03-12 06:21:47,033 [main:54] - Getting value of type Int
2021-03-12 06:21:47,164 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:47,166 [main:58] - GENERATED VALUE OF TYPE Int = 1661595123
2021-03-12 06:21:47,166 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:47,316 [main:67] - randomType = UByte
2021-03-12 06:21:47,449 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:21:47,479 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2139a92f]
2021-03-12 06:21:47,480 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6b8aeb1b]
2021-03-12 06:21:47,631 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:21:47,634 [main:78] - Generated call from random type = (87.toUByte()).toUShort().compareTo(62.toUByte())
2021-03-12 06:21:47,635 [main:106] - GETTING Int from String
2021-03-12 06:21:47,652 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@318821c7]]
2021-03-12 06:21:47,653 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:47,785 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:47,787 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@318821c7]
2021-03-12 06:21:47,918 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:47,921 [main:117] - GENERATED CALL = (fu1()).compareTo("fzlsi").coerceAtLeast(-2002939145)
2021-03-12 06:21:47,921 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6d5a43c1]]
2021-03-12 06:21:47,921 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:47,921 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6d5a43c1]
2021-03-12 06:21:47,921 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).takeHighestOneBit()
2021-03-12 06:21:47,921 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@710b7f09]]
2021-03-12 06:21:47,922 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@710b7f09]
2021-03-12 06:21:48,053 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 06:21:48,189 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 06:21:48,192 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 06:21:48,335 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:21:48,338 [main:95] - GENERATED = charArrayOf('蜪')
2021-03-12 06:21:48,469 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:48,601 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:48,604 [main:117] - GENERATED CALL = (fu1()).indexOfAny(charArrayOf('蜪'), -1663445661, true)
2021-03-12 06:21:48,604 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78863bf8]]
2021-03-12 06:21:48,604 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78863bf8]
2021-03-12 06:21:48,734 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:48,737 [main:117] - GENERATED CALL = (fu1()).length.and(-1248639043)
2021-03-12 06:21:48,738 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@28d6d970]]
2021-03-12 06:21:48,738 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@28d6d970]
2021-03-12 06:21:48,869 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:48,872 [main:117] - GENERATED CALL = (fu1()).length.rotateRight(371146007)
2021-03-12 06:21:48,872 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f59ea2e]]
2021-03-12 06:21:48,872 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f59ea2e]
2021-03-12 06:21:48,872 [main:117] - GENERATED CALL = (fu1()).length.countOneBits()
2021-03-12 06:21:48,872 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63c9df77]]
2021-03-12 06:21:48,872 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:48,872 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63c9df77]
2021-03-12 06:21:48,872 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).dec()
2021-03-12 06:21:48,872 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@550ae683]]
2021-03-12 06:21:48,872 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@550ae683]
2021-03-12 06:21:48,872 [main:117] - GENERATED CALL = (fu1()).length.takeLowestOneBit()
2021-03-12 06:21:48,873 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3633642f]]
2021-03-12 06:21:48,873 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:21:49,003 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:49,006 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3633642f]
2021-03-12 06:21:49,006 [main:117] - GENERATED CALL = (fu1()).get(794054988).toInt()
2021-03-12 06:21:49,006 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c1a14b2]]
2021-03-12 06:21:49,006 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c1a14b2]
2021-03-12 06:21:49,007 [main:117] - GENERATED CALL = (fu1()).count()
2021-03-12 06:21:49,007 [main:114] - replacement of x of type Int is (fu1()).length.rotateRight(371146007)
2021-03-12 06:21:49,139 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:49,140 [main:66] - Compilation checking started
2021-03-12 06:21:49,539 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.(fu1()).length.rotateRight(371146007)
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 {
        prope3 = Kla3().fu10().fu3()
    }

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:49,541 [main:107] - replacing ({
        prope3 = Kla3().fu10().fu3()
    }, SuspendFunction0<Unit>)
2021-03-12 06:21:49,541 [main:50] - replacing {
        prope3 = Kla3().fu10().fu3()
    } SuspendFunction0<Unit>
2021-03-12 06:21:49,541 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 06:21:49,677 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 06:21:49,680 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:21:49,686 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { println()}
2021-03-12 06:21:49,686 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:49,840 [main:67] - randomType = UByte
2021-03-12 06:21:49,995 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:21:50,026 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 06:21:50,042 [main:114] - replacement of {
        prope3 = Kla3().fu10().fu3()
    } of type SuspendFunction0<Unit> is { println()}
2021-03-12 06:21:50,172 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:21:50,172 [main:66] - Compilation checking started
2021-03-12 06:21:50,765 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:50,767 [main:107] - replacing ({ it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true }, Function0<Boolean>)
2021-03-12 06:21:50,767 [main:50] - replacing { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } Function0<Boolean>
2021-03-12 06:21:50,767 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 06:21:50,897 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 06:21:50,900 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:21:50,903 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-12 06:21:50,903 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:51,052 [main:67] - randomType = Short
2021-03-12 06:21:51,182 [main:302] - generating value of type = Short true depth = 0
2021-03-12 06:21:51,215 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 06:21:51,231 [main:114] - replacement of { it?.methodName?.startsWith((fu1()).dropLast(-651649866)) == true } of type Function0<Boolean> is { false}
2021-03-12 06:21:51,361 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:21:51,361 [main:66] - Compilation checking started
2021-03-12 06:21:51,957 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:51,959 [main:107] - replacing (prope5, Int)
2021-03-12 06:21:51,959 [main:50] - replacing prope5 Int
2021-03-12 06:21:51,959 [main:54] - Getting value of type Int
2021-03-12 06:21:52,093 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:52,095 [main:58] - GENERATED VALUE OF TYPE Int = 2079891485
2021-03-12 06:21:52,095 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:52,101 [main:67] - randomType = Int
2021-03-12 06:21:52,229 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:52,262 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d10338]
2021-03-12 06:21:52,391 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:52,415 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fcbf387]
2021-03-12 06:21:52,415 [main:78] - Generated call from random type = (-1698907140).compareTo(-558580759).inv()
2021-03-12 06:21:52,416 [main:106] - GETTING Int from String
2021-03-12 06:21:52,432 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60c69660]]
2021-03-12 06:21:52,433 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:52,433 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60c69660]
2021-03-12 06:21:52,563 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:52,566 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).or(-986228816)
2021-03-12 06:21:52,566 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c488c1e]]
2021-03-12 06:21:52,566 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:21:52,695 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:52,826 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:52,829 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c488c1e]
2021-03-12 06:21:52,958 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:53,091 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:53,221 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:53,224 [main:117] - GENERATED CALL = (fu1()).subSequence(-153005347, 553893757).indexOf('꡴', -85705472, false)
2021-03-12 06:21:53,224 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f59ea2e]]
2021-03-12 06:21:53,224 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f59ea2e]
2021-03-12 06:21:53,224 [main:117] - GENERATED CALL = (fu1()).length.countOneBits()
2021-03-12 06:21:53,224 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3436da82]]
2021-03-12 06:21:53,224 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3436da82]
2021-03-12 06:21:53,352 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:53,355 [main:117] - GENERATED CALL = (fu1()).length.rotateLeft(-286019081)
2021-03-12 06:21:53,355 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a360264]]
2021-03-12 06:21:53,355 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:53,483 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:53,486 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a360264]
2021-03-12 06:21:53,486 [main:117] - GENERATED CALL = (fu1()).compareTo("qqxvv").unaryMinus()
2021-03-12 06:21:53,486 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69cffa1c]]
2021-03-12 06:21:53,486 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69cffa1c]
2021-03-12 06:21:53,614 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:53,745 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:53,876 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:53,879 [main:117] - GENERATED CALL = (fu1()).lastIndexOf('룡', 930723439, true)
2021-03-12 06:21:53,879 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@318821c7]]
2021-03-12 06:21:53,879 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@318821c7]
2021-03-12 06:21:54,007 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:54,009 [main:117] - GENERATED CALL = (fu1()).length.coerceAtLeast(-1791919795)
2021-03-12 06:21:54,010 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c1a14b2]]
2021-03-12 06:21:54,010 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c1a14b2]
2021-03-12 06:21:54,010 [main:117] - GENERATED CALL = (fu1()).count()
2021-03-12 06:21:54,010 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1edd6c8c]]
2021-03-12 06:21:54,010 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:54,010 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1edd6c8c]
2021-03-12 06:21:54,142 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:54,145 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).div(125)
2021-03-12 06:21:54,145 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2dd14806]]
2021-03-12 06:21:54,145 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:54,145 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2dd14806]
2021-03-12 06:21:54,273 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:54,404 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:54,407 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).coerceIn(1979072109, 1515538308)
2021-03-12 06:21:54,407 [main:114] - replacement of prope5 of type Int is (fu1()).compareTo("qqxvv").unaryMinus()
2021-03-12 06:21:54,534 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:54,535 [main:66] - Compilation checking started
2021-03-12 06:21:54,953 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = fu9().s.x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        (fu1()).compareTo("qqxvv").unaryMinus() = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:54,955 [main:107] - replacing (fu9().s, Kla0)
2021-03-12 06:21:54,955 [main:50] - replacing fu9().s Kla0
2021-03-12 06:21:54,955 [main:54] - Getting value of type Kla0
2021-03-12 06:21:55,086 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:21:55,089 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:21:55,218 [main:194] - Type params = []
2021-03-12 06:21:55,346 [main:302] - generating value of type = Int true depth = 2
2021-03-12 06:21:55,349 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0(-1952286674)
2021-03-12 06:21:55,349 [main:61] - GENERATED IS CALL =true
2021-03-12 06:21:56,109 [main:67] - randomType = Pair<Kla6?, List<UShort>>
2021-03-12 06:21:56,238 [main:302] - generating value of type = Pair<Kla6?, List<UShort>> false depth = 0
2021-03-12 06:21:56,374 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla6?, second: List<UShort>): Pair<Kla6?, List<UShort>> = TODO()
2021-03-12 06:21:56,377 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla6?, second: List<UShort>): Pair<Kla6?, List<UShort>> = TODO()
2021-03-12 06:21:56,513 [main:302] - generating value of type = Kla6 false depth = 3
2021-03-12 06:21:56,515 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:21:56,515 [main:302] - generating value of type = List<UShort> false depth = 3
2021-03-12 06:21:56,650 [main:43] - GENERATING CALL OF fun <T> listOf(): List<UShort> = TODO()
2021-03-12 06:21:56,653 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): List<UShort> = TODO()
2021-03-12 06:21:56,788 [main:95] - GENERATED = listOf<UShort>()
2021-03-12 06:21:56,788 [main:95] - GENERATED = Pair<Kla6?, List<UShort>>(Kla6(), listOf<UShort>())
2021-03-12 06:21:56,802 [main:106] - GETTING Kla0 from String
2021-03-12 06:21:56,817 [main:114] - replacement of fu9().s of type Kla0 is Kla0(-1952286674)
2021-03-12 06:21:56,944 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:21:56,945 [main:66] - Compilation checking started
2021-03-12 06:21:57,555 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = Kla0(-1952286674).x
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:57,557 [main:107] - replacing (Kla0(-1952286674).x, Int)
2021-03-12 06:21:57,557 [main:50] - replacing Kla0(-1952286674).x Int
2021-03-12 06:21:57,557 [main:54] - Getting value of type Int
2021-03-12 06:21:57,693 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:57,696 [main:58] - GENERATED VALUE OF TYPE Int = -1184478473
2021-03-12 06:21:57,696 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:57,707 [main:67] - randomType = Kla9
2021-03-12 06:21:57,836 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 06:21:57,839 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:21:57,846 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e1affe8]
2021-03-12 06:21:57,975 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:57,977 [main:78] - Generated call from random type = (Kla9()).prope6.compareTo(true)
2021-03-12 06:21:57,978 [main:106] - GETTING Int from String
2021-03-12 06:21:57,999 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63d3006a]]
2021-03-12 06:21:57,999 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:58,133 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:21:58,136 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63d3006a]
2021-03-12 06:21:58,136 [main:117] - GENERATED CALL = (fu1()).compareTo("yzdsp").inc()
2021-03-12 06:21:58,137 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a360264]]
2021-03-12 06:21:58,137 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:21:58,137 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a360264]
2021-03-12 06:21:58,137 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).unaryMinus()
2021-03-12 06:21:58,137 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@575e2c6f]]
2021-03-12 06:21:58,137 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@575e2c6f]
2021-03-12 06:21:58,137 [main:117] - GENERATED CALL = (fu1()).length.toInt()
2021-03-12 06:21:58,137 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a360264]]
2021-03-12 06:21:58,137 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a360264]
2021-03-12 06:21:58,137 [main:117] - GENERATED CALL = (fu1()).length.unaryMinus()
2021-03-12 06:21:58,137 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e1affe8]]
2021-03-12 06:21:58,137 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683]
2021-03-12 06:21:58,273 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:21:58,273 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@e1affe8]
2021-03-12 06:21:58,402 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:58,405 [main:117] - GENERATED CALL = (fu1()).equals("dnwbp").compareTo(true)
2021-03-12 06:21:58,405 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c488c1e]]
2021-03-12 06:21:58,405 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c488c1e]
2021-03-12 06:21:58,533 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:21:58,665 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:21:58,797 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:58,800 [main:117] - GENERATED CALL = (fu1()).indexOf('뵵', 1902543662, false)
2021-03-12 06:21:58,800 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e518d5c]]
2021-03-12 06:21:58,800 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e518d5c]
2021-03-12 06:21:58,800 [main:117] - GENERATED CALL = (fu1()).toInt()
2021-03-12 06:21:58,800 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45ae53aa]]
2021-03-12 06:21:58,800 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45ae53aa]
2021-03-12 06:21:58,929 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:58,932 [main:117] - GENERATED CALL = (fu1()).length.plus(105)
2021-03-12 06:21:58,932 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6f0bae12]]
2021-03-12 06:21:58,932 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6f0bae12]
2021-03-12 06:21:58,932 [main:117] - GENERATED CALL = (fu1()).length.countLeadingZeroBits()
2021-03-12 06:21:58,932 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1edd6c8c]]
2021-03-12 06:21:58,932 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1edd6c8c]
2021-03-12 06:21:59,061 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:21:59,064 [main:117] - GENERATED CALL = (fu1()).length.div(58)
2021-03-12 06:21:59,064 [main:114] - replacement of Kla0(-1952286674).x of type Int is (fu1()).compareTo(fu1()).unaryMinus()
2021-03-12 06:21:59,192 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:21:59,193 [main:66] - Compilation checking started
2021-03-12 06:21:59,767 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:21:59,770 [main:107] - replacing (prope6, Boolean)
2021-03-12 06:21:59,770 [main:50] - replacing prope6 Boolean
2021-03-12 06:21:59,770 [main:54] - Getting value of type Boolean
2021-03-12 06:21:59,924 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:21:59,927 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:21:59,927 [main:61] - GENERATED IS CALL =false
2021-03-12 06:21:59,938 [main:67] - randomType = Kla4
2021-03-12 06:22:00,071 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:22:00,074 [main:112] - generating klass Kla4 text = class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}
2021-03-12 06:22:00,081 [main:149] - GENERATING call of type public final suspend fun <Ty2> fu6(value: Ty2): Ty2 defined in Kla4[SimpleFunctionDescriptorImpl@6b019386]
2021-03-12 06:22:00,210 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-12 06:22:00,215 [main:158] - CANT GENERATE PARAMS FOR public final suspend fun <Ty2> fu6(value: Ty2): Ty2 defined in Kla4[SimpleFunctionDescriptorImpl@6b019386]
2021-03-12 06:22:00,215 [main:78] - Generated call from random type = (Kla4()).null!!
2021-03-12 06:22:00,215 [main:114] - replacement of prope6 of type Boolean is (Kla4()).null!!
2021-03-12 06:22:00,343 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 06:22:00,343 [main:66] - Compilation checking started
2021-03-12 06:22:00,739 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        (Kla4()).null!! = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:00,742 [main:107] - replacing ("UNSUPPORTED_FEATURE", String)
2021-03-12 06:22:00,742 [main:50] - replacing "UNSUPPORTED_FEATURE" String
2021-03-12 06:22:00,742 [main:54] - Getting value of type String
2021-03-12 06:22:00,874 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:22:00,877 [main:58] - GENERATED VALUE OF TYPE String = "qzmay"
2021-03-12 06:22:00,877 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:01,189 [main:67] - randomType = HashSet<Int?>
2021-03-12 06:22:01,318 [main:302] - generating value of type = HashSet<Int?> false depth = 0
2021-03-12 06:22:01,452 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Int?): HashSet<Int?> = TODO()
2021-03-12 06:22:01,456 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Int?): HashSet<Int?> = TODO()
2021-03-12 06:22:01,592 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:22:01,594 [main:95] - GENERATED = linkedSetOf<Int?>(424061439)
2021-03-12 06:22:01,694 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@6415f147]
2021-03-12 06:22:01,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3059dc1e]
2021-03-12 06:22:01,694 [main:78] - Generated call from random type = (linkedSetOf<Int?>(424061439)).toArray().contentDeepToString()
2021-03-12 06:22:01,694 [main:114] - replacement of "UNSUPPORTED_FEATURE" of type String is (linkedSetOf<Int?>(424061439)).toArray().contentDeepToString()
2021-03-12 06:22:01,822 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:22:01,822 [main:66] - Compilation checking started
2021-03-12 06:22:02,221 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress((linkedSetOf<Int?>(424061439)).toArray().contentDeepToString())
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:02,223 [main:107] - replacing (prope3.isSuccess, Boolean)
2021-03-12 06:22:02,223 [main:50] - replacing prope3.isSuccess Boolean
2021-03-12 06:22:02,223 [main:54] - Getting value of type Boolean
2021-03-12 06:22:02,382 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:02,386 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:22:02,386 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:02,552 [main:67] - randomType = ArrayList<Kla5>
2021-03-12 06:22:02,682 [main:302] - generating value of type = ArrayList<Kla5> false depth = 0
2021-03-12 06:22:02,816 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Kla5> = TODO()
2021-03-12 06:22:02,820 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Kla5> = TODO()
2021-03-12 06:22:02,962 [main:95] - GENERATED = arrayListOf<Kla5>()
2021-03-12 06:22:03,081 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@491324b1]
2021-03-12 06:22:03,081 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5bc0d14a]
2021-03-12 06:22:03,214 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:22:03,214 [main:78] - Generated call from random type = (arrayListOf<Kla5>()).toJSON().equals("wpbbs")
2021-03-12 06:22:03,215 [main:106] - GETTING Boolean from String
2021-03-12 06:22:03,233 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@18d3759c]]
2021-03-12 06:22:03,234 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683]
2021-03-12 06:22:03,363 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:22:03,364 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@18d3759c]
2021-03-12 06:22:03,364 [main:117] - GENERATED CALL = (fu1()).equals("jugkz").not()
2021-03-12 06:22:03,364 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76566baf]]
2021-03-12 06:22:03,364 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:03,493 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:03,625 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:03,628 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76566baf]
2021-03-12 06:22:03,628 [main:117] - GENERATED CALL = (fu1()).subSequence(290063344, -195189026).isEmpty()
2021-03-12 06:22:03,628 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@432caca6]]
2021-03-12 06:22:03,628 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:03,757 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:03,760 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@432caca6]
2021-03-12 06:22:03,760 [main:117] - GENERATED CALL = (fu1()).get(-25518317).isSurrogate()
2021-03-12 06:22:03,760 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e151a4d]]
2021-03-12 06:22:03,760 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e151a4d]
2021-03-12 06:22:03,889 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:22:03,891 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:22:03,894 [main:117] - GENERATED CALL = (fu1()).all({a: Char -> true})
2021-03-12 06:22:03,894 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@142e0283]]
2021-03-12 06:22:03,894 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683]
2021-03-12 06:22:04,023 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:22:04,023 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@142e0283]
2021-03-12 06:22:04,152 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:04,155 [main:117] - GENERATED CALL = (fu1()).equals("dusma").and(true)
2021-03-12 06:22:04,155 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f2e8d04]]
2021-03-12 06:22:04,155 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:04,284 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:04,287 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f2e8d04]
2021-03-12 06:22:04,287 [main:117] - GENERATED CALL = (fu1()).get(-1973832658).isUpperCase()
2021-03-12 06:22:04,287 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25774671]]
2021-03-12 06:22:04,287 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25774671]
2021-03-12 06:22:04,417 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:04,420 [main:117] - GENERATED CALL = (fu1()).startsWith(fu1(), true)
2021-03-12 06:22:04,420 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3420a696]]
2021-03-12 06:22:04,420 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:04,549 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:04,552 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3420a696]
2021-03-12 06:22:04,552 [main:117] - GENERATED CALL = (fu1()).get(-626924364).isLowerCase()
2021-03-12 06:22:04,552 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb85afd]]
2021-03-12 06:22:04,552 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:04,683 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:04,686 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb85afd]
2021-03-12 06:22:04,686 [main:117] - GENERATED CALL = (fu1()).get(1077151487).isLetter()
2021-03-12 06:22:04,686 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50a66ded]]
2021-03-12 06:22:04,686 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50a66ded]
2021-03-12 06:22:04,686 [main:117] - GENERATED CALL = (fu1()).isBlank()
2021-03-12 06:22:04,686 [main:114] - replacement of prope3.isSuccess of type Boolean is (arrayListOf<Kla5>()).toJSON().equals("wpbbs")
2021-03-12 06:22:04,844 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:22:04,846 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 06:22:04,846 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 06:22:04,846 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:22:04,975 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:22:04,978 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:22:05,112 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:22:05,116 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:22:05,399 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:22:05,399 [main:95] - GENERATED = print("ncbyp")
2021-03-12 06:22:05,399 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("ncbyp")}
2021-03-12 06:22:05,400 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:05,557 [main:67] - randomType = Kla9?
2021-03-12 06:22:05,688 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 06:22:05,690 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:22:05,697 [main:78] - Generated call from random type = (Kla9())?.prope7
2021-03-12 06:22:05,699 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:22:05,715 [main:114] - replacement of prope7 of type Function0<Unit> is (Kla9())?.prope7
2021-03-12 06:22:05,843 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 06:22:05,843 [main:66] - Compilation checking started
2021-03-12 06:22:06,232 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().(Kla9())?.prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:06,234 [main:107] - replacing ("FAIL 2 $prope3", String)
2021-03-12 06:22:06,234 [main:50] - replacing "FAIL 2 $prope3" String
2021-03-12 06:22:06,234 [main:54] - Getting value of type String
2021-03-12 06:22:06,366 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:22:06,368 [main:58] - GENERATED VALUE OF TYPE String = "befao"
2021-03-12 06:22:06,368 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:06,379 [main:67] - randomType = Kla4
2021-03-12 06:22:06,509 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:22:06,512 [main:112] - generating klass Kla4 text = class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}
2021-03-12 06:22:06,519 [main:149] - GENERATING call of type public final suspend fun fu10(): kotlin.Int defined in Kla4[SimpleFunctionDescriptorImpl@54b95d2b]
2021-03-12 06:22:06,519 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@755e2467]
2021-03-12 06:22:06,649 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:06,651 [main:78] - Generated call from random type = (Kla4()).fu10().toString(-958596966)
2021-03-12 06:22:06,652 [main:114] - replacement of "FAIL 2 $prope3" of type String is (Kla4()).fu10().toString(-958596966)
2021-03-12 06:22:06,780 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:22:06,780 [main:66] - Compilation checking started
2021-03-12 06:22:07,178 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return (Kla4()).fu10().toString(-958596966)

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:07,180 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-12 06:22:07,180 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-12 06:22:07,180 [main:54] - Getting value of type String
2021-03-12 06:22:07,333 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:22:07,335 [main:58] - GENERATED VALUE OF TYPE String = "wuajr"
2021-03-12 06:22:07,335 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:07,495 [main:67] - randomType = Collection<Kla5>
2021-03-12 06:22:07,495 [main:106] - GETTING String from String
2021-03-12 06:22:07,512 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14901bf4]]
2021-03-12 06:22:07,512 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14901bf4]
2021-03-12 06:22:07,512 [main:117] - GENERATED CALL = (fu1()).replaceIndentByMargin(fu1(), fu1())
2021-03-12 06:22:07,513 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ba3fd40]]
2021-03-12 06:22:07,513 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ba3fd40]
2021-03-12 06:22:07,641 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:22:07,643 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:22:07,646 [main:117] - GENERATED CALL = (fu1()).filter({a: Char -> false})
2021-03-12 06:22:07,646 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31bd2630]]
2021-03-12 06:22:07,646 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31bd2630]
2021-03-12 06:22:07,646 [main:117] - GENERATED CALL = (fu1()).concat(fu1())
2021-03-12 06:22:07,646 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49fa4080]]
2021-03-12 06:22:07,646 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49fa4080]
2021-03-12 06:22:07,646 [main:117] - GENERATED CALL = (fu1()).uppercase()
2021-03-12 06:22:07,646 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@237e162a]]
2021-03-12 06:22:07,646 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@237e162a]
2021-03-12 06:22:07,783 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:07,785 [main:117] - GENERATED CALL = (fu1()).replaceAfterLast('⸚', fu1(), fu1())
2021-03-12 06:22:07,786 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a25814]]
2021-03-12 06:22:07,786 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a25814]
2021-03-12 06:22:07,914 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:08,046 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:08,176 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:08,179 [main:117] - GENERATED CALL = (fu1()).replaceFirst('⻑', 'Ӟ', false)
2021-03-12 06:22:08,179 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d631a58]]
2021-03-12 06:22:08,179 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d631a58]
2021-03-12 06:22:08,308 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:08,442 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:22:08,572 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:22:08,575 [main:117] - GENERATED CALL = (fu1()).replaceBeforeLast('䩠', "mlrlg", "uyvwb")
2021-03-12 06:22:08,575 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb6dc10]]
2021-03-12 06:22:08,576 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb6dc10]
2021-03-12 06:22:08,705 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:22:08,711 [main:117] - GENERATED CALL = (fu1()).removeSuffix(StringBuilder())
2021-03-12 06:22:08,711 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b9235d4]]
2021-03-12 06:22:08,711 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:08,840 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:08,843 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b9235d4]
2021-03-12 06:22:08,843 [main:117] - GENERATED CALL = (fu1()).get(810849783).titlecase()
2021-03-12 06:22:08,843 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a6d3eb]]
2021-03-12 06:22:08,843 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45a6d3eb]
2021-03-12 06:22:08,843 [main:117] - GENERATED CALL = (fu1()).trim()
2021-03-12 06:22:08,843 [main:114] - replacement of "tail-call optimization hit: method " + method of type String is (fu1()).filter({a: Char -> false})
2021-03-12 06:22:08,972 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:22:08,973 [main:66] - Compilation checking started
2021-03-12 06:22:09,598 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:09,600 [main:107] - replacing (0, Int)
2021-03-12 06:22:09,600 [main:50] - replacing 0 Int
2021-03-12 06:22:09,600 [main:54] - Getting value of type Int
2021-03-12 06:22:09,733 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:09,736 [main:58] - GENERATED VALUE OF TYPE Int = 820197456
2021-03-12 06:22:09,736 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:09,742 [main:67] - randomType = String
2021-03-12 06:22:09,872 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:22:09,891 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@547795ca]
2021-03-12 06:22:10,046 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:10,049 [main:78] - Generated call from random type = ("xgnjm").length.coerceAtMost(2057445396)
2021-03-12 06:22:10,050 [main:106] - GETTING Int from String
2021-03-12 06:22:10,067 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1af03f1a]]
2021-03-12 06:22:10,067 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:22:10,067 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1af03f1a]
2021-03-12 06:22:10,197 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:22:10,200 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).minus(-95)
2021-03-12 06:22:10,200 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2dd14806]]
2021-03-12 06:22:10,200 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2dd14806]
2021-03-12 06:22:10,331 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:10,464 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:10,467 [main:117] - GENERATED CALL = (fu1()).length.coerceIn(-1153611996, 918078977)
2021-03-12 06:22:10,467 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fcbf387]]
2021-03-12 06:22:10,467 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:22:10,467 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fcbf387]
2021-03-12 06:22:10,467 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).inv()
2021-03-12 06:22:10,467 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78863bf8]]
2021-03-12 06:22:10,467 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78863bf8]
2021-03-12 06:22:10,598 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:10,601 [main:117] - GENERATED CALL = (fu1()).length.and(-1166846143)
2021-03-12 06:22:10,601 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e8440ed]]
2021-03-12 06:22:10,601 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:10,732 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:10,867 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:10,870 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e8440ed]
2021-03-12 06:22:11,000 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 06:22:11,003 [main:302] - generating value of type = Int true depth = 1
2021-03-12 06:22:11,006 [main:117] - GENERATED CALL = (fu1()).subSequence(-859098543, 1268896473).sumBy({a: Char -> 1938328732})
2021-03-12 06:22:11,006 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@4458ecb8]]
2021-03-12 06:22:11,006 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:11,137 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:11,272 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:11,275 [main:117] - GENERATED CALL = (fu1()).subSequence(1117758351, -376462327).length
2021-03-12 06:22:11,275 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63d3006a]]
2021-03-12 06:22:11,275 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63d3006a]
2021-03-12 06:22:11,275 [main:117] - GENERATED CALL = (fu1()).length.inc()
2021-03-12 06:22:11,275 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@318821c7]]
2021-03-12 06:22:11,275 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@318821c7]
2021-03-12 06:22:11,407 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:11,410 [main:117] - GENERATED CALL = (fu1()).length.coerceAtLeast(1604795043)
2021-03-12 06:22:11,410 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@707f6ab1]]
2021-03-12 06:22:11,410 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@707f6ab1]
2021-03-12 06:22:11,542 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:11,544 [main:117] - GENERATED CALL = (fu1()).length.xor(1700733075)
2021-03-12 06:22:11,544 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69cffa1c]]
2021-03-12 06:22:11,545 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:11,676 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:11,809 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:11,812 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69cffa1c]
2021-03-12 06:22:11,943 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:12,077 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:12,210 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:12,213 [main:117] - GENERATED CALL = (fu1()).subSequence(-1167473399, -1046866024).lastIndexOf('', 901019712, true)
2021-03-12 06:22:12,213 [main:114] - replacement of 0 of type Int is (fu1()).length.coerceIn(-1153611996, 918078977)
2021-03-12 06:22:12,346 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:22:12,346 [main:66] - Compilation checking started
2021-03-12 06:22:13,143 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:13,145 [main:107] - replacing ({ c.resume(Unit) }, Function0<Unit>)
2021-03-12 06:22:13,145 [main:50] - replacing { c.resume(Unit) } Function0<Unit>
2021-03-12 06:22:13,145 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:22:13,279 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:22:13,281 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:22:13,287 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-12 06:22:13,287 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:13,594 [main:67] - randomType = HashSet<A>
2021-03-12 06:22:13,726 [main:302] - generating value of type = HashSet<A> false depth = 0
2021-03-12 06:22:13,864 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<A> = TODO()
2021-03-12 06:22:13,868 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<A> = TODO()
2021-03-12 06:22:14,006 [main:95] - GENERATED = hashSetOf<A>()
2021-03-12 06:22:14,104 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:22:14,119 [main:114] - replacement of { c.resume(Unit) } of type Function0<Unit> is { println()}
2021-03-12 06:22:14,251 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:22:14,251 [main:66] - Compilation checking started
2021-03-12 06:22:14,849 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = false

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:14,851 [main:107] - replacing (false, Boolean)
2021-03-12 06:22:14,851 [main:50] - replacing false Boolean
2021-03-12 06:22:14,851 [main:54] - Getting value of type Boolean
2021-03-12 06:22:14,984 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:14,986 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:22:14,986 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:14,997 [main:67] - randomType = Kla0
2021-03-12 06:22:15,128 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:22:15,131 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:22:15,263 [main:194] - Type params = []
2021-03-12 06:22:15,396 [main:302] - generating value of type = Int true depth = 2
2021-03-12 06:22:15,404 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[SimpleFunctionDescriptorImpl@198b1a55]
2021-03-12 06:22:15,558 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:22:15,558 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@416f3cd1]
2021-03-12 06:22:15,689 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:15,692 [main:78] - Generated call from random type = (Kla0(-937279231)).equals("esqet").or(true)
2021-03-12 06:22:15,693 [main:106] - GETTING Boolean from String
2021-03-12 06:22:15,711 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@21ce7fca]]
2021-03-12 06:22:15,711 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:15,842 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:15,978 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:15,980 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@21ce7fca]
2021-03-12 06:22:16,114 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:22:16,115 [main:117] - GENERATED CALL = (fu1()).subSequence(120393028, -709002787).equals("edlap")
2021-03-12 06:22:16,115 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@432caca6]]
2021-03-12 06:22:16,115 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:16,249 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:16,252 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@432caca6]
2021-03-12 06:22:16,252 [main:117] - GENERATED CALL = (fu1()).get(1333345496).isSurrogate()
2021-03-12 06:22:16,252 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ba26ce4]]
2021-03-12 06:22:16,252 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ba26ce4]
2021-03-12 06:22:16,252 [main:117] - GENERATED CALL = (fu1()).toBoolean()
2021-03-12 06:22:16,252 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@323d646f]]
2021-03-12 06:22:16,252 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:16,388 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:16,391 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@323d646f]
2021-03-12 06:22:16,530 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:16,665 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:16,668 [main:117] - GENERATED CALL = (fu1()).get(-2124044683).equals('麟', true)
2021-03-12 06:22:16,668 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58203408]]
2021-03-12 06:22:16,668 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:16,800 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:16,803 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58203408]
2021-03-12 06:22:16,803 [main:117] - GENERATED CALL = (fu1()).get(-1404429679).isLowSurrogate()
2021-03-12 06:22:16,804 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61d7144a]]
2021-03-12 06:22:16,804 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61d7144a]
2021-03-12 06:22:16,804 [main:117] - GENERATED CALL = (fu1()).isNotBlank()
2021-03-12 06:22:16,804 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280775a9]]
2021-03-12 06:22:16,804 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:16,937 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:17,072 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:17,075 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280775a9]
2021-03-12 06:22:17,075 [main:117] - GENERATED CALL = (fu1()).subSequence(1845778385, 1995484057).any()
2021-03-12 06:22:17,075 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73f4c35f]]
2021-03-12 06:22:17,075 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73f4c35f]
2021-03-12 06:22:17,208 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:22:17,208 [main:117] - GENERATED CALL = (fu1()).length.equals("tbsbn")
2021-03-12 06:22:17,208 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13436781]]
2021-03-12 06:22:17,208 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13436781]
2021-03-12 06:22:17,340 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:17,343 [main:117] - GENERATED CALL = (fu1()).hasSurrogatePairAt(-1871432319)
2021-03-12 06:22:17,343 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1124628a]]
2021-03-12 06:22:17,343 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:17,477 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:17,613 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:17,615 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1124628a]
2021-03-12 06:22:17,616 [main:117] - GENERATED CALL = (fu1()).subSequence(2041407132, 1763573805).isNotEmpty()
2021-03-12 06:22:17,616 [main:114] - replacement of false of type Boolean is (fu1()).get(-1404429679).isLowSurrogate()
2021-03-12 06:22:17,748 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:22:17,748 [main:66] - Compilation checking started
2021-03-12 06:22:18,533 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = Kla4().fu10().fu3()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:18,535 [main:107] - replacing (Kla4().fu10().fu3(), String)
2021-03-12 06:22:18,535 [main:50] - replacing Kla4().fu10().fu3() String
2021-03-12 06:22:18,535 [main:54] - Getting value of type String
2021-03-12 06:22:18,679 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:22:18,682 [main:58] - GENERATED VALUE OF TYPE String = "mrfud"
2021-03-12 06:22:18,682 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:19,000 [main:67] - randomType = ArrayList<Set<String>>
2021-03-12 06:22:19,131 [main:302] - generating value of type = ArrayList<Set<String>> false depth = 0
2021-03-12 06:22:19,269 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Set<Strg>> = TODO()
2021-03-12 06:22:19,273 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Set<Strg>> = TODO()
2021-03-12 06:22:19,421 [main:95] - GENERATED = arrayListOf<Set<String>>()
2021-03-12 06:22:19,566 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4d31cb90]
2021-03-12 06:22:19,566 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d742035]
2021-03-12 06:22:19,566 [main:78] - Generated call from random type = (arrayListOf<Set<String>>()).toArray().contentToString()
2021-03-12 06:22:19,566 [main:106] - GETTING String from String
2021-03-12 06:22:19,582 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1668f4]]
2021-03-12 06:22:19,582 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1668f4]
2021-03-12 06:22:19,719 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:19,722 [main:117] - GENERATED CALL = (fu1()).substringAfter('顈', fu1())
2021-03-12 06:22:19,722 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d9e8e4]]
2021-03-12 06:22:19,722 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d9e8e4]
2021-03-12 06:22:19,722 [main:117] - GENERATED CALL = (fu1()).trimIndent()
2021-03-12 06:22:19,722 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f967db]]
2021-03-12 06:22:19,722 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f967db]
2021-03-12 06:22:19,862 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:19,865 [main:117] - GENERATED CALL = (fu1()).repeat(1271407735)
2021-03-12 06:22:19,865 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62337ef9]]
2021-03-12 06:22:19,865 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62337ef9]
2021-03-12 06:22:19,865 [main:117] - GENERATED CALL = (fu1()).lowercase()
2021-03-12 06:22:19,866 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a25814]]
2021-03-12 06:22:19,866 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a25814]
2021-03-12 06:22:20,013 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:20,151 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:20,287 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:20,290 [main:117] - GENERATED CALL = (fu1()).replaceFirst('ཫ', '', false)
2021-03-12 06:22:20,290 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a3cb49]]
2021-03-12 06:22:20,290 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a3cb49]
2021-03-12 06:22:20,425 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:22:20,428 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:22:20,431 [main:117] - GENERATED CALL = (fu1()).dropLastWhile({a: Char -> true})
2021-03-12 06:22:20,431 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@796828fa]]
2021-03-12 06:22:20,431 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:20,564 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:20,567 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@796828fa]
2021-03-12 06:22:20,567 [main:117] - GENERATED CALL = (fu1()).get(-1409618382).uppercase()
2021-03-12 06:22:20,567 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749d3ade]]
2021-03-12 06:22:20,567 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749d3ade]
2021-03-12 06:22:20,567 [main:117] - GENERATED CALL = (fu1()).prependIndent(fu1())
2021-03-12 06:22:20,567 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58acd3f1]]
2021-03-12 06:22:20,568 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58acd3f1]
2021-03-12 06:22:20,709 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:22:20,712 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:22:20,715 [main:117] - GENERATED CALL = (fu1()).dropWhile({a: Char -> true})
2021-03-12 06:22:20,715 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36f5aa2a]]
2021-03-12 06:22:20,715 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36f5aa2a]
2021-03-12 06:22:20,715 [main:117] - GENERATED CALL = (fu1()).trimMargin(fu1())
2021-03-12 06:22:20,715 [main:114] - replacement of Kla4().fu10().fu3() of type String is (fu1()).lowercase()
2021-03-12 06:22:20,853 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:22:20,853 [main:66] - Compilation checking started
2021-03-12 06:22:21,480 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = (fu1()).lowercase()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:21,482 [main:107] - replacing (i, Int)
2021-03-12 06:22:21,482 [main:50] - replacing i Int
2021-03-12 06:22:21,482 [main:54] - Getting value of type Int
2021-03-12 06:22:21,618 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:21,620 [main:58] - GENERATED VALUE OF TYPE Int = 723521713
2021-03-12 06:22:21,620 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:21,951 [main:67] - randomType = LinkedHashMap<Int?, Kla8>
2021-03-12 06:22:22,086 [main:302] - generating value of type = LinkedHashMap<Int?, Kla8> false depth = 0
2021-03-12 06:22:22,228 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Int?, Kla8>): LkedHashMap<Int?, Kla8> = TODO()
2021-03-12 06:22:22,232 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Int?, Kla8>): LkedHashMap<Int?, Kla8> = TODO()
2021-03-12 06:22:22,374 [main:302] - generating value of type = Pair<Int?, Kla8> false depth = 3
2021-03-12 06:22:22,512 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Int?, second: Kla8): Pair<Int?, Kla8> = TODO()
2021-03-12 06:22:22,516 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Int?, second: Kla8): Pair<Int?, Kla8> = TODO()
2021-03-12 06:22:22,658 [main:302] - generating value of type = Int true depth = 6
2021-03-12 06:22:22,661 [main:302] - generating value of type = Kla8 false depth = 6
2021-03-12 06:22:22,664 [main:112] - generating klass Kla8 text = class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 06:22:22,664 [main:95] - GENERATED = Pair<Int?, Kla8>(-1473941938, Kla8())
2021-03-12 06:22:22,664 [main:95] - GENERATED = linkedMapOf<Int?, Kla8>(Pair<Int?, Kla8>(-1473941938, Kla8()))
2021-03-12 06:22:22,775 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e3a9bf]
2021-03-12 06:22:22,911 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:22,914 [main:78] - Generated call from random type = (linkedMapOf<Int?, Kla8>(Pair<Int?, Kla8>(-1473941938, Kla8()))).size.ushr(1020651092)
2021-03-12 06:22:22,915 [main:106] - GETTING Int from String
2021-03-12 06:22:22,941 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d55df3a]]
2021-03-12 06:22:22,941 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d55df3a]
2021-03-12 06:22:23,075 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:22:23,078 [main:117] - GENERATED CALL = (fu1()).length.times(-55)
2021-03-12 06:22:23,078 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aa686cf]]
2021-03-12 06:22:23,078 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:22:23,078 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aa686cf]
2021-03-12 06:22:23,079 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).unaryPlus()
2021-03-12 06:22:23,079 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4fe7ba]]
2021-03-12 06:22:23,079 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4fe7ba]
2021-03-12 06:22:23,211 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:23,214 [main:117] - GENERATED CALL = (fu1()).length.shr(831953755)
2021-03-12 06:22:23,214 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3633642f]]
2021-03-12 06:22:23,214 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:23,347 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:23,350 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3633642f]
2021-03-12 06:22:23,350 [main:117] - GENERATED CALL = (fu1()).get(-2140071880).toInt()
2021-03-12 06:22:23,350 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@30393db8]]
2021-03-12 06:22:23,351 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:23,486 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:23,489 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@30393db8]
2021-03-12 06:22:23,629 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:23,632 [main:117] - GENERATED CALL = (fu1()).get(454598461).compareTo('చ')
2021-03-12 06:22:23,633 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f59ea2e]]
2021-03-12 06:22:23,633 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f59ea2e]
2021-03-12 06:22:23,633 [main:117] - GENERATED CALL = (fu1()).length.countOneBits()
2021-03-12 06:22:23,633 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b2220c]]
2021-03-12 06:22:23,633 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b2220c]
2021-03-12 06:22:23,769 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:22:23,772 [main:117] - GENERATED CALL = (fu1()).length.compareTo(-16)
2021-03-12 06:22:23,772 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@3a09f2f5], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78863bf8]]
2021-03-12 06:22:23,772 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78863bf8]
2021-03-12 06:22:23,906 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:23,909 [main:117] - GENERATED CALL = (fu1()).length.and(1724625647)
2021-03-12 06:22:23,909 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4941a87d]]
2021-03-12 06:22:23,909 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4941a87d]
2021-03-12 06:22:24,070 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 06:22:24,073 [main:302] - generating value of type = Int true depth = 1
2021-03-12 06:22:24,075 [main:117] - GENERATED CALL = (fu1()).sumOf({a: Char -> 1226430931})
2021-03-12 06:22:24,076 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@710b7f09]]
2021-03-12 06:22:24,076 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:24,207 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:24,342 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:24,344 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@710b7f09]
2021-03-12 06:22:24,479 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 06:22:24,615 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 06:22:24,619 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 06:22:24,758 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:22:24,761 [main:95] - GENERATED = charArrayOf('ங')
2021-03-12 06:22:24,893 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:25,028 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:25,031 [main:117] - GENERATED CALL = (fu1()).subSequence(11866773, -1366443175).indexOfAny(charArrayOf('ங'), -851913277, true)
2021-03-12 06:22:25,031 [main:114] - replacement of i of type Int is 723521713
2021-03-12 06:22:25,162 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:22:25,162 [main:66] - Compilation checking started
2021-03-12 06:22:25,757 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(42)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = (fu1()).lowercase()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != 723521713) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:25,759 [main:107] - replacing (Kla0(42), Kla0)
2021-03-12 06:22:25,759 [main:50] - replacing Kla0(42) Kla0
2021-03-12 06:22:25,759 [main:54] - Getting value of type Kla0
2021-03-12 06:22:25,892 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:22:25,895 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:22:26,031 [main:194] - Type params = []
2021-03-12 06:22:26,168 [main:302] - generating value of type = Int true depth = 2
2021-03-12 06:22:26,171 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0(908745377)
2021-03-12 06:22:26,171 [main:61] - GENERATED IS CALL =true
2021-03-12 06:22:26,182 [main:67] - randomType = Kla9
2021-03-12 06:22:26,320 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 06:22:26,323 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != 723521713) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:22:26,333 [main:106] - GETTING Kla0 from String
2021-03-12 06:22:26,354 [main:114] - replacement of Kla0(42) of type Kla0 is Kla0(908745377)
2021-03-12 06:22:26,487 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:22:26,487 [main:66] - Compilation checking started
2021-03-12 06:22:27,113 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(908745377)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = (fu1()).lowercase()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != 723521713) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:27,116 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 06:22:27,116 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 06:22:27,116 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:22:27,249 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:22:27,252 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:22:27,390 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:22:27,393 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:22:27,683 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:22:27,686 [main:95] - GENERATED = check(false)
2021-03-12 06:22:27,686 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-12 06:22:27,686 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:27,847 [main:67] - randomType = LinkedHashSet<Kla6>
2021-03-12 06:22:27,979 [main:302] - generating value of type = LinkedHashSet<Kla6> false depth = 0
2021-03-12 06:22:28,117 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla6): LkedHashSet<Kla6> = TODO()
2021-03-12 06:22:28,120 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla6): LkedHashSet<Kla6> = TODO()
2021-03-12 06:22:28,259 [main:302] - generating value of type = Kla6 false depth = 3
2021-03-12 06:22:28,262 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:22:28,262 [main:95] - GENERATED = linkedSetOf<Kla6>(Kla6())
2021-03-12 06:22:28,374 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:22:28,389 [main:114] - replacement of prope7 of type Function0<Unit> is { check(false)}
2021-03-12 06:22:28,520 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:22:28,521 [main:66] - Compilation checking started
2021-03-12 06:22:28,965 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(908745377)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = "FAIL 3"

    fu2 {
        prope3 = (fu1()).lowercase()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != 723521713) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        { check(false)}()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:28,968 [main:107] - replacing ("FAIL 3", String)
2021-03-12 06:22:28,968 [main:50] - replacing "FAIL 3" String
2021-03-12 06:22:28,968 [main:54] - Getting value of type String
2021-03-12 06:22:29,110 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:22:29,113 [main:58] - GENERATED VALUE OF TYPE String = "diiyg"
2021-03-12 06:22:29,113 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:29,581 [main:67] - randomType = HashSet<UShort>
2021-03-12 06:22:29,744 [main:302] - generating value of type = HashSet<UShort> false depth = 0
2021-03-12 06:22:29,884 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: UShort): HashSet<UShort> = TODO()
2021-03-12 06:22:29,888 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: UShort): HashSet<UShort> = TODO()
2021-03-12 06:22:30,031 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 06:22:30,034 [main:95] - GENERATED = hashSetOf<UShort>(7967.toUShort())
2021-03-12 06:22:30,128 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@30157a78]
2021-03-12 06:22:30,129 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4d742035]
2021-03-12 06:22:30,129 [main:78] - Generated call from random type = (hashSetOf<UShort>(7967.toUShort())).toArray().contentToString()
2021-03-12 06:22:30,129 [main:106] - GETTING String from String
2021-03-12 06:22:30,145 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229767f9]]
2021-03-12 06:22:30,146 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@229767f9]
2021-03-12 06:22:30,279 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 06:22:30,282 [main:302] - generating value of type = Char true depth = 1
2021-03-12 06:22:30,285 [main:117] - GENERATED CALL = (fu1()).replaceFirstChar({a: Char -> '⬐'})
2021-03-12 06:22:30,285 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1668f4]]
2021-03-12 06:22:30,285 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1668f4]
2021-03-12 06:22:30,425 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:30,428 [main:117] - GENERATED CALL = (fu1()).substringAfter('९', fu1())
2021-03-12 06:22:30,428 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f967db]]
2021-03-12 06:22:30,428 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43f967db]
2021-03-12 06:22:30,566 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:30,569 [main:117] - GENERATED CALL = (fu1()).repeat(-1184874592)
2021-03-12 06:22:30,569 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f14a6dd]]
2021-03-12 06:22:30,569 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:30,704 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:30,842 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:30,845 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f14a6dd]
2021-03-12 06:22:30,979 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:22:31,117 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:22:31,121 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:22:31,563 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:22:31,566 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 06:22:31,569 [main:95] - GENERATED = Regex("wukyv", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 06:22:31,702 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 06:22:31,705 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 06:22:31,844 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:22:31,848 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:22:32,144 [main:302] - generating value of type = String true depth = 4
2021-03-12 06:22:32,146 [main:95] - GENERATED = StringBuilder("asnza")
2021-03-12 06:22:32,147 [main:117] - GENERATED CALL = (fu1()).subSequence(-489633070, 1473711483).replace(Regex("wukyv", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> StringBuilder("asnza")})
2021-03-12 06:22:32,147 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14901bf4]]
2021-03-12 06:22:32,147 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14901bf4]
2021-03-12 06:22:32,281 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:22:32,284 [main:117] - GENERATED CALL = (fu1()).replaceIndentByMargin("fmkol", fu1())
2021-03-12 06:22:32,284 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d631a58]]
2021-03-12 06:22:32,284 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d631a58]
2021-03-12 06:22:32,417 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:32,589 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:22:32,592 [main:117] - GENERATED CALL = (fu1()).replaceBeforeLast('對', fu1(), "slngx")
2021-03-12 06:22:32,593 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]]
2021-03-12 06:22:32,593 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7215514c]
2021-03-12 06:22:32,593 [main:117] - GENERATED CALL = (fu1()).reversed()
2021-03-12 06:22:32,593 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79c10c28]]
2021-03-12 06:22:32,593 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79c10c28]
2021-03-12 06:22:32,725 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:32,727 [main:117] - GENERATED CALL = (fu1()).substringBefore('몲', fu1())
2021-03-12 06:22:32,728 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@278f5435]]
2021-03-12 06:22:32,728 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@278f5435]
2021-03-12 06:22:32,728 [main:117] - GENERATED CALL = (fu1()).toUpperCase()
2021-03-12 06:22:32,728 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f6f4ba7]]
2021-03-12 06:22:32,728 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f6f4ba7]
2021-03-12 06:22:32,860 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:32,995 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:32,998 [main:117] - GENERATED CALL = (fu1()).removeRange(-42734338, -1106695506)
2021-03-12 06:22:32,998 [main:114] - replacement of "FAIL 3" of type String is (fu1()).removeRange(-42734338, -1106695506)
2021-03-12 06:22:33,130 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:22:33,131 [main:66] - Compilation checking started
2021-03-12 06:22:33,734 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(908745377)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if (this == 42) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = (fu1()).removeRange(-42734338, -1106695506)

    fu2 {
        prope3 = (fu1()).lowercase()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != 723521713) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:33,736 [main:107] - replacing (this == 42, Boolean)
2021-03-12 06:22:33,736 [main:50] - replacing this == 42 Boolean
2021-03-12 06:22:33,736 [main:54] - Getting value of type Boolean
2021-03-12 06:22:33,868 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:33,871 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:22:33,871 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:33,882 [main:67] - randomType = Kla1
2021-03-12 06:22:34,018 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:22:34,020 [main:112] - generating klass Kla1 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)
2021-03-12 06:22:34,152 [main:194] - Type params = []
2021-03-12 06:22:34,284 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-12 06:22:34,287 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:22:34,418 [main:194] - Type params = []
2021-03-12 06:22:34,551 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:22:34,558 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[SimpleFunctionDescriptorImpl@336fd4c]
2021-03-12 06:22:34,691 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:22:34,691 [main:78] - Generated call from random type = (Kla1(Kla0(-611701143))).s.equals("opojs")
2021-03-12 06:22:34,692 [main:106] - GETTING Boolean from String
2021-03-12 06:22:34,709 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13436781]]
2021-03-12 06:22:34,709 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:34,841 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:34,977 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:34,980 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13436781]
2021-03-12 06:22:35,112 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:35,115 [main:117] - GENERATED CALL = (fu1()).subSequence(1933395270, 963770828).hasSurrogatePairAt(-300972303)
2021-03-12 06:22:35,115 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa4642d]]
2021-03-12 06:22:35,115 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:35,247 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:35,381 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:35,384 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fa4642d]
2021-03-12 06:22:35,541 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:22:35,677 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:22:35,681 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:22:36,133 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:22:36,136 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 06:22:36,139 [main:95] - GENERATED = Regex("mihsy", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 06:22:36,139 [main:117] - GENERATED CALL = (fu1()).subSequence(194519897, -1970756915).matches(Regex("mihsy", kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 06:22:36,139 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26fad7b]]
2021-03-12 06:22:36,139 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:36,281 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:36,415 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:36,418 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26fad7b]
2021-03-12 06:22:36,550 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:36,684 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:36,687 [main:117] - GENERATED CALL = (fu1()).subSequence(2111864050, -1377128149).endsWith('졫', false)
2021-03-12 06:22:36,687 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@142e0283]]
2021-03-12 06:22:36,687 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683]
2021-03-12 06:22:36,819 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:22:36,819 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@142e0283]
2021-03-12 06:22:36,951 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:36,954 [main:117] - GENERATED CALL = (fu1()).equals("bilkj").and(false)
2021-03-12 06:22:36,954 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@432caca6]]
2021-03-12 06:22:36,954 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:37,086 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:37,089 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@432caca6]
2021-03-12 06:22:37,089 [main:117] - GENERATED CALL = (fu1()).get(1771083880).isSurrogate()
2021-03-12 06:22:37,089 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@18d3759c]]
2021-03-12 06:22:37,089 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683]
2021-03-12 06:22:37,222 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:22:37,222 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@18d3759c]
2021-03-12 06:22:37,222 [main:117] - GENERATED CALL = (fu1()).equals("uwccm").not()
2021-03-12 06:22:37,222 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683]]
2021-03-12 06:22:37,222 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b7a8683]
2021-03-12 06:22:37,353 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:22:37,353 [main:117] - GENERATED CALL = (fu1()).equals("xosur")
2021-03-12 06:22:37,353 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73f4c35f]]
2021-03-12 06:22:37,353 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44efba4]
2021-03-12 06:22:37,353 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73f4c35f]
2021-03-12 06:22:37,485 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:22:37,485 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).equals("giuht")
2021-03-12 06:22:37,485 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32df1b82]]
2021-03-12 06:22:37,485 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:37,616 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:37,619 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32df1b82]
2021-03-12 06:22:37,619 [main:117] - GENERATED CALL = (fu1()).get(-555611437).isDigit()
2021-03-12 06:22:37,619 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@323d646f]]
2021-03-12 06:22:37,619 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@157303d9]
2021-03-12 06:22:37,751 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:37,754 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@323d646f]
2021-03-12 06:22:37,885 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:22:38,019 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:22:38,022 [main:117] - GENERATED CALL = (fu1()).get(-157995076).equals('໇', true)
2021-03-12 06:22:38,022 [main:114] - replacement of this == 42 of type Boolean is (fu1()).get(-555611437).isDigit()
2021-03-12 06:22:38,154 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:22:38,154 [main:66] - Compilation checking started
2021-03-12 06:22:38,799 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(908745377)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if ((fu1()).get(-555611437).isDigit()) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = (fu1()).removeRange(-42734338, -1106695506)

    fu2 {
        prope3 = (fu1()).lowercase()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != 723521713) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:38,801 [main:107] - replacing (let({a: Throwable -> check(true, { "vwncs"})}), Unit?)
2021-03-12 06:22:38,801 [main:50] - replacing let({a: Throwable -> check(true, { "vwncs"})}) Unit?
2021-03-12 06:22:38,801 [main:54] - Getting value of type Unit?
2021-03-12 06:22:38,933 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 06:22:39,072 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:22:39,076 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:22:39,522 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:22:39,525 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-12 06:22:39,527 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 06:22:39,666 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:22:39,669 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:22:40,113 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 06:22:40,116 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-12 06:22:40,119 [main:302] - generating value of type = Any false depth = 8
2021-03-12 06:22:40,119 [main:95] - GENERATED = check(true, { "ugzhv"})
2021-03-12 06:22:40,119 [main:95] - GENERATED = repeat(1547360789, {a: Int -> check(true, { "ugzhv"})})
2021-03-12 06:22:40,119 [main:58] - GENERATED VALUE OF TYPE Unit? = repeat(1547360789, {a: Int -> check(true, { "ugzhv"})})
2021-03-12 06:22:40,119 [main:61] - GENERATED IS CALL =true
2021-03-12 06:22:40,905 [main:67] - randomType = MutableMap<UInt, Pair<UInt, Sequence<Kla1>>>
2021-03-12 06:22:40,906 [main:106] - GETTING Unit? from String
2021-03-12 06:22:40,923 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac46097]]
2021-03-12 06:22:40,923 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:41,056 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:41,191 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:41,194 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac46097]
2021-03-12 06:22:41,327 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 06:22:41,330 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:22:41,468 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:22:41,472 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:22:41,796 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:22:41,797 [main:95] - GENERATED = print("hndvd")
2021-03-12 06:22:41,797 [main:117] - GENERATED CALL = (fu1())?.subSequence(-2097469570, 961089322).forEach({a: Char -> print("hndvd")})
2021-03-12 06:22:41,797 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac46097]]
2021-03-12 06:22:41,797 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ac46097]
2021-03-12 06:22:41,930 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 06:22:41,933 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:22:42,071 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:22:42,075 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:22:42,367 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:22:42,370 [main:95] - GENERATED = require(true)
2021-03-12 06:22:42,370 [main:117] - GENERATED CALL = (fu1())?.forEach({a: Char -> require(true)})
2021-03-12 06:22:42,371 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f6c37b]]
2021-03-12 06:22:42,371 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4847d817]
2021-03-12 06:22:42,502 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:42,637 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:42,640 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f6c37b]
2021-03-12 06:22:42,773 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 06:22:42,775 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:22:42,913 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:22:42,916 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:22:43,206 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:22:43,209 [main:95] - GENERATED = require(false)
2021-03-12 06:22:43,209 [main:117] - GENERATED CALL = (fu1())?.subSequence(352644518, -1711704206).forEachIndexed({a: Int, b: Char -> require(false)})
2021-03-12 06:22:43,209 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f6c37b]]
2021-03-12 06:22:43,209 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f6c37b]
2021-03-12 06:22:43,342 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 06:22:43,344 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:22:43,482 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:22:43,486 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:22:43,778 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 06:22:43,781 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 06:22:43,918 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:22:43,922 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:22:44,214 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 06:22:44,217 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 06:22:44,355 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:22:44,359 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:22:44,864 [main:302] - generating value of type = Int true depth = 12
2021-03-12 06:22:44,867 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-12 06:22:44,870 [main:302] - generating value of type = Unit false depth = 13
2021-03-12 06:22:45,009 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:22:45,013 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:22:45,311 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 16
2021-03-12 06:22:45,311 [main:385] - Cant generate call of fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:22:45,311 [main:95] - GENERATED = repeat(-1027299436, {a: Int -> })
2021-03-12 06:22:45,312 [main:95] - GENERATED = contract({ repeat(-1027299436, {a: Int -> })})
2021-03-12 06:22:45,312 [main:95] - GENERATED = contract({ contract({ repeat(-1027299436, {a: Int -> })})})
2021-03-12 06:22:45,312 [main:117] - GENERATED CALL = (fu1())?.forEachIndexed({a: Int, b: Char -> contract({ contract({ repeat(-1027299436, {a: Int -> })})})})
2021-03-12 06:22:45,312 [main:114] - replacement of let({a: Throwable -> check(true, { "vwncs"})}) of type Unit? is (fu1())?.subSequence(352644518, -1711704206).forEachIndexed({a: Int, b: Char -> require(false)})
2021-03-12 06:22:45,446 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:22:45,447 [main:66] - Compilation checking started
2021-03-12 06:22:45,856 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(42)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(908745377)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if ((fu1()).get(-555611437).isDigit()) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = (fu1()).removeRange(-42734338, -1106695506)

    fu2 {
        prope3 = (fu1()).lowercase()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.(fu1())?.subSequence(352644518, -1711704206).forEachIndexed({a: Int, b: Char -> require(false)})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != 723521713) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:45,858 [main:107] - replacing (value, Ty2)
2021-03-12 06:22:45,858 [main:50] - replacing value Ty2
2021-03-12 06:22:45,858 [main:54] - Getting value of type Ty2
2021-03-12 06:22:45,992 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-12 06:22:45,998 [main:58] - GENERATED VALUE OF TYPE Ty2 = 
2021-03-12 06:22:46,469 [main:67] - randomType = HashSet<Sequence<Kla6>>
2021-03-12 06:22:46,602 [main:302] - generating value of type = HashSet<Sequence<Kla6>> false depth = 0
2021-03-12 06:22:46,741 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Sequence<Kla6>> = TODO()
2021-03-12 06:22:46,745 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Sequence<Kla6>> = TODO()
2021-03-12 06:22:46,886 [main:95] - GENERATED = linkedSetOf<Sequence<Kla6>>()
2021-03-12 06:22:47,005 [main:106] - GETTING Ty2 from String
2021-03-12 06:22:47,021 [main:111] - Cant find and generate replacement for value type Ty2
2021-03-12 06:22:47,021 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 06:22:47,022 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 06:22:47,022 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 06:22:47,154 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 06:22:47,160 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 06:22:47,315 [main:67] - randomType = A
2021-03-12 06:22:47,451 [main:302] - generating value of type = A false depth = 0
2021-03-12 06:22:47,454 [main:112] - generating klass A text = class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}
2021-03-12 06:22:47,459 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 06:22:47,483 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 06:22:47,483 [main:107] - replacing (Kla1(Kla0(42)), Kla1)
2021-03-12 06:22:47,483 [main:50] - replacing Kla1(Kla0(42)) Kla1
2021-03-12 06:22:47,483 [main:54] - Getting value of type Kla1
2021-03-12 06:22:47,643 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:22:47,646 [main:112] - generating klass Kla1 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)
2021-03-12 06:22:47,778 [main:194] - Type params = []
2021-03-12 06:22:47,910 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-12 06:22:47,913 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:22:48,045 [main:194] - Type params = []
2021-03-12 06:22:48,178 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:22:48,181 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1(Kla0(1553734476))
2021-03-12 06:22:48,181 [main:61] - GENERATED IS CALL =true
2021-03-12 06:22:48,332 [main:67] - randomType = Float
2021-03-12 06:22:48,464 [main:302] - generating value of type = Float true depth = 0
2021-03-12 06:22:48,496 [main:106] - GETTING Kla1 from String
2021-03-12 06:22:48,512 [main:114] - replacement of Kla1(Kla0(42)) of type Kla1 is Kla1(Kla0(1553734476))
2021-03-12 06:22:48,644 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:22:48,644 [main:66] - Compilation checking started
2021-03-12 06:22:49,235 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(1553734476)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(908745377)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if ((fu1()).get(-555611437).isDigit()) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = (fu1()).removeRange(-42734338, -1106695506)

    fu2 {
        prope3 = (fu1()).lowercase()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != 723521713) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:49,237 [main:107] - replacing (value, Ty2)
2021-03-12 06:22:49,238 [main:50] - replacing value Ty2
2021-03-12 06:22:49,238 [main:54] - Getting value of type Ty2
2021-03-12 06:22:49,372 [main:302] - generating value of type = Ty2 false depth = 0
2021-03-12 06:22:49,377 [main:58] - GENERATED VALUE OF TYPE Ty2 = 
2021-03-12 06:22:49,529 [main:67] - randomType = Float
2021-03-12 06:22:49,670 [main:302] - generating value of type = Float true depth = 0
2021-03-12 06:22:49,701 [main:106] - GETTING Ty2 from String
2021-03-12 06:22:49,716 [main:111] - Cant find and generate replacement for value type Ty2
2021-03-12 06:22:49,716 [main:107] - replacing (prope3, Any?)
2021-03-12 06:22:49,716 [main:50] - replacing prope3 Any?
2021-03-12 06:22:49,716 [main:54] - Getting value of type Any?
2021-03-12 06:22:49,849 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:22:49,849 [main:58] - GENERATED VALUE OF TYPE Any? = "spare"
2021-03-12 06:22:49,849 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:50,010 [main:67] - randomType = HashSet<Boolean>
2021-03-12 06:22:50,142 [main:302] - generating value of type = HashSet<Boolean> false depth = 0
2021-03-12 06:22:50,287 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Boolean> = TODO()
2021-03-12 06:22:50,291 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Boolean> = TODO()
2021-03-12 06:22:50,430 [main:95] - GENERATED = hashSetOf<Boolean>()
2021-03-12 06:22:50,529 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@a2995e0]
2021-03-12 06:22:50,530 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@15419c80]
2021-03-12 06:22:50,663 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:22:50,665 [main:78] - Generated call from random type = (hashSetOf<Boolean>()).toArray().get(-1843009427)
2021-03-12 06:22:50,666 [main:114] - replacement of prope3 of type Any? is (hashSetOf<Boolean>()).toArray().get(-1843009427)
2021-03-12 06:22:50,821 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:22:50,822 [main:66] - Compilation checking started
2021-03-12 06:22:51,223 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(1553734476)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(908745377)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if ((fu1()).get(-555611437).isDigit()) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = (fu1()).removeRange(-42734338, -1106695506)

    fu2 {
        prope3 = (fu1()).lowercase()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.(hashSetOf<Boolean>()).toArray().get(-1843009427) = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != 723521713) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:51,226 [main:107] - replacing (s, Kla0)
2021-03-12 06:22:51,226 [main:50] - replacing s Kla0
2021-03-12 06:22:51,226 [main:54] - Getting value of type Kla0
2021-03-12 06:22:51,359 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:22:51,362 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:22:51,494 [main:194] - Type params = []
2021-03-12 06:22:51,626 [main:302] - generating value of type = Int true depth = 2
2021-03-12 06:22:51,629 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0(2090449140)
2021-03-12 06:22:51,629 [main:61] - GENERATED IS CALL =true
2021-03-12 06:22:51,951 [main:67] - randomType = A?
2021-03-12 06:22:52,083 [main:302] - generating value of type = A false depth = 0
2021-03-12 06:22:52,086 [main:112] - generating klass A text = class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}
2021-03-12 06:22:52,090 [main:106] - GETTING Kla0 from String
2021-03-12 06:22:52,106 [main:114] - replacement of s of type Kla0 is Kla0(2090449140)
2021-03-12 06:22:52,240 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:22:52,240 [main:66] - Compilation checking started
2021-03-12 06:22:52,636 [main:49] - Result = false
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(1553734476)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().Kla0(2090449140).x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(908745377)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if ((fu1()).get(-555611437).isDigit()) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = (fu1()).removeRange(-42734338, -1106695506)

    fu2 {
        prope3 = (fu1()).lowercase()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = {}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != 723521713) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:52,639 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 06:22:52,639 [main:50] - replacing {} Function0<Unit>
2021-03-12 06:22:52,639 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:22:52,772 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:22:52,775 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:22:52,915 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:22:52,919 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:22:53,373 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:22:53,376 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:22:53,379 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:22:53,379 [main:95] - GENERATED = check(true, { "xbigc"})
2021-03-12 06:22:53,379 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "xbigc"})}
2021-03-12 06:22:53,379 [main:61] - GENERATED IS CALL =false
2021-03-12 06:22:53,391 [main:67] - randomType = Kla1
2021-03-12 06:22:53,524 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:22:53,527 [main:112] - generating klass Kla1 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)
2021-03-12 06:22:53,658 [main:194] - Type params = []
2021-03-12 06:22:53,790 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-12 06:22:53,793 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)
2021-03-12 06:22:53,957 [main:194] - Type params = []
2021-03-12 06:22:54,090 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:22:54,098 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:22:54,115 [main:114] - replacement of {} of type Function0<Unit> is { check(true, { "xbigc"})}
2021-03-12 06:22:54,249 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:22:54,250 [main:66] - Compilation checking started
2021-03-12 06:22:54,834 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(1553734476)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(908745377)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if ((fu1()).get(-555611437).isDigit()) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = (fu1()).removeRange(-42734338, -1106695506)

    fu2 {
        prope3 = (fu1()).lowercase()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = { check(true, { "xbigc"})}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != 723521713) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:54,837 [main:107] - replacing (this, Kla6)
2021-03-12 06:22:54,837 [main:50] - replacing this Kla6
2021-03-12 06:22:54,838 [main:54] - Getting value of type Kla6
2021-03-12 06:22:54,980 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 06:22:54,983 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:22:54,983 [main:58] - GENERATED VALUE OF TYPE Kla6 = Kla6()
2021-03-12 06:22:54,983 [main:61] - GENERATED IS CALL =true
2021-03-12 06:22:55,450 [main:67] - randomType = LinkedHashMap<ULong, Boolean?>
2021-03-12 06:22:55,582 [main:302] - generating value of type = LinkedHashMap<ULong, Boolean?> false depth = 0
2021-03-12 06:22:55,720 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(original: kotlin.collections.Map<ULong, Boolean?>): LinkedHashMap<ULong, Boolean?> = TODO()
2021-03-12 06:22:55,724 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(original: kotlin.collections.Map<ULong, Boolean?>): LinkedHashMap<ULong, Boolean?> = TODO()
2021-03-12 06:22:56,027 [main:302] - generating value of type = Map<ULong, Boolean?> false depth = 3
2021-03-12 06:22:56,167 [main:43] - GENERATING CALL OF fun <K, V> mapOf(pairs: Pair<ULong, Boolean?>): Map<ULong, Boolean?> = TODO()
2021-03-12 06:22:56,171 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mapOf(pairs: Pair<ULong, Boolean?>): Map<ULong, Boolean?> = TODO()
2021-03-12 06:22:56,309 [main:302] - generating value of type = Pair<ULong, Boolean?> false depth = 6
2021-03-12 06:22:56,448 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong, second: Boolean?): Pair<ULong, Boolean?> = TODO()
2021-03-12 06:22:56,452 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong, second: Boolean?): Pair<ULong, Boolean?> = TODO()
2021-03-12 06:22:56,591 [main:302] - generating value of type = ULong true depth = 9
2021-03-12 06:22:56,594 [main:302] - generating value of type = Boolean true depth = 9
2021-03-12 06:22:56,597 [main:95] - GENERATED = Pair<ULong, Boolean?>(4913760566383345731.toULong(), false)
2021-03-12 06:22:56,597 [main:95] - GENERATED = mapOf<ULong, Boolean?>(Pair<ULong, Boolean?>(4913760566383345731.toULong(), false))
2021-03-12 06:22:56,597 [main:95] - GENERATED = LinkedHashMap<ULong, Boolean?>(mapOf<ULong, Boolean?>(Pair<ULong, Boolean?>(4913760566383345731.toULong(), false)))
2021-03-12 06:22:56,708 [main:106] - GETTING Kla6 from String
2021-03-12 06:22:56,723 [main:114] - replacement of this of type Kla6 is Kla6()
2021-03-12 06:22:56,855 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:22:56,855 [main:66] - Compilation checking started
2021-03-12 06:22:57,487 [main:53] - Result = true
Text:
import kotlin.test.assertEquals
import kotlin.contracts.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame



class A {
    companion object {
        enum class Season {
            WINTER,
            SPRING,
            SUMMER,
            AUTUMN
        }
    }
}

fun foo(x : A.Companion.Season) : String {
    return when (x) {
        A.Companion.Season.WINTER -> "winter"
        A.Companion.Season.SPRING -> "spring"
        A.Companion.Season.SUMMER -> "summer"
        else -> "other"
    }
}

fun box() : String {
    assertEquals("winter", foo(A.Companion.Season.WINTER))
    assertEquals("spring", foo(A.Companion.Season.SPRING))
    assertEquals("summer", foo(A.Companion.Season.SUMMER))
    assertEquals("other", foo(A.Companion.Season.AUTUMN))
    return "OK"
}

fun fu0(action: () -> Unit) {
    contract {
        callsInPlace(action, kotlin.contracts.InvocationKind.EXACTLY_ONCE)
    }
    action()
}

fun fu1(): String {
    val prope0: String
    val (Ty0, Ty1) = "OK" to "rhdwh"
    fu0 {
        prope0 = Ty0
    }
    return prope0
}

fun box768(): String {
    return "qygvt"
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla5)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val x: Int)

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla1(val s: Kla0)

class Kla2() {

    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu7(ss: Kla1): Kla1 = Kla1(Kla0(-1464996671))

    suspend fun <Ty2> fu8(t: Ty2): Ty2 = t

    suspend fun fu9(): Kla1 {
        return fu6(fu7(fu8(Kla1(Kla0(1553734476)))))
    }

    suspend fun fu10() = Kla0(1835796833).x
}

class Kla3 {

    suspend fun fu6(value: Kla1): Kla1 = value

    suspend fun fu7(s: Int): Kla1 = Kla1(Kla0(-1905585661))

    suspend fun fu8() = (fu1()).subSequence(-281337898, -1353495110).lastIndexOfAny(charArrayOf('ᑑ'), 698385016, true)

    suspend fun fu9(): Kla1 {
        return fu6(fu7((fu1()).get(158150706).code))
    }

    suspend fun fu10() = fu9().s.x
}

class Kla4 {
    suspend fun <Ty2> fu6(value: Ty2): Ty2 = value

    suspend fun fu9(): Kla1 {
        return fu6(Kla1(Kla0(908745377)))
    }

    suspend fun fu10() = (fu1()).compareTo(fu1()).unaryMinus()
}

fun Int.fu3() =
    if ((fu1()).get(-555611437).isDigit()) (linkedSetOf<Boolean>()).toArray().contentToString() else toString()

fun box214(): String {

    var prope3: Any = "FAIL"
    fu2 { print("jbnef")}

    if ((fu1()).subSequence(95094193, 590573164).isNotBlank()) return (fu1()).substringBefore('఻', fu1())

    prope3 = "FAIL2"

    fu2 { println()}

    if (fu1() != (fu1()).toLowerCase()) return "FAIL 2 $prope3"

    prope3 = (fu1()).removeRange(-42734338, -1106695506)

    fu2 {
        prope3 = (fu1()).lowercase()
    }

    return (fu1()).replaceFirst('ﲘ', '⺦', false)
}

fun <Ty2> fu4(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        x(prope3.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        NoWhenBranchMatchedException("gckgd")?.let({a: Throwable -> check(true, { "vwncs"})})
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope3: Result<Any?>) {
        "owlbf"
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla6().prope3 = runCatching<Any?>({ null}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla7<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty2>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu11(ClassCastException("aqbmz"))
        }
    }

    abstract fun fu11(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla8 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu13() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> println()}

    fun fu13(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((fu1()).replaceIndentByMargin(fu1(), fu1()) + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu14(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (fu1()).none() }?.let { TODO()}
    }

    fun fu15(method: String) {
        prope4.find { false} ?: error((fu1()).filter({a: Char -> false}) + (fu1()).dropLast(539873478) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla8()

class Kla9 {
    private var prope5 = (fu1()).length.coerceIn(-1153611996, 918078977)
    var prope6 = (fu1()).get(-1404429679).isLowSurrogate()

    var prope7: () -> Unit = { println("lxoab")}

    fun fu16() {
        prope5 = 0
        prope6 = true
        prope7 = { check(true, { "xbigc"})}
    }

    suspend fun fu17() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println()}
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (fu1()).length.until(-112)) {
            if ((fu1()).compareTo(fu1()).coerceAtMost(-1173885120) != 723521713) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + (fu1()).length.inv())
            prope7()
        }
        if ((fu1()).isNotEmpty())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (fu1()).subSequence(-1492718797, -521071476).indexOfAny(charArrayOf('쾷'), -900421220, true) + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla9().prope7 = {
            prope2.prope6 = false
        }
    }

    override fun fu11(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:22:57,489 [main:107] - replacing (fu8(Kla1(Kla0(1553734476))), Kla1)
2021-03-12 06:22:57,490 [main:50] - replacing fu8(Kla1(Kla0(1553734476))) Kla1
2021-03-12 06:22:57,490 [main:54] - Getting value of type Kla1
