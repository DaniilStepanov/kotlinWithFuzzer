2021-03-12 00:50:48,617 [main:66] - Compilation checking started
2021-03-12 00:50:49,826 [main:50] - replacing val data: Int Int
2021-03-12 00:50:49,826 [main:54] - Getting value of type Int
2021-03-12 00:50:49,961 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:49,964 [main:58] - GENERATED VALUE OF TYPE Int = 37611160
2021-03-12 00:50:49,964 [main:61] - GENERATED IS CALL =false
2021-03-12 00:50:49,969 [main:67] - randomType = Z
2021-03-12 00:50:50,110 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:50:50,111 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:50:50,276 [main:194] - Type params = []
2021-03-12 00:50:50,411 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:50:50,805 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5f9f94ec]
2021-03-12 00:50:50,807 [main:78] - Generated call from random type = (Z(-1449462100)).data.countLeadingZeroBits()
2021-03-12 00:50:50,808 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:50:50,809 [main:66] - Compilation checking started
2021-03-12 00:50:51,442 [main:53] - Result = true
Text:
inline class Z(val data: Int = (Z(-1449462100)).data.countLeadingZeroBits())

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}
2021-03-12 00:50:51,721 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:50:51,893 [main:194] - Type params = []
2021-03-12 00:50:52,039 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:50:52,337 [main:45] - Trying to change 27 nodes
2021-03-12 00:50:52,340 [main:53] - replacing (Z(0).toString(), String)
2021-03-12 00:50:52,341 [main:50] - replacing Z(0).toString() String
2021-03-12 00:50:52,341 [main:54] - Getting value of type String
2021-03-12 00:50:52,443 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:50:52,445 [main:58] - GENERATED VALUE OF TYPE String = "iyyyt"
2021-03-12 00:50:52,446 [main:61] - GENERATED IS CALL =false
2021-03-12 00:50:52,849 [main:67] - randomType = MutableMap<Float, Byte>
2021-03-12 00:50:52,866 [main:106] - GETTING String from Int
2021-03-12 00:50:53,002 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:50:53,002 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:50:53,120 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:53,121 [main:117] - GENERATED CALL = (Z(-180872028).data).toString(-1490426745)
2021-03-12 00:50:53,121 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:50:53,121 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:50:53,122 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:50:53,123 [main:117] - GENERATED CALL = (Z(-180872028).data).toLong().toString(Z(-180872028).data)
2021-03-12 00:50:53,123 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:50:53,123 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:50:53,218 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:50:53,219 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:50:53,221 [main:117] - GENERATED CALL = (Z(-180872028).data).div(8794755579697942895).toString(Z(-180872028).data)
2021-03-12 00:50:53,221 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]]
2021-03-12 00:50:53,221 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:50:53,222 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]
2021-03-12 00:50:53,223 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().titlecase()
2021-03-12 00:50:53,223 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:50:53,223 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:50:53,224 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:50:53,225 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().lowercase()
2021-03-12 00:50:53,225 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]]
2021-03-12 00:50:53,225 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:50:53,226 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]
2021-03-12 00:50:53,227 [main:117] - GENERATED CALL = (Z(-180872028).data).toByte().toString(Z(-180872028).data)
2021-03-12 00:50:53,227 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:50:53,228 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:50:53,228 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:50:53,229 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().uppercase()
2021-03-12 00:50:53,230 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:50:53,230 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:50:53,230 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:50:53,232 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().toString(Z(-180872028).data)
2021-03-12 00:50:53,232 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:50:53,232 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:50:53,233 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:50:53,340 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:50:53,342 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().plus("tqjgr")
2021-03-12 00:50:53,342 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:50:53,342 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:50:53,343 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:50:53,344 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(Z(-180872028).data).toString(Z(-180872028).data)
2021-03-12 00:50:53,345 [main:61] - replacement of Z(0).toString() of type String is (Z(-180872028).data).toByte().toString(Z(-180872028).data)
2021-03-12 00:50:53,469 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:50:53,469 [main:66] - Compilation checking started
2021-03-12 00:50:53,967 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}
2021-03-12 00:50:53,968 [main:53] - replacing (1, Int)
2021-03-12 00:50:53,968 [main:50] - replacing 1 Int
2021-03-12 00:50:53,968 [main:54] - Getting value of type Int
2021-03-12 00:50:54,068 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:54,068 [main:58] - GENERATED VALUE OF TYPE Int = -509557777
2021-03-12 00:50:54,069 [main:61] - GENERATED IS CALL =false
2021-03-12 00:50:54,173 [main:67] - randomType = Char
2021-03-12 00:50:54,267 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:50:54,309 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d3d4bc2]
2021-03-12 00:50:54,310 [main:78] - Generated call from random type = ('▷').digitToInt()
2021-03-12 00:50:54,311 [main:106] - GETTING Int from Int
2021-03-12 00:50:54,362 [main:113] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b82278]]
2021-03-12 00:50:54,362 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b82278]
2021-03-12 00:50:54,454 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:54,456 [main:117] - GENERATED CALL = (Z(-180872028).data).plus(72)
2021-03-12 00:50:54,456 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49f116d9]]
2021-03-12 00:50:54,456 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:50:54,546 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:54,547 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49f116d9]
2021-03-12 00:50:54,547 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(-1305307815).inc()
2021-03-12 00:50:54,548 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@118e6543]]
2021-03-12 00:50:54,548 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@118e6543]
2021-03-12 00:50:54,640 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:54,641 [main:117] - GENERATED CALL = (Z(-180872028).data).rem(112)
2021-03-12 00:50:54,642 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76e87fa0]]
2021-03-12 00:50:54,642 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:50:54,729 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:54,730 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76e87fa0]
2021-03-12 00:50:54,835 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:54,836 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(-1909108869).minus(-7)
2021-03-12 00:50:54,836 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6e7c539d]]
2021-03-12 00:50:54,836 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:50:54,836 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6e7c539d]
2021-03-12 00:50:54,837 [main:117] - GENERATED CALL = (Z(-180872028).data).toShort().countLeadingZeroBits()
2021-03-12 00:50:54,837 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e18d3f9]]
2021-03-12 00:50:54,837 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:50:54,838 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e18d3f9]
2021-03-12 00:50:54,932 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:54,934 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(Z(-180872028).data).compareTo(30)
2021-03-12 00:50:54,934 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@69ef1429]]
2021-03-12 00:50:54,934 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:50:55,041 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:55,043 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@69ef1429]
2021-03-12 00:50:55,152 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:55,154 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(155554497).div(34)
2021-03-12 00:50:55,154 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@42019b47]]
2021-03-12 00:50:55,154 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:50:55,154 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@42019b47]
2021-03-12 00:50:55,255 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:55,260 [main:117] - GENERATED CALL = (Z(-180872028).data).toFloat().compareTo(-106)
2021-03-12 00:50:55,260 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@139eed49]]
2021-03-12 00:50:55,261 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:50:55,261 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@139eed49]
2021-03-12 00:50:55,262 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().shl(Z(-180872028).data)
2021-03-12 00:50:55,263 [main:113] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@574411f2]]
2021-03-12 00:50:55,263 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@574411f2]
2021-03-12 00:50:55,264 [main:117] - GENERATED CALL = (Z(-180872028).data).and(Z(-180872028).data)
2021-03-12 00:50:55,264 [main:61] - replacement of 1 of type Int is (Z(-180872028).data).plus(72)
2021-03-12 00:50:55,364 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:50:55,365 [main:66] - Compilation checking started
2021-03-12 00:50:55,770 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z((Z(-180872028).data).plus(72))) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}
2021-03-12 00:50:55,771 [main:53] - replacing (0, Int)
2021-03-12 00:50:55,772 [main:50] - replacing 0 Int
2021-03-12 00:50:55,772 [main:54] - Getting value of type Int
2021-03-12 00:50:55,884 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:55,884 [main:58] - GENERATED VALUE OF TYPE Int = -221734829
2021-03-12 00:50:55,884 [main:61] - GENERATED IS CALL =false
2021-03-12 00:50:56,417 [main:67] - randomType = Function2<HashSet<Collection<Char>>, Z, UByte>
2021-03-12 00:50:56,417 [main:106] - GETTING Int from Int
2021-03-12 00:50:56,480 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2446bd09]]
2021-03-12 00:50:56,480 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2446bd09]
2021-03-12 00:50:56,482 [main:117] - GENERATED CALL = (Z(-180872028).data).takeLowestOneBit()
2021-03-12 00:50:56,482 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@118e6543]]
2021-03-12 00:50:56,482 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:50:56,591 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:56,592 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@118e6543]
2021-03-12 00:50:56,702 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:56,703 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(-1072168836).rem(-5)
2021-03-12 00:50:56,703 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f6b7959]]
2021-03-12 00:50:56,703 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:50:56,703 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f6b7959]
2021-03-12 00:50:56,791 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:56,793 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().coerceAtLeast(1076199010)
2021-03-12 00:50:56,794 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@702b0e5f]]
2021-03-12 00:50:56,794 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:50:56,882 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:56,884 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(396086684).sign
2021-03-12 00:50:56,884 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4bc9a60]]
2021-03-12 00:50:56,884 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:50:56,884 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4bc9a60]
2021-03-12 00:50:57,014 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:57,015 [main:117] - GENERATED CALL = (Z(-180872028).data).toLong().compareTo(-9)
2021-03-12 00:50:57,016 [main:113] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b82278]]
2021-03-12 00:50:57,016 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b82278]
2021-03-12 00:50:57,106 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:57,108 [main:117] - GENERATED CALL = (Z(-180872028).data).plus(74)
2021-03-12 00:50:57,108 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@40e8c9bb]]
2021-03-12 00:50:57,108 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:50:57,109 [main:117] - GENERATED CALL = (Z(-180872028).data).toLong().sign
2021-03-12 00:50:57,109 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4737dd30]]
2021-03-12 00:50:57,110 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:50:57,196 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:57,197 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4737dd30]
2021-03-12 00:50:57,285 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:57,287 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(-1495418344).times(116)
2021-03-12 00:50:57,287 [main:113] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45fdd899]]
2021-03-12 00:50:57,287 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45fdd899]
2021-03-12 00:50:57,406 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:57,408 [main:117] - GENERATED CALL = (Z(-180872028).data).shr(178854931)
2021-03-12 00:50:57,408 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 00:50:57,408 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:50:57,408 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 00:50:57,409 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().unaryPlus()
2021-03-12 00:50:57,409 [main:61] - replacement of 0 of type Int is (Z(-180872028).data).toInt().unaryPlus()
2021-03-12 00:50:57,496 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:50:57,497 [main:66] - Compilation checking started
2021-03-12 00:50:57,915 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z((Z(-180872028).data).toInt().unaryPlus())) throw AssertionError()
    if (Z(0) == Z((Z(-180872028).data).plus(72))) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}
2021-03-12 00:50:57,916 [main:53] - replacing (0, Int)
2021-03-12 00:50:57,916 [main:50] - replacing 0 Int
2021-03-12 00:50:57,916 [main:54] - Getting value of type Int
2021-03-12 00:50:58,002 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:58,002 [main:58] - GENERATED VALUE OF TYPE Int = 1926496738
2021-03-12 00:50:58,002 [main:61] - GENERATED IS CALL =false
2021-03-12 00:50:58,003 [main:67] - randomType = Z
2021-03-12 00:50:58,091 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:50:58,091 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:50:58,184 [main:194] - Type params = []
2021-03-12 00:50:58,275 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:50:58,284 [main:78] - Generated call from random type = (Z(-1747481122)).data.absoluteValue
2021-03-12 00:50:58,285 [main:106] - GETTING Int from Int
2021-03-12 00:50:58,335 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c8fe8cd]]
2021-03-12 00:50:58,336 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:50:58,336 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c8fe8cd]
2021-03-12 00:50:58,337 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().countTrailingZeroBits()
2021-03-12 00:50:58,337 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6931e110]]
2021-03-12 00:50:58,337 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:50:58,424 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:50:58,424 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6931e110]
2021-03-12 00:50:58,508 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:50:58,509 [main:117] - GENERATED CALL = (Z(-180872028).data).equals("qhbol").compareTo(false)
2021-03-12 00:50:58,509 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e18d3f9]]
2021-03-12 00:50:58,510 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:50:58,510 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e18d3f9]
2021-03-12 00:50:58,604 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:58,606 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(Z(-180872028).data).compareTo(125)
2021-03-12 00:50:58,606 [main:113] - Case = [public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 00:50:58,606 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 00:50:58,607 [main:117] - GENERATED CALL = (Z(-180872028).data).unaryPlus()
2021-03-12 00:50:58,607 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f537655], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5977c989]]
2021-03-12 00:50:58,607 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f537655]
2021-03-12 00:50:58,709 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:50:58,711 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5977c989]
2021-03-12 00:50:58,711 [main:117] - GENERATED CALL = (Z(-180872028).data).div(0.715005f).toBits()
2021-03-12 00:50:58,711 [main:113] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@702b0e5f]]
2021-03-12 00:50:58,712 [main:117] - GENERATED CALL = (Z(-180872028).data).sign
2021-03-12 00:50:58,712 [main:113] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@69ef1429]]
2021-03-12 00:50:58,712 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@69ef1429]
2021-03-12 00:50:58,795 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:58,796 [main:117] - GENERATED CALL = (Z(-180872028).data).div(-89)
2021-03-12 00:50:58,796 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@454f2ac7]]
2021-03-12 00:50:58,797 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:50:58,881 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:50:58,882 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@454f2ac7]
2021-03-12 00:50:58,883 [main:117] - GENERATED CALL = (Z(-180872028).data).div(-3644654262420253743).countOneBits()
2021-03-12 00:50:58,883 [main:113] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d268d97]]
2021-03-12 00:50:58,883 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d268d97]
2021-03-12 00:50:58,884 [main:117] - GENERATED CALL = (Z(-180872028).data).inv()
2021-03-12 00:50:58,884 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@118e6543]]
2021-03-12 00:50:58,884 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@118e6543]
2021-03-12 00:50:58,978 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:50:58,979 [main:117] - GENERATED CALL = (Z(-180872028).data).rem(86)
2021-03-12 00:50:58,979 [main:61] - replacement of 0 of type Int is (Z(-180872028).data).sign
2021-03-12 00:50:59,067 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:50:59,068 [main:53] - replacing (0, Int)
2021-03-12 00:50:59,068 [main:50] - replacing 0 Int
2021-03-12 00:50:59,068 [main:54] - Getting value of type Int
2021-03-12 00:50:59,155 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:59,155 [main:58] - GENERATED VALUE OF TYPE Int = -1429470023
2021-03-12 00:50:59,156 [main:61] - GENERATED IS CALL =false
2021-03-12 00:50:59,249 [main:67] - randomType = Long
2021-03-12 00:50:59,336 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:50:59,388 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@454f2ac7]
2021-03-12 00:50:59,388 [main:78] - Generated call from random type = (-8434360338821949184).countOneBits()
2021-03-12 00:50:59,389 [main:61] - replacement of 0 of type Int is (-8434360338821949184).countOneBits()
2021-03-12 00:50:59,485 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:50:59,486 [main:66] - Compilation checking started
2021-03-12 00:50:59,868 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if (Z((-8434360338821949184).countOneBits()) != Z((Z(-180872028).data).toInt().unaryPlus())) throw AssertionError()
    if (Z(0) == Z((Z(-180872028).data).plus(72))) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}
2021-03-12 00:50:59,869 [main:53] - replacing (1234, Int)
2021-03-12 00:50:59,870 [main:50] - replacing 1234 Int
2021-03-12 00:50:59,870 [main:54] - Getting value of type Int
2021-03-12 00:50:59,956 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:50:59,956 [main:58] - GENERATED VALUE OF TYPE Int = 415546203
2021-03-12 00:50:59,956 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:00,043 [main:67] - randomType = Boolean?
2021-03-12 00:51:00,140 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:51:00,187 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6931e110]
2021-03-12 00:51:00,274 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:51:00,275 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49f116d9]
2021-03-12 00:51:00,276 [main:78] - Generated call from random type = (false)?.compareTo(false).inc()
2021-03-12 00:51:00,276 [main:106] - GETTING Int from Int
2021-03-12 00:51:00,360 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f6b7959]]
2021-03-12 00:51:00,360 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:00,360 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f6b7959]
2021-03-12 00:51:00,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:00,448 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().coerceAtLeast(635829338)
2021-03-12 00:51:00,448 [main:113] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d268d97]]
2021-03-12 00:51:00,448 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d268d97]
2021-03-12 00:51:00,449 [main:117] - GENERATED CALL = (Z(-180872028).data).inv()
2021-03-12 00:51:00,449 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4a154908]]
2021-03-12 00:51:00,449 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:51:00,533 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:51:00,533 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4a154908]
2021-03-12 00:51:00,534 [main:117] - GENERATED CALL = (Z(-180872028).data).div(0.4860531402536472).toInt()
2021-03-12 00:51:00,534 [main:113] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 00:51:00,534 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 00:51:00,535 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt()
2021-03-12 00:51:00,535 [main:113] - Case = [public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1d7f6ec1]]
2021-03-12 00:51:00,535 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1d7f6ec1]
2021-03-12 00:51:00,535 [main:117] - GENERATED CALL = (Z(-180872028).data).coerceAtMost(Z(-180872028).data)
2021-03-12 00:51:00,536 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1dfc03d]]
2021-03-12 00:51:00,536 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:51:00,622 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:00,623 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1dfc03d]
2021-03-12 00:51:00,624 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)
2021-03-12 00:51:00,624 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c461c22]]
2021-03-12 00:51:00,624 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c461c22]
2021-03-12 00:51:00,624 [main:117] - GENERATED CALL = (Z(-180872028).data).rotateLeft(Z(-180872028).data)
2021-03-12 00:51:00,624 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45fdd899]]
2021-03-12 00:51:00,625 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:00,625 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45fdd899]
2021-03-12 00:51:00,726 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:00,727 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().shr(-2010694485)
2021-03-12 00:51:00,727 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7142bc15]]
2021-03-12 00:51:00,727 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:51:00,728 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7142bc15]
2021-03-12 00:51:00,817 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:51:00,818 [main:117] - GENERATED CALL = (Z(-180872028).data).toByte().plus(-61)
2021-03-12 00:51:00,818 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2446bd09]]
2021-03-12 00:51:00,818 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:51:00,819 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2446bd09]
2021-03-12 00:51:00,819 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(Z(-180872028).data).takeLowestOneBit()
2021-03-12 00:51:00,819 [main:61] - replacement of 1234 of type Int is (Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)
2021-03-12 00:51:00,901 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:51:00,901 [main:66] - Compilation checking started
2021-03-12 00:51:01,277 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if (Z((-8434360338821949184).countOneBits()) != Z((Z(-180872028).data).toInt().unaryPlus())) throw AssertionError()
    if (Z(0) == Z((Z(-180872028).data).plus(72))) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}
2021-03-12 00:51:01,278 [main:53] - replacing (Z(1234).hashCode(), Int)
2021-03-12 00:51:01,279 [main:50] - replacing Z(1234).hashCode() Int
2021-03-12 00:51:01,279 [main:54] - Getting value of type Int
2021-03-12 00:51:01,376 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:01,377 [main:58] - GENERATED VALUE OF TYPE Int = -1317654627
2021-03-12 00:51:01,377 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:01,489 [main:67] - randomType = Z?
2021-03-12 00:51:01,579 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:51:01,579 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:51:01,673 [main:194] - Type params = []
2021-03-12 00:51:01,776 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:51:01,785 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1d7f6ec1]
2021-03-12 00:51:01,785 [main:78] - Generated call from random type = (Z(396530760))?.data.coerceAtMost(Z(-180872028).data)
2021-03-12 00:51:01,786 [main:106] - GETTING Int from Int
2021-03-12 00:51:01,832 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5f9f94ec]]
2021-03-12 00:51:01,832 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:01,833 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5f9f94ec]
2021-03-12 00:51:01,833 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().countLeadingZeroBits()
2021-03-12 00:51:01,833 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4bc9a60]]
2021-03-12 00:51:01,834 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:51:01,834 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4bc9a60]
2021-03-12 00:51:01,931 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:51:01,933 [main:117] - GENERATED CALL = (Z(-180872028).data).toLong().compareTo(-86)
2021-03-12 00:51:01,933 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@42019b47]]
2021-03-12 00:51:01,933 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:51:01,934 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@42019b47]
2021-03-12 00:51:02,025 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:51:02,026 [main:117] - GENERATED CALL = (Z(-180872028).data).toFloat().compareTo(-93)
2021-03-12 00:51:02,026 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5585f547]]
2021-03-12 00:51:02,026 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:02,026 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5585f547]
2021-03-12 00:51:02,027 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().xor(Z(-180872028).data)
2021-03-12 00:51:02,027 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@462cd30e]]
2021-03-12 00:51:02,027 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:51:02,027 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@462cd30e]
2021-03-12 00:51:02,027 [main:117] - GENERATED CALL = (Z(-180872028).data).toByte().toInt()
2021-03-12 00:51:02,028 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4735e7d9]]
2021-03-12 00:51:02,028 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:51:02,173 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:02,174 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4735e7d9]
2021-03-12 00:51:02,175 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(-1063027449).countOneBits()
2021-03-12 00:51:02,175 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c461c22]]
2021-03-12 00:51:02,175 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:51:02,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c461c22]
2021-03-12 00:51:02,286 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:02,288 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(Z(-180872028).data).rotateLeft(1066588348)
2021-03-12 00:51:02,288 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b82278]]
2021-03-12 00:51:02,288 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:02,289 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b82278]
2021-03-12 00:51:02,381 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:51:02,382 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().plus(111)
2021-03-12 00:51:02,383 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b82278]]
2021-03-12 00:51:02,383 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:51:02,383 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79b82278]
2021-03-12 00:51:02,473 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:51:02,474 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(Z(-180872028).data).plus(55)
2021-03-12 00:51:02,474 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1d7f6ec1]]
2021-03-12 00:51:02,474 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:51:02,474 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1d7f6ec1]
2021-03-12 00:51:02,566 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:02,567 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(Z(-180872028).data).coerceAtMost(-264413215)
2021-03-12 00:51:02,567 [main:61] - replacement of Z(1234).hashCode() of type Int is -1317654627
2021-03-12 00:51:02,690 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 00:51:02,690 [main:66] - Compilation checking started
2021-03-12 00:51:03,053 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if (Z((-8434360338821949184).countOneBits()) != Z((Z(-180872028).data).toInt().unaryPlus())) throw AssertionError()
    if (Z(0) == Z((Z(-180872028).data).plus(72))) throw AssertionError()

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}
2021-03-12 00:51:03,054 [main:53] - replacing (Z((-8434360338821949184).countOneBits()) != Z((Z(-180872028).data).toInt().unaryPlus()), Boolean)
2021-03-12 00:51:03,054 [main:50] - replacing Z((-8434360338821949184).countOneBits()) != Z((Z(-180872028).data).toInt().unaryPlus()) Boolean
2021-03-12 00:51:03,054 [main:54] - Getting value of type Boolean
2021-03-12 00:51:03,140 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:51:03,141 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:51:03,141 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:03,330 [main:67] - randomType = Char?
2021-03-12 00:51:03,423 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:51:03,448 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Char defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@411fde6a]
2021-03-12 00:51:03,449 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516a721]
2021-03-12 00:51:03,449 [main:78] - Generated call from random type = ('碲')?.dec().isUpperCase()
2021-03-12 00:51:03,451 [main:106] - GETTING Boolean from Int
2021-03-12 00:51:03,492 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]]
2021-03-12 00:51:03,492 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:03,492 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:51:03,579 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:03,580 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().equals("cdjom")
2021-03-12 00:51:03,580 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dd95fcb]]
2021-03-12 00:51:03,580 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:03,580 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dd95fcb]
2021-03-12 00:51:03,581 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().isLetterOrDigit()
2021-03-12 00:51:03,581 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516a721]]
2021-03-12 00:51:03,581 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:03,581 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516a721]
2021-03-12 00:51:03,582 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().isUpperCase()
2021-03-12 00:51:03,582 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@25260f67]]
2021-03-12 00:51:03,582 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:51:03,582 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@25260f67]
2021-03-12 00:51:03,670 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:03,671 [main:117] - GENERATED CALL = (Z(-180872028).data).toShort().equals("lefip")
2021-03-12 00:51:03,671 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]]
2021-03-12 00:51:03,671 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:51:03,756 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:03,758 [main:117] - GENERATED CALL = (Z(-180872028).data).equals("tkezq")
2021-03-12 00:51:03,758 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30f4fb5]]
2021-03-12 00:51:03,758 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:03,758 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30f4fb5]
2021-03-12 00:51:03,759 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().isLowSurrogate()
2021-03-12 00:51:03,759 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13e40ebc]]
2021-03-12 00:51:03,759 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:51:03,845 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:03,845 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13e40ebc]
2021-03-12 00:51:03,927 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:03,928 [main:117] - GENERATED CALL = (Z(-180872028).data).equals("rnbqq").equals("ymbhv")
2021-03-12 00:51:03,928 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@42602e0f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4e3617fe]]
2021-03-12 00:51:03,928 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@42602e0f]
2021-03-12 00:51:03,928 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4e3617fe]
2021-03-12 00:51:04,049 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:04,051 [main:117] - GENERATED CALL = (Z(-180872028).data).toDouble().equals("qanbz")
2021-03-12 00:51:04,051 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 00:51:04,051 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:51:04,051 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 00:51:04,165 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:04,166 [main:117] - GENERATED CALL = (Z(-180872028).data).toByte().equals("yvhnu")
2021-03-12 00:51:04,166 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6da51e86]]
2021-03-12 00:51:04,166 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:51:04,249 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:04,249 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6da51e86]
2021-03-12 00:51:04,332 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:51:04,333 [main:117] - GENERATED CALL = (Z(-180872028).data).equals("hkgwr").and(true)
2021-03-12 00:51:04,333 [main:61] - replacement of Z((-8434360338821949184).countOneBits()) != Z((Z(-180872028).data).toInt().unaryPlus()) of type Boolean is (Z(-180872028).data).toChar().isUpperCase()
2021-03-12 00:51:04,415 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:51:04,416 [main:66] - Compilation checking started
2021-03-12 00:51:04,728 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError()
    if (Z(0) == Z((Z(-180872028).data).plus(72))) throw AssertionError()

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}
2021-03-12 00:51:04,729 [main:53] - replacing (0, Int)
2021-03-12 00:51:04,729 [main:50] - replacing 0 Int
2021-03-12 00:51:04,729 [main:54] - Getting value of type Int
2021-03-12 00:51:04,809 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:04,809 [main:58] - GENERATED VALUE OF TYPE Int = -897898933
2021-03-12 00:51:04,810 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:05,078 [main:67] - randomType = List<Byte>
2021-03-12 00:51:05,078 [main:106] - GETTING Int from Int
2021-03-12 00:51:05,135 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45fdd899]]
2021-03-12 00:51:05,135 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:05,135 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45fdd899]
2021-03-12 00:51:05,136 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().shr(Z(-180872028).data)
2021-03-12 00:51:05,136 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5f9f94ec]]
2021-03-12 00:51:05,136 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:05,136 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5f9f94ec]
2021-03-12 00:51:05,136 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().countLeadingZeroBits()
2021-03-12 00:51:05,137 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e18d3f9]]
2021-03-12 00:51:05,137 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e18d3f9]
2021-03-12 00:51:05,217 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:51:05,219 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(15)
2021-03-12 00:51:05,219 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f537655], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5977c989]]
2021-03-12 00:51:05,219 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f537655]
2021-03-12 00:51:05,350 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:51:05,351 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5977c989]
2021-03-12 00:51:05,352 [main:117] - GENERATED CALL = (Z(-180872028).data).div(0.012924373f).toBits()
2021-03-12 00:51:05,352 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3402f41a]]
2021-03-12 00:51:05,352 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:51:05,353 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3402f41a]
2021-03-12 00:51:05,353 [main:117] - GENERATED CALL = (Z(-180872028).data).toLong().countTrailingZeroBits()
2021-03-12 00:51:05,353 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@702b0e5f]]
2021-03-12 00:51:05,353 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:05,354 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().sign
2021-03-12 00:51:05,354 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 00:51:05,354 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:05,354 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 00:51:05,355 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().toInt()
2021-03-12 00:51:05,355 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@37055a8e]]
2021-03-12 00:51:05,355 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:51:05,448 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:51:05,448 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@37055a8e]
2021-03-12 00:51:05,449 [main:117] - GENERATED CALL = (Z(-180872028).data).div(0.28451726258891386).roundToInt()
2021-03-12 00:51:05,449 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7cf3aa06]]
2021-03-12 00:51:05,449 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:51:05,533 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:51:05,535 [main:117] - GENERATED CALL = (Z(-180872028).data).rangeTo(118).step
2021-03-12 00:51:05,535 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6931e110]]
2021-03-12 00:51:05,535 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:51:05,615 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:05,615 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6931e110]
2021-03-12 00:51:05,694 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:51:05,695 [main:117] - GENERATED CALL = (Z(-180872028).data).equals("okydh").compareTo(true)
2021-03-12 00:51:05,695 [main:61] - replacement of 0 of type Int is -897898933
2021-03-12 00:51:05,804 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 00:51:05,813 [main:66] - Compilation checking started
2021-03-12 00:51:06,146 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError()
    if (Z(0) == Z((Z(-180872028).data).plus(72))) throw AssertionError()

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != "Z(data=0)") throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}
2021-03-12 00:51:06,147 [main:53] - replacing ("Z(data=0)", String)
2021-03-12 00:51:06,148 [main:50] - replacing "Z(data=0)" String
2021-03-12 00:51:06,148 [main:54] - Getting value of type String
2021-03-12 00:51:06,226 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:06,227 [main:58] - GENERATED VALUE OF TYPE String = "mcmgd"
2021-03-12 00:51:06,227 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:06,313 [main:67] - randomType = Z?
2021-03-12 00:51:06,393 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:51:06,393 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:51:06,488 [main:194] - Type params = []
2021-03-12 00:51:06,569 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:51:06,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:06,577 [main:78] - Generated call from random type = (Z(-843713912))?.data.toString(Z(-180872028).data)
2021-03-12 00:51:06,577 [main:61] - replacement of "Z(data=0)" of type String is (Z(-843713912))?.data.toString(Z(-180872028).data)
2021-03-12 00:51:06,660 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:51:06,661 [main:66] - Compilation checking started
2021-03-12 00:51:06,977 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError()
    if (Z(0) == Z((Z(-180872028).data).plus(72))) throw AssertionError()

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}
2021-03-12 00:51:06,978 [main:53] - replacing (Z((Z(-180872028).data).plus(72)), Z)
2021-03-12 00:51:06,978 [main:50] - replacing Z((Z(-180872028).data).plus(72)) Z
2021-03-12 00:51:06,978 [main:54] - Getting value of type Z
2021-03-12 00:51:07,060 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:51:07,061 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:51:07,149 [main:194] - Type params = []
2021-03-12 00:51:07,245 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:51:07,246 [main:58] - GENERATED VALUE OF TYPE Z = Z(-1539338604)
2021-03-12 00:51:07,246 [main:61] - GENERATED IS CALL =true
2021-03-12 00:51:07,332 [main:67] - randomType = Boolean?
2021-03-12 00:51:07,419 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:51:07,436 [main:106] - GETTING Z from Int
2021-03-12 00:51:07,486 [main:61] - replacement of Z((Z(-180872028).data).plus(72)) of type Z is Z(-1539338604)
2021-03-12 00:51:07,571 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:51:07,571 [main:66] - Compilation checking started
2021-03-12 00:51:07,901 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError()
    if (Z(0) == Z(-1539338604)) throw AssertionError()

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}
2021-03-12 00:51:07,901 [main:53] - replacing (AssertionError(), AssertionError)
2021-03-12 00:51:07,902 [main:50] - replacing AssertionError() AssertionError
2021-03-12 00:51:07,902 [main:54] - Getting value of type AssertionError
2021-03-12 00:51:07,993 [main:302] - generating value of type = AssertionError false depth = 0
2021-03-12 00:51:08,091 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.String?, cause: kotlin.Throwable?): AssertionError = TODO()
2021-03-12 00:51:08,094 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.String?, cause: kotlin.Throwable?): AssertionError = TODO()
2021-03-12 00:51:08,353 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:51:08,354 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 00:51:08,360 [main:95] - GENERATED = AssertionError("ynpre", AssertionError())
2021-03-12 00:51:08,360 [main:58] - GENERATED VALUE OF TYPE AssertionError = AssertionError("ynpre", AssertionError())
2021-03-12 00:51:08,360 [main:61] - GENERATED IS CALL =true
2021-03-12 00:51:08,451 [main:67] - randomType = Z?
2021-03-12 00:51:08,575 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:51:08,576 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:51:08,671 [main:194] - Type params = []
2021-03-12 00:51:08,747 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:51:08,763 [main:106] - GETTING AssertionError from Int
2021-03-12 00:51:08,824 [main:61] - replacement of AssertionError() of type AssertionError is AssertionError("ynpre", AssertionError())
2021-03-12 00:51:08,912 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:51:08,913 [main:66] - Compilation checking started
2021-03-12 00:51:09,222 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(0) == Z(-1539338604)) throw AssertionError()

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}


2021-03-12 00:51:09,222 [main:53] - replacing (Z((-8434360338821949184).countOneBits()), Z)
2021-03-12 00:51:09,222 [main:50] - replacing Z((-8434360338821949184).countOneBits()) Z
2021-03-12 00:51:09,222 [main:54] - Getting value of type Z
2021-03-12 00:51:09,313 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:51:09,314 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:51:09,395 [main:194] - Type params = []
2021-03-12 00:51:09,477 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:51:09,478 [main:58] - GENERATED VALUE OF TYPE Z = Z(139675374)
2021-03-12 00:51:09,478 [main:61] - GENERATED IS CALL =true
2021-03-12 00:51:09,480 [main:67] - randomType = String
2021-03-12 00:51:09,564 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:09,604 [main:106] - GETTING Z from Int
2021-03-12 00:51:09,641 [main:61] - replacement of Z((-8434360338821949184).countOneBits()) of type Z is Z(139675374)
2021-03-12 00:51:09,719 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:51:09,719 [main:53] - replacing (Z((-8434360338821949184).countOneBits()), Z)
2021-03-12 00:51:09,720 [main:50] - replacing Z((-8434360338821949184).countOneBits()) Z
2021-03-12 00:51:09,720 [main:54] - Getting value of type Z
2021-03-12 00:51:09,806 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:51:09,807 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:51:09,888 [main:194] - Type params = []
2021-03-12 00:51:10,052 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:51:10,053 [main:58] - GENERATED VALUE OF TYPE Z = Z(-1844211878)
2021-03-12 00:51:10,054 [main:61] - GENERATED IS CALL =true
2021-03-12 00:51:10,159 [main:67] - randomType = Set<Z>
2021-03-12 00:51:10,160 [main:106] - GETTING Z from Int
2021-03-12 00:51:10,208 [main:61] - replacement of Z((-8434360338821949184).countOneBits()) of type Z is Z(-1844211878)
2021-03-12 00:51:10,287 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:51:10,288 [main:53] - replacing (Z(0) == Z(-1539338604), Boolean)
2021-03-12 00:51:10,288 [main:50] - replacing Z(0) == Z(-1539338604) Boolean
2021-03-12 00:51:10,288 [main:54] - Getting value of type Boolean
2021-03-12 00:51:10,365 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:51:10,365 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:51:10,366 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:10,459 [main:67] - randomType = ArrayDeque<Int>
2021-03-12 00:51:10,556 [main:302] - generating value of type = ArrayDeque<Int> false depth = 0
2021-03-12 00:51:10,648 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Int>): ArrayDeque<Int> = TODO()
2021-03-12 00:51:10,650 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Int>): ArrayDeque<Int> = TODO()
2021-03-12 00:51:10,817 [main:302] - generating value of type = Collection<Int> false depth = 3
2021-03-12 00:51:10,904 [main:43] - GENERATING CALL OF fun UShortArray(size: kotlin.Int): Collection<Int> = TODO()
2021-03-12 00:51:10,907 [main:61] - WITHOUT TYPE PARAMS = fun UShortArray(size: kotlin.Int): Collection<Int> = TODO()
2021-03-12 00:51:11,124 [main:302] - generating value of type = Int true depth = 6
2021-03-12 00:51:11,125 [main:95] - GENERATED = UShortArray(13438729)
2021-03-12 00:51:11,125 [main:95] - GENERATED = ArrayDeque<Int>(UShortArray(13438729))
2021-03-12 00:51:11,353 [main:149] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.Int> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@44f1b85c]
2021-03-12 00:51:11,354 [main:149] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@628960e2]
2021-03-12 00:51:11,354 [main:78] - Generated call from random type = (ArrayDeque<Int>(UShortArray(13438729))).listIterator().hasNext()
2021-03-12 00:51:11,356 [main:106] - GETTING Boolean from Int
2021-03-12 00:51:11,415 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6da51e86]]
2021-03-12 00:51:11,416 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:51:11,501 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:11,501 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6da51e86]
2021-03-12 00:51:11,586 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:51:11,587 [main:117] - GENERATED CALL = (Z(-180872028).data).equals("liwob").and(false)
2021-03-12 00:51:11,587 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516a721]]
2021-03-12 00:51:11,587 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:11,587 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516a721]
2021-03-12 00:51:11,588 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().isUpperCase()
2021-03-12 00:51:11,588 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@170a9ea7]]
2021-03-12 00:51:11,588 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:51:11,588 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@170a9ea7]
2021-03-12 00:51:11,667 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:11,668 [main:117] - GENERATED CALL = (Z(-180872028).data).toFloat().equals("seaha")
2021-03-12 00:51:11,668 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5a5a57bc]]
2021-03-12 00:51:11,668 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:51:11,745 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:51:11,746 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5a5a57bc]
2021-03-12 00:51:11,837 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:11,839 [main:117] - GENERATED CALL = (Z(-180872028).data).rangeTo(-24).contains(-1645634038)
2021-03-12 00:51:11,839 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4e3617fe]]
2021-03-12 00:51:11,839 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:51:11,914 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:51:11,915 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4e3617fe]
2021-03-12 00:51:11,993 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:11,994 [main:117] - GENERATED CALL = (Z(-180872028).data).div(0.30717349631814295).equals("mfrbm")
2021-03-12 00:51:11,994 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@26b730f3]]
2021-03-12 00:51:11,994 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:51:11,994 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@26b730f3]
2021-03-12 00:51:11,995 [main:117] - GENERATED CALL = (Z(-180872028).data).toFloat().isFinite()
2021-03-12 00:51:11,995 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387b7c4b]]
2021-03-12 00:51:11,995 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:11,995 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387b7c4b]
2021-03-12 00:51:11,996 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().isDefined()
2021-03-12 00:51:11,996 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30f4fb5]]
2021-03-12 00:51:11,996 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:11,996 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30f4fb5]
2021-03-12 00:51:11,996 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().isLowSurrogate()
2021-03-12 00:51:11,996 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27812cca]]
2021-03-12 00:51:11,997 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:51:11,997 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27812cca]
2021-03-12 00:51:11,997 [main:117] - GENERATED CALL = (Z(-180872028).data).toFloat().isInfinite()
2021-03-12 00:51:11,997 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 00:51:11,997 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:51:11,998 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 00:51:12,090 [main:117] - GENERATED CALL = (Z(-180872028).data).toByte().equals(null)
2021-03-12 00:51:12,091 [main:61] - replacement of Z(0) == Z(-1539338604) of type Boolean is (ArrayDeque<Int>(UShortArray(13438729))).listIterator().hasNext()
2021-03-12 00:51:12,183 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:51:12,183 [main:66] - Compilation checking started
2021-03-12 00:51:12,484 [main:49] - Result = false
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if ((ArrayDeque<Int>(UShortArray(13438729))).listIterator().hasNext()) throw AssertionError()

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}


2021-03-12 00:51:12,485 [main:53] - replacing (Z(0).toString(), String)
2021-03-12 00:51:12,485 [main:50] - replacing Z(0).toString() String
2021-03-12 00:51:12,485 [main:54] - Getting value of type String
2021-03-12 00:51:12,591 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:12,592 [main:58] - GENERATED VALUE OF TYPE String = "zgodp"
2021-03-12 00:51:12,593 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:12,705 [main:67] - randomType = Z?
2021-03-12 00:51:12,804 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:51:12,805 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:51:12,887 [main:194] - Type params = []
2021-03-12 00:51:12,968 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:51:12,978 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:13,072 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:13,073 [main:78] - Generated call from random type = (Z(-118498953))?.data.toString(107441618)
2021-03-12 00:51:13,075 [main:106] - GETTING String from Int
2021-03-12 00:51:13,152 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]]
2021-03-12 00:51:13,152 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:51:13,152 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]
2021-03-12 00:51:13,153 [main:117] - GENERATED CALL = (Z(-180872028).data).toByte().toString(Z(-180872028).data)
2021-03-12 00:51:13,153 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:13,153 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:13,153 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:13,154 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().toString(Z(-180872028).data)
2021-03-12 00:51:13,154 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:51:13,154 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:13,154 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:51:13,154 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().uppercase()
2021-03-12 00:51:13,155 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:51:13,155 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:51:13,249 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:51:13,250 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:51:13,251 [main:117] - GENERATED CALL = (Z(-180872028).data).div(1165702190145519265).toString(Z(-180872028).data)
2021-03-12 00:51:13,251 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]]
2021-03-12 00:51:13,251 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:51:13,251 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:51:13,252 [main:117] - GENERATED CALL = (Z(-180872028).data).toShort().toString(Z(-180872028).data)
2021-03-12 00:51:13,252 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:51:13,252 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:51:13,252 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:51:13,352 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:13,353 [main:117] - GENERATED CALL = (Z(-180872028).data).toLong().toString(-747275733)
2021-03-12 00:51:13,353 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:13,353 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:13,353 [main:117] - GENERATED CALL = (Z(-180872028).data).toString(Z(-180872028).data)
2021-03-12 00:51:13,353 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]]
2021-03-12 00:51:13,353 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:13,353 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]
2021-03-12 00:51:13,354 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().titlecase()
2021-03-12 00:51:13,354 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:51:13,354 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:13,354 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:51:13,444 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:13,445 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().plus("tlbxr")
2021-03-12 00:51:13,446 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:13,446 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:51:13,446 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:13,447 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(Z(-180872028).data).toString(Z(-180872028).data)
2021-03-12 00:51:13,447 [main:61] - replacement of Z(0).toString() of type String is (Z(-180872028).data).compareTo(Z(-180872028).data).toString(Z(-180872028).data)
2021-03-12 00:51:13,536 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:51:13,537 [main:53] - replacing (AssertionError(), AssertionError)
2021-03-12 00:51:13,538 [main:50] - replacing AssertionError() AssertionError
2021-03-12 00:51:13,538 [main:54] - Getting value of type AssertionError
2021-03-12 00:51:13,627 [main:302] - generating value of type = AssertionError false depth = 0
2021-03-12 00:51:13,761 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.String?): AssertionError = TODO()
2021-03-12 00:51:13,769 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.String?): AssertionError = TODO()
2021-03-12 00:51:13,981 [main:95] - GENERATED = AssertionError(null)
2021-03-12 00:51:13,981 [main:58] - GENERATED VALUE OF TYPE AssertionError = AssertionError(null)
2021-03-12 00:51:13,981 [main:61] - GENERATED IS CALL =true
2021-03-12 00:51:14,305 [main:67] - randomType = Triple<ArrayList<Z>, Boolean, ULong>
2021-03-12 00:51:14,429 [main:302] - generating value of type = Triple<ArrayList<Z>, Boolean, ULong> false depth = 0
2021-03-12 00:51:14,518 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ArrayList<Z>, second: Boolean, third: ULong): Triple<ArrayList<Z>, Boolean, ULong> = TODO()
2021-03-12 00:51:14,520 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ArrayList<Z>, second: Boolean, third: ULong): Triple<ArrayList<Z>, Boolean, ULong> = TODO()
2021-03-12 00:51:14,614 [main:302] - generating value of type = ArrayList<Z> false depth = 3
2021-03-12 00:51:14,705 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Z): ArrayList<Z> = TODO()
2021-03-12 00:51:14,707 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Z): ArrayList<Z> = TODO()
2021-03-12 00:51:14,814 [main:302] - generating value of type = Z false depth = 6
2021-03-12 00:51:14,814 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:51:14,906 [main:194] - Type params = []
2021-03-12 00:51:14,988 [main:302] - generating value of type = Int true depth = 8
2021-03-12 00:51:14,989 [main:95] - GENERATED = arrayListOf<Z>(Z(-1330070025))
2021-03-12 00:51:14,989 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 00:51:14,989 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 00:51:14,990 [main:95] - GENERATED = Triple<ArrayList<Z>, Boolean, ULong>(arrayListOf<Z>(Z(-1330070025)), false, 3234929541427130613.toULong())
2021-03-12 00:51:15,026 [main:106] - GETTING AssertionError from Int
2021-03-12 00:51:15,090 [main:61] - replacement of AssertionError() of type AssertionError is AssertionError(null)
2021-03-12 00:51:15,174 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:51:15,175 [main:66] - Compilation checking started
2021-03-12 00:51:15,514 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(0) == Z(-1539338604)) throw AssertionError(null)

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return "OK"
}


2021-03-12 00:51:15,515 [main:53] - replacing ("OK", String)
2021-03-12 00:51:15,516 [main:50] - replacing "OK" String
2021-03-12 00:51:15,516 [main:54] - Getting value of type String
2021-03-12 00:51:15,597 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:15,597 [main:58] - GENERATED VALUE OF TYPE String = "sltjs"
2021-03-12 00:51:15,597 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:15,699 [main:67] - randomType = UShort
2021-03-12 00:51:15,817 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:51:15,875 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@52a0529d]
2021-03-12 00:51:15,875 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:51:15,968 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:15,969 [main:78] - Generated call from random type = (18187.toUShort()).toLong().toString(1914207601)
2021-03-12 00:51:15,971 [main:106] - GETTING String from Int
2021-03-12 00:51:16,034 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]]
2021-03-12 00:51:16,034 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:51:16,034 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]
2021-03-12 00:51:16,035 [main:117] - GENERATED CALL = (Z(-180872028).data).toByte().toString(Z(-180872028).data)
2021-03-12 00:51:16,035 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:16,035 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:16,035 [main:117] - GENERATED CALL = (Z(-180872028).data).toString(Z(-180872028).data)
2021-03-12 00:51:16,036 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]]
2021-03-12 00:51:16,036 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:16,036 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]
2021-03-12 00:51:16,036 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().titlecase()
2021-03-12 00:51:16,036 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:16,036 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:16,036 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:16,123 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:16,124 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().toString(-15246334)
2021-03-12 00:51:16,124 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]]
2021-03-12 00:51:16,124 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:51:16,124 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:51:16,125 [main:117] - GENERATED CALL = (Z(-180872028).data).toShort().toString(Z(-180872028).data)
2021-03-12 00:51:16,125 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:51:16,125 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:16,125 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:51:16,205 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:16,206 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().plus("xmadu")
2021-03-12 00:51:16,206 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:51:16,206 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:51:16,287 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:51:16,288 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:51:16,288 [main:117] - GENERATED CALL = (Z(-180872028).data).div(-4422745154840972478).toString(Z(-180872028).data)
2021-03-12 00:51:16,288 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:16,289 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:51:16,369 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:16,370 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:16,371 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(903382195).toString(Z(-180872028).data)
2021-03-12 00:51:16,371 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:51:16,371 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:51:16,371 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:51:16,489 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:16,491 [main:117] - GENERATED CALL = (Z(-180872028).data).toLong().toString(648471619)
2021-03-12 00:51:16,491 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:51:16,491 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:16,491 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:51:16,492 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().lowercase()
2021-03-12 00:51:16,492 [main:61] - replacement of "OK" of type String is (Z(-180872028).data).toInt().toString(-15246334)
2021-03-12 00:51:16,601 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:51:16,602 [main:66] - Compilation checking started
2021-03-12 00:51:16,898 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(0) == Z(-1539338604)) throw AssertionError(null)

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z(-180872028).data).toInt().toString(-15246334)
}


2021-03-12 00:51:16,898 [main:53] - replacing (0, Int)
2021-03-12 00:51:16,899 [main:50] - replacing 0 Int
2021-03-12 00:51:16,899 [main:54] - Getting value of type Int
2021-03-12 00:51:16,978 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:16,978 [main:58] - GENERATED VALUE OF TYPE Int = 1367055268
2021-03-12 00:51:16,978 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:17,417 [main:67] - randomType = MutableMap<ArrayDeque<Boolean?>, ArrayList<Z>>?
2021-03-12 00:51:17,417 [main:106] - GETTING Int from Int
2021-03-12 00:51:17,463 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f537655], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41244e49]]
2021-03-12 00:51:17,463 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f537655]
2021-03-12 00:51:17,540 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:51:17,541 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41244e49]
2021-03-12 00:51:17,541 [main:117] - GENERATED CALL = (Z(-180872028).data).div(0.86502707f).toRawBits()
2021-03-12 00:51:17,541 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4a154908]]
2021-03-12 00:51:17,541 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:51:17,618 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:51:17,619 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4a154908]
2021-03-12 00:51:17,619 [main:117] - GENERATED CALL = (Z(-180872028).data).div(0.6478487402588088).toInt()
2021-03-12 00:51:17,619 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@23f747d4]]
2021-03-12 00:51:17,619 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:51:17,620 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@23f747d4]
2021-03-12 00:51:17,620 [main:117] - GENERATED CALL = (Z(-180872028).data).toFloat().roundToInt()
2021-03-12 00:51:17,620 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@463887f6]]
2021-03-12 00:51:17,620 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:51:17,620 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@463887f6]
2021-03-12 00:51:17,620 [main:117] - GENERATED CALL = (Z(-180872028).data).toByte().unaryMinus()
2021-03-12 00:51:17,621 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68ba4819]]
2021-03-12 00:51:17,621 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:17,621 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68ba4819]
2021-03-12 00:51:17,621 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().dec()
2021-03-12 00:51:17,621 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@139eed49]]
2021-03-12 00:51:17,621 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:51:17,621 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@139eed49]
2021-03-12 00:51:17,622 [main:117] - GENERATED CALL = (Z(-180872028).data).compareTo(Z(-180872028).data).shl(Z(-180872028).data)
2021-03-12 00:51:17,622 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1719a507]]
2021-03-12 00:51:17,622 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:51:17,622 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1719a507]
2021-03-12 00:51:17,699 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:51:17,701 [main:117] - GENERATED CALL = (Z(-180872028).data).toShort().div(17)
2021-03-12 00:51:17,701 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7da79fad]]
2021-03-12 00:51:17,701 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:17,701 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7da79fad]
2021-03-12 00:51:17,784 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:51:17,785 [main:117] - GENERATED CALL = (Z(-180872028).data).toChar().minus('䕆')
2021-03-12 00:51:17,785 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2ca6b438]]
2021-03-12 00:51:17,785 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2ca6b438]
2021-03-12 00:51:17,786 [main:117] - GENERATED CALL = (Z(-180872028).data).takeHighestOneBit()
2021-03-12 00:51:17,786 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 00:51:17,786 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:17,786 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 00:51:17,786 [main:117] - GENERATED CALL = (Z(-180872028).data).toInt().ushr(Z(-180872028).data)
2021-03-12 00:51:17,786 [main:61] - replacement of 0 of type Int is Z(-180872028).data
2021-03-12 00:51:17,868 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:51:17,869 [main:66] - Compilation checking started
2021-03-12 00:51:18,199 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(-1539338604)) throw AssertionError(null)

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z(-180872028).data).toInt().toString(-15246334)
}


2021-03-12 00:51:18,310 [main:119] - TRYING TO REPLACE CONSTANT 180872028
2021-03-12 00:51:18,399 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 00:51:18,400 [main:119] - TRYING TO REPLACE CONSTANT 180872028
2021-03-12 00:51:18,481 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:51:18,482 [main:66] - Compilation checking started
2021-03-12 00:51:18,701 [main:49] - Result = false
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(-1539338604)) throw AssertionError(null)

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(30886489).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(hashCode()).data))

    return (Z(-180872028).data).toInt().toString(-15246334)
}


2021-03-12 00:51:18,702 [main:119] - TRYING TO REPLACE CONSTANT 30886489
2021-03-12 00:51:18,794 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 00:51:18,794 [main:66] - Compilation checking started
2021-03-12 00:51:19,135 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(-1539338604)) throw AssertionError(null)

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(180872028).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z(-180872028).data).toInt().toString(-15246334)
}


2021-03-12 00:51:19,136 [main:119] - TRYING TO REPLACE CONSTANT 180872028
2021-03-12 00:51:19,230 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:51:19,231 [main:66] - Compilation checking started
2021-03-12 00:51:19,488 [main:49] - Result = false
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(-1539338604)) throw AssertionError(null)

    if (-1317654627 != 1234) throw AssertionError(Z((Z(data).data).compareTo(180872028).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z(-180872028).data).toInt().toString(-15246334)
}


2021-03-12 00:51:19,489 [main:119] - TRYING TO REPLACE CONSTANT 180872028
2021-03-12 00:51:19,603 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:51:19,603 [main:66] - Compilation checking started
2021-03-12 00:51:19,809 [main:49] - Result = false
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(-1539338604)) throw AssertionError(null)

    if (-1317654627 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(180872028).rotateRight(Z(data).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z(-180872028).data).toInt().toString(-15246334)
}


2021-03-12 00:51:19,809 [main:119] - TRYING TO REPLACE CONSTANT 1317654627
2021-03-12 00:51:19,888 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 00:51:19,888 [main:66] - Compilation checking started
2021-03-12 00:51:20,189 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(-180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(-1539338604)) throw AssertionError(null)

    if (-180872028 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(180872028).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z(-180872028).data).toInt().toString(-15246334)
}


2021-03-12 00:51:20,189 [main:119] - TRYING TO REPLACE CONSTANT 180872028
2021-03-12 00:51:20,288 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:51:20,288 [main:66] - Compilation checking started
2021-03-12 00:51:20,598 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(-1539338604)) throw AssertionError(null)

    if (-180872028 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(180872028).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z(-897898933).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z(-180872028).data).toInt().toString(-15246334)
}


2021-03-12 00:51:20,598 [main:119] - TRYING TO REPLACE CONSTANT 897898933
2021-03-12 00:51:20,679 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:51:20,680 [main:66] - Compilation checking started
2021-03-12 00:51:20,965 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(-1539338604)) throw AssertionError(null)

    if (-180872028 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(180872028).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z((Z(-843713912))?.data).toString() != (Z(-843713912))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z(-180872028).data).toInt().toString(-15246334)
}


2021-03-12 00:51:20,965 [main:119] - TRYING TO REPLACE CONSTANT 843713912
2021-03-12 00:51:21,045 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:51:21,045 [main:66] - Compilation checking started
2021-03-12 00:51:21,352 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(-1539338604)) throw AssertionError(null)

    if (-180872028 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(180872028).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z((Z(-843713912))?.data).toString() != (Z(180872028))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z(-180872028).data).toInt().toString(-15246334)
}


2021-03-12 00:51:21,352 [main:119] - TRYING TO REPLACE CONSTANT 180872028
2021-03-12 00:51:21,446 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:51:21,447 [main:66] - Compilation checking started
2021-03-12 00:51:21,677 [main:49] - Result = false
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(-1539338604)) throw AssertionError(null)

    if (-180872028 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(180872028).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z((Z(-843713912))?.data).toString() != (Z(180872028))?.data.toString(Z(toInt()).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z(-180872028).data).toInt().toString(-15246334)
}


2021-03-12 00:51:21,678 [main:119] - TRYING TO REPLACE CONSTANT 1539338604
2021-03-12 00:51:21,753 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:51:21,754 [main:66] - Compilation checking started
2021-03-12 00:51:21,954 [main:49] - Result = false
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(data)) throw AssertionError(null)

    if (-180872028 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(180872028).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z((Z(-843713912))?.data).toString() != (Z(180872028))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z(-180872028).data).toInt().toString(-15246334)
}


2021-03-12 00:51:21,955 [main:119] - TRYING TO REPLACE CONSTANT null
2021-03-12 00:51:22,039 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 00:51:22,039 [main:66] - Compilation checking started
2021-03-12 00:51:22,320 [main:119] - TRYING TO REPLACE CONSTANT 15246334
2021-03-12 00:51:22,438 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:51:22,438 [main:66] - Compilation checking started
2021-03-12 00:51:22,746 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(-1539338604)) throw AssertionError(null)

    if (-180872028 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(180872028).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z((Z(-843713912))?.data).toString() != (Z(180872028))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z(-180872028).data).toInt().toString(30886489)
}


2021-03-12 00:51:22,746 [main:119] - TRYING TO REPLACE CONSTANT 180872028
2021-03-12 00:51:22,826 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:51:22,826 [main:66] - Compilation checking started
2021-03-12 00:51:23,089 [main:53] - Result = true
Text:
inline class Z(val data: Int)

fun box(): String {
    if ((Z(180872028).data).toChar().isUpperCase()) throw AssertionError("ynpre", AssertionError())
    if (Z(Z(-180872028).data) == Z(-1539338604)) throw AssertionError(null)

    if (-180872028 != 1234) throw AssertionError(Z((Z(-180872028).data).compareTo(180872028).rotateRight(Z(-180872028).data)).hashCode().toString())

    if (Z((Z(-843713912))?.data).toString() != (Z(180872028))?.data.toString(Z(-180872028).data)) throw AssertionError((Z(-180872028).data).toByte().toString(Z(-180872028).data))

    return (Z((Z(180872028))?.data).data).toInt().toString(30886489)
}


2021-03-12 00:51:23,089 [main:119] - TRYING TO REPLACE CONSTANT 180872028
2021-03-12 00:51:23,169 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 00:51:23,192 [main:41] - AFTER TRY 0 res = inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}
2021-03-12 00:51:23,334 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:51:23,403 [main:194] - Type params = []
2021-03-12 00:51:23,489 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:51:23,635 [main:43] - Try №0
2021-03-12 00:51:37,269 [main:48] - Already checked
2021-03-12 00:51:41,444 [main:69] - Trying to insert override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }
2021-03-12 00:51:41,706 [main:66] - Compilation checking started
2021-03-12 00:51:42,819 [main:103] - Trying to change 199 nodes
2021-03-12 00:51:42,819 [main:107] - replacing (method, String)
2021-03-12 00:51:42,819 [main:50] - replacing method String
2021-03-12 00:51:42,819 [main:54] - Getting value of type String
2021-03-12 00:51:42,993 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:42,996 [main:58] - GENERATED VALUE OF TYPE String = "sndbb"
2021-03-12 00:51:42,996 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:43,170 [main:67] - randomType = Long
2021-03-12 00:51:43,336 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:51:43,391 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@645cceaa]
2021-03-12 00:51:43,391 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]
2021-03-12 00:51:43,550 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:43,552 [main:78] - Generated call from random type = (-6385783358205275997).toByte().toString(1876894673)
2021-03-12 00:51:43,553 [main:106] - GETTING String from Int
2021-03-12 00:51:43,607 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:51:43,607 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:43,607 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:51:43,757 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:43,759 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().plus("qbraf")
2021-03-12 00:51:43,759 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]]
2021-03-12 00:51:43,760 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:43,760 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]
2021-03-12 00:51:43,760 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().titlecase()
2021-03-12 00:51:43,760 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:43,760 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:43,900 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:43,902 [main:117] - GENERATED CALL = (Z(-1264150046).data).toString(1479165452)
2021-03-12 00:51:43,903 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]]
2021-03-12 00:51:43,903 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:51:43,903 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]
2021-03-12 00:51:44,039 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:44,041 [main:117] - GENERATED CALL = (Z(-1264150046).data).toByte().toString(-1890699763)
2021-03-12 00:51:44,041 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:51:44,041 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:44,042 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:51:44,042 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().uppercase()
2021-03-12 00:51:44,042 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]]
2021-03-12 00:51:44,042 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:51:44,042 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:51:44,042 [main:117] - GENERATED CALL = (Z(-1264150046).data).toShort().toString(Z(-1264150046).data)
2021-03-12 00:51:44,043 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:44,043 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:51:44,185 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:44,187 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:44,187 [main:117] - GENERATED CALL = (Z(-1264150046).data).compareTo(173455312).toString(Z(-1264150046).data)
2021-03-12 00:51:44,188 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:44,188 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:44,188 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:44,188 [main:117] - GENERATED CALL = (Z(-1264150046).data).toInt().toString(Z(1234).hashCode())
2021-03-12 00:51:44,188 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:51:44,188 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:44,189 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:51:44,189 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().lowercase()
2021-03-12 00:51:44,189 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:51:44,189 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:51:44,392 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:51:44,394 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:51:44,395 [main:117] - GENERATED CALL = (Z(-1264150046).data).div(6559950961139679314).toString(Z(1234).hashCode())
2021-03-12 00:51:44,395 [main:114] - replacement of method of type String is (Z(-1264150046).data).toString(1479165452)
2021-03-12 00:51:44,566 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:51:44,566 [main:66] - Compilation checking started
2021-03-12 00:51:45,274 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:51:45,277 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-12 00:51:45,278 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-12 00:51:45,278 [main:54] - Getting value of type String
2021-03-12 00:51:45,450 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:45,453 [main:58] - GENERATED VALUE OF TYPE String = "xzizo"
2021-03-12 00:51:45,454 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:47,420 [main:67] - randomType = Function2<Kla5<ULong?>, Function2<Array<UShort>, Kla3, LinkedHashSet<Kla3?>>, UShort?>
2021-03-12 00:51:47,421 [main:106] - GETTING String from Int
2021-03-12 00:51:47,479 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:47,479 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:47,480 [main:117] - GENERATED CALL = (Z(-1264150046).data).toString(Z(-1264150046).data)
2021-03-12 00:51:47,480 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:51:47,480 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:47,480 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:51:47,480 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().plus(Z(0).toString())
2021-03-12 00:51:47,480 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:47,480 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:51:47,620 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:47,623 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:47,767 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:47,770 [main:117] - GENERATED CALL = (Z(-1264150046).data).compareTo(-465618293).toString(-1794627546)
2021-03-12 00:51:47,771 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:51:47,771 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:51:47,919 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:51:47,922 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:51:47,922 [main:117] - GENERATED CALL = (Z(-1264150046).data).div(6248202632905025575).toString(Z(1234).hashCode())
2021-03-12 00:51:47,922 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:51:47,922 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:47,922 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:51:47,923 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().uppercase()
2021-03-12 00:51:47,923 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]]
2021-03-12 00:51:47,923 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:47,923 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]
2021-03-12 00:51:47,923 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().titlecase()
2021-03-12 00:51:47,923 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:47,923 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:47,923 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:47,923 [main:117] - GENERATED CALL = (Z(-1264150046).data).toInt().toString(Z(-1264150046).data)
2021-03-12 00:51:47,924 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:51:47,924 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:51:47,924 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:51:48,079 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:48,084 [main:117] - GENERATED CALL = (Z(-1264150046).data).toLong().toString(-1617016690)
2021-03-12 00:51:48,084 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:51:48,084 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:48,084 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:51:48,085 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().lowercase()
2021-03-12 00:51:48,085 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]]
2021-03-12 00:51:48,085 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:51:48,085 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:51:48,089 [main:117] - GENERATED CALL = (Z(-1264150046).data).toShort().toString(Z(1234).hashCode())
2021-03-12 00:51:48,089 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is (Z(-1264150046).data).toString(Z(-1264150046).data)
2021-03-12 00:51:48,264 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:51:48,264 [main:66] - Compilation checking started
2021-03-12 00:51:48,914 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:51:48,918 [main:107] - replacing (method, String)
2021-03-12 00:51:48,918 [main:50] - replacing method String
2021-03-12 00:51:48,918 [main:54] - Getting value of type String
2021-03-12 00:51:49,066 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:49,070 [main:58] - GENERATED VALUE OF TYPE String = "thbdr"
2021-03-12 00:51:49,071 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:49,389 [main:67] - randomType = Double?
2021-03-12 00:51:49,561 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:51:49,624 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2c8cced4]
2021-03-12 00:51:49,755 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:51:49,757 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:49,758 [main:78] - Generated call from random type = (0.2970307076217762)?.compareTo(100).toString(Z(-1264150046).data)
2021-03-12 00:51:49,758 [main:106] - GETTING String from String
2021-03-12 00:51:49,789 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3112d618]]
2021-03-12 00:51:49,789 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3112d618]
2021-03-12 00:51:49,790 [main:117] - GENERATED CALL = (Z(0).toString()).repeat(Z(-1264150046).data)
2021-03-12 00:51:49,790 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142dfd16]]
2021-03-12 00:51:49,790 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142dfd16]
2021-03-12 00:51:49,790 [main:117] - GENERATED CALL = (Z(0).toString()).substring(Z(1234).hashCode())
2021-03-12 00:51:49,790 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@296e4c5d]]
2021-03-12 00:51:49,790 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@296e4c5d]
2021-03-12 00:51:49,931 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:51:49,934 [main:117] - GENERATED CALL = (Z(0).toString()).substringBefore('?', Z(0).toString())
2021-03-12 00:51:49,935 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154242a5]]
2021-03-12 00:51:49,935 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@154242a5]
2021-03-12 00:51:50,066 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:51:50,199 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:50,202 [main:117] - GENERATED CALL = (Z(0).toString()).substringAfter('', "kjwla")
2021-03-12 00:51:50,202 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3112d618]]
2021-03-12 00:51:50,202 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58]
2021-03-12 00:51:50,331 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:50,462 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:50,465 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3112d618]
2021-03-12 00:51:50,466 [main:117] - GENERATED CALL = (Z(0).toString()).subSequence(-1091516579, 733824338).repeat(Z(1234).hashCode())
2021-03-12 00:51:50,466 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16ff919f]]
2021-03-12 00:51:50,466 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16ff919f]
2021-03-12 00:51:50,627 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:51:50,776 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:50,919 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:50,922 [main:117] - GENERATED CALL = (Z(0).toString()).replaceAfterLast('', "ozslx", "leujb")
2021-03-12 00:51:50,922 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ac5c5ed]]
2021-03-12 00:51:50,922 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ac5c5ed]
2021-03-12 00:51:51,054 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:51:51,193 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Iterable<Int> = TODO()
2021-03-12 00:51:51,197 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Iterable<Int> = TODO()
2021-03-12 00:51:51,331 [main:95] - GENERATED = linkedSetOf<Int>()
2021-03-12 00:51:51,331 [main:117] - GENERATED CALL = (Z(0).toString()).slice(linkedSetOf<Int>())
2021-03-12 00:51:51,331 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33c2f9ce]]
2021-03-12 00:51:51,331 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58]
2021-03-12 00:51:51,463 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:51,466 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33c2f9ce]
2021-03-12 00:51:51,629 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:51:51,764 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:51:51,768 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:51:52,056 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:51:52,064 [main:95] - GENERATED = StringBuilder("kvumi")
2021-03-12 00:51:52,194 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:51:52,197 [main:117] - GENERATED CALL = (Z(0).toString()).subSequence(Z(-1264150046).data, -1239394486).commonPrefixWith(StringBuilder("kvumi"), true)
2021-03-12 00:51:52,197 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216f955]]
2021-03-12 00:51:52,197 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216f955]
2021-03-12 00:51:52,318 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:52,321 [main:117] - GENERATED CALL = (Z(0).toString()).trimMargin("ncpcf")
2021-03-12 00:51:52,322 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@686e4b4b]]
2021-03-12 00:51:52,322 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@686e4b4b]
2021-03-12 00:51:52,495 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:51:52,498 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:51:52,501 [main:117] - GENERATED CALL = (Z(0).toString()).takeLastWhile({a: Char -> false})
2021-03-12 00:51:52,501 [main:114] - replacement of method of type String is (Z(0).toString()).subSequence(Z(-1264150046).data, -1239394486).commonPrefixWith(StringBuilder("kvumi"), true)
2021-03-12 00:51:52,627 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:51:52,628 [main:66] - Compilation checking started
2021-03-12 00:51:53,259 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Z(0).toString()).subSequence(Z(-1264150046).data, -1239394486).commonPrefixWith(StringBuilder("kvumi"), true) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:51:53,261 [main:107] - replacing (prope3.exceptionOrNull()!!, Throwable)
2021-03-12 00:51:53,261 [main:50] - replacing prope3.exceptionOrNull()!! Throwable
2021-03-12 00:51:53,261 [main:54] - Getting value of type Throwable
2021-03-12 00:51:53,398 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 00:51:53,405 [main:58] - GENERATED VALUE OF TYPE Throwable = ClassCastException()
2021-03-12 00:51:53,406 [main:61] - GENERATED IS CALL =true
2021-03-12 00:51:53,697 [main:67] - randomType = Array<String?>
2021-03-12 00:51:53,833 [main:302] - generating value of type = Array<String?> false depth = 0
2021-03-12 00:51:53,967 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: String?): Array<Strg?> = TODO()
2021-03-12 00:51:53,971 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: String?): Array<Strg?> = TODO()
2021-03-12 00:51:54,107 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:51:54,110 [main:95] - GENERATED = arrayOf<String?>("xfnnw")
2021-03-12 00:51:54,127 [main:106] - GETTING Throwable from String
2021-03-12 00:51:54,153 [main:106] - GETTING Throwable from Int
2021-03-12 00:51:54,189 [main:106] - GETTING Throwable from Z
2021-03-12 00:51:54,195 [main:106] - GETTING Throwable from Int
2021-03-12 00:51:54,195 [main:114] - replacement of prope3.exceptionOrNull()!! of type Throwable is ClassCastException()
2021-03-12 00:51:54,326 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:51:54,326 [main:66] - Compilation checking started
2021-03-12 00:51:54,925 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Z(0).toString()).subSequence(Z(-1264150046).data, -1239394486).commonPrefixWith(StringBuilder("kvumi"), true) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:51:54,928 [main:107] - replacing (prope3.getOrThrow(), Any?)
2021-03-12 00:51:54,929 [main:50] - replacing prope3.getOrThrow() Any?
2021-03-12 00:51:54,929 [main:54] - Getting value of type Any?
2021-03-12 00:51:55,094 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:51:55,094 [main:58] - GENERATED VALUE OF TYPE Any? = "eyhpw"
2021-03-12 00:51:55,094 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:55,259 [main:67] - randomType = Z?
2021-03-12 00:51:55,387 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:51:55,389 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:51:55,514 [main:194] - Type params = []
2021-03-12 00:51:55,647 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:51:55,658 [main:106] - GETTING Any? from Int
2021-03-12 00:51:55,696 [main:106] - GETTING Any? from Int
2021-03-12 00:51:55,697 [main:106] - GETTING Any? from Z
2021-03-12 00:51:55,702 [main:106] - GETTING Any? from String
2021-03-12 00:51:55,718 [main:114] - replacement of prope3.getOrThrow() of type Any? is "eyhpw"
2021-03-12 00:51:55,839 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:51:55,839 [main:66] - Compilation checking started
2021-03-12 00:51:56,478 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Z(0).toString()).subSequence(Z(-1264150046).data, -1239394486).commonPrefixWith(StringBuilder("kvumi"), true) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:51:56,481 [main:107] - replacing (Kla0(42), Kla0)
2021-03-12 00:51:56,481 [main:50] - replacing Kla0(42) Kla0
2021-03-12 00:51:56,482 [main:54] - Getting value of type Kla0
2021-03-12 00:51:56,604 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 00:51:56,607 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)
2021-03-12 00:51:56,728 [main:194] - Type params = []
2021-03-12 00:51:56,851 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:51:56,854 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0(329409627)
2021-03-12 00:51:56,854 [main:61] - GENERATED IS CALL =true
2021-03-12 00:51:57,001 [main:67] - randomType = UByte
2021-03-12 00:51:57,126 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:51:57,166 [main:106] - GETTING Kla0 from Int
2021-03-12 00:51:57,197 [main:106] - GETTING Kla0 from Int
2021-03-12 00:51:57,197 [main:106] - GETTING Kla0 from String
2021-03-12 00:51:57,215 [main:106] - GETTING Kla0 from Z
2021-03-12 00:51:57,220 [main:114] - replacement of Kla0(42) of type Kla0 is Kla0(329409627)
2021-03-12 00:51:57,341 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:51:57,342 [main:66] - Compilation checking started
2021-03-12 00:51:57,972 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Z(0).toString()).subSequence(Z(-1264150046).data, -1239394486).commonPrefixWith(StringBuilder("kvumi"), true) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:51:57,976 [main:107] - replacing ("tail-call optimization miss: method at ", String)
2021-03-12 00:51:57,976 [main:50] - replacing "tail-call optimization miss: method at " String
2021-03-12 00:51:57,976 [main:54] - Getting value of type String
2021-03-12 00:51:58,111 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:51:58,114 [main:58] - GENERATED VALUE OF TYPE String = "qnmjc"
2021-03-12 00:51:58,114 [main:61] - GENERATED IS CALL =false
2021-03-12 00:51:58,119 [main:67] - randomType = Int
2021-03-12 00:51:58,237 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:58,272 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:58,272 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:51:58,272 [main:78] - Generated call from random type = (1136423279).toChar().uppercase()
2021-03-12 00:51:58,273 [main:106] - GETTING String from Int
2021-03-12 00:51:58,313 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:51:58,313 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:58,313 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:51:58,313 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().lowercase()
2021-03-12 00:51:58,313 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]]
2021-03-12 00:51:58,313 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:51:58,314 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:51:58,314 [main:117] - GENERATED CALL = (Z(-1264150046).data).toShort().toString(Z(1234).hashCode())
2021-03-12 00:51:58,314 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:58,314 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:58,314 [main:117] - GENERATED CALL = (Z(-1264150046).data).toString(Z(-1264150046).data)
2021-03-12 00:51:58,314 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]]
2021-03-12 00:51:58,314 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:51:58,314 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]
2021-03-12 00:51:58,315 [main:117] - GENERATED CALL = (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
2021-03-12 00:51:58,315 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:51:58,315 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:51:58,434 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:51:58,437 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:51:58,557 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:58,559 [main:117] - GENERATED CALL = (Z(-1264150046).data).div(-4415960784199774136).toString(1909012051)
2021-03-12 00:51:58,559 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]]
2021-03-12 00:51:58,559 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:58,559 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]
2021-03-12 00:51:58,560 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().titlecase()
2021-03-12 00:51:58,560 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:58,560 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:51:58,560 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:58,560 [main:117] - GENERATED CALL = (Z(-1264150046).data).compareTo(Z(-1264150046).data).toString(Z(1234).hashCode())
2021-03-12 00:51:58,560 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:51:58,560 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:51:58,560 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:51:58,561 [main:117] - GENERATED CALL = (Z(-1264150046).data).toLong().toString(Z(1234).hashCode())
2021-03-12 00:51:58,561 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:51:58,561 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:51:58,561 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:51:58,561 [main:117] - GENERATED CALL = (Z(-1264150046).data).toInt().toString(Z(-1264150046).data)
2021-03-12 00:51:58,561 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:51:58,561 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:51:58,561 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:51:58,561 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().uppercase()
2021-03-12 00:51:58,561 [main:114] - replacement of "tail-call optimization miss: method at " of type String is "qnmjc"
2021-03-12 00:51:58,681 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:51:58,681 [main:66] - Compilation checking started
2021-03-12 00:51:59,316 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(42))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error("qnmjc" + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Z(0).toString()).subSequence(Z(-1264150046).data, -1239394486).commonPrefixWith(StringBuilder("kvumi"), true) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:51:59,318 [main:107] - replacing (Kla0(42), Kla0)
2021-03-12 00:51:59,318 [main:50] - replacing Kla0(42) Kla0
2021-03-12 00:51:59,318 [main:54] - Getting value of type Kla0
2021-03-12 00:51:59,453 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 00:51:59,455 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)
2021-03-12 00:51:59,585 [main:194] - Type params = []
2021-03-12 00:51:59,711 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:51:59,714 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0(-1040721220)
2021-03-12 00:51:59,714 [main:61] - GENERATED IS CALL =true
2021-03-12 00:51:59,719 [main:67] - randomType = Int
2021-03-12 00:51:59,852 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:51:59,900 [main:106] - GETTING Kla0 from Int
2021-03-12 00:51:59,947 [main:106] - GETTING Kla0 from String
2021-03-12 00:51:59,964 [main:106] - GETTING Kla0 from Int
2021-03-12 00:51:59,965 [main:106] - GETTING Kla0 from Z
2021-03-12 00:51:59,969 [main:114] - replacement of Kla0(42) of type Kla0 is Kla0(-1040721220)
2021-03-12 00:52:00,098 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:52:00,099 [main:66] - Compilation checking started
2021-03-12 00:52:00,682 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error("qnmjc" + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (Z(0).toString()).subSequence(Z(-1264150046).data, -1239394486).commonPrefixWith(StringBuilder("kvumi"), true) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:00,683 [main:107] - replacing ("tail-call optimization hit: method " + (Z(0).toString()).subSequence(Z(-1264150046).data, -1239394486).commonPrefixWith(StringBuilder("kvumi"), true), String)
2021-03-12 00:52:00,684 [main:50] - replacing "tail-call optimization hit: method " + (Z(0).toString()).subSequence(Z(-1264150046).data, -1239394486).commonPrefixWith(StringBuilder("kvumi"), true) String
2021-03-12 00:52:00,684 [main:54] - Getting value of type String
2021-03-12 00:52:00,803 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:00,806 [main:58] - GENERATED VALUE OF TYPE String = "juddr"
2021-03-12 00:52:00,806 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:00,811 [main:67] - randomType = Int
2021-03-12 00:52:00,931 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:00,986 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:00,986 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:52:00,986 [main:78] - Generated call from random type = (675809031).toChar().plus(Z(0).toString())
2021-03-12 00:52:00,987 [main:106] - GETTING String from Int
2021-03-12 00:52:01,040 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:52:01,041 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:01,041 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:52:01,041 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().lowercase()
2021-03-12 00:52:01,041 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:01,041 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:01,041 [main:117] - GENERATED CALL = (Z(-1264150046).data).toString(Z(-1264150046).data)
2021-03-12 00:52:01,042 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:52:01,042 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:01,042 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:52:01,042 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().uppercase()
2021-03-12 00:52:01,042 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:52:01,042 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:01,042 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:52:01,181 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:01,184 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().plus("hjaab")
2021-03-12 00:52:01,184 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:01,184 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:52:01,184 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:01,184 [main:117] - GENERATED CALL = (Z(-1264150046).data).toInt().toString(Z(1234).hashCode())
2021-03-12 00:52:01,184 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]]
2021-03-12 00:52:01,184 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:52:01,184 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:52:01,302 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:01,305 [main:117] - GENERATED CALL = (Z(-1264150046).data).toShort().toString(-186244097)
2021-03-12 00:52:01,305 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]]
2021-03-12 00:52:01,305 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:52:01,305 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]
2021-03-12 00:52:01,424 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:01,427 [main:117] - GENERATED CALL = (Z(-1264150046).data).toByte().toString(-264222637)
2021-03-12 00:52:01,427 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:01,427 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:52:01,427 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:01,550 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:01,552 [main:117] - GENERATED CALL = (Z(-1264150046).data).compareTo(Z(1234).hashCode()).toString(1221151057)
2021-03-12 00:52:01,553 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:52:01,553 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:52:01,691 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:52:01,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:52:01,694 [main:117] - GENERATED CALL = (Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data)
2021-03-12 00:52:01,694 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]]
2021-03-12 00:52:01,694 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:01,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]
2021-03-12 00:52:01,694 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().titlecase()
2021-03-12 00:52:01,694 [main:114] - replacement of "tail-call optimization hit: method " + (Z(0).toString()).subSequence(Z(-1264150046).data, -1239394486).commonPrefixWith(StringBuilder("kvumi"), true) of type String is (Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data)
2021-03-12 00:52:01,812 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:01,812 [main:66] - Compilation checking started
2021-03-12 00:52:02,427 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error("qnmjc" + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:02,429 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 00:52:02,429 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 00:52:02,429 [main:54] - Getting value of type Ty0
2021-03-12 00:52:02,548 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 00:52:02,553 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 00:52:03,137 [main:67] - randomType = Pair<Array<Kla8>, Kla1>
2021-03-12 00:52:03,255 [main:302] - generating value of type = Pair<Array<Kla8>, Kla1> false depth = 0
2021-03-12 00:52:03,380 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Array<Kla8>, second: Kla1): Pair<Array<Kla8>, Kla1> = TODO()
2021-03-12 00:52:03,383 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Array<Kla8>, second: Kla1): Pair<Array<Kla8>, Kla1> = TODO()
2021-03-12 00:52:03,512 [main:302] - generating value of type = Array<Kla8> false depth = 3
2021-03-12 00:52:03,641 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Kla8> = TODO()
2021-03-12 00:52:03,644 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Kla8> = TODO()
2021-03-12 00:52:03,773 [main:95] - GENERATED = emptyArray<Kla8>()
2021-03-12 00:52:03,773 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-12 00:52:03,776 [main:112] - generating klass Kla1 text = interface Kla1 {
    suspend fun fu5(): Kla0?
}
2021-03-12 00:52:04,026 [main:302] - generating value of type = Kla2 false depth = 5
2021-03-12 00:52:04,029 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}
2021-03-12 00:52:04,147 [main:194] - Type params = []
2021-03-12 00:52:04,312 [main:95] - GENERATED = Pair<Array<Kla8>, Kla1>(emptyArray<Kla8>(), Kla2())
2021-03-12 00:52:04,341 [main:106] - GETTING Ty0 from Int
2021-03-12 00:52:04,398 [main:106] - GETTING Ty0 from Z
2021-03-12 00:52:04,407 [main:106] - GETTING Ty0 from String
2021-03-12 00:52:04,438 [main:106] - GETTING Ty0 from Int
2021-03-12 00:52:04,438 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 00:52:04,438 [main:107] - replacing (s, Int)
2021-03-12 00:52:04,438 [main:50] - replacing s Int
2021-03-12 00:52:04,438 [main:54] - Getting value of type Int
2021-03-12 00:52:04,560 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:04,564 [main:58] - GENERATED VALUE OF TYPE Int = -1009828760
2021-03-12 00:52:04,565 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:04,579 [main:67] - randomType = Z
2021-03-12 00:52:04,695 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:52:04,698 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:52:04,815 [main:194] - Type params = []
2021-03-12 00:52:04,933 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:52:04,943 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1dfc03d]
2021-03-12 00:52:05,061 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:05,064 [main:78] - Generated call from random type = (Z(257753204)).data.rotateRight(-1621080573)
2021-03-12 00:52:05,065 [main:114] - replacement of s of type Int is (Z(257753204)).data.rotateRight(-1621080573)
2021-03-12 00:52:05,185 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:05,186 [main:66] - Compilation checking started
2021-03-12 00:52:05,536 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.(Z(257753204)).data.rotateRight(-1621080573).fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error("qnmjc" + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:05,538 [main:107] - replacing ("qnmjc" + it + " has state-machine " +
                prope4.joinToString(separator = "\n"), String)
2021-03-12 00:52:05,538 [main:50] - replacing "qnmjc" + it + " has state-machine " +
                prope4.joinToString(separator = "\n") String
2021-03-12 00:52:05,538 [main:54] - Getting value of type String
2021-03-12 00:52:05,657 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:05,660 [main:58] - GENERATED VALUE OF TYPE String = "xxkmb"
2021-03-12 00:52:05,660 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:05,806 [main:67] - randomType = Long?
2021-03-12 00:52:05,926 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:52:05,966 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Long): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2a0c26d9]
2021-03-12 00:52:06,099 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:52:06,103 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:52:06,241 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:06,243 [main:78] - Generated call from random type = (1731391523978480911)?.and(-8133789697692477639).toString(23087842)
2021-03-12 00:52:06,244 [main:106] - GETTING String from Int
2021-03-12 00:52:06,280 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]]
2021-03-12 00:52:06,280 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:52:06,281 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]
2021-03-12 00:52:06,281 [main:117] - GENERATED CALL = (Z(-1264150046).data).toByte().toString(Z(-1264150046).data)
2021-03-12 00:52:06,281 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:52:06,281 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:06,281 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:52:06,281 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().uppercase()
2021-03-12 00:52:06,281 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:52:06,281 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:06,281 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:52:06,282 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().lowercase()
2021-03-12 00:52:06,282 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:52:06,282 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:06,282 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:52:06,282 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().plus(Z(0).toString())
2021-03-12 00:52:06,282 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]]
2021-03-12 00:52:06,282 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:52:06,282 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:52:06,282 [main:117] - GENERATED CALL = (Z(-1264150046).data).toShort().toString(Z(1234).hashCode())
2021-03-12 00:52:06,282 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:06,282 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:52:06,283 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:06,283 [main:117] - GENERATED CALL = (Z(-1264150046).data).compareTo(Z(-1264150046).data).toString(Z(-1264150046).data)
2021-03-12 00:52:06,283 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:52:06,283 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:52:06,283 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:52:06,283 [main:117] - GENERATED CALL = (Z(-1264150046).data).toLong().toString(Z(-1264150046).data)
2021-03-12 00:52:06,283 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:52:06,283 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:52:06,407 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:52:06,409 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:52:06,410 [main:117] - GENERATED CALL = (Z(-1264150046).data).div(8125386300985461294).toString(Z(1234).hashCode())
2021-03-12 00:52:06,410 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:06,410 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:06,410 [main:117] - GENERATED CALL = (Z(-1264150046).data).toString(Z(1234).hashCode())
2021-03-12 00:52:06,410 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:06,410 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:52:06,410 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:06,528 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:06,531 [main:117] - GENERATED CALL = (Z(-1264150046).data).toInt().toString(-1214682660)
2021-03-12 00:52:06,531 [main:114] - replacement of "qnmjc" + it + " has state-machine " +
                prope4.joinToString(separator = "\n") of type String is (Z(-1264150046).data).toByte().toString(Z(-1264150046).data)
2021-03-12 00:52:06,647 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:06,648 [main:66] - Compilation checking started
2021-03-12 00:52:07,249 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:07,252 [main:107] - replacing (prope6, Boolean)
2021-03-12 00:52:07,252 [main:50] - replacing prope6 Boolean
2021-03-12 00:52:07,252 [main:54] - Getting value of type Boolean
2021-03-12 00:52:07,382 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:07,384 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:52:07,384 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:07,529 [main:67] - randomType = Collection<Boolean>
2021-03-12 00:52:07,530 [main:106] - GETTING Boolean from String
2021-03-12 00:52:07,557 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d5276eb]]
2021-03-12 00:52:07,557 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490]
2021-03-12 00:52:07,557 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d5276eb]
2021-03-12 00:52:07,557 [main:117] - GENERATED CALL = (Z(0).toString()).get(Z(1234).hashCode()).isISOControl()
2021-03-12 00:52:07,558 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f58f066]]
2021-03-12 00:52:07,558 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f58f066]
2021-03-12 00:52:07,680 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:52:07,809 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:07,943 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:07,946 [main:117] - GENERATED CALL = (Z(0).toString()).regionMatches(Z(1234).hashCode(), "lodym", 1319958556, Z(-1264150046).data, false)
2021-03-12 00:52:07,946 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40d5605e]]
2021-03-12 00:52:07,946 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40d5605e]
2021-03-12 00:52:08,069 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:52:08,191 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:08,194 [main:117] - GENERATED CALL = (Z(0).toString()).contains('뤲', false)
2021-03-12 00:52:08,194 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d4f0643]]
2021-03-12 00:52:08,194 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490]
2021-03-12 00:52:08,194 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d4f0643]
2021-03-12 00:52:08,339 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:52:08,459 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:08,462 [main:117] - GENERATED CALL = (Z(0).toString()).get(Z(1234).hashCode()).equals('觛', false)
2021-03-12 00:52:08,462 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@331c08dc]]
2021-03-12 00:52:08,462 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@331c08dc]
2021-03-12 00:52:08,579 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:08,582 [main:117] - GENERATED CALL = (Z(0).toString()).endsWith(Z(0).toString(), false)
2021-03-12 00:52:08,583 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc10eb9]]
2021-03-12 00:52:08,583 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc10eb9]
2021-03-12 00:52:08,583 [main:117] - GENERATED CALL = (Z(0).toString()).toBoolean()
2021-03-12 00:52:08,583 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429fff7c]]
2021-03-12 00:52:08,583 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58]
2021-03-12 00:52:08,707 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:08,710 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429fff7c]
2021-03-12 00:52:08,829 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:52:08,953 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:52:08,957 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:52:09,354 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:52:09,357 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 00:52:09,361 [main:95] - GENERATED = Regex("gzjka", kotlin.text.RegexOption.MULTILINE)
2021-03-12 00:52:09,361 [main:117] - GENERATED CALL = (Z(0).toString()).subSequence(-727389976, Z(1234).hashCode()).matches(Regex("gzjka", kotlin.text.RegexOption.MULTILINE))
2021-03-12 00:52:09,362 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a6a6557]]
2021-03-12 00:52:09,362 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58]
2021-03-12 00:52:09,362 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a6a6557]
2021-03-12 00:52:09,362 [main:117] - GENERATED CALL = (Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()
2021-03-12 00:52:09,362 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ec8f05]]
2021-03-12 00:52:09,362 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58]
2021-03-12 00:52:09,362 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ec8f05]
2021-03-12 00:52:09,362 [main:117] - GENERATED CALL = (Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isEmpty()
2021-03-12 00:52:09,363 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30f4fb5]]
2021-03-12 00:52:09,363 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490]
2021-03-12 00:52:09,363 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30f4fb5]
2021-03-12 00:52:09,363 [main:117] - GENERATED CALL = (Z(0).toString()).get(Z(-1264150046).data).isLowSurrogate()
2021-03-12 00:52:09,363 [main:114] - replacement of prope6 of type Boolean is (Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()
2021-03-12 00:52:09,482 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:09,482 [main:66] - Compilation checking started
2021-03-12 00:52:10,107 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:10,109 [main:107] - replacing (fu2(), String)
2021-03-12 00:52:10,109 [main:50] - replacing fu2() String
2021-03-12 00:52:10,109 [main:54] - Getting value of type String
2021-03-12 00:52:10,229 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:10,232 [main:58] - GENERATED VALUE OF TYPE String = "cpffq"
2021-03-12 00:52:10,232 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:10,387 [main:67] - randomType = Map<Long, Z>
2021-03-12 00:52:10,388 [main:106] - GETTING String from Int
2021-03-12 00:52:10,420 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:52:10,420 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:52:10,420 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:52:10,421 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toLong().toString(Z(1234).hashCode())
2021-03-12 00:52:10,421 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:52:10,421 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:52:10,537 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:52:10,540 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:52:10,656 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:10,659 [main:117] - GENERATED CALL = (Z(1234).hashCode()).div(2180056676805155190).toString(582855617)
2021-03-12 00:52:10,659 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]]
2021-03-12 00:52:10,660 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:52:10,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:52:10,778 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:10,781 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toShort().toString(-61285703)
2021-03-12 00:52:10,781 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:10,781 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:10,781 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toString(Z(1234).hashCode())
2021-03-12 00:52:10,781 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:10,781 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:52:10,781 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:10,901 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:10,904 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toInt().toString(-913470779)
2021-03-12 00:52:10,904 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:10,904 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:52:10,905 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:10,905 [main:117] - GENERATED CALL = (Z(1234).hashCode()).compareTo(Z(1234).hashCode()).toString(Z(1234).hashCode())
2021-03-12 00:52:10,905 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:52:10,905 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:10,905 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:52:10,905 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().plus(Z(0).toString())
2021-03-12 00:52:10,905 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]]
2021-03-12 00:52:10,905 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:52:10,905 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]
2021-03-12 00:52:11,024 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:11,027 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toByte().toString(-1339409825)
2021-03-12 00:52:11,028 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:52:11,028 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:11,028 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:52:11,028 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().lowercase()
2021-03-12 00:52:11,028 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:52:11,028 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:11,028 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:52:11,028 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().uppercase()
2021-03-12 00:52:11,028 [main:114] - replacement of fu2() of type String is (Z(1234).hashCode()).toByte().toString(-1339409825)
2021-03-12 00:52:11,151 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:11,151 [main:66] - Compilation checking started
2021-03-12 00:52:11,514 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.(Z(1234).hashCode()).toByte().toString(-1339409825)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:11,516 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 00:52:11,517 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 00:52:11,517 [main:54] - Getting value of type Result<Ty0>
2021-03-12 00:52:11,635 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 00:52:11,770 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:52:11,774 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:52:12,046 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:52:12,046 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 00:52:12,465 [main:67] - randomType = Collection<Float?>
2021-03-12 00:52:12,470 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 00:52:12,510 [main:106] - GETTING Result<Ty0> from String
2021-03-12 00:52:12,528 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 00:52:12,529 [main:106] - GETTING Result<Ty0> from Z
2021-03-12 00:52:12,533 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 00:52:12,534 [main:107] - replacing (prope3, String)
2021-03-12 00:52:12,534 [main:50] - replacing prope3 String
2021-03-12 00:52:12,534 [main:54] - Getting value of type String
2021-03-12 00:52:12,653 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:12,655 [main:58] - GENERATED VALUE OF TYPE String = "cwirr"
2021-03-12 00:52:12,656 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:12,965 [main:67] - randomType = List<Z>
2021-03-12 00:52:12,966 [main:106] - GETTING String from Z
2021-03-12 00:52:12,972 [main:113] - Case = [public final val data: kotlin.Int defined in Z[PropertyDescriptorImpl@c0c814c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:12,972 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:12,972 [main:117] - GENERATED CALL = (Z(1234)).data.toString(Z(-1264150046).data)
2021-03-12 00:52:12,972 [main:114] - replacement of prope3 of type String is (Z(1234)).data.toString(Z(-1264150046).data)
2021-03-12 00:52:13,094 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:13,094 [main:66] - Compilation checking started
2021-03-12 00:52:13,444 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        (Z(1234)).data.toString(Z(-1264150046).data) = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:13,446 [main:107] - replacing (prope5 != i, Boolean)
2021-03-12 00:52:13,447 [main:50] - replacing prope5 != i Boolean
2021-03-12 00:52:13,447 [main:54] - Getting value of type Boolean
2021-03-12 00:52:13,569 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:13,571 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:52:13,572 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:13,723 [main:67] - randomType = Array<Kla6>
2021-03-12 00:52:13,844 [main:302] - generating value of type = Array<Kla6> false depth = 0
2021-03-12 00:52:13,970 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Kla6): Array<Kla6> = TODO()
2021-03-12 00:52:13,973 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Kla6): Array<Kla6> = TODO()
2021-03-12 00:52:14,115 [main:302] - generating value of type = Kla6 false depth = 3
2021-03-12 00:52:14,117 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 00:52:14,118 [main:95] - GENERATED = arrayOf<Kla6>(Kla6())
2021-03-12 00:52:14,129 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@72896e4a]
2021-03-12 00:52:14,245 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:14,245 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13e40ebc]
2021-03-12 00:52:14,383 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:14,384 [main:78] - Generated call from random type = (arrayOf<Kla6>(Kla6())).equals("srdnb").equals("bfaqv")
2021-03-12 00:52:14,385 [main:106] - GETTING Boolean from Int
2021-03-12 00:52:14,417 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@136bb4b]]
2021-03-12 00:52:14,417 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:52:14,536 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:52:14,539 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@136bb4b]
2021-03-12 00:52:14,539 [main:117] - GENERATED CALL = (Z(1234).hashCode()).div(0.16775831127782692).isNaN()
2021-03-12 00:52:14,539 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]]
2021-03-12 00:52:14,539 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:52:14,539 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:52:14,656 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:14,656 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toInt().equals("ftcfr")
2021-03-12 00:52:14,656 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@694a6499]]
2021-03-12 00:52:14,656 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:52:14,777 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:14,780 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@694a6499]
2021-03-12 00:52:14,900 [main:117] - GENERATED CALL = (Z(1234).hashCode()).rangeTo(29).equals(null)
2021-03-12 00:52:14,900 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27812cca]]
2021-03-12 00:52:14,900 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:52:14,901 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27812cca]
2021-03-12 00:52:14,901 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toFloat().isInfinite()
2021-03-12 00:52:14,901 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d7107cb]]
2021-03-12 00:52:14,901 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:14,901 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d7107cb]
2021-03-12 00:52:14,901 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().isWhitespace()
2021-03-12 00:52:14,901 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4e3617fe]]
2021-03-12 00:52:14,901 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:52:15,016 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:52:15,019 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4e3617fe]
2021-03-12 00:52:15,136 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:15,136 [main:117] - GENERATED CALL = (Z(1234).hashCode()).div(0.8180783322986508).equals("nntei")
2021-03-12 00:52:15,136 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5a5a57bc]]
2021-03-12 00:52:15,137 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:52:15,259 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:15,262 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5a5a57bc]
2021-03-12 00:52:15,377 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:15,379 [main:117] - GENERATED CALL = (Z(1234).hashCode()).rangeTo(-37).contains(-2095185708)
2021-03-12 00:52:15,380 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@4e2c8f1c]]
2021-03-12 00:52:15,380 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:52:15,497 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:15,499 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@4e2c8f1c]
2021-03-12 00:52:15,500 [main:117] - GENERATED CALL = (Z(1234).hashCode()).rangeTo(-126).isEmpty()
2021-03-12 00:52:15,500 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14404749]]
2021-03-12 00:52:15,500 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:52:15,616 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:15,616 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14404749]
2021-03-12 00:52:15,616 [main:117] - GENERATED CALL = (Z(1234).hashCode()).equals("ktpyc").not()
2021-03-12 00:52:15,616 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@26b730f3]]
2021-03-12 00:52:15,616 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:52:15,616 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@26b730f3]
2021-03-12 00:52:15,617 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toFloat().isFinite()
2021-03-12 00:52:15,617 [main:114] - replacement of prope5 != i of type Boolean is (Z(1234).hashCode()).equals("ktpyc").not()
2021-03-12 00:52:15,734 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:15,734 [main:66] - Compilation checking started
2021-03-12 00:52:16,297 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:16,299 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 00:52:16,299 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 00:52:16,300 [main:54] - Getting value of type String
2021-03-12 00:52:16,423 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:16,426 [main:58] - GENERATED VALUE OF TYPE String = "akjrw"
2021-03-12 00:52:16,426 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:16,581 [main:67] - randomType = Kla8
2021-03-12 00:52:16,698 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 00:52:16,700 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:52:16,722 [main:106] - GETTING String from Z
2021-03-12 00:52:16,729 [main:113] - Case = [public final val data: kotlin.Int defined in Z[PropertyDescriptorImpl@c0c814c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:16,729 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:16,729 [main:117] - GENERATED CALL = (Z(1234)).data.toString(Z(-1264150046).data)
2021-03-12 00:52:16,729 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is "akjrw"
2021-03-12 00:52:16,852 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:52:16,853 [main:66] - Compilation checking started
2021-03-12 00:52:17,380 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = fu1()

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:17,382 [main:107] - replacing (fu1(), Kla0)
2021-03-12 00:52:17,383 [main:50] - replacing fu1() Kla0
2021-03-12 00:52:17,383 [main:54] - Getting value of type Kla0
2021-03-12 00:52:17,503 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 00:52:17,506 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)
2021-03-12 00:52:17,622 [main:194] - Type params = []
2021-03-12 00:52:17,764 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:52:17,767 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0(1090630984)
2021-03-12 00:52:17,767 [main:61] - GENERATED IS CALL =true
2021-03-12 00:52:18,064 [main:67] - randomType = LinkedHashMap<Int, Long>
2021-03-12 00:52:18,180 [main:302] - generating value of type = LinkedHashMap<Int, Long> false depth = 0
2021-03-12 00:52:18,304 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Int, Long> = TODO()
2021-03-12 00:52:18,308 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Int, Long> = TODO()
2021-03-12 00:52:18,429 [main:95] - GENERATED = linkedMapOf<Int, Long>()
2021-03-12 00:52:18,618 [main:106] - GETTING Kla0 from Int
2021-03-12 00:52:18,678 [main:106] - GETTING Kla0 from String
2021-03-12 00:52:18,709 [main:106] - GETTING Kla0 from Int
2021-03-12 00:52:18,710 [main:106] - GETTING Kla0 from Z
2021-03-12 00:52:18,717 [main:114] - replacement of fu1() of type Kla0 is Kla0(1090630984)
2021-03-12 00:52:18,852 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:52:18,853 [main:66] - Compilation checking started
2021-03-12 00:52:19,427 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:19,429 [main:107] - replacing (1..numberOfSuspensions, IntRange)
2021-03-12 00:52:19,430 [main:50] - replacing 1..numberOfSuspensions IntRange
2021-03-12 00:52:19,430 [main:54] - Getting value of type IntRange
2021-03-12 00:52:19,571 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 00:52:19,705 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 00:52:19,709 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 00:52:20,102 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:52:20,104 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:52:20,107 [main:95] - GENERATED = IntRange(1592067641, -1167270868)
2021-03-12 00:52:20,107 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(1592067641, -1167270868)
2021-03-12 00:52:20,107 [main:61] - GENERATED IS CALL =true
2021-03-12 00:52:20,242 [main:67] - randomType = UShort
2021-03-12 00:52:20,358 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:52:20,396 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@438205aa]
2021-03-12 00:52:20,396 [main:149] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6716eb44]
2021-03-12 00:52:20,517 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:20,520 [main:78] - Generated call from random type = (1517.toUShort()).toShort().until(-118)
2021-03-12 00:52:20,521 [main:106] - GETTING IntRange from Int
2021-03-12 00:52:20,551 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]]
2021-03-12 00:52:20,551 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:52:20,667 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:20,670 [main:117] - GENERATED CALL = (Z(-1264150046).data).rangeTo(-32)
2021-03-12 00:52:20,670 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@62f732e7]]
2021-03-12 00:52:20,670 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:52:20,670 [main:149] - GENERATING call of type public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@62f732e7]
2021-03-12 00:52:20,787 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:20,790 [main:117] - GENERATED CALL = (Z(-1264150046).data).toByte().until(-7)
2021-03-12 00:52:20,790 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6716eb44]]
2021-03-12 00:52:20,790 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:52:20,790 [main:149] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6716eb44]
2021-03-12 00:52:20,907 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:20,910 [main:117] - GENERATED CALL = (Z(-1264150046).data).toShort().until(100)
2021-03-12 00:52:20,910 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f1a776c]]
2021-03-12 00:52:20,911 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:52:20,911 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@f1a776c]
2021-03-12 00:52:21,050 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:21,053 [main:117] - GENERATED CALL = (Z(-1264150046).data).toByte().rangeTo(54)
2021-03-12 00:52:21,053 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7464e79f]]
2021-03-12 00:52:21,053 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:52:21,053 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7464e79f]
2021-03-12 00:52:21,172 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:21,175 [main:117] - GENERATED CALL = (Z(-1264150046).data).toShort().rangeTo(-128)
2021-03-12 00:52:21,175 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]]
2021-03-12 00:52:21,175 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:52:21,175 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:52:21,294 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:21,297 [main:117] - GENERATED CALL = (Z(-1264150046).data).toInt().rangeTo(-19)
2021-03-12 00:52:21,297 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18a0c124]]
2021-03-12 00:52:21,297 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:52:21,297 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18a0c124]
2021-03-12 00:52:21,413 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:21,416 [main:117] - GENERATED CALL = (Z(-1264150046).data).compareTo(Z(1234).hashCode()).until(35)
2021-03-12 00:52:21,416 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18a0c124]]
2021-03-12 00:52:21,416 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:52:21,417 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18a0c124]
2021-03-12 00:52:21,532 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:21,535 [main:117] - GENERATED CALL = (Z(-1264150046).data).toInt().until(-104)
2021-03-12 00:52:21,535 [main:113] - Case = [public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18a0c124]]
2021-03-12 00:52:21,535 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@18a0c124]
2021-03-12 00:52:21,650 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:21,653 [main:117] - GENERATED CALL = (Z(-1264150046).data).until(-74)
2021-03-12 00:52:21,653 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]]
2021-03-12 00:52:21,653 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:52:21,769 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:21,772 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:52:21,893 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:21,896 [main:117] - GENERATED CALL = (Z(-1264150046).data).compareTo(1346081538).rangeTo(23)
2021-03-12 00:52:21,896 [main:114] - replacement of 1..numberOfSuspensions of type IntRange is (Z(-1264150046).data).toShort().rangeTo(-128)
2021-03-12 00:52:22,018 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:22,019 [main:66] - Compilation checking started
2021-03-12 00:52:22,554 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:22,556 [main:107] - replacing (prope6, Boolean)
2021-03-12 00:52:22,556 [main:50] - replacing prope6 Boolean
2021-03-12 00:52:22,557 [main:54] - Getting value of type Boolean
2021-03-12 00:52:22,680 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:22,683 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:52:22,683 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:22,992 [main:67] - randomType = LinkedHashSet<Set<Kla1>>
2021-03-12 00:52:23,117 [main:302] - generating value of type = LinkedHashSet<Set<Kla1>> false depth = 0
2021-03-12 00:52:23,242 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Set<Kla1>): LkedHashSet<Set<Kla1>> = TODO()
2021-03-12 00:52:23,245 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Set<Kla1>): LkedHashSet<Set<Kla1>> = TODO()
2021-03-12 00:52:23,367 [main:302] - generating value of type = Set<Kla1> false depth = 3
2021-03-12 00:52:23,489 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): Set<Kla1> = TODO()
2021-03-12 00:52:23,493 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): Set<Kla1> = TODO()
2021-03-12 00:52:23,614 [main:95] - GENERATED = LinkedHashSet<Kla1>()
2021-03-12 00:52:23,614 [main:95] - GENERATED = linkedSetOf<Set<Kla1>>(LinkedHashSet<Kla1>())
2021-03-12 00:52:23,788 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@4a3912fc]
2021-03-12 00:52:23,910 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:23,910 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@729f1db0]
2021-03-12 00:52:24,026 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:24,029 [main:78] - Generated call from random type = (linkedSetOf<Set<Kla1>>(LinkedHashSet<Kla1>())).equals("glhne").or(false)
2021-03-12 00:52:24,029 [main:114] - replacement of prope6 of type Boolean is (linkedSetOf<Set<Kla1>>(LinkedHashSet<Kla1>())).equals("glhne").or(false)
2021-03-12 00:52:24,150 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:24,150 [main:66] - Compilation checking started
2021-03-12 00:52:24,536 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        (linkedSetOf<Set<Kla1>>(LinkedHashSet<Kla1>())).equals("glhne").or(false) = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:24,555 [main:107] - replacing (prope6, Boolean)
2021-03-12 00:52:24,555 [main:50] - replacing prope6 Boolean
2021-03-12 00:52:24,555 [main:54] - Getting value of type Boolean
2021-03-12 00:52:24,694 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:24,697 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:52:24,698 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:24,708 [main:67] - randomType = Z
2021-03-12 00:52:24,832 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:52:24,835 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:52:24,965 [main:194] - Type params = []
2021-03-12 00:52:25,097 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:52:25,108 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:52:25,246 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:25,246 [main:78] - Generated call from random type = (Z(-757328005)).data.equals("nycqz")
2021-03-12 00:52:25,246 [main:114] - replacement of prope6 of type Boolean is (Z(-757328005)).data.equals("nycqz")
2021-03-12 00:52:25,363 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:25,364 [main:66] - Compilation checking started
2021-03-12 00:52:25,720 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return fu5()!!.s.fu2()
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.(Z(-757328005)).data.equals("nycqz") = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:25,722 [main:107] - replacing (fu5()!!.s.fu2(), String)
2021-03-12 00:52:25,722 [main:50] - replacing fu5()!!.s.fu2() String
2021-03-12 00:52:25,722 [main:54] - Getting value of type String
2021-03-12 00:52:25,840 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:25,843 [main:58] - GENERATED VALUE OF TYPE String = "yxytd"
2021-03-12 00:52:25,843 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:26,130 [main:67] - randomType = List<Short>
2021-03-12 00:52:26,131 [main:106] - GETTING String from Int
2021-03-12 00:52:26,163 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:26,163 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:52:26,163 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:26,163 [main:117] - GENERATED CALL = (Z(1234).hashCode()).compareTo(Z(-1264150046).data).toString(Z(1234).hashCode())
2021-03-12 00:52:26,163 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]]
2021-03-12 00:52:26,163 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:26,163 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]
2021-03-12 00:52:26,164 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().titlecase()
2021-03-12 00:52:26,164 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]]
2021-03-12 00:52:26,164 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:52:26,164 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:52:26,283 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:26,285 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toShort().toString(-762577440)
2021-03-12 00:52:26,286 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:52:26,286 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:26,286 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:52:26,421 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:26,424 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().plus("jgchi")
2021-03-12 00:52:26,424 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:52:26,424 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:26,424 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:52:26,424 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().lowercase()
2021-03-12 00:52:26,424 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:26,425 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:26,542 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:26,545 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toString(-275099541)
2021-03-12 00:52:26,545 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:52:26,545 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:26,545 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:52:26,545 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().uppercase()
2021-03-12 00:52:26,545 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:26,545 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:52:26,545 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:26,545 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toInt().toString(Z(-1264150046).data)
2021-03-12 00:52:26,546 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:52:26,546 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:52:26,662 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:52:26,665 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:52:26,781 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:26,783 [main:117] - GENERATED CALL = (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
2021-03-12 00:52:26,784 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]]
2021-03-12 00:52:26,784 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:52:26,784 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]
2021-03-12 00:52:26,901 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:26,904 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toByte().toString(1305049090)
2021-03-12 00:52:26,904 [main:114] - replacement of fu5()!!.s.fu2() of type String is (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
2021-03-12 00:52:27,023 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:27,023 [main:66] - Compilation checking started
2021-03-12 00:52:27,552 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:27,554 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 00:52:27,554 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 00:52:27,555 [main:54] - Getting value of type Throwable?
2021-03-12 00:52:27,680 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 00:52:27,807 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.String?): Throwable = TODO()
2021-03-12 00:52:27,811 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.String?): Throwable = TODO()
2021-03-12 00:52:28,072 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:52:28,075 [main:95] - GENERATED = AssertionError("thnmx")
2021-03-12 00:52:28,075 [main:58] - GENERATED VALUE OF TYPE Throwable? = AssertionError("thnmx")
2021-03-12 00:52:28,075 [main:61] - GENERATED IS CALL =true
2021-03-12 00:52:28,091 [main:67] - randomType = Kla0?
2021-03-12 00:52:28,214 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 00:52:28,238 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)
2021-03-12 00:52:28,360 [main:194] - Type params = []
2021-03-12 00:52:28,476 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:52:28,485 [main:106] - GETTING Throwable? from String
2021-03-12 00:52:28,502 [main:106] - GETTING Throwable? from Int
2021-03-12 00:52:28,531 [main:106] - GETTING Throwable? from Z
2021-03-12 00:52:28,536 [main:106] - GETTING Throwable? from Int
2021-03-12 00:52:28,536 [main:114] - replacement of exceptionOrNull() of type Throwable? is AssertionError("thnmx")
2021-03-12 00:52:28,653 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:52:28,653 [main:66] - Compilation checking started
2021-03-12 00:52:29,021 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.AssertionError("thnmx")?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:29,023 [main:107] - replacing (Kla6(), Kla6)
2021-03-12 00:52:29,023 [main:50] - replacing Kla6() Kla6
2021-03-12 00:52:29,023 [main:54] - Getting value of type Kla6
2021-03-12 00:52:29,145 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 00:52:29,148 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 00:52:29,148 [main:58] - GENERATED VALUE OF TYPE Kla6 = Kla6()
2021-03-12 00:52:29,148 [main:61] - GENERATED IS CALL =true
2021-03-12 00:52:29,284 [main:67] - randomType = ULong
2021-03-12 00:52:29,402 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 00:52:29,446 [main:106] - GETTING Kla6 from Int
2021-03-12 00:52:29,499 [main:106] - GETTING Kla6 from String
2021-03-12 00:52:29,530 [main:106] - GETTING Kla6 from Int
2021-03-12 00:52:29,530 [main:106] - GETTING Kla6 from Z
2021-03-12 00:52:29,537 [main:114] - replacement of Kla6() of type Kla6 is Kla6()
2021-03-12 00:52:29,660 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:52:29,662 [main:107] - replacing (prope0, Continuation<*>)
2021-03-12 00:52:29,662 [main:50] - replacing prope0 Continuation<*>
2021-03-12 00:52:29,662 [main:54] - Getting value of type Continuation<*>
2021-03-12 00:52:29,779 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 00:52:29,902 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:52:29,906 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:52:30,359 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 00:52:30,481 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:52:30,485 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:52:30,749 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 00:52:30,876 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:52:30,879 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:52:31,315 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 00:52:31,446 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:52:31,450 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:52:31,920 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 00:52:32,045 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:52:32,049 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:52:32,481 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-12 00:52:32,609 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:52:32,613 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:52:33,013 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 18
2021-03-12 00:52:33,013 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 00:52:33,014 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:52:33,014 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:52:33,014 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:52:33,014 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:52:33,014 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 00:52:33,014 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 00:52:33,560 [main:67] - randomType = Set<Array<Double>>
2021-03-12 00:52:33,562 [main:106] - GETTING Continuation<*> from Z
2021-03-12 00:52:33,568 [main:106] - GETTING Continuation<*> from Int
2021-03-12 00:52:33,608 [main:106] - GETTING Continuation<*> from String
2021-03-12 00:52:33,637 [main:106] - GETTING Continuation<*> from Int
2021-03-12 00:52:33,637 [main:111] - Cant find and generate replacement for prope0 type Continuation<*>
2021-03-12 00:52:33,637 [main:107] - replacing ((Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got ", String)
2021-03-12 00:52:33,637 [main:50] - replacing (Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " String
2021-03-12 00:52:33,637 [main:54] - Getting value of type String
2021-03-12 00:52:33,781 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:33,784 [main:58] - GENERATED VALUE OF TYPE String = "gillx"
2021-03-12 00:52:33,784 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:33,795 [main:67] - randomType = Kla6
2021-03-12 00:52:33,910 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 00:52:33,913 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 00:52:33,919 [main:106] - GETTING String from Z
2021-03-12 00:52:33,924 [main:113] - Case = [public final val data: kotlin.Int defined in Z[PropertyDescriptorImpl@c0c814c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:33,924 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:33,924 [main:117] - GENERATED CALL = (Z(1234)).data.toString(Z(-1264150046).data)
2021-03-12 00:52:33,924 [main:114] - replacement of (Z(-1264150046).data).toString(Z(-1264150046).data) + i + ", got " of type String is "gillx"
2021-03-12 00:52:34,044 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:52:34,044 [main:66] - Compilation checking started
2021-03-12 00:52:34,561 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:34,563 [main:107] - replacing (prope3, String)
2021-03-12 00:52:34,563 [main:50] - replacing prope3 String
2021-03-12 00:52:34,563 [main:54] - Getting value of type String
2021-03-12 00:52:34,679 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:34,682 [main:58] - GENERATED VALUE OF TYPE String = "aabrv"
2021-03-12 00:52:34,682 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:34,969 [main:67] - randomType = Triple<UInt, Kla3, Short>
2021-03-12 00:52:35,086 [main:302] - generating value of type = Triple<UInt, Kla3, Short> false depth = 0
2021-03-12 00:52:35,209 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UInt, second: Kla3, third: Short): Triple<UInt, Kla3, Short> = TODO()
2021-03-12 00:52:35,213 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UInt, second: Kla3, third: Short): Triple<UInt, Kla3, Short> = TODO()
2021-03-12 00:52:35,333 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 00:52:35,336 [main:302] - generating value of type = Kla3 false depth = 3
2021-03-12 00:52:35,338 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}
2021-03-12 00:52:35,454 [main:194] - Type params = []
2021-03-12 00:52:35,569 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 00:52:35,697 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:52:35,701 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:52:35,982 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 00:52:36,110 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:52:36,114 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:52:36,524 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 00:52:36,647 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:52:36,651 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:52:37,049 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:52:37,050 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:52:37,050 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:52:37,050 [main:302] - generating value of type = Short true depth = 3
2021-03-12 00:52:37,052 [main:95] - GENERATED = Triple<UInt, Kla3, Short>(1941201687.toUInt(), Kla3(), -3766)
2021-03-12 00:52:37,068 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:52:37,068 [main:78] - Generated call from random type = (Triple<UInt, Kla3, Short>(1941201687.toUInt(), Kla3(), -3766)).third.toString(Z(-1264150046).data)
2021-03-12 00:52:37,069 [main:106] - GETTING String from Int
2021-03-12 00:52:37,101 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:52:37,101 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:37,101 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:52:37,101 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().lowercase()
2021-03-12 00:52:37,101 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:52:37,101 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:52:37,217 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:52:37,219 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:52:37,335 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:37,338 [main:117] - GENERATED CALL = (Z(-1264150046).data).div(4152148409234865083).toString(-589198117)
2021-03-12 00:52:37,338 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:52:37,338 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:37,338 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:52:37,338 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().plus(Z(0).toString())
2021-03-12 00:52:37,338 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:52:37,338 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:52:37,338 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:52:37,453 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:37,456 [main:117] - GENERATED CALL = (Z(-1264150046).data).toLong().toString(1932155679)
2021-03-12 00:52:37,456 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]]
2021-03-12 00:52:37,456 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:52:37,456 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:52:37,456 [main:117] - GENERATED CALL = (Z(-1264150046).data).toShort().toString(Z(-1264150046).data)
2021-03-12 00:52:37,456 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:37,456 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:52:37,456 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:37,457 [main:117] - GENERATED CALL = (Z(-1264150046).data).toInt().toString(Z(-1264150046).data)
2021-03-12 00:52:37,457 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:52:37,457 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:37,457 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:52:37,457 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().uppercase()
2021-03-12 00:52:37,457 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:37,457 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:52:37,457 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:37,457 [main:117] - GENERATED CALL = (Z(-1264150046).data).compareTo(Z(-1264150046).data).toString(Z(1234).hashCode())
2021-03-12 00:52:37,457 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]]
2021-03-12 00:52:37,457 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:37,458 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]
2021-03-12 00:52:37,458 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().titlecase()
2021-03-12 00:52:37,458 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:37,458 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:37,458 [main:117] - GENERATED CALL = (Z(-1264150046).data).toString(Z(1234).hashCode())
2021-03-12 00:52:37,458 [main:114] - replacement of prope3 of type String is (Z(-1264150046).data).toChar().plus(Z(0).toString())
2021-03-12 00:52:37,571 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:37,572 [main:66] - Compilation checking started
2021-03-12 00:52:37,929 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return prope8.fu5()!!.s.fu2()
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    (Z(-1264150046).data).toChar().plus(Z(0).toString()) = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:37,931 [main:107] - replacing (prope8.fu5()!!.s.fu2(), String)
2021-03-12 00:52:37,931 [main:50] - replacing prope8.fu5()!!.s.fu2() String
2021-03-12 00:52:37,931 [main:54] - Getting value of type String
2021-03-12 00:52:38,046 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:38,049 [main:58] - GENERATED VALUE OF TYPE String = "ccuwz"
2021-03-12 00:52:38,049 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:38,467 [main:67] - randomType = Triple<Kla3, Long, Kla8>
2021-03-12 00:52:38,581 [main:302] - generating value of type = Triple<Kla3, Long, Kla8> false depth = 0
2021-03-12 00:52:38,702 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla3, second: Long, third: Kla8): Triple<Kla3, Long, Kla8> = TODO()
2021-03-12 00:52:38,705 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla3, second: Long, third: Kla8): Triple<Kla3, Long, Kla8> = TODO()
2021-03-12 00:52:38,826 [main:302] - generating value of type = Kla3 false depth = 3
2021-03-12 00:52:38,829 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}
2021-03-12 00:52:38,943 [main:194] - Type params = []
2021-03-12 00:52:39,055 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 00:52:39,175 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:52:39,179 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:52:39,440 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 00:52:39,566 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:52:39,570 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:52:40,008 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:52:40,008 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:52:40,009 [main:302] - generating value of type = Long true depth = 3
2021-03-12 00:52:40,011 [main:302] - generating value of type = Kla8 false depth = 3
2021-03-12 00:52:40,014 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:52:40,014 [main:95] - GENERATED = Triple<Kla3, Long, Kla8>(Kla3(), -1123206265586502938, Kla8)
2021-03-12 00:52:40,030 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:52:40,030 [main:78] - Generated call from random type = (Triple<Kla3, Long, Kla8>(Kla3(), -1123206265586502938, Kla8)).second.toString(Z(-1264150046).data)
2021-03-12 00:52:40,031 [main:106] - GETTING String from Int
2021-03-12 00:52:40,077 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:52:40,077 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:40,077 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:52:40,077 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().lowercase()
2021-03-12 00:52:40,078 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]]
2021-03-12 00:52:40,078 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:40,078 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]
2021-03-12 00:52:40,078 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().titlecase()
2021-03-12 00:52:40,078 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:52:40,078 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:52:40,078 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:52:40,078 [main:117] - GENERATED CALL = (Z(-1264150046).data).toLong().toString(Z(1234).hashCode())
2021-03-12 00:52:40,078 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:52:40,078 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:40,078 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:52:40,078 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().plus(Z(0).toString())
2021-03-12 00:52:40,079 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]]
2021-03-12 00:52:40,079 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:52:40,079 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]
2021-03-12 00:52:40,079 [main:117] - GENERATED CALL = (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
2021-03-12 00:52:40,079 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:40,079 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:40,079 [main:117] - GENERATED CALL = (Z(-1264150046).data).toString(Z(1234).hashCode())
2021-03-12 00:52:40,079 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]]
2021-03-12 00:52:40,079 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:52:40,079 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:52:40,198 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:40,200 [main:117] - GENERATED CALL = (Z(-1264150046).data).toShort().toString(-222556737)
2021-03-12 00:52:40,200 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:52:40,200 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:40,201 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:52:40,201 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().uppercase()
2021-03-12 00:52:40,201 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:40,201 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:52:40,201 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:40,318 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:40,321 [main:117] - GENERATED CALL = (Z(-1264150046).data).toInt().toString(-2017865869)
2021-03-12 00:52:40,321 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:52:40,321 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:52:40,437 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:40,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:40,440 [main:117] - GENERATED CALL = (Z(-1264150046).data).compareTo(-1496240815).toString(Z(-1264150046).data)
2021-03-12 00:52:40,440 [main:114] - replacement of prope8.fu5()!!.s.fu2() of type String is (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
2021-03-12 00:52:40,557 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:40,557 [main:66] - Compilation checking started
2021-03-12 00:52:41,090 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == 42) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:41,092 [main:107] - replacing (42, Int)
2021-03-12 00:52:41,093 [main:50] - replacing 42 Int
2021-03-12 00:52:41,093 [main:54] - Getting value of type Int
2021-03-12 00:52:41,214 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:41,217 [main:58] - GENERATED VALUE OF TYPE Int = -1818075024
2021-03-12 00:52:41,217 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:41,227 [main:67] - randomType = Z
2021-03-12 00:52:41,346 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:52:41,349 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:52:41,469 [main:194] - Type params = []
2021-03-12 00:52:41,590 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:52:41,600 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f6b7959]
2021-03-12 00:52:41,600 [main:78] - Generated call from random type = (Z(-269844562)).data.coerceAtLeast(Z(-1264150046).data)
2021-03-12 00:52:41,601 [main:106] - GETTING Int from String
2021-03-12 00:52:41,618 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7d427ad], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c461c22]]
2021-03-12 00:52:41,618 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c461c22]
2021-03-12 00:52:41,736 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:41,739 [main:117] - GENERATED CALL = (Z(0).toString()).length.rotateLeft(1093590856)
2021-03-12 00:52:41,739 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58], public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@2f70a619]]
2021-03-12 00:52:41,739 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58]
2021-03-12 00:52:41,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:41,857 [main:117] - GENERATED CALL = (Z(0).toString()).subSequence(Z(1234).hashCode(), 162859956).lastIndex
2021-03-12 00:52:41,857 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27bff3df], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5585f547]]
2021-03-12 00:52:41,857 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27bff3df]
2021-03-12 00:52:41,857 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5585f547]
2021-03-12 00:52:41,971 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:41,974 [main:117] - GENERATED CALL = (Z(0).toString()).compareTo(Z(0).toString()).xor(-1614225790)
2021-03-12 00:52:41,974 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27bff3df], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@69ef1429]]
2021-03-12 00:52:41,974 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27bff3df]
2021-03-12 00:52:41,974 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@69ef1429]
2021-03-12 00:52:42,110 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:42,113 [main:117] - GENERATED CALL = (Z(0).toString()).compareTo(Z(0).toString()).div(-126)
2021-03-12 00:52:42,113 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64b79c64]]
2021-03-12 00:52:42,113 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64b79c64]
2021-03-12 00:52:42,113 [main:117] - GENERATED CALL = (Z(0).toString()).toInt()
2021-03-12 00:52:42,114 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@a25d26b]]
2021-03-12 00:52:42,114 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58]
2021-03-12 00:52:42,228 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:42,353 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:42,357 [main:117] - GENERATED CALL = (Z(0).toString()).subSequence(853563471, -2059620692).length
2021-03-12 00:52:42,357 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7da79fad]]
2021-03-12 00:52:42,357 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490]
2021-03-12 00:52:42,357 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7da79fad]
2021-03-12 00:52:42,477 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:52:42,479 [main:117] - GENERATED CALL = (Z(0).toString()).get(Z(1234).hashCode()).minus('쏏')
2021-03-12 00:52:42,479 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27bff3df], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6d223cb2]]
2021-03-12 00:52:42,480 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@27bff3df]
2021-03-12 00:52:42,600 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:42,603 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6d223cb2]
2021-03-12 00:52:42,716 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:42,719 [main:117] - GENERATED CALL = (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)
2021-03-12 00:52:42,719 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7d427ad], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76e87fa0]]
2021-03-12 00:52:42,719 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76e87fa0]
2021-03-12 00:52:42,832 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:42,834 [main:117] - GENERATED CALL = (Z(0).toString()).length.minus(4)
2021-03-12 00:52:42,835 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@7d427ad], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d268d97]]
2021-03-12 00:52:42,835 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d268d97]
2021-03-12 00:52:42,835 [main:117] - GENERATED CALL = (Z(0).toString()).length.inv()
2021-03-12 00:52:42,835 [main:114] - replacement of 42 of type Int is (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)
2021-03-12 00:52:42,948 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:42,949 [main:66] - Compilation checking started
2021-03-12 00:52:43,582 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:43,584 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 00:52:43,584 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 00:52:43,584 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 00:52:43,714 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 00:52:43,717 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:52:43,856 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:52:43,859 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:52:44,277 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:52:44,280 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:52:44,282 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:52:44,283 [main:95] - GENERATED = require(true, { "efknw"})
2021-03-12 00:52:44,283 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> require(true, { "efknw"})}
2021-03-12 00:52:44,283 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:44,727 [main:67] - randomType = Function1<String?, Float>
2021-03-12 00:52:44,729 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 00:52:44,772 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 00:52:44,789 [main:106] - GETTING Function1<Throwable, Unit> from Z
2021-03-12 00:52:44,795 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 00:52:44,795 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> require(true, { "efknw"})}
2021-03-12 00:52:44,914 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:52:44,914 [main:66] - Compilation checking started
2021-03-12 00:52:45,497 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:45,499 [main:107] - replacing (Kla2(), Kla2)
2021-03-12 00:52:45,500 [main:50] - replacing Kla2() Kla2
2021-03-12 00:52:45,500 [main:54] - Getting value of type Kla2
2021-03-12 00:52:45,626 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 00:52:45,629 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}
2021-03-12 00:52:45,750 [main:194] - Type params = []
2021-03-12 00:52:45,871 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-12 00:52:45,871 [main:61] - GENERATED IS CALL =true
2021-03-12 00:52:46,019 [main:67] - randomType = Collection<Kla1>
2021-03-12 00:52:46,020 [main:106] - GETTING Kla2 from String
2021-03-12 00:52:46,044 [main:106] - GETTING Kla2 from Int
2021-03-12 00:52:46,083 [main:106] - GETTING Kla2 from Int
2021-03-12 00:52:46,084 [main:106] - GETTING Kla2 from Z
2021-03-12 00:52:46,089 [main:114] - replacement of Kla2() of type Kla2 is Kla2()
2021-03-12 00:52:46,207 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:52:46,209 [main:107] - replacing ("UNSUPPORTED_FEATURE", String)
2021-03-12 00:52:46,209 [main:50] - replacing "UNSUPPORTED_FEATURE" String
2021-03-12 00:52:46,209 [main:54] - Getting value of type String
2021-03-12 00:52:46,327 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:46,330 [main:58] - GENERATED VALUE OF TYPE String = "bjell"
2021-03-12 00:52:46,330 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:46,469 [main:67] - randomType = UShort
2021-03-12 00:52:46,588 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:52:46,617 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5696198d]
2021-03-12 00:52:46,735 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:52:46,738 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:52:46,738 [main:78] - Generated call from random type = (14478.toUShort()).compareTo(44.toUByte()).toString(Z(-1264150046).data)
2021-03-12 00:52:46,739 [main:106] - GETTING String from String
2021-03-12 00:52:46,766 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@510abe1f]]
2021-03-12 00:52:46,766 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@510abe1f]
2021-03-12 00:52:46,884 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:46,884 [main:117] - GENERATED CALL = (Z(0).toString()).plus("keitf")
2021-03-12 00:52:46,884 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bd28e09]]
2021-03-12 00:52:46,884 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bd28e09]
2021-03-12 00:52:47,017 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:52:47,019 [main:117] - GENERATED CALL = (Z(0).toString()).substringBeforeLast('膲', Z(0).toString())
2021-03-12 00:52:47,020 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ca457]]
2021-03-12 00:52:47,020 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ca457]
2021-03-12 00:52:47,020 [main:117] - GENERATED CALL = (Z(0).toString()).reversed()
2021-03-12 00:52:47,020 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c81706]]
2021-03-12 00:52:47,020 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c81706]
2021-03-12 00:52:47,143 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:52:47,146 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:52:47,149 [main:117] - GENERATED CALL = (Z(0).toString()).replaceFirstChar({a: Char -> '虏'})
2021-03-12 00:52:47,149 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73c60ba1]]
2021-03-12 00:52:47,149 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73c60ba1]
2021-03-12 00:52:47,149 [main:117] - GENERATED CALL = (Z(0).toString()).uppercase()
2021-03-12 00:52:47,149 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:52:47,149 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490]
2021-03-12 00:52:47,267 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:47,270 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:52:47,270 [main:117] - GENERATED CALL = (Z(0).toString()).get(1134130066).plus(Z(0).toString())
2021-03-12 00:52:47,270 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:52:47,270 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490]
2021-03-12 00:52:47,271 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:52:47,271 [main:117] - GENERATED CALL = (Z(0).toString()).get(Z(1234).hashCode()).uppercase()
2021-03-12 00:52:47,271 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3112d618]]
2021-03-12 00:52:47,271 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3112d618]
2021-03-12 00:52:47,387 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:47,390 [main:117] - GENERATED CALL = (Z(0).toString()).repeat(1568729031)
2021-03-12 00:52:47,390 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11daf9c2]]
2021-03-12 00:52:47,390 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11daf9c2]
2021-03-12 00:52:47,509 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:52:47,514 [main:117] - GENERATED CALL = (Z(0).toString()).removeSuffix("ynpeo")
2021-03-12 00:52:47,514 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3bf280]]
2021-03-12 00:52:47,514 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c3bf280]
2021-03-12 00:52:47,634 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:52:47,637 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:52:47,640 [main:117] - GENERATED CALL = (Z(0).toString()).filter({a: Char -> false})
2021-03-12 00:52:47,640 [main:114] - replacement of "UNSUPPORTED_FEATURE" of type String is (Z(0).toString()).removeSuffix("ynpeo")
2021-03-12 00:52:47,757 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:47,757 [main:66] - Compilation checking started
2021-03-12 00:52:48,122 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress((Z(0).toString()).removeSuffix("ynpeo"))
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:48,124 [main:107] - replacing ({
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
}, Function1<Continuation<Ty0>, Unit>)
2021-03-12 00:52:48,124 [main:50] - replacing {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
} Function1<Continuation<Ty0>, Unit>
2021-03-12 00:52:48,124 [main:54] - Getting value of type Function1<Continuation<Ty0>, Unit>
2021-03-12 00:52:48,252 [main:302] - generating value of type = Function1<Continuation<Ty0>, Unit> false depth = 0
2021-03-12 00:52:48,255 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:52:48,261 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Ty0>, Unit> = {a: Continuation<Ty0> -> println()}
2021-03-12 00:52:48,261 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:48,415 [main:67] - randomType = List<Z>
2021-03-12 00:52:48,416 [main:106] - GETTING Function1<Continuation<Ty0>, Unit> from Int
2021-03-12 00:52:48,456 [main:106] - GETTING Function1<Continuation<Ty0>, Unit> from String
2021-03-12 00:52:48,476 [main:106] - GETTING Function1<Continuation<Ty0>, Unit> from Z
2021-03-12 00:52:48,483 [main:106] - GETTING Function1<Continuation<Ty0>, Unit> from Int
2021-03-12 00:52:48,483 [main:114] - replacement of {
    @Suppress("UNCHECKED_CAST")
    prope0 = it as Continuation<Any>
} of type Function1<Continuation<Ty0>, Unit> is {a: Continuation<Ty0> -> println()}
2021-03-12 00:52:48,603 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:52:48,604 [main:66] - Compilation checking started
2021-03-12 00:52:49,124 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if (prope3 != "OK") return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:49,125 [main:107] - replacing (prope3 != "OK", Boolean)
2021-03-12 00:52:49,126 [main:50] - replacing prope3 != "OK" Boolean
2021-03-12 00:52:49,126 [main:54] - Getting value of type Boolean
2021-03-12 00:52:49,245 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:49,247 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:52:49,248 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:49,404 [main:67] - randomType = Z?
2021-03-12 00:52:49,520 [main:302] - generating value of type = Z false depth = 0
2021-03-12 00:52:49,523 [main:112] - generating klass Z text = inline class Z(val data: Int)
2021-03-12 00:52:49,639 [main:194] - Type params = []
2021-03-12 00:52:49,756 [main:302] - generating value of type = Int true depth = 2
2021-03-12 00:52:49,764 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Z[SimpleFunctionDescriptorImpl@27f6395a]
2021-03-12 00:52:49,880 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:49,881 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14404749]
2021-03-12 00:52:49,881 [main:78] - Generated call from random type = (Z(1479118622))?.equals("sczos").not()
2021-03-12 00:52:49,882 [main:106] - GETTING Boolean from Int
2021-03-12 00:52:49,916 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d7107cb]]
2021-03-12 00:52:49,917 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:49,917 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d7107cb]
2021-03-12 00:52:49,917 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().isWhitespace()
2021-03-12 00:52:49,917 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@42602e0f], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@32429a73]]
2021-03-12 00:52:49,917 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@42602e0f]
2021-03-12 00:52:49,917 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@32429a73]
2021-03-12 00:52:49,917 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toDouble().isFinite()
2021-03-12 00:52:49,917 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5a5a57bc]]
2021-03-12 00:52:49,917 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:52:50,035 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:50,037 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5a5a57bc]
2021-03-12 00:52:50,162 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:50,165 [main:117] - GENERATED CALL = (Z(1234).hashCode()).rangeTo(127).contains(-798220440)
2021-03-12 00:52:50,165 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@694a6499]]
2021-03-12 00:52:50,166 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:52:50,282 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:50,285 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@694a6499]
2021-03-12 00:52:50,401 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:50,401 [main:117] - GENERATED CALL = (Z(1234).hashCode()).rangeTo(-52).equals("uqyxt")
2021-03-12 00:52:50,401 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1e992336]]
2021-03-12 00:52:50,401 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:52:50,401 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1e992336]
2021-03-12 00:52:50,402 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toFloat().isNaN()
2021-03-12 00:52:50,402 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65f48d96]]
2021-03-12 00:52:50,402 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:50,402 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65f48d96]
2021-03-12 00:52:50,402 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().isLetter()
2021-03-12 00:52:50,402 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27f8321c]]
2021-03-12 00:52:50,402 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:52:50,520 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:52:50,523 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27f8321c]
2021-03-12 00:52:50,523 [main:117] - GENERATED CALL = (Z(1234).hashCode()).div(0.16197485262038114).isInfinite()
2021-03-12 00:52:50,523 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@dd84bbb]]
2021-03-12 00:52:50,524 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:52:50,524 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@dd84bbb]
2021-03-12 00:52:50,640 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:50,641 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toLong().equals("nzked")
2021-03-12 00:52:50,645 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369872ff]]
2021-03-12 00:52:50,645 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:50,645 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369872ff]
2021-03-12 00:52:50,645 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().isTitleCase()
2021-03-12 00:52:50,645 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@4e2c8f1c]]
2021-03-12 00:52:50,645 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:52:50,761 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:50,764 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@4e2c8f1c]
2021-03-12 00:52:50,764 [main:117] - GENERATED CALL = (Z(1234).hashCode()).rangeTo(44).isEmpty()
2021-03-12 00:52:50,764 [main:114] - replacement of prope3 != "OK" of type Boolean is (Z(1234).hashCode()).rangeTo(44).isEmpty()
2021-03-12 00:52:50,880 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:50,881 [main:66] - Compilation checking started
2021-03-12 00:52:51,413 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:51,416 [main:107] - replacing (!(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank(), Boolean)
2021-03-12 00:52:51,416 [main:50] - replacing !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank() Boolean
2021-03-12 00:52:51,417 [main:54] - Getting value of type Boolean
2021-03-12 00:52:51,561 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:51,563 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:52:51,563 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:51,728 [main:67] - randomType = Float
2021-03-12 00:52:51,859 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:52:51,901 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27812cca]
2021-03-12 00:52:51,901 [main:78] - Generated call from random type = (0.07773489f).isInfinite()
2021-03-12 00:52:51,902 [main:106] - GETTING Boolean from Int
2021-03-12 00:52:51,931 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30f4fb5]]
2021-03-12 00:52:51,931 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:51,932 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30f4fb5]
2021-03-12 00:52:51,932 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().isLowSurrogate()
2021-03-12 00:52:51,932 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387b7c4b]]
2021-03-12 00:52:51,932 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:51,932 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387b7c4b]
2021-03-12 00:52:51,932 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().isDefined()
2021-03-12 00:52:51,932 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@174349a1]]
2021-03-12 00:52:51,932 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:51,932 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@174349a1]
2021-03-12 00:52:51,932 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().isDigit()
2021-03-12 00:52:51,932 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@184ec704]]
2021-03-12 00:52:51,932 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:51,933 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@184ec704]
2021-03-12 00:52:51,933 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().isLowerCase()
2021-03-12 00:52:51,933 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4e3617fe]]
2021-03-12 00:52:51,933 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:52:52,055 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:52:52,059 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4e3617fe]
2021-03-12 00:52:52,199 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:52,199 [main:117] - GENERATED CALL = (Z(-1264150046).data).div(0.38749820457534867).equals("dqxhf")
2021-03-12 00:52:52,200 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27f8321c]]
2021-03-12 00:52:52,200 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:52:52,319 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:52:52,321 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27f8321c]
2021-03-12 00:52:52,322 [main:117] - GENERATED CALL = (Z(-1264150046).data).div(0.40542225717237745).isInfinite()
2021-03-12 00:52:52,322 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369872ff]]
2021-03-12 00:52:52,322 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:52,322 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369872ff]
2021-03-12 00:52:52,322 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().isTitleCase()
2021-03-12 00:52:52,322 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@26b730f3]]
2021-03-12 00:52:52,322 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:52:52,322 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@26b730f3]
2021-03-12 00:52:52,322 [main:117] - GENERATED CALL = (Z(-1264150046).data).toFloat().isFinite()
2021-03-12 00:52:52,322 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]]
2021-03-12 00:52:52,322 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:52:52,438 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:52:52,438 [main:117] - GENERATED CALL = (Z(-1264150046).data).equals("bfzxd")
2021-03-12 00:52:52,438 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d4f0643]]
2021-03-12 00:52:52,439 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:52:52,439 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d4f0643]
2021-03-12 00:52:52,559 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:52:52,678 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:52,681 [main:117] - GENERATED CALL = (Z(-1264150046).data).toChar().equals('汐', false)
2021-03-12 00:52:52,681 [main:114] - replacement of !(Z(0).toString()).subSequence(Z(-1264150046).data, Z(1234).hashCode()).isBlank() of type Boolean is (Z(-1264150046).data).toChar().isTitleCase()
2021-03-12 00:52:52,796 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:52,796 [main:66] - Compilation checking started
2021-03-12 00:52:53,338 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:53,339 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 00:52:53,340 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 00:52:53,340 [main:54] - Getting value of type String
2021-03-12 00:52:53,456 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:52:53,458 [main:58] - GENERATED VALUE OF TYPE String = "gefke"
2021-03-12 00:52:53,458 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:53,723 [main:67] - randomType = Float?
2021-03-12 00:52:53,838 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:52:53,870 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@4fcbe248]
2021-03-12 00:52:53,870 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:52:53,989 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:53,991 [main:78] - Generated call from random type = (0.079936445f)?.toShort().toString(-1006520885)
2021-03-12 00:52:53,992 [main:106] - GETTING String from String
2021-03-12 00:52:54,028 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33c2f9ce]]
2021-03-12 00:52:54,028 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58]
2021-03-12 00:52:54,149 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:54,152 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33c2f9ce]
2021-03-12 00:52:54,267 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:52:54,389 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:54,392 [main:117] - GENERATED CALL = (Z(0).toString()).subSequence(Z(-1264150046).data, 2034471109).commonPrefixWith("sqrnj", true)
2021-03-12 00:52:54,392 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33c2f9ce]]
2021-03-12 00:52:54,392 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33c2f9ce]
2021-03-12 00:52:54,510 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:52:54,632 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:52:54,635 [main:117] - GENERATED CALL = (Z(0).toString()).commonPrefixWith(StringBuilder(), false)
2021-03-12 00:52:54,635 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@296e4c5d]]
2021-03-12 00:52:54,636 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@296e4c5d]
2021-03-12 00:52:54,752 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:52:54,755 [main:117] - GENERATED CALL = (Z(0).toString()).substringBefore('ὖ', Z(0).toString())
2021-03-12 00:52:54,755 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f4f77e5]]
2021-03-12 00:52:54,755 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58]
2021-03-12 00:52:54,755 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f4f77e5]
2021-03-12 00:52:54,870 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:54,873 [main:117] - GENERATED CALL = (Z(0).toString()).subSequence(Z(1234).hashCode(), Z(-1264150046).data).substring(-898648401, Z(1234).hashCode())
2021-03-12 00:52:54,873 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70f7f7ec]]
2021-03-12 00:52:54,873 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70f7f7ec]
2021-03-12 00:52:54,991 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:52:54,994 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:52:54,996 [main:117] - GENERATED CALL = (Z(0).toString()).dropLastWhile({a: Char -> true})
2021-03-12 00:52:54,997 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19aa7e96]]
2021-03-12 00:52:54,997 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19aa7e96]
2021-03-12 00:52:55,114 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:52:55,117 [main:117] - GENERATED CALL = (Z(0).toString()).substringAfterLast('盿', Z(0).toString())
2021-03-12 00:52:55,117 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b54b97a]]
2021-03-12 00:52:55,117 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b54b97a]
2021-03-12 00:52:55,117 [main:117] - GENERATED CALL = (Z(0).toString()).prependIndent(Z(0).toString())
2021-03-12 00:52:55,117 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b81f698]]
2021-03-12 00:52:55,117 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b81f698]
2021-03-12 00:52:55,233 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:52:55,236 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:52:55,239 [main:117] - GENERATED CALL = (Z(0).toString()).takeWhile({a: Char -> true})
2021-03-12 00:52:55,239 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11daf9c2]]
2021-03-12 00:52:55,239 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11daf9c2]
2021-03-12 00:52:55,357 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:52:55,363 [main:117] - GENERATED CALL = (Z(0).toString()).removeSuffix("scmlc")
2021-03-12 00:52:55,363 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:52:55,363 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@32364490]
2021-03-12 00:52:55,478 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:55,481 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:52:55,481 [main:117] - GENERATED CALL = (Z(0).toString()).get(495987655).lowercase()
2021-03-12 00:52:55,481 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (Z(0).toString()).removeSuffix("scmlc")
2021-03-12 00:52:55,597 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:55,598 [main:66] - Compilation checking started
2021-03-12 00:52:56,307 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        prope5++
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:56,308 [main:107] - replacing (prope5++, Int)
2021-03-12 00:52:56,308 [main:50] - replacing prope5++ Int
2021-03-12 00:52:56,309 [main:54] - Getting value of type Int
2021-03-12 00:52:56,425 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:56,427 [main:58] - GENERATED VALUE OF TYPE Int = -601571324
2021-03-12 00:52:56,427 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:56,601 [main:67] - randomType = UShort
2021-03-12 00:52:56,719 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:52:56,749 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4459fba1]
2021-03-12 00:52:56,749 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@38c960b7]
2021-03-12 00:52:56,749 [main:78] - Generated call from random type = (21840.toUShort()).toShort().unaryPlus()
2021-03-12 00:52:56,749 [main:106] - GETTING Int from Int
2021-03-12 00:52:56,778 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@73129907]]
2021-03-12 00:52:56,778 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:52:56,778 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@73129907]
2021-03-12 00:52:56,779 [main:117] - GENERATED CALL = (Z(-1264150046).data).toByte().countLeadingZeroBits()
2021-03-12 00:52:56,779 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@454f2ac7]]
2021-03-12 00:52:56,779 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:52:56,779 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@454f2ac7]
2021-03-12 00:52:56,779 [main:117] - GENERATED CALL = (Z(-1264150046).data).toLong().countOneBits()
2021-03-12 00:52:56,779 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2446bd09]]
2021-03-12 00:52:56,779 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:52:56,895 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:52:56,898 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2446bd09]
2021-03-12 00:52:56,898 [main:117] - GENERATED CALL = (Z(-1264150046).data).compareTo(282698722).takeLowestOneBit()
2021-03-12 00:52:56,898 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4a154908]]
2021-03-12 00:52:56,898 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:52:57,015 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:52:57,018 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4a154908]
2021-03-12 00:52:57,018 [main:117] - GENERATED CALL = (Z(-1264150046).data).div(0.43768811352953507).toInt()
2021-03-12 00:52:57,018 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c8fe8cd]]
2021-03-12 00:52:57,018 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:52:57,018 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c8fe8cd]
2021-03-12 00:52:57,018 [main:117] - GENERATED CALL = (Z(-1264150046).data).compareTo(Z(-1264150046).data).countTrailingZeroBits()
2021-03-12 00:52:57,019 [main:113] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 00:52:57,019 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 00:52:57,019 [main:117] - GENERATED CALL = (Z(-1264150046).data).ushr(Z(1234).hashCode())
2021-03-12 00:52:57,019 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2c8cced4]]
2021-03-12 00:52:57,019 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:52:57,138 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:52:57,141 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2c8cced4]
2021-03-12 00:52:57,257 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:57,260 [main:117] - GENERATED CALL = (Z(-1264150046).data).div(0.3315838663270714).compareTo(70)
2021-03-12 00:52:57,260 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3402f41a]]
2021-03-12 00:52:57,260 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:52:57,375 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:52:57,378 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3402f41a]
2021-03-12 00:52:57,378 [main:117] - GENERATED CALL = (Z(-1264150046).data).div(-1360578873847098363).countTrailingZeroBits()
2021-03-12 00:52:57,378 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41244e49]]
2021-03-12 00:52:57,378 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:52:57,378 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41244e49]
2021-03-12 00:52:57,378 [main:117] - GENERATED CALL = (Z(-1264150046).data).toFloat().toRawBits()
2021-03-12 00:52:57,379 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4a618065]]
2021-03-12 00:52:57,379 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:52:57,494 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:52:57,497 [main:117] - GENERATED CALL = (Z(-1264150046).data).rangeTo(1).start
2021-03-12 00:52:57,497 [main:114] - replacement of prope5++ of type Int is (21840.toUShort()).toShort().unaryPlus()
2021-03-12 00:52:57,617 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:52:57,618 [main:66] - Compilation checking started
2021-03-12 00:52:58,172 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:52:58,175 [main:107] - replacing ({
        prope3 = Kla2().fu6()
    }, SuspendFunction0<Unit>)
2021-03-12 00:52:58,176 [main:50] - replacing {
        prope3 = Kla2().fu6()
    } SuspendFunction0<Unit>
2021-03-12 00:52:58,176 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 00:52:58,311 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 00:52:58,314 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:52:58,444 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:52:58,448 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:52:58,709 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:52:58,712 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:52:58,836 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:52:58,839 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:52:59,134 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 00:52:59,137 [main:95] - GENERATED = check(false)
2021-03-12 00:52:59,138 [main:95] - GENERATED = contract({ check(false)})
2021-03-12 00:52:59,138 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { contract({ check(false)})}
2021-03-12 00:52:59,138 [main:61] - GENERATED IS CALL =false
2021-03-12 00:52:59,885 [main:67] - randomType = Kla5<HashMap<Boolean, LinkedHashMap<Kla2, Kla5<Char?>>>>
2021-03-12 00:53:00,008 [main:302] - generating value of type = Kla5<HashMap<Boolean, LinkedHashMap<Kla2, Kla5<Char?>>>> false depth = 0
2021-03-12 00:53:00,011 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 00:53:00,552 [main:302] - generating value of type = Kla8 false depth = 2
2021-03-12 00:53:00,555 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:53:00,583 [main:106] - GETTING SuspendFunction0<Unit> from Z
2021-03-12 00:53:00,589 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 00:53:00,619 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 00:53:00,636 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 00:53:00,636 [main:114] - replacement of {
        prope3 = Kla2().fu6()
    } of type SuspendFunction0<Unit> is { contract({ check(false)})}
2021-03-12 00:53:00,753 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:53:00,754 [main:66] - Compilation checking started
2021-03-12 00:53:01,115 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 { contract({ check(false)})}
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:01,117 [main:107] - replacing (", got ", String)
2021-03-12 00:53:01,118 [main:50] - replacing ", got " String
2021-03-12 00:53:01,118 [main:54] - Getting value of type String
2021-03-12 00:53:01,242 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:53:01,245 [main:58] - GENERATED VALUE OF TYPE String = "hfvfu"
2021-03-12 00:53:01,245 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:01,255 [main:67] - randomType = Kla2
2021-03-12 00:53:01,381 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 00:53:01,383 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}
2021-03-12 00:53:01,530 [main:194] - Type params = []
2021-03-12 00:53:01,656 [main:149] - GENERATING call of type public final suspend fun fu6(): kotlin.String defined in Kla2[SimpleFunctionDescriptorImpl@410b7ebe]
2021-03-12 00:53:01,657 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f51bcf2]
2021-03-12 00:53:01,657 [main:78] - Generated call from random type = (Kla2()).fu6().lowercase()
2021-03-12 00:53:01,658 [main:106] - GETTING String from Z
2021-03-12 00:53:01,662 [main:113] - Case = [public final val data: kotlin.Int defined in Z[PropertyDescriptorImpl@c0c814c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:53:01,662 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:53:01,779 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:53:01,781 [main:117] - GENERATED CALL = (Z(1234)).data.toString(452341995)
2021-03-12 00:53:01,781 [main:114] - replacement of ", got " of type String is "hfvfu"
2021-03-12 00:53:01,897 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:53:01,898 [main:66] - Compilation checking started
2021-03-12 00:53:02,422 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:02,424 [main:107] - replacing ((Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine ", String)
2021-03-12 00:53:02,425 [main:50] - replacing (Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " String
2021-03-12 00:53:02,425 [main:54] - Getting value of type String
2021-03-12 00:53:02,543 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:53:02,546 [main:58] - GENERATED VALUE OF TYPE String = "yxftl"
2021-03-12 00:53:02,546 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:02,688 [main:67] - randomType = Kla2?
2021-03-12 00:53:02,805 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 00:53:02,807 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}
2021-03-12 00:53:02,924 [main:194] - Type params = []
2021-03-12 00:53:03,050 [main:149] - GENERATING call of type public final suspend fun fu6(): kotlin.String defined in Kla2[SimpleFunctionDescriptorImpl@fc7b78b]
2021-03-12 00:53:03,050 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@117991e0]
2021-03-12 00:53:03,050 [main:78] - Generated call from random type = (Kla2())?.fu6().trimEnd()
2021-03-12 00:53:03,051 [main:106] - GETTING String from Z
2021-03-12 00:53:03,056 [main:113] - Case = [public final val data: kotlin.Int defined in Z[PropertyDescriptorImpl@c0c814c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:53:03,056 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:53:03,056 [main:117] - GENERATED CALL = (Z(1234)).data.toString(Z(1234).hashCode())
2021-03-12 00:53:03,056 [main:114] - replacement of (Z(-1264150046).data).div(-1964597024588714051).toString(Z(-1264150046).data) + " has no state-machine " of type String is "yxftl"
2021-03-12 00:53:03,175 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:53:03,175 [main:66] - Compilation checking started
2021-03-12 00:53:03,699 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:03,701 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected ", String)
2021-03-12 00:53:03,701 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " String
2021-03-12 00:53:03,701 [main:54] - Getting value of type String
2021-03-12 00:53:03,819 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:53:03,822 [main:58] - GENERATED VALUE OF TYPE String = "gbzli"
2021-03-12 00:53:03,822 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:03,827 [main:67] - randomType = Int
2021-03-12 00:53:03,964 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:53:03,996 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4d45b947]
2021-03-12 00:53:03,996 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:53:04,114 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:53:04,117 [main:78] - Generated call from random type = (1885488419).compareTo(Z(-1264150046).data).toString(315408015)
2021-03-12 00:53:04,118 [main:106] - GETTING String from Int
2021-03-12 00:53:04,153 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:53:04,153 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@344c09f1]
2021-03-12 00:53:04,268 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:53:04,271 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:53:04,385 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:53:04,388 [main:117] - GENERATED CALL = (Z(1234).hashCode()).div(-3636762156149808280).toString(665536610)
2021-03-12 00:53:04,388 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]]
2021-03-12 00:53:04,388 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddecf15]
2021-03-12 00:53:04,388 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ee3b25e]
2021-03-12 00:53:04,389 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toByte().toString(Z(1234).hashCode())
2021-03-12 00:53:04,389 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]]
2021-03-12 00:53:04,389 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:53:04,389 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19637f06]
2021-03-12 00:53:04,505 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:53:04,508 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toShort().toString(-466331285)
2021-03-12 00:53:04,508 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:53:04,508 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@66d9a929]
2021-03-12 00:53:04,508 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:53:04,508 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toInt().toString(Z(-1264150046).data)
2021-03-12 00:53:04,509 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:53:04,509 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:53:04,509 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toString(Z(1234).hashCode())
2021-03-12 00:53:04,509 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]]
2021-03-12 00:53:04,509 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:53:04,509 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e96b7f6]
2021-03-12 00:53:04,509 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toLong().toString(Z(-1264150046).data)
2021-03-12 00:53:04,509 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]]
2021-03-12 00:53:04,509 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:53:04,509 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b4d145b]
2021-03-12 00:53:04,510 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().lowercase()
2021-03-12 00:53:04,510 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]]
2021-03-12 00:53:04,510 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:53:04,510 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a61c7a]
2021-03-12 00:53:04,510 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().plus(Z(0).toString())
2021-03-12 00:53:04,510 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]]
2021-03-12 00:53:04,510 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:53:04,510 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dfe32d6]
2021-03-12 00:53:04,510 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().titlecase()
2021-03-12 00:53:04,510 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]]
2021-03-12 00:53:04,510 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:53:04,511 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d7b5027]
2021-03-12 00:53:04,511 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().uppercase()
2021-03-12 00:53:04,511 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " of type String is (Z(1234).hashCode()).toChar().uppercase()
2021-03-12 00:53:04,625 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:53:04,625 [main:66] - Compilation checking started
2021-03-12 00:53:05,174 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:05,176 [main:107] - replacing (prope3, String)
2021-03-12 00:53:05,176 [main:50] - replacing prope3 String
2021-03-12 00:53:05,176 [main:54] - Getting value of type String
2021-03-12 00:53:05,292 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:53:05,295 [main:58] - GENERATED VALUE OF TYPE String = "lkbfl"
2021-03-12 00:53:05,295 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:05,447 [main:67] - randomType = Function1<Boolean, Kla2>
2021-03-12 00:53:05,448 [main:106] - GETTING String from Z
2021-03-12 00:53:05,453 [main:113] - Case = [public final val data: kotlin.Int defined in Z[PropertyDescriptorImpl@c0c814c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:53:05,453 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:53:05,453 [main:117] - GENERATED CALL = (Z(1234)).data.toString(Z(1234).hashCode())
2021-03-12 00:53:05,453 [main:114] - replacement of prope3 of type String is "lkbfl"
2021-03-12 00:53:05,569 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:53:05,569 [main:66] - Compilation checking started
2021-03-12 00:53:05,906 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        "lkbfl" = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:05,908 [main:107] - replacing (method, String)
2021-03-12 00:53:05,908 [main:50] - replacing method String
2021-03-12 00:53:05,908 [main:54] - Getting value of type String
2021-03-12 00:53:06,027 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:53:06,029 [main:58] - GENERATED VALUE OF TYPE String = "spghp"
2021-03-12 00:53:06,030 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:06,731 [main:67] - randomType = HashSet<Array<UInt?>>?
2021-03-12 00:53:06,848 [main:302] - generating value of type = HashSet<Array<UInt?>> false depth = 0
2021-03-12 00:53:06,971 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<Array<UInt?>> = TODO()
2021-03-12 00:53:06,975 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<Array<UInt?>> = TODO()
2021-03-12 00:53:07,235 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:53:07,237 [main:95] - GENERATED = HashSet<Array<UInt?>>(2006785448)
2021-03-12 00:53:07,356 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3162d486]
2021-03-12 00:53:07,356 [main:78] - Generated call from random type = (HashSet<Array<UInt?>>(2006785448))?.toString()
2021-03-12 00:53:07,357 [main:106] - GETTING String from Z
2021-03-12 00:53:07,361 [main:113] - Case = [public final val data: kotlin.Int defined in Z[PropertyDescriptorImpl@c0c814c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:53:07,361 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:53:07,361 [main:117] - GENERATED CALL = (Z(1234)).data.toString(Z(1234).hashCode())
2021-03-12 00:53:07,361 [main:114] - replacement of method of type String is "spghp"
2021-03-12 00:53:07,477 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:53:07,477 [main:66] - Compilation checking started
2021-03-12 00:53:07,998 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:08,000 [main:107] - replacing (prope0, SuspendFunction0<Unit>)
2021-03-12 00:53:08,000 [main:50] - replacing prope0 SuspendFunction0<Unit>
2021-03-12 00:53:08,000 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 00:53:08,118 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 00:53:08,120 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:53:08,241 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:53:08,244 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:53:08,500 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:53:08,500 [main:95] - GENERATED = println("ambji")
2021-03-12 00:53:08,500 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { println("ambji")}
2021-03-12 00:53:08,500 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:08,637 [main:67] - randomType = Kla8
2021-03-12 00:53:08,755 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 00:53:08,757 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:53:08,800 [main:106] - GETTING SuspendFunction0<Unit> from Z
2021-03-12 00:53:08,805 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 00:53:08,822 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 00:53:08,851 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 00:53:08,852 [main:114] - replacement of prope0 of type SuspendFunction0<Unit> is { println("ambji")}
2021-03-12 00:53:08,966 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:53:08,967 [main:66] - Compilation checking started
2021-03-12 00:53:09,327 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    { println("ambji")}.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:09,329 [main:107] - replacing (Kla2(), Kla2)
2021-03-12 00:53:09,329 [main:50] - replacing Kla2() Kla2
2021-03-12 00:53:09,329 [main:54] - Getting value of type Kla2
2021-03-12 00:53:09,449 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 00:53:09,452 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}
2021-03-12 00:53:09,572 [main:194] - Type params = []
2021-03-12 00:53:09,689 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-12 00:53:09,689 [main:61] - GENERATED IS CALL =true
2021-03-12 00:53:09,832 [main:67] - randomType = Kla2?
2021-03-12 00:53:09,953 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 00:53:09,956 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}
2021-03-12 00:53:10,077 [main:194] - Type params = []
2021-03-12 00:53:10,206 [main:106] - GETTING Kla2 from Z
2021-03-12 00:53:10,212 [main:106] - GETTING Kla2 from Int
2021-03-12 00:53:10,247 [main:106] - GETTING Kla2 from String
2021-03-12 00:53:10,264 [main:106] - GETTING Kla2 from Int
2021-03-12 00:53:10,264 [main:114] - replacement of Kla2() of type Kla2 is Kla2()
2021-03-12 00:53:10,379 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:53:10,381 [main:107] - replacing (prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})}), Unit?)
2021-03-12 00:53:10,381 [main:50] - replacing prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})}) Unit?
2021-03-12 00:53:10,381 [main:54] - Getting value of type Unit?
2021-03-12 00:53:10,497 [main:58] - GENERATED VALUE OF TYPE Unit? = null
2021-03-12 00:53:10,497 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:10,634 [main:67] - randomType = Char?
2021-03-12 00:53:10,749 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:53:10,775 [main:106] - GETTING Unit? from Z
2021-03-12 00:53:10,781 [main:106] - GETTING Unit? from String
2021-03-12 00:53:10,804 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d88e94e]]
2021-03-12 00:53:10,804 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58]
2021-03-12 00:53:10,924 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:53:10,927 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d88e94e]
2021-03-12 00:53:11,042 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 00:53:11,045 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:53:11,193 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:53:11,197 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:53:11,452 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:53:11,455 [main:95] - GENERATED = check(false)
2021-03-12 00:53:11,455 [main:117] - GENERATED CALL = (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
2021-03-12 00:53:11,455 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36803e1d]]
2021-03-12 00:53:11,455 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5e449a58]
2021-03-12 00:53:11,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:53:11,688 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:53:11,691 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36803e1d]
2021-03-12 00:53:11,806 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 00:53:11,808 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:53:11,930 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:53:11,934 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:53:12,330 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:53:12,333 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:53:12,335 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:53:12,459 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:53:12,463 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:53:12,715 [main:302] - generating value of type = Any false depth = 8
2021-03-12 00:53:12,716 [main:95] - GENERATED = println("bopsf")
2021-03-12 00:53:12,716 [main:95] - GENERATED = repeat(1747412162, {a: Int -> println("bopsf")})
2021-03-12 00:53:12,716 [main:117] - GENERATED CALL = (Z(0).toString())?.subSequence(-2106328087, -989643810).forEachIndexed({a: Int, b: Char -> repeat(1747412162, {a: Int -> println("bopsf")})})
2021-03-12 00:53:12,716 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d88e94e]]
2021-03-12 00:53:12,716 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d88e94e]
2021-03-12 00:53:12,831 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 00:53:12,834 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:53:12,955 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:53:12,958 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:53:13,217 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 00:53:13,220 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:53:13,342 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:53:13,346 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 00:53:13,640 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 00:53:13,643 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 00:53:13,765 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:53:13,769 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:53:14,022 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 00:53:14,024 [main:95] - GENERATED = require(false)
2021-03-12 00:53:14,025 [main:95] - GENERATED = contract({ require(false)})
2021-03-12 00:53:14,025 [main:95] - GENERATED = contract({ contract({ require(false)})})
2021-03-12 00:53:14,025 [main:117] - GENERATED CALL = (Z(0).toString())?.forEach({a: Char -> contract({ contract({ require(false)})})})
2021-03-12 00:53:14,025 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36803e1d]]
2021-03-12 00:53:14,025 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36803e1d]
2021-03-12 00:53:14,143 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 00:53:14,146 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:53:14,268 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:53:14,272 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:53:14,531 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:53:14,534 [main:95] - GENERATED = require(true)
2021-03-12 00:53:14,534 [main:117] - GENERATED CALL = (Z(0).toString())?.forEachIndexed({a: Int, b: Char -> require(true)})
2021-03-12 00:53:14,534 [main:114] - replacement of prope3.exceptionOrNull()?.let({a: Throwable -> require(true, { "efknw"})}) of type Unit? is (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
2021-03-12 00:53:14,651 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:53:14,651 [main:66] - Compilation checking started
2021-03-12 00:53:15,180 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:15,183 [main:107] - replacing ({
        "eyhpw"
    }, Any?)
2021-03-12 00:53:15,183 [main:50] - replacing {
        "eyhpw"
    } Any?
2021-03-12 00:53:15,183 [main:54] - Getting value of type Any?
2021-03-12 00:53:15,310 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:53:15,311 [main:58] - GENERATED VALUE OF TYPE Any? = "wdisf"
2021-03-12 00:53:15,311 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:15,589 [main:67] - randomType = Double?
2021-03-12 00:53:15,707 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:53:15,753 [main:106] - GETTING Any? from String
2021-03-12 00:53:15,770 [main:106] - GETTING Any? from Int
2021-03-12 00:53:15,800 [main:106] - GETTING Any? from Int
2021-03-12 00:53:15,801 [main:106] - GETTING Any? from Z
2021-03-12 00:53:15,805 [main:114] - replacement of {
        "eyhpw"
    } of type Any? is "wdisf"
2021-03-12 00:53:15,921 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 00:53:15,922 [main:66] - Compilation checking started
2021-03-12 00:53:15,927 [main:71] - Wrong syntax or breaks conditions
2021-03-12 00:53:15,927 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) "wdisf"
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:15,929 [main:107] - replacing (prope3, Any?)
2021-03-12 00:53:15,929 [main:50] - replacing prope3 Any?
2021-03-12 00:53:15,929 [main:54] - Getting value of type Any?
2021-03-12 00:53:16,073 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:53:16,073 [main:58] - GENERATED VALUE OF TYPE Any? = "znlwj"
2021-03-12 00:53:16,075 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:16,211 [main:67] - randomType = Double
2021-03-12 00:53:16,329 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:53:16,361 [main:106] - GETTING Any? from String
2021-03-12 00:53:16,380 [main:106] - GETTING Any? from Int
2021-03-12 00:53:16,419 [main:106] - GETTING Any? from Int
2021-03-12 00:53:16,420 [main:106] - GETTING Any? from Z
2021-03-12 00:53:16,426 [main:114] - replacement of prope3 of type Any? is "znlwj"
2021-03-12 00:53:16,547 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:53:16,548 [main:66] - Compilation checking started
2021-03-12 00:53:16,894 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this."znlwj" = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:16,896 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 00:53:16,896 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 00:53:16,896 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:53:17,021 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:53:17,023 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:53:17,156 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:53:17,159 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:53:17,554 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:53:17,557 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:53:17,559 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:53:17,559 [main:95] - GENERATED = check(true, { "qrxat"})
2021-03-12 00:53:17,559 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "qrxat"})}
2021-03-12 00:53:17,559 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:17,983 [main:67] - randomType = HashMap<Kla1?, Double>
2021-03-12 00:53:18,102 [main:302] - generating value of type = HashMap<Kla1?, Double> false depth = 0
2021-03-12 00:53:18,226 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla1?, Double>): HashMap<Kla1?, Double> = TODO()
2021-03-12 00:53:18,230 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla1?, Double>): HashMap<Kla1?, Double> = TODO()
2021-03-12 00:53:18,354 [main:302] - generating value of type = Pair<Kla1?, Double> false depth = 3
2021-03-12 00:53:18,508 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla1?, second: Double): Pair<Kla1?, Double> = TODO()
2021-03-12 00:53:18,512 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla1?, second: Double): Pair<Kla1?, Double> = TODO()
2021-03-12 00:53:18,634 [main:302] - generating value of type = Kla1 false depth = 6
2021-03-12 00:53:18,637 [main:112] - generating klass Kla1 text = interface Kla1 {
    suspend fun fu5(): Kla0?
}
2021-03-12 00:53:18,878 [main:302] - generating value of type = Kla2 false depth = 8
2021-03-12 00:53:18,881 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}
2021-03-12 00:53:19,000 [main:194] - Type params = []
2021-03-12 00:53:19,122 [main:302] - generating value of type = Double true depth = 6
2021-03-12 00:53:19,125 [main:95] - GENERATED = Pair<Kla1?, Double>(Kla2(), 0.9506298659083924)
2021-03-12 00:53:19,125 [main:95] - GENERATED = linkedMapOf<Kla1?, Double>(Pair<Kla1?, Double>(Kla2(), 0.9506298659083924))
2021-03-12 00:53:19,234 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 00:53:19,265 [main:106] - GETTING Function0<Unit> from Z
2021-03-12 00:53:19,270 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 00:53:19,271 [main:106] - GETTING Function0<Unit> from String
2021-03-12 00:53:19,287 [main:114] - replacement of prope7 of type Function0<Unit> is { check(true, { "qrxat"})}
2021-03-12 00:53:19,403 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:53:19,403 [main:66] - Compilation checking started
2021-03-12 00:53:19,748 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        { check(true, { "qrxat"})} = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:19,750 [main:107] - replacing (prope6, Boolean)
2021-03-12 00:53:19,751 [main:50] - replacing prope6 Boolean
2021-03-12 00:53:19,751 [main:54] - Getting value of type Boolean
2021-03-12 00:53:19,877 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:53:19,880 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:53:19,880 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:20,170 [main:67] - randomType = LinkedHashMap<Char, Kla1?>
2021-03-12 00:53:20,292 [main:302] - generating value of type = LinkedHashMap<Char, Kla1?> false depth = 0
2021-03-12 00:53:20,415 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Char, Kla1?>): LkedHashMap<Char, Kla1?> = TODO()
2021-03-12 00:53:20,419 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Char, Kla1?>): LkedHashMap<Char, Kla1?> = TODO()
2021-03-12 00:53:20,542 [main:302] - generating value of type = Pair<Char, Kla1?> false depth = 3
2021-03-12 00:53:20,664 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Char, second: Kla1?): Pair<Char, Kla1?> = TODO()
2021-03-12 00:53:20,667 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Char, second: Kla1?): Pair<Char, Kla1?> = TODO()
2021-03-12 00:53:20,791 [main:302] - generating value of type = Char true depth = 6
2021-03-12 00:53:20,794 [main:302] - generating value of type = Kla1 false depth = 6
2021-03-12 00:53:20,796 [main:112] - generating klass Kla1 text = interface Kla1 {
    suspend fun fu5(): Kla0?
}
2021-03-12 00:53:21,084 [main:302] - generating value of type = Kla2 false depth = 8
2021-03-12 00:53:21,087 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}
2021-03-12 00:53:21,211 [main:194] - Type params = []
2021-03-12 00:53:21,335 [main:95] - GENERATED = Pair<Char, Kla1?>('䨕', Kla2())
2021-03-12 00:53:21,335 [main:95] - GENERATED = linkedMapOf<Char, Kla1?>(Pair<Char, Kla1?>('䨕', Kla2()))
2021-03-12 00:53:21,447 [main:149] - GENERATING call of type public fun <T> kotlin.collections.MutableCollection<in T>.retainAll(elements: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@66bafca5]
2021-03-12 00:53:21,565 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-12 00:53:21,689 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<T> = TODO()
2021-03-12 00:53:21,693 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<T> = TODO()
2021-03-12 00:53:21,816 [main:95] - GENERATED = enumValues<T>()
2021-03-12 00:53:21,816 [main:78] - Generated call from random type = (linkedMapOf<Char, Kla1?>(Pair<Char, Kla1?>('䨕', Kla2()))).values.retainAll(enumValues<T>())
2021-03-12 00:53:21,817 [main:106] - GETTING Boolean from Int
2021-03-12 00:53:21,847 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13e40ebc]]
2021-03-12 00:53:21,847 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:53:21,968 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:53:21,968 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@13e40ebc]
2021-03-12 00:53:22,088 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:53:22,088 [main:117] - GENERATED CALL = (Z(1234).hashCode()).equals("ezgme").equals("wudbb")
2021-03-12 00:53:22,088 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@42602e0f], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27f8321c]]
2021-03-12 00:53:22,089 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@42602e0f]
2021-03-12 00:53:22,089 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27f8321c]
2021-03-12 00:53:22,089 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toDouble().isInfinite()
2021-03-12 00:53:22,089 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@4e2c8f1c]]
2021-03-12 00:53:22,089 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:53:22,207 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:53:22,210 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@4e2c8f1c]
2021-03-12 00:53:22,210 [main:117] - GENERATED CALL = (Z(1234).hashCode()).rangeTo(-63).isEmpty()
2021-03-12 00:53:22,210 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1e992336]]
2021-03-12 00:53:22,210 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:53:22,210 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1e992336]
2021-03-12 00:53:22,211 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toFloat().isNaN()
2021-03-12 00:53:22,211 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@32429a73]]
2021-03-12 00:53:22,211 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:53:22,328 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:53:22,331 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@32429a73]
2021-03-12 00:53:22,331 [main:117] - GENERATED CALL = (Z(1234).hashCode()).div(0.1837333197994938).isFinite()
2021-03-12 00:53:22,331 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@dd84bbb]]
2021-03-12 00:53:22,331 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:53:22,331 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@dd84bbb]
2021-03-12 00:53:22,447 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:53:22,448 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toLong().equals("nihvm")
2021-03-12 00:53:22,448 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1afb6721]]
2021-03-12 00:53:22,448 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:53:22,448 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1afb6721]
2021-03-12 00:53:22,448 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().isHighSurrogate()
2021-03-12 00:53:22,448 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@170a9ea7]]
2021-03-12 00:53:22,448 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:53:22,448 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@170a9ea7]
2021-03-12 00:53:22,564 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:53:22,564 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toFloat().equals("knzio")
2021-03-12 00:53:22,564 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@26b730f3]]
2021-03-12 00:53:22,564 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220f2885]
2021-03-12 00:53:22,564 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@26b730f3]
2021-03-12 00:53:22,565 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toFloat().isFinite()
2021-03-12 00:53:22,565 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@25260f67]]
2021-03-12 00:53:22,565 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 00:53:22,565 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@25260f67]
2021-03-12 00:53:22,681 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:53:22,681 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toShort().equals("uaoqy")
2021-03-12 00:53:22,681 [main:114] - replacement of prope6 of type Boolean is false
2021-03-12 00:53:22,797 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 00:53:22,797 [main:66] - Compilation checking started
2021-03-12 00:53:23,135 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data)) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        false = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:23,138 [main:107] - replacing (this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data), Boolean)
2021-03-12 00:53:23,138 [main:50] - replacing this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data) Boolean
2021-03-12 00:53:23,138 [main:54] - Getting value of type Boolean
2021-03-12 00:53:23,254 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:53:23,257 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:53:23,257 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:23,878 [main:67] - randomType = Function1<Kla2, HashMap<Byte, MutableMap<Kla4?, Byte>>>
2021-03-12 00:53:23,879 [main:106] - GETTING Boolean from Int
2021-03-12 00:53:23,915 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dd95fcb]]
2021-03-12 00:53:23,915 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:53:23,915 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dd95fcb]
2021-03-12 00:53:23,915 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().isLetterOrDigit()
2021-03-12 00:53:23,915 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]]
2021-03-12 00:53:23,915 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:53:24,031 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:53:24,031 [main:117] - GENERATED CALL = (Z(1234).hashCode()).equals("tniam")
2021-03-12 00:53:24,031 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14404749]]
2021-03-12 00:53:24,031 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@afab607]
2021-03-12 00:53:24,152 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:53:24,152 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14404749]
2021-03-12 00:53:24,152 [main:117] - GENERATED CALL = (Z(1234).hashCode()).equals("fyizw").not()
2021-03-12 00:53:24,152 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516a721]]
2021-03-12 00:53:24,152 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:53:24,152 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516a721]
2021-03-12 00:53:24,152 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().isUpperCase()
2021-03-12 00:53:24,153 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@32429a73]]
2021-03-12 00:53:24,153 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c4f0087]
2021-03-12 00:53:24,274 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:53:24,277 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@32429a73]
2021-03-12 00:53:24,277 [main:117] - GENERATED CALL = (Z(1234).hashCode()).div(0.4685355608345986).isFinite()
2021-03-12 00:53:24,277 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d5276eb]]
2021-03-12 00:53:24,277 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:53:24,277 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d5276eb]
2021-03-12 00:53:24,277 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().isISOControl()
2021-03-12 00:53:24,277 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@dd84bbb]]
2021-03-12 00:53:24,278 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4dc9b8c]
2021-03-12 00:53:24,278 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@dd84bbb]
2021-03-12 00:53:24,400 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:53:24,400 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toLong().equals("lrnrd")
2021-03-12 00:53:24,400 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@694a6499]]
2021-03-12 00:53:24,400 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a15d338]
2021-03-12 00:53:24,516 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:53:24,519 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@694a6499]
2021-03-12 00:53:24,634 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:53:24,635 [main:117] - GENERATED CALL = (Z(1234).hashCode()).rangeTo(19).equals("susxy")
2021-03-12 00:53:24,635 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1afb6721]]
2021-03-12 00:53:24,635 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:53:24,635 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1afb6721]
2021-03-12 00:53:24,635 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().isHighSurrogate()
2021-03-12 00:53:24,635 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387b7c4b]]
2021-03-12 00:53:24,635 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70691683]
2021-03-12 00:53:24,635 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387b7c4b]
2021-03-12 00:53:24,635 [main:117] - GENERATED CALL = (Z(1234).hashCode()).toChar().isDefined()
2021-03-12 00:53:24,635 [main:114] - replacement of this == (Z(0).toString()).compareTo("vprle").coerceIn(1160580550, Z(-1264150046).data) of type Boolean is (Z(1234).hashCode()).toChar().isLetterOrDigit()
2021-03-12 00:53:24,750 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:53:24,751 [main:66] - Compilation checking started
2021-03-12 00:53:25,268 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if ((Z(1234).hashCode()).toChar().isLetterOrDigit()) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:25,270 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 00:53:25,270 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 00:53:25,270 [main:54] - Getting value of type Ty0
2021-03-12 00:53:25,384 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 00:53:25,390 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 00:53:25,400 [main:67] - randomType = Kla1
2021-03-12 00:53:25,401 [main:106] - GETTING Ty0 from Int
2021-03-12 00:53:25,435 [main:106] - GETTING Ty0 from String
2021-03-12 00:53:25,456 [main:106] - GETTING Ty0 from Int
2021-03-12 00:53:25,457 [main:106] - GETTING Ty0 from Z
2021-03-12 00:53:25,462 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 00:53:25,462 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 00:53:25,462 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 00:53:25,462 [main:54] - Getting value of type Result<Ty0>
2021-03-12 00:53:25,575 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 00:53:25,695 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:53:25,699 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:53:25,984 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:53:25,984 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 00:53:25,995 [main:67] - randomType = Kla6
2021-03-12 00:53:26,112 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 00:53:26,114 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 00:53:26,121 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 00:53:26,152 [main:106] - GETTING Result<Ty0> from String
2021-03-12 00:53:26,169 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 00:53:26,171 [main:106] - GETTING Result<Ty0> from Z
2021-03-12 00:53:26,176 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 00:53:26,176 [main:107] - replacing (suspendCoroutine {a: Continuation<Ty0> -> println()}, Ty0)
2021-03-12 00:53:26,176 [main:50] - replacing suspendCoroutine {a: Continuation<Ty0> -> println()} Ty0
2021-03-12 00:53:26,176 [main:54] - Getting value of type Ty0
2021-03-12 00:53:26,292 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 00:53:26,297 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 00:53:26,691 [main:67] - randomType = Sequence<UInt?>
2021-03-12 00:53:26,692 [main:106] - GETTING Ty0 from Z
2021-03-12 00:53:26,697 [main:106] - GETTING Ty0 from Int
2021-03-12 00:53:26,726 [main:106] - GETTING Ty0 from String
2021-03-12 00:53:26,743 [main:106] - GETTING Ty0 from Int
2021-03-12 00:53:26,743 [main:111] - Cant find and generate replacement for suspendCoroutine {a: Continuation<Ty0> -> println()} type Ty0
2021-03-12 00:53:26,743 [main:107] - replacing (fu6(), String)
2021-03-12 00:53:26,743 [main:50] - replacing fu6() String
2021-03-12 00:53:26,743 [main:54] - Getting value of type String
2021-03-12 00:53:26,858 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:53:26,861 [main:58] - GENERATED VALUE OF TYPE String = "usylw"
2021-03-12 00:53:26,861 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:27,405 [main:67] - randomType = Kla5<Kla8?>?
2021-03-12 00:53:27,520 [main:302] - generating value of type = Kla5<Kla8?> false depth = 0
2021-03-12 00:53:27,522 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 00:53:27,910 [main:302] - generating value of type = Kla8 false depth = 2
2021-03-12 00:53:27,913 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:53:27,935 [main:106] - GETTING String from Z
2021-03-12 00:53:27,941 [main:113] - Case = [public final val data: kotlin.Int defined in Z[PropertyDescriptorImpl@c0c814c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]]
2021-03-12 00:53:27,941 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23f9407]
2021-03-12 00:53:27,941 [main:117] - GENERATED CALL = (Z(1234)).data.toString(Z(1234).hashCode())
2021-03-12 00:53:27,942 [main:114] - replacement of fu6() of type String is "usylw"
2021-03-12 00:53:28,062 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:53:28,063 [main:66] - Compilation checking started
2021-03-12 00:53:28,412 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if ((Z(1234).hashCode()).toChar().isLetterOrDigit()) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2()."usylw"
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:28,414 [main:107] - replacing (Kla3, Kla9)
2021-03-12 00:53:28,414 [main:50] - replacing Kla3 Kla9
2021-03-12 00:53:28,414 [main:54] - Getting value of type Kla9
2021-03-12 00:53:28,556 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 00:53:28,558 [main:112] - generating klass Kla9 text = companion object Kla9 : Kla3()
2021-03-12 00:53:28,558 [main:58] - GENERATED VALUE OF TYPE Kla9 = 
2021-03-12 00:53:28,568 [main:67] - randomType = Kla6
2021-03-12 00:53:28,682 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 00:53:28,685 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 00:53:28,691 [main:106] - GETTING Kla9 from Z
2021-03-12 00:53:28,695 [main:106] - GETTING Kla9 from String
2021-03-12 00:53:28,712 [main:106] - GETTING Kla9 from Int
2021-03-12 00:53:28,741 [main:106] - GETTING Kla9 from Int
2021-03-12 00:53:28,741 [main:111] - Cant find and generate replacement for Kla3 type Kla9
2021-03-12 00:53:28,741 [main:107] - replacing (x, Function1<Ty0, Unit>)
2021-03-12 00:53:28,742 [main:50] - replacing x Function1<Ty0, Unit>
2021-03-12 00:53:28,742 [main:54] - Getting value of type Function1<Ty0, Unit>
2021-03-12 00:53:28,857 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-12 00:53:28,859 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:53:28,865 [main:58] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> println()}
2021-03-12 00:53:28,866 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:28,871 [main:67] - randomType = UShort
2021-03-12 00:53:28,985 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:53:29,015 [main:106] - GETTING Function1<Ty0, Unit> from String
2021-03-12 00:53:29,032 [main:106] - GETTING Function1<Ty0, Unit> from Int
2021-03-12 00:53:29,064 [main:106] - GETTING Function1<Ty0, Unit> from Int
2021-03-12 00:53:29,065 [main:106] - GETTING Function1<Ty0, Unit> from Z
2021-03-12 00:53:29,070 [main:114] - replacement of x of type Function1<Ty0, Unit> is {a: Ty0 -> println()}
2021-03-12 00:53:29,185 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:53:29,186 [main:66] - Compilation checking started
2021-03-12 00:53:29,739 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if ((Z(1234).hashCode()).toChar().isLetterOrDigit()) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> println()}(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:29,742 [main:107] - replacing ({
        fu10(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 00:53:29,742 [main:50] - replacing {
        fu10(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 00:53:29,742 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 00:53:29,884 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 00:53:29,887 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:53:30,026 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:53:30,030 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:53:30,452 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:53:30,455 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:53:30,457 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:53:30,463 [main:95] - GENERATED = repeat(-1794862531, {a: Int -> println()})
2021-03-12 00:53:30,463 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> repeat(-1794862531, {a: Int -> println()})}
2021-03-12 00:53:30,463 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:30,473 [main:67] - randomType = Kla2
2021-03-12 00:53:30,589 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 00:53:30,591 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}
2021-03-12 00:53:30,709 [main:194] - Type params = []
2021-03-12 00:53:30,837 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 00:53:30,854 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Z
2021-03-12 00:53:30,860 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 00:53:30,890 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 00:53:30,890 [main:114] - replacement of {
        fu10(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> repeat(-1794862531, {a: Int -> println()})}
2021-03-12 00:53:31,008 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:53:31,009 [main:66] - Compilation checking started
2021-03-12 00:53:31,581 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if ((Z(1234).hashCode()).toChar().isLetterOrDigit()) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> println()}(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1794862531, {a: Int -> println()})}

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:31,584 [main:107] - replacing (resume(Kla0(-1040721220)), Unit?)
2021-03-12 00:53:31,584 [main:50] - replacing resume(Kla0(-1040721220)) Unit?
2021-03-12 00:53:31,584 [main:54] - Getting value of type Unit?
2021-03-12 00:53:31,713 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 00:53:31,836 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:53:31,840 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:53:32,232 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 00:53:32,235 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 00:53:32,237 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:53:32,238 [main:95] - GENERATED = require(true, { "fcsng"})
2021-03-12 00:53:32,238 [main:58] - GENERATED VALUE OF TYPE Unit? = require(true, { "fcsng"})
2021-03-12 00:53:32,238 [main:61] - GENERATED IS CALL =true
2021-03-12 00:53:32,248 [main:67] - randomType = Kla6
2021-03-12 00:53:32,368 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 00:53:32,371 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1794862531, {a: Int -> println()})}

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 00:53:32,379 [main:149] - GENERATING call of type public final fun fu11(method: kotlin.String): kotlin.Unit defined in Kla6[SimpleFunctionDescriptorImpl@5b4f58ec]
2021-03-12 00:53:32,379 [main:78] - Generated call from random type = (Kla6()).fu11(Z(0).toString())
2021-03-12 00:53:32,379 [main:114] - replacement of resume(Kla0(-1040721220)) of type Unit? is (Kla6()).fu11(Z(0).toString())
2021-03-12 00:53:32,498 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:53:32,498 [main:66] - Compilation checking started
2021-03-12 00:53:32,841 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if ((Z(1234).hashCode()).toChar().isLetterOrDigit()) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.(Kla6()).fu11(Z(0).toString())
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> println()}(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1794862531, {a: Int -> println()})}

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:32,843 [main:107] - replacing (prope0, SuspendFunction0<Unit>)
2021-03-12 00:53:32,843 [main:50] - replacing prope0 SuspendFunction0<Unit>
2021-03-12 00:53:32,843 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 00:53:32,960 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 00:53:32,962 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:53:33,089 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:53:33,092 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:53:33,487 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:53:33,489 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:53:33,492 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:53:33,492 [main:95] - GENERATED = check(false, { "boyzb"})
2021-03-12 00:53:33,492 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(false, { "boyzb"})}
2021-03-12 00:53:33,492 [main:61] - GENERATED IS CALL =false
2021-03-12 00:53:33,498 [main:67] - randomType = String
2021-03-12 00:53:33,616 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:53:33,648 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 00:53:33,702 [main:106] - GETTING SuspendFunction0<Unit> from Z
2021-03-12 00:53:33,711 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 00:53:33,712 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 00:53:33,743 [main:114] - replacement of prope0 of type SuspendFunction0<Unit> is { check(false, { "boyzb"})}
2021-03-12 00:53:33,889 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:53:33,890 [main:66] - Compilation checking started
2021-03-12 00:53:34,261 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    { check(false, { "boyzb"})}.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if ((Z(1234).hashCode()).toChar().isLetterOrDigit()) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> println()}(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1794862531, {a: Int -> println()})}

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:34,263 [main:107] - replacing (this, Kla2)
2021-03-12 00:53:34,263 [main:50] - replacing this Kla2
2021-03-12 00:53:34,263 [main:54] - Getting value of type Kla2
2021-03-12 00:53:34,378 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 00:53:34,381 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = this
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}
2021-03-12 00:53:34,496 [main:194] - Type params = []
2021-03-12 00:53:34,610 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-12 00:53:34,610 [main:61] - GENERATED IS CALL =true
2021-03-12 00:53:34,616 [main:67] - randomType = Byte
2021-03-12 00:53:34,732 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:53:34,771 [main:106] - GETTING Kla2 from Int
2021-03-12 00:53:34,801 [main:106] - GETTING Kla2 from Z
2021-03-12 00:53:34,805 [main:106] - GETTING Kla2 from Int
2021-03-12 00:53:34,806 [main:106] - GETTING Kla2 from String
2021-03-12 00:53:34,823 [main:114] - replacement of this of type Kla2 is Kla2()
2021-03-12 00:53:34,940 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:53:34,940 [main:66] - Compilation checking started
2021-03-12 00:53:35,444 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class Z(val data: Int)

fun box(): String {
    if (Z(0) != Z(0)) throw AssertionError()
    if (Z(0) == Z(1)) throw AssertionError()

    if (Z(1234).hashCode() != 1234) throw AssertionError(Z(1234).hashCode().toString())

    if (Z(0).toString() != "Z(data=0)") throw AssertionError(Z(0).toString())

    return "OK"
}

fun fu0(prope0: suspend () -> Unit) {
    prope0.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Int)

var prope0: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {a: Continuation<Ty0> -> println()}

interface Kla1 {
    suspend fun fu5(): Kla0?
}

fun Int.fu2() =
    if ((Z(1234).hashCode()).toChar().isLetterOrDigit()) "OK" else "!!! $this"

class Kla2() : Kla1 {
    override suspend fun fu5(): Kla0 = Kla0(1090630984)

    suspend fun fu6(): String {
        val prope8: Kla1 = Kla2()
        return (Z(-1264150046).data).toByte().toString(Z(1234).hashCode())
    }

    suspend fun fu7(): String {
        return (Z(1234).hashCode()).div(-7889485176192894222).toString(-1321043085)
    }
}

fun box724(): String {
    var prope3 = "FAIL"
    fu0 {
        prope3 = Kla2().fu6()
    }
    prope0?.resume(Kla0(-1040721220))
    if (prope3 != "OK") return "FAIL 1 $prope3"

    prope3 = "FAIL2"
    fu0 {
        prope3 = Kla2().fu7()
    }
    prope0?.resume(Kla0(329409627))
    if ((Z(1234).hashCode()).rangeTo(44).isEmpty()) return "FAIL 2 $prope3"

    return prope3
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> println()}(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (Z(0).toString())?.subSequence(Z(1234).hashCode(), -797672228).forEach({a: Char -> check(false)})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope3: Result<Any?>) {
        "eyhpw"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(ClassCastException())
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(-1794862531, {a: Int -> println()})}

    fun fu10(prope0: Continuation<*>) {
        if (prope0 !is CoroutineStackFrame) error("Continuation " + prope0 + (Z(0).toString()).removeSuffix("scmlc"))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope0
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith((Z(-1264150046).data).toString(1479165452)) == true }?.let { error((Z(-1264150046).data).toByte().toString(Z(-1264150046).data)) }
    }

    fun fu12(method: String) {
        prope4.find { it?.methodName?.startsWith("spghp") == true } ?: error("yxftl" +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu13() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu14() = suspendCoroutine<Unit> { prope0 ->
        (21840.toUShort()).toShort().unaryPlus()
        prope7 = { prope0.resume(Unit) }
    }

    fun fu15(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (Z(-1264150046).data).toShort().rangeTo(-128)) {
            if ((Z(1234).hashCode()).equals("ktpyc").not()) error("gillx" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((Z(1234).hashCode()).toChar().uppercase() + numberOfSuspensions + "hfvfu" + prope5)
        if (prope6) error("akjrw")
        prope7()
        if (checkFinished && (Z(-1264150046).data).toChar().isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:53:35,447 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 00:53:35,448 [main:50] - replacing getOrThrow() Ty0
2021-03-12 00:53:35,448 [main:54] - Getting value of type Ty0
