2021-03-12 06:38:05,624 [main:66] - Compilation checking started
2021-03-12 06:38:07,307 [main:112] - generating klass Base text = abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}
2021-03-12 06:38:08,038 [main:302] - generating value of type = Child false depth = 1
2021-03-12 06:38:08,039 [main:112] - generating klass Child text = class Child : Base()
2021-03-12 06:38:08,040 [main:112] - generating klass Child text = class Child : Base()
2021-03-12 06:38:08,040 [main:112] - generating klass Inner text = inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
2021-03-12 06:38:08,385 [main:45] - Trying to change 6 nodes
2021-03-12 06:38:08,389 [main:53] - replacing (Child().Inner().o(), String)
2021-03-12 06:38:08,389 [main:50] - replacing Child().Inner().o() String
2021-03-12 06:38:08,390 [main:54] - Getting value of type String
2021-03-12 06:38:08,513 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:38:08,516 [main:58] - GENERATED VALUE OF TYPE String = "ccovq"
2021-03-12 06:38:08,517 [main:61] - GENERATED IS CALL =false
2021-03-12 06:38:08,656 [main:67] - randomType = Double
2021-03-12 06:38:08,786 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:38:08,920 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2904bb45]
2021-03-12 06:38:09,018 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:38:09,019 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e0cb373]
2021-03-12 06:38:09,150 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:09,152 [main:78] - Generated call from random type = (0.8227757285982014).compareTo(-51).toString(1781458901)
2021-03-12 06:38:09,153 [main:106] - GETTING String from String
2021-03-12 06:38:09,203 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36e4f1aa]]
2021-03-12 06:38:09,204 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:38:09,352 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:09,469 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:09,471 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36e4f1aa]
2021-03-12 06:38:09,576 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:38:09,739 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:38:09,744 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:38:10,109 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:38:10,109 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 06:38:10,226 [main:43] - GENERATING CALL OF fun <T> setOf(): Set<RegexOption> = TODO()
2021-03-12 06:38:10,229 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Set<RegexOption> = TODO()
2021-03-12 06:38:10,344 [main:95] - GENERATED = setOf<RegexOption>()
2021-03-12 06:38:10,344 [main:95] - GENERATED = Regex("mfntk", setOf<RegexOption>())
2021-03-12 06:38:10,346 [main:117] - GENERATED CALL = (result).subSequence(1570018509, 209374607).replaceFirst(Regex("mfntk", setOf<RegexOption>()), result)
2021-03-12 06:38:10,346 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@438e091e]]
2021-03-12 06:38:10,346 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@438e091e]
2021-03-12 06:38:10,477 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:38:10,480 [main:117] - GENERATED CALL = (result).replaceBeforeLast('䴣', result, result)
2021-03-12 06:38:10,480 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]]
2021-03-12 06:38:10,480 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]
2021-03-12 06:38:10,601 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:38:10,696 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:38:10,698 [main:117] - GENERATED CALL = (result).substringBefore('ၪ', "bhqio")
2021-03-12 06:38:10,698 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6423e6d6]]
2021-03-12 06:38:10,698 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6423e6d6]
2021-03-12 06:38:10,788 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:10,910 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:11,008 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:38:11,115 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:38:11,118 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:38:11,362 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:38:11,363 [main:95] - GENERATED = StringBuilder(-675337141)
2021-03-12 06:38:11,364 [main:117] - GENERATED CALL = (result).replaceRange(1263853496, 407571305, StringBuilder(-675337141))
2021-03-12 06:38:11,364 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ca25e]]
2021-03-12 06:38:11,364 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ca25e]
2021-03-12 06:38:11,454 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:11,456 [main:117] - GENERATED CALL = (result).substring(-487330411)
2021-03-12 06:38:11,456 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1788e6]]
2021-03-12 06:38:11,456 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:38:11,548 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:11,549 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1788e6]
2021-03-12 06:38:11,550 [main:117] - GENERATED CALL = (result).get(-53047420).titlecase()
2021-03-12 06:38:11,550 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d137b6c]]
2021-03-12 06:38:11,551 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d137b6c]
2021-03-12 06:38:11,644 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:11,747 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:38:11,748 [main:117] - GENERATED CALL = (result).padEnd(-1358261931, '겚')
2021-03-12 06:38:11,749 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1266f8f1]]
2021-03-12 06:38:11,749 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:38:11,846 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:11,848 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1266f8f1]
2021-03-12 06:38:11,849 [main:117] - GENERATED CALL = (result).get(-371402900).lowercase()
2021-03-12 06:38:11,850 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e9f07d]]
2021-03-12 06:38:11,850 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e9f07d]
2021-03-12 06:38:11,948 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:38:12,039 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:38:12,042 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:38:12,258 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:38:12,259 [main:95] - GENERATED = StringBuilder(-2011752638)
2021-03-12 06:38:12,345 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:38:12,346 [main:117] - GENERATED CALL = (result).commonSuffixWith(StringBuilder(-2011752638), true)
2021-03-12 06:38:12,346 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1fc0a4]]
2021-03-12 06:38:12,347 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1fc0a4]
2021-03-12 06:38:12,347 [main:117] - GENERATED CALL = (result).trimStart()
2021-03-12 06:38:12,348 [main:61] - replacement of Child().Inner().o() of type String is "ccovq"
2021-03-12 06:38:12,437 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:38:12,438 [main:66] - Compilation checking started
2021-03-12 06:38:12,855 [main:53] - Result = true
Text:
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += "ccovq"

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}


2021-03-12 06:38:12,856 [main:53] - replacing (Inner().k(), String)
2021-03-12 06:38:12,856 [main:50] - replacing Inner().k() String
2021-03-12 06:38:12,856 [main:54] - Getting value of type String
2021-03-12 06:38:12,945 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:38:12,945 [main:58] - GENERATED VALUE OF TYPE String = "qffts"
2021-03-12 06:38:12,946 [main:61] - GENERATED IS CALL =false
2021-03-12 06:38:13,150 [main:67] - randomType = Sequence<Long>
2021-03-12 06:38:13,150 [main:106] - GETTING String from String
2021-03-12 06:38:13,189 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7da5b21d]]
2021-03-12 06:38:13,189 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7da5b21d]
2021-03-12 06:38:13,190 [main:117] - GENERATED CALL = (result).prependIndent(result)
2021-03-12 06:38:13,193 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e9680e2]]
2021-03-12 06:38:13,193 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:38:13,287 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:13,421 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:13,422 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e9680e2]
2021-03-12 06:38:13,505 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:38:13,590 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:38:13,592 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:38:13,879 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:38:13,879 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 06:38:13,885 [main:95] - GENERATED = Regex("uzfkf", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 06:38:13,971 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 06:38:13,971 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 06:38:13,978 [main:117] - GENERATED CALL = (result).subSequence(-3105518, 214574154).replace(Regex("uzfkf", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> StringBuilder()})
2021-03-12 06:38:13,979 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bdb01fe]]
2021-03-12 06:38:13,979 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:38:14,060 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:14,061 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bdb01fe]
2021-03-12 06:38:14,062 [main:117] - GENERATED CALL = (result).get(2090632729).plus(result)
2021-03-12 06:38:14,063 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1055adc6]]
2021-03-12 06:38:14,063 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1055adc6]
2021-03-12 06:38:14,063 [main:117] - GENERATED CALL = (result).trim()
2021-03-12 06:38:14,063 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ca23e4]]
2021-03-12 06:38:14,064 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ca23e4]
2021-03-12 06:38:14,143 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:14,144 [main:117] - GENERATED CALL = (result).drop(-2132898869)
2021-03-12 06:38:14,145 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51404f69]]
2021-03-12 06:38:14,145 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51404f69]
2021-03-12 06:38:14,228 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:38:14,229 [main:117] - GENERATED CALL = (result).substringAfter('Õ', result)
2021-03-12 06:38:14,229 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f66b93e]]
2021-03-12 06:38:14,230 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f66b93e]
2021-03-12 06:38:14,230 [main:117] - GENERATED CALL = (result).concat(result)
2021-03-12 06:38:14,231 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e2394]]
2021-03-12 06:38:14,231 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66e2394]
2021-03-12 06:38:14,353 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:38:14,358 [main:117] - GENERATED CALL = (result).removeSurrounding("jrkzc")
2021-03-12 06:38:14,358 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e313596]]
2021-03-12 06:38:14,358 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e313596]
2021-03-12 06:38:14,443 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:38:14,443 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:38:14,445 [main:117] - GENERATED CALL = (result).takeLastWhile({a: Char -> false})
2021-03-12 06:38:14,445 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@438e091e]]
2021-03-12 06:38:14,445 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@438e091e]
2021-03-12 06:38:14,528 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:38:14,607 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:38:14,719 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:38:14,721 [main:117] - GENERATED CALL = (result).replaceBeforeLast('쩦', "itchr", "fhgsl")
2021-03-12 06:38:14,721 [main:61] - replacement of Inner().k() of type String is (result).prependIndent(result)
2021-03-12 06:38:14,824 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:38:14,825 [main:66] - Compilation checking started
2021-03-12 06:38:15,179 [main:53] - Result = true
Text:
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += "ccovq"

    fun Child.f() {
        result += (result).prependIndent(result)
    }
    Child().f()

    return result
}


2021-03-12 06:38:15,180 [main:53] - replacing (Inner().k(), String)
2021-03-12 06:38:15,180 [main:50] - replacing Inner().k() String
2021-03-12 06:38:15,180 [main:54] - Getting value of type String
2021-03-12 06:38:15,265 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:38:15,266 [main:58] - GENERATED VALUE OF TYPE String = "nswtk"
2021-03-12 06:38:15,266 [main:61] - GENERATED IS CALL =false
2021-03-12 06:38:15,363 [main:67] - randomType = Char
2021-03-12 06:38:15,458 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:38:15,494 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ae93fb7]
2021-03-12 06:38:15,496 [main:78] - Generated call from random type = ('᎓').uppercase()
2021-03-12 06:38:15,496 [main:61] - replacement of Inner().k() of type String is "nswtk"
2021-03-12 06:38:15,578 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:38:15,579 [main:53] - replacing (result, String)
2021-03-12 06:38:15,580 [main:50] - replacing result String
2021-03-12 06:38:15,580 [main:54] - Getting value of type String
2021-03-12 06:38:15,664 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:38:15,665 [main:58] - GENERATED VALUE OF TYPE String = "dveyc"
2021-03-12 06:38:15,665 [main:61] - GENERATED IS CALL =false
2021-03-12 06:38:15,667 [main:67] - randomType = Child
2021-03-12 06:38:15,759 [main:302] - generating value of type = Child false depth = 0
2021-03-12 06:38:15,759 [main:112] - generating klass Child text = class Child : Base()
2021-03-12 06:38:15,770 [main:106] - GETTING String from String
2021-03-12 06:38:15,803 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38ba777f]]
2021-03-12 06:38:15,803 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:38:15,887 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:15,967 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:15,968 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38ba777f]
2021-03-12 06:38:16,078 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:38:16,178 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:38:16,179 [main:117] - GENERATED CALL = (result).subSequence(-142017427, -2076205649).commonPrefixWith("qsukc", true)
2021-03-12 06:38:16,179 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ca23e4]]
2021-03-12 06:38:16,179 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ca23e4]
2021-03-12 06:38:16,259 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:16,261 [main:117] - GENERATED CALL = (result).drop(587805765)
2021-03-12 06:38:16,261 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ea953fe]]
2021-03-12 06:38:16,261 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ea953fe]
2021-03-12 06:38:16,340 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:38:16,341 [main:117] - GENERATED CALL = (result).substringAfterLast('㸓', result)
2021-03-12 06:38:16,341 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59058a0d]]
2021-03-12 06:38:16,342 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59058a0d]
2021-03-12 06:38:16,342 [main:117] - GENERATED CALL = (result).lowercase()
2021-03-12 06:38:16,343 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e313596]]
2021-03-12 06:38:16,343 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e313596]
2021-03-12 06:38:16,426 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:38:16,426 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:38:16,428 [main:117] - GENERATED CALL = (result).takeLastWhile({a: Char -> false})
2021-03-12 06:38:16,428 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c8534ce]]
2021-03-12 06:38:16,428 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c8534ce]
2021-03-12 06:38:16,521 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:38:16,526 [main:117] - GENERATED CALL = (result).removeSuffix("afofe")
2021-03-12 06:38:16,526 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e9f07d]]
2021-03-12 06:38:16,526 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:38:16,616 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:16,708 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:16,709 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e9f07d]
2021-03-12 06:38:16,793 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:38:16,885 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:38:16,887 [main:117] - GENERATED CALL = (result).subSequence(965472484, -230201721).commonSuffixWith("zteuq", false)
2021-03-12 06:38:16,887 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1788e6]]
2021-03-12 06:38:16,888 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:38:16,990 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:16,990 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1788e6]
2021-03-12 06:38:16,991 [main:117] - GENERATED CALL = (result).get(-2129304276).titlecase()
2021-03-12 06:38:16,991 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41c5716]]
2021-03-12 06:38:16,991 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41c5716]
2021-03-12 06:38:16,992 [main:117] - GENERATED CALL = (result).trimIndent()
2021-03-12 06:38:16,992 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d2b9075]]
2021-03-12 06:38:16,992 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d2b9075]
2021-03-12 06:38:16,993 [main:117] - GENERATED CALL = (result).replaceIndent(result)
2021-03-12 06:38:16,993 [main:61] - replacement of result of type String is (result).lowercase()
2021-03-12 06:38:17,079 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:38:17,079 [main:66] - Compilation checking started
2021-03-12 06:38:17,341 [main:49] - Result = false
Text:
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    (result).lowercase() += "ccovq"

    fun Child.f() {
        result += (result).prependIndent(result)
    }
    Child().f()

    return result
}


2021-03-12 06:38:17,342 [main:53] - replacing (Child().Inner().o(), String)
2021-03-12 06:38:17,342 [main:50] - replacing Child().Inner().o() String
2021-03-12 06:38:17,342 [main:54] - Getting value of type String
2021-03-12 06:38:17,444 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:38:17,444 [main:58] - GENERATED VALUE OF TYPE String = "amztl"
2021-03-12 06:38:17,444 [main:61] - GENERATED IS CALL =false
2021-03-12 06:38:18,454 [main:67] - randomType = MutableMap<Base?, List<Triple<ULong, Function2<Child, Short, UShort>, Child>?>?>
2021-03-12 06:38:18,454 [main:61] - replacement of Child().Inner().o() of type String is "amztl"
2021-03-12 06:38:18,542 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:38:18,666 [main:41] - AFTER TRY 0 res = //KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}
2021-03-12 06:38:18,863 [main:112] - generating klass Base text = abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}
2021-03-12 06:38:19,032 [main:302] - generating value of type = Child false depth = 1
2021-03-12 06:38:19,032 [main:112] - generating klass Child text = class Child : Base()
2021-03-12 06:38:19,033 [main:112] - generating klass Child text = class Child : Base()
2021-03-12 06:38:19,033 [main:112] - generating klass Inner text = inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
2021-03-12 06:38:19,212 [main:43] - Try №0
2021-03-12 06:38:33,835 [main:48] - Already checked
2021-03-12 06:38:38,002 [main:69] - Trying to insert override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
2021-03-12 06:38:38,212 [main:66] - Compilation checking started
2021-03-12 06:38:39,448 [main:103] - Trying to change 170 nodes
2021-03-12 06:38:39,448 [main:107] - replacing (prope8, Int)
2021-03-12 06:38:39,450 [main:50] - replacing prope8 Int
2021-03-12 06:38:39,450 [main:54] - Getting value of type Int
2021-03-12 06:38:39,606 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:39,608 [main:58] - GENERATED VALUE OF TYPE Int = -1771107647
2021-03-12 06:38:39,608 [main:61] - GENERATED IS CALL =false
2021-03-12 06:38:39,965 [main:67] - randomType = ULong?
2021-03-12 06:38:40,118 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 06:38:40,188 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@46dc2f6e]
2021-03-12 06:38:40,189 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4f1f313f]
2021-03-12 06:38:40,189 [main:78] - Generated call from random type = (4146319122698321263.toULong())?.toShort().countLeadingZeroBits()
2021-03-12 06:38:40,190 [main:106] - GETTING Int from String
2021-03-12 06:38:40,235 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a9f6a64]]
2021-03-12 06:38:40,235 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:38:40,236 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a9f6a64]
2021-03-12 06:38:40,384 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:38:40,386 [main:117] - GENERATED CALL = (result).compareTo(result).minus(-34)
2021-03-12 06:38:40,387 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dd56baa]]
2021-03-12 06:38:40,387 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dd56baa]
2021-03-12 06:38:40,562 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 06:38:40,565 [main:302] - generating value of type = Int true depth = 1
2021-03-12 06:38:40,567 [main:117] - GENERATED CALL = (result).sumOf({a: Char -> 1707450838})
2021-03-12 06:38:40,568 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@bc3faef]]
2021-03-12 06:38:40,568 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:38:40,568 [main:117] - GENERATED CALL = (result).compareTo(var result =.sign
2021-03-12 06:38:40,568 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ad0806f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5747831d]]
2021-03-12 06:38:40,569 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5747831d]
2021-03-12 06:38:40,731 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:40,733 [main:117] - GENERATED CALL = (result).length.rotateLeft(-2028846715)
2021-03-12 06:38:40,733 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@156339a9]]
2021-03-12 06:38:40,733 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:38:40,871 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:38:40,874 [main:117] - GENERATED CALL = (result).compareTo("cgbxj").absoluteValue
2021-03-12 06:38:40,875 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@75038f62]]
2021-03-12 06:38:40,875 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:38:41,069 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:41,073 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@75038f62]
2021-03-12 06:38:41,272 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:38:41,276 [main:117] - GENERATED CALL = (result).get(-1867739983).compareTo('鐒')
2021-03-12 06:38:41,276 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2593a9a4]]
2021-03-12 06:38:41,276 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:38:41,476 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:38:41,479 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2593a9a4]
2021-03-12 06:38:41,479 [main:117] - GENERATED CALL = (result).compareTo("akcbq").countOneBits()
2021-03-12 06:38:41,479 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbbec7c]]
2021-03-12 06:38:41,480 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbbec7c]
2021-03-12 06:38:41,616 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:38:41,618 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:38:41,621 [main:117] - GENERATED CALL = (result).indexOfFirst({a: Char -> true})
2021-03-12 06:38:41,621 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@249c8bee]]
2021-03-12 06:38:41,621 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:38:41,767 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:38:41,769 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@249c8bee]
2021-03-12 06:38:41,769 [main:117] - GENERATED CALL = (result).compareTo("yjmme").inv()
2021-03-12 06:38:41,770 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8a971e1]]
2021-03-12 06:38:41,770 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:38:41,917 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:42,127 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:42,131 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8a971e1]
2021-03-12 06:38:42,311 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:38:42,313 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:38:42,315 [main:117] - GENERATED CALL = (result).subSequence(130106069, 435102062).indexOfLast({a: Char -> false})
2021-03-12 06:38:42,315 [main:114] - replacement of prope8 of type Int is (result).sumOf({a: Char -> 1707450838})
2021-03-12 06:38:42,456 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:38:42,457 [main:66] - Compilation checking started
2021-03-12 06:38:42,927 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return "fail 9"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 10: ${e.message!!}"
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((result).sumOf({a: Char -> 1707450838}) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:38:42,930 [main:107] - replacing ({
        prope6.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 06:38:42,931 [main:50] - replacing {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 06:38:42,931 [main:54] - Getting value of type Unit?
2021-03-12 06:38:43,075 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 06:38:43,246 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:38:43,249 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:38:43,557 [main:302] - generating value of type = Any false depth = 3
2021-03-12 06:38:43,558 [main:95] - GENERATED = println("gouxe")
2021-03-12 06:38:43,558 [main:58] - GENERATED VALUE OF TYPE Unit? = println("gouxe")
2021-03-12 06:38:43,558 [main:61] - GENERATED IS CALL =true
2021-03-12 06:38:43,566 [main:67] - randomType = Base
2021-03-12 06:38:43,703 [main:302] - generating value of type = Base false depth = 0
2021-03-12 06:38:43,705 [main:112] - generating klass Base text = abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}
2021-03-12 06:38:44,031 [main:302] - generating value of type = Child false depth = 2
2021-03-12 06:38:44,033 [main:112] - generating klass Child text = class Child : Base()
2021-03-12 06:38:44,048 [main:106] - GETTING Unit? from String
2021-03-12 06:38:44,082 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e124a2]]
2021-03-12 06:38:44,082 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:38:44,229 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:44,382 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:44,384 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e124a2]
2021-03-12 06:38:44,515 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 06:38:44,517 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:38:44,661 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:38:44,665 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:38:45,035 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:38:45,038 [main:95] - GENERATED = require(false)
2021-03-12 06:38:45,039 [main:117] - GENERATED CALL = (result)?.subSequence(-729210698, 522774498).forEach({a: Char -> require(false)})
2021-03-12 06:38:45,039 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e124a2]]
2021-03-12 06:38:45,039 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e124a2]
2021-03-12 06:38:45,180 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 06:38:45,182 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:38:45,326 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:38:45,329 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:38:45,708 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:38:45,709 [main:95] - GENERATED = print("zlpkl")
2021-03-12 06:38:45,710 [main:117] - GENERATED CALL = (result)?.forEach({a: Char -> print("zlpkl")})
2021-03-12 06:38:45,710 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d76b97c]]
2021-03-12 06:38:45,710 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d76b97c]
2021-03-12 06:38:45,889 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 06:38:45,891 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:38:46,045 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:38:46,049 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:38:46,342 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:38:46,342 [main:95] - GENERATED = print("xshhv")
2021-03-12 06:38:46,343 [main:117] - GENERATED CALL = (result)?.forEachIndexed({a: Int, b: Char -> print("xshhv")})
2021-03-12 06:38:46,343 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d76b97c]]
2021-03-12 06:38:46,344 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:38:46,573 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:46,734 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:46,736 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d76b97c]
2021-03-12 06:38:46,866 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 06:38:46,868 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:38:47,010 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:38:47,013 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:38:47,351 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:38:47,354 [main:95] - GENERATED = check(true)
2021-03-12 06:38:47,355 [main:117] - GENERATED CALL = (result)?.subSequence(973602891, 1053872674).forEachIndexed({a: Int, b: Char -> check(true)})
2021-03-12 06:38:47,355 [main:114] - replacement of {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    } of type Unit? is (result)?.subSequence(973602891, 1053872674).forEachIndexed({a: Int, b: Char -> check(true)})
2021-03-12 06:38:47,482 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:38:47,482 [main:66] - Compilation checking started
2021-03-12 06:38:47,487 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:38:47,487 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return "fail 9"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 10: ${e.message!!}"
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) (result)?.subSequence(973602891, 1053872674).forEachIndexed({a: Int, b: Char -> check(true)})
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:38:47,489 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 06:38:47,490 [main:50] - replacing numberOfSuspensions Int
2021-03-12 06:38:47,490 [main:54] - Getting value of type Int
2021-03-12 06:38:47,613 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:47,615 [main:58] - GENERATED VALUE OF TYPE Int = 584195618
2021-03-12 06:38:47,615 [main:61] - GENERATED IS CALL =false
2021-03-12 06:38:47,755 [main:67] - randomType = Short
2021-03-12 06:38:47,921 [main:302] - generating value of type = Short true depth = 0
2021-03-12 06:38:47,983 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4953382c]
2021-03-12 06:38:47,983 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@721b941b]
2021-03-12 06:38:48,125 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:48,127 [main:78] - Generated call from random type = (-13768).toInt().coerceAtMost(555647806)
2021-03-12 06:38:48,128 [main:106] - GETTING Int from Inner
2021-03-12 06:38:48,136 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ad0806f]]
2021-03-12 06:38:48,136 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:38:48,137 [main:117] - GENERATED CALL = (Child().Inner()).o().length
2021-03-12 06:38:48,137 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12daad36]]
2021-03-12 06:38:48,137 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:38:48,137 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12daad36]
2021-03-12 06:38:48,137 [main:117] - GENERATED CALL = (Child().Inner()).o().toInt()
2021-03-12 06:38:48,138 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9d869]]
2021-03-12 06:38:48,138 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:38:48,138 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9d869]
2021-03-12 06:38:48,265 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:38:48,268 [main:117] - GENERATED CALL = (Child().Inner()).o().compareTo(var result =
2021-03-12 06:38:48,268 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@518e87dd]]
2021-03-12 06:38:48,268 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:38:48,393 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:38:48,393 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@518e87dd]
2021-03-12 06:38:48,518 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:38:48,520 [main:117] - GENERATED CALL = (Child().Inner()).equals("zlzwa").compareTo(false)
2021-03-12 06:38:48,520 [main:114] - replacement of numberOfSuspensions of type Int is (Child().Inner()).o().compareTo(var result =
2021-03-12 06:38:48,700 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 06:38:48,700 [main:66] - Compilation checking started
2021-03-12 06:38:48,714 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:38:48,714 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return "fail 9"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 10: ${e.message!!}"
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..(Child().Inner()).o().compareTo(var result =) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:38:48,718 [main:107] - replacing (let(x), Unit?)
2021-03-12 06:38:48,718 [main:50] - replacing let(x) Unit?
2021-03-12 06:38:48,718 [main:54] - Getting value of type Unit?
2021-03-12 06:38:48,862 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 06:38:48,996 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:38:48,999 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:38:49,293 [main:302] - generating value of type = Any false depth = 3
2021-03-12 06:38:49,294 [main:95] - GENERATED = print("uxvqq")
2021-03-12 06:38:49,294 [main:58] - GENERATED VALUE OF TYPE Unit? = print("uxvqq")
2021-03-12 06:38:49,294 [main:61] - GENERATED IS CALL =true
2021-03-12 06:38:49,633 [main:67] - randomType = Set<UInt>
2021-03-12 06:38:49,635 [main:106] - GETTING Unit? from Inner
2021-03-12 06:38:49,645 [main:106] - GETTING Unit? from String
2021-03-12 06:38:49,681 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d76b97c]]
2021-03-12 06:38:49,681 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:38:49,813 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:49,942 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:49,944 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d76b97c]
2021-03-12 06:38:50,128 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 06:38:50,130 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:38:50,263 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:38:50,266 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:38:50,684 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:38:50,686 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:38:50,688 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:38:50,688 [main:95] - GENERATED = require(false, { "axpgt"})
2021-03-12 06:38:50,689 [main:117] - GENERATED CALL = (result)?.subSequence(-1296729302, -1320955689).forEachIndexed({a: Int, b: Char -> require(false, { "axpgt"})})
2021-03-12 06:38:50,689 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e124a2]]
2021-03-12 06:38:50,689 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:38:50,852 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:50,989 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:38:50,992 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e124a2]
2021-03-12 06:38:51,124 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 06:38:51,126 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:38:51,132 [main:117] - GENERATED CALL = (result)?.subSequence(-2140903137, 596470836).forEach({a: Char -> println()})
2021-03-12 06:38:51,132 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d76b97c]]
2021-03-12 06:38:51,133 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d76b97c]
2021-03-12 06:38:51,253 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 06:38:51,255 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:38:51,261 [main:117] - GENERATED CALL = (result)?.forEachIndexed({a: Int, b: Char -> println()})
2021-03-12 06:38:51,261 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e124a2]]
2021-03-12 06:38:51,261 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e124a2]
2021-03-12 06:38:51,383 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 06:38:51,385 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:38:51,544 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:38:51,547 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:38:51,991 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:38:51,994 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 06:38:51,995 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 06:38:52,152 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:38:52,156 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:38:52,443 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 06:38:52,445 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 06:38:52,591 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:38:52,595 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:38:53,084 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 06:38:53,086 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-12 06:38:53,088 [main:302] - generating value of type = Any false depth = 13
2021-03-12 06:38:53,089 [main:95] - GENERATED = require(false, { "iclrl"})
2021-03-12 06:38:53,089 [main:95] - GENERATED = contract({ require(false, { "iclrl"})})
2021-03-12 06:38:53,089 [main:95] - GENERATED = repeat(-80080731, {a: Int -> contract({ require(false, { "iclrl"})})})
2021-03-12 06:38:53,090 [main:117] - GENERATED CALL = (result)?.forEach({a: Char -> repeat(-80080731, {a: Int -> contract({ require(false, { "iclrl"})})})})
2021-03-12 06:38:53,090 [main:114] - replacement of let(x) of type Unit? is (result)?.forEach({a: Char -> repeat(-80080731, {a: Int -> contract({ require(false, { "iclrl"})})})})
2021-03-12 06:38:53,215 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 06:38:53,216 [main:66] - Compilation checking started
2021-03-12 06:38:53,667 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return "fail 9"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 10: ${e.message!!}"
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.(result)?.forEach({a: Char -> repeat(-80080731, {a: Int -> contract({ require(false, { "iclrl"})})})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:38:53,669 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 06:38:53,670 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 06:38:53,670 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 06:38:53,805 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 06:38:53,807 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:38:53,809 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 06:38:53,810 [main:61] - GENERATED IS CALL =false
2021-03-12 06:38:53,951 [main:67] - randomType = Kla5
2021-03-12 06:38:54,085 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 06:38:54,087 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:38:54,115 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 06:38:54,147 [main:106] - GETTING Function0<Boolean> from Child
2021-03-12 06:38:54,158 [main:106] - GETTING Function0<Boolean> from Inner
2021-03-12 06:38:54,165 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-12 06:38:54,301 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:38:54,301 [main:66] - Compilation checking started
2021-03-12 06:38:54,957 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return "fail 9"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 10: ${e.message!!}"
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:38:54,959 [main:107] - replacing (checkFinished && !prope9, Boolean)
2021-03-12 06:38:54,960 [main:50] - replacing checkFinished && !prope9 Boolean
2021-03-12 06:38:54,960 [main:54] - Getting value of type Boolean
2021-03-12 06:38:55,087 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:38:55,089 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:38:55,089 [main:61] - GENERATED IS CALL =false
2021-03-12 06:38:55,225 [main:67] - randomType = Byte
2021-03-12 06:38:55,342 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:38:55,399 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@75c3e7d5]
2021-03-12 06:38:55,400 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e49445c]
2021-03-12 06:38:55,400 [main:78] - Generated call from random type = (108).toChar().isUpperCase()
2021-03-12 06:38:55,401 [main:106] - GETTING Boolean from Child
2021-03-12 06:38:55,410 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]]
2021-03-12 06:38:55,411 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:38:55,543 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]
2021-03-12 06:38:55,733 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:38:55,733 [main:117] - GENERATED CALL = (Child()).equals(null).equals("pnvtv")
2021-03-12 06:38:55,733 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40bfe33e]]
2021-03-12 06:38:55,733 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:38:55,857 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:38:55,858 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40bfe33e]
2021-03-12 06:38:55,977 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:38:55,979 [main:117] - GENERATED CALL = (Child()).equals("tvpyd").and(true)
2021-03-12 06:38:55,979 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5cb6f326]]
2021-03-12 06:38:55,979 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:38:56,100 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:38:56,100 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5cb6f326]
2021-03-12 06:38:56,235 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:38:56,238 [main:117] - GENERATED CALL = (Child()).equals("mkupo").or(false)
2021-03-12 06:38:56,238 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@287e719]]
2021-03-12 06:38:56,238 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:38:56,370 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:38:56,370 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 06:38:56,492 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:38:56,494 [main:117] - GENERATED CALL = (Child()).equals("nwbsq").xor(false)
2021-03-12 06:38:56,494 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@792333b0]]
2021-03-12 06:38:56,494 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:38:56,616 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:38:56,616 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@792333b0]
2021-03-12 06:38:56,617 [main:117] - GENERATED CALL = (Child()).equals("hstyr").not()
2021-03-12 06:38:56,617 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]]
2021-03-12 06:38:56,617 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:38:56,769 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:38:56,769 [main:117] - GENERATED CALL = (Child()).equals("mrokk")
2021-03-12 06:38:56,770 [main:114] - replacement of checkFinished && !prope9 of type Boolean is (Child()).equals("hstyr").not()
2021-03-12 06:38:56,905 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:38:56,905 [main:66] - Compilation checking started
2021-03-12 06:38:57,533 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return "fail 9"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 10: ${e.message!!}"
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:38:57,535 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 06:38:57,536 [main:50] - replacing getOrThrow() Any?
2021-03-12 06:38:57,536 [main:54] - Getting value of type Any?
2021-03-12 06:38:57,665 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:38:57,665 [main:58] - GENERATED VALUE OF TYPE Any? = "aszof"
2021-03-12 06:38:57,666 [main:61] - GENERATED IS CALL =false
2021-03-12 06:38:57,674 [main:67] - randomType = Kla0
2021-03-12 06:38:57,802 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:38:57,804 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}
2021-03-12 06:38:57,928 [main:194] - Type params = []
2021-03-12 06:38:58,066 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 06:38:58,203 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:38:58,207 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:38:58,527 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 06:38:58,684 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:38:58,687 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:38:59,150 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:38:59,150 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:38:59,174 [main:106] - GETTING Any? from Child
2021-03-12 06:38:59,185 [main:106] - GETTING Any? from String
2021-03-12 06:38:59,225 [main:106] - GETTING Any? from Inner
2021-03-12 06:38:59,232 [main:114] - replacement of getOrThrow() of type Any? is "aszof"
2021-03-12 06:38:59,353 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:38:59,354 [main:66] - Compilation checking started
2021-03-12 06:38:59,714 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return "fail 9"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 10: ${e.message!!}"
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6."aszof"
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:38:59,718 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 06:38:59,718 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 06:38:59,718 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 06:38:59,855 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 06:38:59,860 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 06:39:00,297 [main:67] - randomType = MutableMap<Array<Kla4>, Boolean?>
2021-03-12 06:39:00,298 [main:106] - GETTING EmptyCoroutineContext from Child
2021-03-12 06:39:00,307 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 06:39:00,327 [main:106] - GETTING EmptyCoroutineContext from Inner
2021-03-12 06:39:00,333 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 06:39:00,333 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-12 06:39:00,333 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-12 06:39:00,333 [main:54] - Getting value of type String
2021-03-12 06:39:00,459 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:00,461 [main:58] - GENERATED VALUE OF TYPE String = "vcnta"
2021-03-12 06:39:00,462 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:00,615 [main:67] - randomType = Kla5
2021-03-12 06:39:00,746 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 06:39:00,748 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:39:00,774 [main:106] - GETTING String from Child
2021-03-12 06:39:00,780 [main:106] - GETTING String from String
2021-03-12 06:39:00,796 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3bee1bb3]]
2021-03-12 06:39:00,796 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3bee1bb3]
2021-03-12 06:39:00,913 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:00,913 [main:117] - GENERATED CALL = (result).plus("rjlnv")
2021-03-12 06:39:00,913 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6423e6d6]]
2021-03-12 06:39:00,913 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6423e6d6]
2021-03-12 06:39:01,038 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:01,194 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:01,339 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:01,345 [main:117] - GENERATED CALL = (result).replaceRange(-401896492, -838693830, StringBuilder())
2021-03-12 06:39:01,345 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@438e091e]]
2021-03-12 06:39:01,345 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@438e091e]
2021-03-12 06:39:01,464 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:01,467 [main:117] - GENERATED CALL = (result).replaceBeforeLast('褤', var result =
2021-03-12 06:39:01,467 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46328ee3]]
2021-03-12 06:39:01,467 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46328ee3]
2021-03-12 06:39:01,467 [main:117] - GENERATED CALL = (result).trimEnd()
2021-03-12 06:39:01,468 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]]
2021-03-12 06:39:01,468 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]
2021-03-12 06:39:01,585 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:01,588 [main:117] - GENERATED CALL = (result).substringBefore('䑏', var result =
2021-03-12 06:39:01,588 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16c0cf7b]]
2021-03-12 06:39:01,588 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16c0cf7b]
2021-03-12 06:39:01,588 [main:117] - GENERATED CALL = (result).trimMargin(result)
2021-03-12 06:39:01,588 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d75fda]]
2021-03-12 06:39:01,588 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:39:01,729 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:01,879 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:01,881 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d75fda]
2021-03-12 06:39:02,006 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:02,009 [main:117] - GENERATED CALL = (result).subSequence(-1364185412, 870537732).repeat(-1338349483)
2021-03-12 06:39:02,009 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@326022ed]]
2021-03-12 06:39:02,009 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@326022ed]
2021-03-12 06:39:02,142 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:39:02,327 [main:43] - GENERATING CALL OF fun <T> listOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 06:39:02,330 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 06:39:02,458 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:39:02,460 [main:95] - GENERATED = listOf<Int>(-1984655758)
2021-03-12 06:39:02,460 [main:117] - GENERATED CALL = (result).slice(listOf<Int>(-1984655758))
2021-03-12 06:39:02,460 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38ba777f]]
2021-03-12 06:39:02,460 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:39:02,579 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:02,700 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:02,702 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38ba777f]
2021-03-12 06:39:02,845 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:02,984 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:02,987 [main:117] - GENERATED CALL = (result).subSequence(-1404887919, 2120590380).commonPrefixWith("gjgbz", false)
2021-03-12 06:39:02,987 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38ba777f]]
2021-03-12 06:39:02,987 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38ba777f]
2021-03-12 06:39:03,106 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:03,228 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:03,230 [main:117] - GENERATED CALL = (result).commonPrefixWith("exqyt", true)
2021-03-12 06:39:03,391 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is result
2021-03-12 06:39:03,529 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 06:39:03,529 [main:66] - Compilation checking started
2021-03-12 06:39:04,160 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return "fail 9"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 10: ${e.message!!}"
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:04,162 [main:107] - replacing (it, Continuation<Unit>)
2021-03-12 06:39:04,162 [main:50] - replacing it Continuation<Unit>
2021-03-12 06:39:04,162 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 06:39:04,285 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 06:39:04,411 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 06:39:04,414 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 06:39:04,818 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:39:04,943 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:39:04,946 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:39:05,314 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:39:05,485 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:39:05,488 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:39:05,927 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 06:39:06,092 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:39:06,095 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:39:06,506 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:39:06,506 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:39:06,506 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:39:06,506 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 06:39:06,506 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 06:39:06,514 [main:67] - randomType = Kla0
2021-03-12 06:39:06,662 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:39:06,664 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}
2021-03-12 06:39:06,797 [main:194] - Type params = []
2021-03-12 06:39:06,914 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 06:39:07,032 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:39:07,035 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:39:07,294 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 06:39:07,500 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:39:07,504 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:39:07,948 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:39:07,948 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:39:07,963 [main:106] - GETTING Continuation<Unit> from Inner
2021-03-12 06:39:07,970 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 06:39:07,994 [main:106] - GETTING Continuation<Unit> from Child
2021-03-12 06:39:08,001 [main:111] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-12 06:39:08,001 [main:107] - replacing ("fail 9", String)
2021-03-12 06:39:08,002 [main:50] - replacing "fail 9" String
2021-03-12 06:39:08,002 [main:54] - Getting value of type String
2021-03-12 06:39:08,121 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:08,123 [main:58] - GENERATED VALUE OF TYPE String = "srjrj"
2021-03-12 06:39:08,123 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:08,256 [main:67] - randomType = UInt
2021-03-12 06:39:08,372 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 06:39:08,401 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4fcb5902]
2021-03-12 06:39:08,402 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c441a3d]
2021-03-12 06:39:08,517 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:08,520 [main:78] - Generated call from random type = (1891095645.toUInt()).toUByte().toString(-1638244462)
2021-03-12 06:39:08,520 [main:114] - replacement of "fail 9" of type String is (1891095645.toUInt()).toUByte().toString(-1638244462)
2021-03-12 06:39:08,654 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:39:08,655 [main:66] - Compilation checking started
2021-03-12 06:39:09,308 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 10: ${e.message!!}"
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:09,312 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 06:39:09,312 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 06:39:09,312 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 06:39:09,442 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 06:39:09,447 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 06:39:09,725 [main:67] - randomType = HashSet<Long>
2021-03-12 06:39:09,843 [main:302] - generating value of type = HashSet<Long> false depth = 0
2021-03-12 06:39:09,979 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Long): HashSet<Long> = TODO()
2021-03-12 06:39:09,982 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Long): HashSet<Long> = TODO()
2021-03-12 06:39:10,108 [main:302] - generating value of type = Long true depth = 3
2021-03-12 06:39:10,111 [main:95] - GENERATED = linkedSetOf<Long>(-1055139372870288109)
2021-03-12 06:39:10,265 [main:106] - GETTING EmptyCoroutineContext from Inner
2021-03-12 06:39:10,273 [main:106] - GETTING EmptyCoroutineContext from Child
2021-03-12 06:39:10,282 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 06:39:10,311 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 06:39:10,312 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 06:39:10,312 [main:50] - replacing {} Function0<Unit>
2021-03-12 06:39:10,312 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:39:10,443 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:39:10,445 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:39:10,574 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:39:10,577 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:39:10,845 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:39:10,847 [main:95] - GENERATED = require(true)
2021-03-12 06:39:10,847 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-12 06:39:10,848 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:11,122 [main:67] - randomType = Sequence<Kla5>
2021-03-12 06:39:11,124 [main:106] - GETTING Function0<Unit> from Inner
2021-03-12 06:39:11,130 [main:106] - GETTING Function0<Unit> from Child
2021-03-12 06:39:11,146 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:39:11,165 [main:114] - replacement of {} of type Function0<Unit> is { require(true)}
2021-03-12 06:39:11,283 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:39:11,283 [main:66] - Compilation checking started
2021-03-12 06:39:11,884 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 10: ${e.message!!}"
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:11,887 [main:107] - replacing (prope6.getOrThrow(), Any?)
2021-03-12 06:39:11,888 [main:50] - replacing prope6.getOrThrow() Any?
2021-03-12 06:39:11,888 [main:54] - Getting value of type Any?
2021-03-12 06:39:12,032 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:12,033 [main:58] - GENERATED VALUE OF TYPE Any? = "ooecm"
2021-03-12 06:39:12,033 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:12,301 [main:67] - randomType = Char?
2021-03-12 06:39:12,418 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:12,444 [main:106] - GETTING Any? from String
2021-03-12 06:39:12,472 [main:106] - GETTING Any? from Child
2021-03-12 06:39:12,481 [main:106] - GETTING Any? from Inner
2021-03-12 06:39:12,487 [main:114] - replacement of prope6.getOrThrow() of type Any? is "ooecm"
2021-03-12 06:39:12,633 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:39:12,634 [main:66] - Compilation checking started
2021-03-12 06:39:13,239 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 10: ${e.message!!}"
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:13,241 [main:107] - replacing ("fail 10: ${e.message!!}", String)
2021-03-12 06:39:13,241 [main:50] - replacing "fail 10: ${e.message!!}" String
2021-03-12 06:39:13,241 [main:54] - Getting value of type String
2021-03-12 06:39:13,366 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:13,369 [main:58] - GENERATED VALUE OF TYPE String = "dnswm"
2021-03-12 06:39:13,369 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:13,377 [main:67] - randomType = Kla3
2021-03-12 06:39:13,502 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 06:39:13,504 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 06:39:13,515 [main:106] - GETTING String from Inner
2021-03-12 06:39:13,524 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1055adc6]]
2021-03-12 06:39:13,524 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:13,524 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1055adc6]
2021-03-12 06:39:13,525 [main:117] - GENERATED CALL = (Child().Inner()).o().trim()
2021-03-12 06:39:13,525 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aa1f8fc]]
2021-03-12 06:39:13,525 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:13,525 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aa1f8fc]
2021-03-12 06:39:13,659 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:13,661 [main:117] - GENERATED CALL = (Child().Inner()).o().takeLast(1229776873)
2021-03-12 06:39:13,661 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41c5716]]
2021-03-12 06:39:13,661 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:13,661 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41c5716]
2021-03-12 06:39:13,661 [main:117] - GENERATED CALL = (Child().Inner()).o().trimIndent()
2021-03-12 06:39:13,661 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b9bd48]]
2021-03-12 06:39:13,661 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:13,661 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b9bd48]
2021-03-12 06:39:13,783 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:13,785 [main:117] - GENERATED CALL = (Child().Inner()).o().take(-141239702)
2021-03-12 06:39:13,785 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e9228df]]
2021-03-12 06:39:13,785 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:13,785 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e9228df]
2021-03-12 06:39:13,903 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:14,032 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:14,035 [main:117] - GENERATED CALL = (Child().Inner()).o().removeRange(902064962, 1954409881)
2021-03-12 06:39:14,035 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@437865f6]]
2021-03-12 06:39:14,035 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:14,035 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@437865f6]
2021-03-12 06:39:14,153 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:14,275 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:14,277 [main:117] - GENERATED CALL = (Child().Inner()).o().padStart(-285018089, '?')
2021-03-12 06:39:14,277 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3bee1bb3]]
2021-03-12 06:39:14,278 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:14,278 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3bee1bb3]
2021-03-12 06:39:14,395 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:14,395 [main:117] - GENERATED CALL = (Child().Inner()).o().plus("hlcfl")
2021-03-12 06:39:14,396 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f906bf3]]
2021-03-12 06:39:14,396 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:14,396 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f906bf3]
2021-03-12 06:39:14,396 [main:117] - GENERATED CALL = (Child().Inner()).o().uppercase()
2021-03-12 06:39:14,396 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]]
2021-03-12 06:39:14,396 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:14,396 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]
2021-03-12 06:39:14,515 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:14,632 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:14,634 [main:117] - GENERATED CALL = (Child().Inner()).o().substringBefore('㒁', "azksw")
2021-03-12 06:39:14,634 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c2f4ae]]
2021-03-12 06:39:14,634 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:14,635 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c2f4ae]
2021-03-12 06:39:14,635 [main:117] - GENERATED CALL = (Child().Inner()).o().reversed()
2021-03-12 06:39:14,635 [main:114] - replacement of "fail 10: ${e.message!!}" of type String is (Child().Inner()).o().reversed()
2021-03-12 06:39:14,751 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:39:14,751 [main:66] - Compilation checking started
2021-03-12 06:39:15,365 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:15,367 [main:107] - replacing ({
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 06:39:15,367 [main:50] - replacing {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 06:39:15,367 [main:54] - Getting value of type Unit?
2021-03-12 06:39:15,522 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 06:39:15,656 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:39:15,659 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:39:15,921 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 3
2021-03-12 06:39:15,923 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 06:39:16,052 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:39:16,055 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:39:16,454 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 06:39:16,456 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-12 06:39:16,458 [main:302] - generating value of type = Any false depth = 8
2021-03-12 06:39:16,458 [main:95] - GENERATED = require(false, { "sjtpq"})
2021-03-12 06:39:16,458 [main:95] - GENERATED = contract({ require(false, { "sjtpq"})})
2021-03-12 06:39:16,458 [main:58] - GENERATED VALUE OF TYPE Unit? = contract({ require(false, { "sjtpq"})})
2021-03-12 06:39:16,458 [main:61] - GENERATED IS CALL =true
2021-03-12 06:39:17,069 [main:67] - randomType = LinkedHashSet<Kla2<Kla5>>?
2021-03-12 06:39:17,189 [main:302] - generating value of type = LinkedHashSet<Kla2<Kla5>> false depth = 0
2021-03-12 06:39:17,317 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla2<Kla5>): LkedHashSet<Kla2<Kla5>> = TODO()
2021-03-12 06:39:17,320 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla2<Kla5>): LkedHashSet<Kla2<Kla5>> = TODO()
2021-03-12 06:39:17,449 [main:302] - generating value of type = Kla2<Kla5> false depth = 3
2021-03-12 06:39:17,451 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 06:39:17,900 [main:302] - generating value of type = Kla5 false depth = 5
2021-03-12 06:39:17,902 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:39:17,902 [main:95] - GENERATED = linkedSetOf<Kla2<Kla5>>(Kla5)
2021-03-12 06:39:18,113 [main:149] - GENERATING call of type public abstract fun iterator(): kotlin.collections.Iterator<Kla2<Kla5>> defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@10ce7c0]
2021-03-12 06:39:18,114 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7b6a4052]
2021-03-12 06:39:18,241 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 06:39:18,243 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:39:18,371 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:39:18,374 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:39:18,783 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:39:18,785 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 06:39:18,787 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 06:39:18,941 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:39:18,944 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:39:19,217 [main:302] - generating value of type = Any false depth = 8
2021-03-12 06:39:19,218 [main:95] - GENERATED = print("kgcea")
2021-03-12 06:39:19,218 [main:95] - GENERATED = repeat(-525178879, {a: Int -> print("kgcea")})
2021-03-12 06:39:19,218 [main:78] - Generated call from random type = (linkedSetOf<Kla2<Kla5>>(Kla5))?.iterator().forEach({a: T -> repeat(-525178879, {a: Int -> print("kgcea")})})
2021-03-12 06:39:19,219 [main:106] - GETTING Unit? from Child
2021-03-12 06:39:19,226 [main:106] - GETTING Unit? from String
2021-03-12 06:39:19,243 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e124a2]]
2021-03-12 06:39:19,243 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e124a2]
2021-03-12 06:39:19,361 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 06:39:19,363 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:39:19,483 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:39:19,486 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:39:19,738 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:39:19,740 [main:95] - GENERATED = require(true)
2021-03-12 06:39:19,740 [main:117] - GENERATED CALL = (result)?.forEach({a: Char -> require(true)})
2021-03-12 06:39:19,740 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d76b97c]]
2021-03-12 06:39:19,740 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:39:19,860 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:20,008 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:20,012 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d76b97c]
2021-03-12 06:39:20,154 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 06:39:20,156 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:39:20,282 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:39:20,285 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:39:20,671 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:39:20,673 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:39:20,675 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:39:20,675 [main:95] - GENERATED = check(false, { "czhxm"})
2021-03-12 06:39:20,676 [main:117] - GENERATED CALL = (result)?.subSequence(1854660926, -1843507783).forEachIndexed({a: Int, b: Char -> check(false, { "czhxm"})})
2021-03-12 06:39:20,676 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e124a2]]
2021-03-12 06:39:20,676 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:39:20,796 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:20,922 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:20,924 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e124a2]
2021-03-12 06:39:21,065 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 06:39:21,067 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:39:21,204 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:39:21,207 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:39:21,603 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:39:21,606 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:39:21,607 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:39:21,608 [main:95] - GENERATED = check(true, { "sdgvp"})
2021-03-12 06:39:21,608 [main:117] - GENERATED CALL = (result)?.subSequence(-2001380731, 1132922908).forEach({a: Char -> check(true, { "sdgvp"})})
2021-03-12 06:39:21,608 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d76b97c]]
2021-03-12 06:39:21,608 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d76b97c]
2021-03-12 06:39:21,725 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 06:39:21,727 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:39:21,849 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:39:21,851 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:39:22,155 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:39:22,155 [main:95] - GENERATED = println("jgheh")
2021-03-12 06:39:22,155 [main:117] - GENERATED CALL = (result)?.forEachIndexed({a: Int, b: Char -> println("jgheh")})
2021-03-12 06:39:22,155 [main:114] - replacement of {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    } of type Unit? is contract({ require(false, { "sjtpq"})})
2021-03-12 06:39:22,290 [main:33] - Trying to replace BLOCK on Element(CALL_EXPRESSION)
2021-03-12 06:39:22,290 [main:66] - Compilation checking started
2021-03-12 06:39:22,294 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:39:22,295 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) contract({ require(false, { "sjtpq"})})
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:22,296 [main:107] - replacing (prope8++, Int)
2021-03-12 06:39:22,297 [main:50] - replacing prope8++ Int
2021-03-12 06:39:22,297 [main:54] - Getting value of type Int
2021-03-12 06:39:22,416 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:22,418 [main:58] - GENERATED VALUE OF TYPE Int = -1717306111
2021-03-12 06:39:22,418 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:22,426 [main:67] - randomType = Child
2021-03-12 06:39:22,543 [main:302] - generating value of type = Child false depth = 0
2021-03-12 06:39:22,546 [main:112] - generating klass Child text = class Child : Base()
2021-03-12 06:39:22,554 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@586e35fb]
2021-03-12 06:39:22,671 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:22,672 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@518e87dd]
2021-03-12 06:39:22,788 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:22,791 [main:78] - Generated call from random type = (Child()).equals("baisv").compareTo(false)
2021-03-12 06:39:22,792 [main:106] - GETTING Int from Inner
2021-03-12 06:39:22,798 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@518e87dd]]
2021-03-12 06:39:22,798 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:39:22,918 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:22,918 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@518e87dd]
2021-03-12 06:39:23,034 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:23,036 [main:117] - GENERATED CALL = (Child().Inner()).equals("oxinl").compareTo(true)
2021-03-12 06:39:23,037 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ad0806f]]
2021-03-12 06:39:23,037 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:23,037 [main:117] - GENERATED CALL = (Child().Inner()).o().length
2021-03-12 06:39:23,037 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9d869]]
2021-03-12 06:39:23,037 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:23,037 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9d869]
2021-03-12 06:39:23,176 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:23,315 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:23,317 [main:117] - GENERATED CALL = (Child().Inner()).o().compareTo("yjmbc", true)
2021-03-12 06:39:23,317 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12daad36]]
2021-03-12 06:39:23,317 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:23,318 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12daad36]
2021-03-12 06:39:23,318 [main:117] - GENERATED CALL = (Child().Inner()).o().toInt()
2021-03-12 06:39:23,318 [main:114] - replacement of prope8++ of type Int is (Child().Inner()).o().length
2021-03-12 06:39:23,434 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:39:23,435 [main:66] - Compilation checking started
2021-03-12 06:39:24,067 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:24,069 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine ", String)
2021-03-12 06:39:24,070 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " String
2021-03-12 06:39:24,070 [main:54] - Getting value of type String
2021-03-12 06:39:24,196 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:24,198 [main:58] - GENERATED VALUE OF TYPE String = "gpuoy"
2021-03-12 06:39:24,198 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:24,474 [main:67] - randomType = List<Kla2<Kla0>>
2021-03-12 06:39:24,475 [main:106] - GETTING String from Child
2021-03-12 06:39:24,484 [main:106] - GETTING String from Inner
2021-03-12 06:39:24,490 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ea953fe]]
2021-03-12 06:39:24,490 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:24,490 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ea953fe]
2021-03-12 06:39:24,622 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:24,624 [main:117] - GENERATED CALL = (Child().Inner()).o().substringAfterLast('껾', result)
2021-03-12 06:39:24,624 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59058a0d]]
2021-03-12 06:39:24,624 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:24,624 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59058a0d]
2021-03-12 06:39:24,625 [main:117] - GENERATED CALL = (Child().Inner()).o().lowercase()
2021-03-12 06:39:24,625 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]]
2021-03-12 06:39:24,625 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:24,625 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]
2021-03-12 06:39:24,742 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:24,745 [main:117] - GENERATED CALL = (Child().Inner()).o().substringBefore('ꠗ', var result =
2021-03-12 06:39:24,745 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24fff0ff]]
2021-03-12 06:39:24,745 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:24,745 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24fff0ff]
2021-03-12 06:39:24,745 [main:117] - GENERATED CALL = (Child().Inner()).o().decapitalize()
2021-03-12 06:39:24,745 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@732f829e]]
2021-03-12 06:39:24,746 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:24,746 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@732f829e]
2021-03-12 06:39:24,746 [main:117] - GENERATED CALL = (Child().Inner()).o().toUpperCase()
2021-03-12 06:39:24,746 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d2b9075]]
2021-03-12 06:39:24,746 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:24,746 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d2b9075]
2021-03-12 06:39:24,863 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:24,865 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceIndent("vvpqf")
2021-03-12 06:39:24,865 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@437865f6]]
2021-03-12 06:39:24,865 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:24,865 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@437865f6]
2021-03-12 06:39:24,983 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:25,105 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:25,107 [main:117] - GENERATED CALL = (Child().Inner()).o().padStart(-1019722755, '墚')
2021-03-12 06:39:25,108 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6423e6d6]]
2021-03-12 06:39:25,108 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:25,108 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6423e6d6]
2021-03-12 06:39:25,227 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:25,346 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:25,467 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:25,591 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:39:25,594 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:39:25,911 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:39:25,913 [main:95] - GENERATED = StringBuilder("kylue")
2021-03-12 06:39:25,914 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceRange(-4294524, -1332498614, StringBuilder("kylue"))
2021-03-12 06:39:25,914 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1fc0a4]]
2021-03-12 06:39:25,914 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:25,914 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1fc0a4]
2021-03-12 06:39:25,914 [main:117] - GENERATED CALL = (Child().Inner()).o().trimStart()
2021-03-12 06:39:25,914 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d137b6c]]
2021-03-12 06:39:25,914 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:25,914 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d137b6c]
2021-03-12 06:39:26,043 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:26,167 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:26,169 [main:117] - GENERATED CALL = (Child().Inner()).o().padEnd(4255743, '羑')
2021-03-12 06:39:26,169 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " of type String is (Child().Inner()).o().substringBefore('ꠗ', var result =
2021-03-12 06:39:26,286 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 06:39:26,286 [main:66] - Compilation checking started
2021-03-12 06:39:26,291 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:39:26,291 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = "OK"

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().substringBefore('ꠗ', var result = +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:26,293 [main:107] - replacing ("OK", String)
2021-03-12 06:39:26,293 [main:50] - replacing "OK" String
2021-03-12 06:39:26,293 [main:54] - Getting value of type String
2021-03-12 06:39:26,410 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:26,412 [main:58] - GENERATED VALUE OF TYPE String = "bfhvx"
2021-03-12 06:39:26,412 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:26,420 [main:67] - randomType = Kla4
2021-03-12 06:39:26,536 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:39:26,538 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:39:26,547 [main:106] - GETTING String from Inner
2021-03-12 06:39:26,552 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aa1f8fc]]
2021-03-12 06:39:26,552 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:26,552 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aa1f8fc]
2021-03-12 06:39:26,669 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:26,672 [main:117] - GENERATED CALL = (Child().Inner()).o().takeLast(265973898)
2021-03-12 06:39:26,672 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ca25e]]
2021-03-12 06:39:26,672 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:26,672 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ca25e]
2021-03-12 06:39:26,810 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:26,814 [main:117] - GENERATED CALL = (Child().Inner()).o().substring(433599014)
2021-03-12 06:39:26,814 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e32c57c]]
2021-03-12 06:39:26,814 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:26,814 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e32c57c]
2021-03-12 06:39:26,949 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:26,951 [main:117] - GENERATED CALL = (Child().Inner()).o().dropLast(-1123590656)
2021-03-12 06:39:26,951 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7da5b21d]]
2021-03-12 06:39:26,951 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:26,951 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7da5b21d]
2021-03-12 06:39:26,951 [main:117] - GENERATED CALL = (Child().Inner()).o().prependIndent(var result =
2021-03-12 06:39:26,952 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5896f627]]
2021-03-12 06:39:26,952 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:26,952 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5896f627]
2021-03-12 06:39:27,070 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:27,192 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:27,312 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:27,314 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceFirst('ၗ', '螘', true)
2021-03-12 06:39:27,314 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d2b9075]]
2021-03-12 06:39:27,314 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:27,315 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d2b9075]
2021-03-12 06:39:27,431 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:27,433 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceIndent("vbuqh")
2021-03-12 06:39:27,433 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a8dbde]]
2021-03-12 06:39:27,433 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:27,433 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a8dbde]
2021-03-12 06:39:27,550 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:27,555 [main:117] - GENERATED CALL = (Child().Inner()).o().removePrefix(StringBuilder())
2021-03-12 06:39:27,555 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d137b6c]]
2021-03-12 06:39:27,555 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:27,555 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d137b6c]
2021-03-12 06:39:27,711 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:27,842 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:27,844 [main:117] - GENERATED CALL = (Child().Inner()).o().padEnd(541699737, '䡜')
2021-03-12 06:39:27,844 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eaf3094]]
2021-03-12 06:39:27,844 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:27,844 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eaf3094]
2021-03-12 06:39:27,959 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:39:27,961 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:39:27,963 [main:117] - GENERATED CALL = (Child().Inner()).o().dropLastWhile({a: Char -> true})
2021-03-12 06:39:27,963 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b9bd48]]
2021-03-12 06:39:27,963 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:27,963 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b9bd48]
2021-03-12 06:39:28,080 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:28,082 [main:117] - GENERATED CALL = (Child().Inner()).o().take(-1404103337)
2021-03-12 06:39:28,083 [main:114] - replacement of "OK" of type String is (Child().Inner()).o().dropLastWhile({a: Char -> true})
2021-03-12 06:39:28,199 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:39:28,200 [main:66] - Compilation checking started
2021-03-12 06:39:28,795 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:28,797 [main:107] - replacing (prope6, String)
2021-03-12 06:39:28,797 [main:50] - replacing prope6 String
2021-03-12 06:39:28,797 [main:54] - Getting value of type String
2021-03-12 06:39:28,922 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:28,924 [main:58] - GENERATED VALUE OF TYPE String = "qrkjb"
2021-03-12 06:39:28,924 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:29,203 [main:67] - randomType = Short?
2021-03-12 06:39:29,322 [main:302] - generating value of type = Short true depth = 0
2021-03-12 06:39:29,362 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@721df027]
2021-03-12 06:39:29,362 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1266f8f1]
2021-03-12 06:39:29,362 [main:78] - Generated call from random type = (32036)?.toChar().lowercase()
2021-03-12 06:39:29,362 [main:106] - GETTING String from String
2021-03-12 06:39:29,380 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46328ee3]]
2021-03-12 06:39:29,380 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46328ee3]
2021-03-12 06:39:29,380 [main:117] - GENERATED CALL = (result).trimEnd()
2021-03-12 06:39:29,380 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24fff0ff]]
2021-03-12 06:39:29,380 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24fff0ff]
2021-03-12 06:39:29,380 [main:117] - GENERATED CALL = (result).decapitalize()
2021-03-12 06:39:29,380 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@326022ed]]
2021-03-12 06:39:29,380 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@326022ed]
2021-03-12 06:39:29,498 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:39:29,621 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): Iterable<Int> = TODO()
2021-03-12 06:39:29,624 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): Iterable<Int> = TODO()
2021-03-12 06:39:29,752 [main:95] - GENERATED = arrayListOf<Int>()
2021-03-12 06:39:29,752 [main:117] - GENERATED CALL = (result).slice(arrayListOf<Int>())
2021-03-12 06:39:29,752 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59058a0d]]
2021-03-12 06:39:29,752 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59058a0d]
2021-03-12 06:39:29,752 [main:117] - GENERATED CALL = (result).lowercase()
2021-03-12 06:39:29,753 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e9f07d]]
2021-03-12 06:39:29,753 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e9f07d]
2021-03-12 06:39:29,876 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:30,002 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:39:30,005 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:39:30,293 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:39:30,295 [main:95] - GENERATED = StringBuilder(-923797627)
2021-03-12 06:39:30,416 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:30,418 [main:117] - GENERATED CALL = (result).commonSuffixWith(StringBuilder(-923797627), false)
2021-03-12 06:39:30,418 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c177435]]
2021-03-12 06:39:30,419 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c177435]
2021-03-12 06:39:30,536 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:30,656 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:30,778 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:30,780 [main:117] - GENERATED CALL = (result).replace('謵', '灀', true)
2021-03-12 06:39:30,780 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ae93fb7]]
2021-03-12 06:39:30,780 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:39:30,900 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:30,902 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ae93fb7]
2021-03-12 06:39:30,902 [main:117] - GENERATED CALL = (result).get(-1445402617).uppercase()
2021-03-12 06:39:30,902 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ca25e]]
2021-03-12 06:39:30,902 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ca25e]
2021-03-12 06:39:31,019 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:31,022 [main:117] - GENERATED CALL = (result).substring(2031949949)
2021-03-12 06:39:31,022 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d78057]]
2021-03-12 06:39:31,022 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d78057]
2021-03-12 06:39:31,142 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:31,288 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:31,290 [main:117] - GENERATED CALL = (result).replaceAfterLast('?', result, "pdrpt")
2021-03-12 06:39:31,291 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c6d2f9]]
2021-03-12 06:39:31,291 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c6d2f9]
2021-03-12 06:39:31,428 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:31,430 [main:117] - GENERATED CALL = (result).substringBeforeLast('റ', result)
2021-03-12 06:39:31,430 [main:114] - replacement of prope6 of type String is (result).replace('謵', '灀', true)
2021-03-12 06:39:31,548 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:39:31,549 [main:66] - Compilation checking started
2021-03-12 06:39:31,944 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            (result).replace('謵', '灀', true) = "fail 8"
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:31,946 [main:107] - replacing (prope1, Kla4)
2021-03-12 06:39:31,946 [main:50] - replacing prope1 Kla4
2021-03-12 06:39:31,946 [main:54] - Getting value of type Kla4
2021-03-12 06:39:32,070 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:39:32,072 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:39:32,072 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 06:39:32,072 [main:61] - GENERATED IS CALL =true
2021-03-12 06:39:32,206 [main:67] - randomType = Short
2021-03-12 06:39:32,323 [main:302] - generating value of type = Short true depth = 0
2021-03-12 06:39:32,360 [main:106] - GETTING Kla4 from String
2021-03-12 06:39:32,378 [main:106] - GETTING Kla4 from Inner
2021-03-12 06:39:32,383 [main:106] - GETTING Kla4 from Child
2021-03-12 06:39:32,388 [main:114] - replacement of prope1 of type Kla4 is Kla4()
2021-03-12 06:39:32,508 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:39:32,509 [main:66] - Compilation checking started
2021-03-12 06:39:33,146 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 {
            fu0()
        }
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:33,149 [main:107] - replacing ({
            fu0()
        }, SuspendFunction0<Unit>)
2021-03-12 06:39:33,150 [main:50] - replacing {
            fu0()
        } SuspendFunction0<Unit>
2021-03-12 06:39:33,150 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 06:39:33,291 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 06:39:33,293 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:39:33,415 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:39:33,418 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:39:33,678 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:39:33,681 [main:95] - GENERATED = require(false)
2021-03-12 06:39:33,681 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(false)}
2021-03-12 06:39:33,681 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:34,114 [main:67] - randomType = LinkedHashMap<Kla2<Kla5>, String>
2021-03-12 06:39:34,231 [main:302] - generating value of type = LinkedHashMap<Kla2<Kla5>, String> false depth = 0
2021-03-12 06:39:34,354 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Kla2<Kla5>, Strg> = TODO()
2021-03-12 06:39:34,357 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Kla2<Kla5>, Strg> = TODO()
2021-03-12 06:39:34,480 [main:95] - GENERATED = linkedMapOf<Kla2<Kla5>, String>()
2021-03-12 06:39:34,686 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 06:39:34,721 [main:106] - GETTING SuspendFunction0<Unit> from Inner
2021-03-12 06:39:34,730 [main:106] - GETTING SuspendFunction0<Unit> from Child
2021-03-12 06:39:34,740 [main:114] - replacement of {
            fu0()
        } of type SuspendFunction0<Unit> is { require(false)}
2021-03-12 06:39:34,884 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:39:34,884 [main:66] - Compilation checking started
2021-03-12 06:39:35,523 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = "fail 8"
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:35,526 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 06:39:35,527 [main:50] - replacing getOrThrow() Ty0
2021-03-12 06:39:35,527 [main:54] - Getting value of type Ty0
2021-03-12 06:39:35,688 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 06:39:35,693 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 06:39:35,836 [main:67] - randomType = Byte
2021-03-12 06:39:35,954 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:39:35,995 [main:106] - GETTING Ty0 from String
2021-03-12 06:39:36,019 [main:106] - GETTING Ty0 from Child
2021-03-12 06:39:36,026 [main:106] - GETTING Ty0 from Inner
2021-03-12 06:39:36,032 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 06:39:36,032 [main:107] - replacing ("fail 8", String)
2021-03-12 06:39:36,032 [main:50] - replacing "fail 8" String
2021-03-12 06:39:36,032 [main:54] - Getting value of type String
2021-03-12 06:39:36,150 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:36,152 [main:58] - GENERATED VALUE OF TYPE String = "trhos"
2021-03-12 06:39:36,152 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:36,288 [main:67] - randomType = Int?
2021-03-12 06:39:36,406 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:36,443 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@498ac438]
2021-03-12 06:39:36,561 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:36,563 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e0cb373]
2021-03-12 06:39:36,683 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:36,685 [main:78] - Generated call from random type = (298293053)?.compareTo(-1610258597).toString(1095372671)
2021-03-12 06:39:36,686 [main:106] - GETTING String from Inner
2021-03-12 06:39:36,690 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f66b93e]]
2021-03-12 06:39:36,691 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:36,691 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f66b93e]
2021-03-12 06:39:36,691 [main:117] - GENERATED CALL = (Child().Inner()).o().concat(result)
2021-03-12 06:39:36,691 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aa1f8fc]]
2021-03-12 06:39:36,691 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:36,691 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aa1f8fc]
2021-03-12 06:39:36,812 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:36,814 [main:117] - GENERATED CALL = (Child().Inner()).o().takeLast(1360753816)
2021-03-12 06:39:36,815 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6038dc]]
2021-03-12 06:39:36,815 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:36,815 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6038dc]
2021-03-12 06:39:36,954 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 06:39:36,956 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:39:36,959 [main:117] - GENERATED CALL = (Child().Inner()).o().filterIndexed({a: Int, b: Char -> false})
2021-03-12 06:39:36,959 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46328ee3]]
2021-03-12 06:39:36,959 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:36,959 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46328ee3]
2021-03-12 06:39:36,959 [main:117] - GENERATED CALL = (Child().Inner()).o().trimEnd()
2021-03-12 06:39:36,959 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c2f4ae]]
2021-03-12 06:39:36,959 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:36,959 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c2f4ae]
2021-03-12 06:39:36,959 [main:117] - GENERATED CALL = (Child().Inner()).o().reversed()
2021-03-12 06:39:36,960 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d8a94b]]
2021-03-12 06:39:36,960 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:36,960 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d8a94b]
2021-03-12 06:39:37,079 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:37,081 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceBefore('參', result, result)
2021-03-12 06:39:37,081 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a8dbde]]
2021-03-12 06:39:37,081 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:37,081 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a8dbde]
2021-03-12 06:39:37,199 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:37,323 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:39:37,326 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:39:37,589 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:39:37,591 [main:95] - GENERATED = StringBuilder(-1741470590)
2021-03-12 06:39:37,591 [main:117] - GENERATED CALL = (Child().Inner()).o().removePrefix(StringBuilder(-1741470590))
2021-03-12 06:39:37,591 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68bfe90]]
2021-03-12 06:39:37,591 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:37,591 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68bfe90]
2021-03-12 06:39:37,592 [main:117] - GENERATED CALL = (Child().Inner()).o().toLowerCase()
2021-03-12 06:39:37,592 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@437865f6]]
2021-03-12 06:39:37,592 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:37,592 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@437865f6]
2021-03-12 06:39:37,711 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:37,833 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:37,835 [main:117] - GENERATED CALL = (Child().Inner()).o().padStart(2127050976, '펍')
2021-03-12 06:39:37,835 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c8534ce]]
2021-03-12 06:39:37,835 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:37,836 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c8534ce]
2021-03-12 06:39:37,953 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:38,078 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:39:38,081 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:39:38,389 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:39:38,391 [main:95] - GENERATED = StringBuilder("ofuyq")
2021-03-12 06:39:38,391 [main:117] - GENERATED CALL = (Child().Inner()).o().removeSuffix(StringBuilder("ofuyq"))
2021-03-12 06:39:38,391 [main:114] - replacement of "fail 8" of type String is (Child().Inner()).o().replaceBefore('參', result, result)
2021-03-12 06:39:38,508 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:39:38,508 [main:66] - Compilation checking started
2021-03-12 06:39:39,131 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:39,133 [main:107] - replacing (", got ", String)
2021-03-12 06:39:39,133 [main:50] - replacing ", got " String
2021-03-12 06:39:39,133 [main:54] - Getting value of type String
2021-03-12 06:39:39,263 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:39,265 [main:58] - GENERATED VALUE OF TYPE String = "niewm"
2021-03-12 06:39:39,265 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:39,671 [main:67] - randomType = List<Sequence<Short>>
2021-03-12 06:39:39,671 [main:106] - GETTING String from String
2021-03-12 06:39:39,692 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e9f07d]]
2021-03-12 06:39:39,692 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:39:39,830 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:39,952 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:39,954 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e9f07d]
2021-03-12 06:39:40,072 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:40,200 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:40,202 [main:117] - GENERATED CALL = (result).subSequence(887805967, -1939970962).commonSuffixWith("glcmi", true)
2021-03-12 06:39:40,202 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59058a0d]]
2021-03-12 06:39:40,202 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59058a0d]
2021-03-12 06:39:40,203 [main:117] - GENERATED CALL = (result).lowercase()
2021-03-12 06:39:40,203 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d75fda]]
2021-03-12 06:39:40,203 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:39:40,324 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:40,449 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:40,452 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d75fda]
2021-03-12 06:39:40,570 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:40,572 [main:117] - GENERATED CALL = (result).subSequence(1633726991, 1456703089).repeat(-1713054406)
2021-03-12 06:39:40,572 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5896f627]]
2021-03-12 06:39:40,572 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5896f627]
2021-03-12 06:39:40,689 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:40,808 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:40,929 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:40,931 [main:117] - GENERATED CALL = (result).replaceFirst('泏', '䨊', false)
2021-03-12 06:39:40,931 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3bee1bb3]]
2021-03-12 06:39:40,931 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3bee1bb3]
2021-03-12 06:39:41,081 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:41,081 [main:117] - GENERATED CALL = (result).plus("gexyv")
2021-03-12 06:39:41,082 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6423e6d6]]
2021-03-12 06:39:41,082 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6423e6d6]
2021-03-12 06:39:41,215 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:41,340 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:41,464 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:41,469 [main:117] - GENERATED CALL = (result).replaceRange(19185875, -641376290, "cdztk")
2021-03-12 06:39:41,469 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38ba777f]]
2021-03-12 06:39:41,469 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:39:41,590 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:41,717 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:41,719 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38ba777f]
2021-03-12 06:39:41,838 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:41,961 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:41,963 [main:117] - GENERATED CALL = (result).subSequence(1857455114, 508597798).commonPrefixWith(StringBuilder(), true)
2021-03-12 06:39:41,963 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e9f07d]]
2021-03-12 06:39:41,963 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e9f07d]
2021-03-12 06:39:42,083 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:42,204 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:42,207 [main:117] - GENERATED CALL = (result).commonSuffixWith("nmkrl", false)
2021-03-12 06:39:42,207 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1788e6]]
2021-03-12 06:39:42,207 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:39:42,355 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:42,358 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1788e6]
2021-03-12 06:39:42,358 [main:117] - GENERATED CALL = (result).get(491707186).titlecase()
2021-03-12 06:39:42,358 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36e4f1aa]]
2021-03-12 06:39:42,358 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:39:42,491 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:42,611 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:42,613 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36e4f1aa]
2021-03-12 06:39:42,731 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:39:42,856 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:39:42,859 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:39:43,264 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:39:43,266 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 06:39:43,391 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<RegexOption>.()->kotlin.Unit): Set<RegexOption> = TODO()
2021-03-12 06:39:43,394 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<RegexOption>.()->kotlin.Unit): Set<RegexOption> = TODO()
2021-03-12 06:39:43,711 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<RegexOption>, Unit> false depth = 6
2021-03-12 06:39:43,714 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 06:39:43,835 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:39:43,838 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:39:44,099 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 10
2021-03-12 06:39:44,101 [main:302] - generating value of type = Unit false depth = 11
2021-03-12 06:39:44,229 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:39:44,232 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:39:44,493 [main:302] - generating value of type = Any false depth = 14
2021-03-12 06:39:44,494 [main:95] - GENERATED = print("fkogh")
2021-03-12 06:39:44,494 [main:95] - GENERATED = contract({ print("fkogh")})
2021-03-12 06:39:44,494 [main:95] - GENERATED = buildSet<RegexOption>({ contract({ print("fkogh")})})
2021-03-12 06:39:44,494 [main:95] - GENERATED = Regex("ltxkl", buildSet<RegexOption>({ contract({ print("fkogh")})}))
2021-03-12 06:39:44,495 [main:117] - GENERATED CALL = (result).subSequence(1379088455, -1980478136).replaceFirst(Regex("ltxkl", buildSet<RegexOption>({ contract({ print("fkogh")})})), var result =
2021-03-12 06:39:44,495 [main:114] - replacement of ", got " of type String is (result).plus("gexyv")
2021-03-12 06:39:44,612 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:39:44,612 [main:66] - Compilation checking started
2021-03-12 06:39:45,223 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:45,226 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 06:39:45,226 [main:50] - replacing numberOfSuspensions Int
2021-03-12 06:39:45,226 [main:54] - Getting value of type Int
2021-03-12 06:39:45,355 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:45,357 [main:58] - GENERATED VALUE OF TYPE Int = -820210365
2021-03-12 06:39:45,357 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:45,366 [main:67] - randomType = Kla3
2021-03-12 06:39:45,482 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 06:39:45,484 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 06:39:45,491 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@787d2ea9]
2021-03-12 06:39:45,608 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:45,608 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@518e87dd]
2021-03-12 06:39:45,725 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:45,728 [main:78] - Generated call from random type = (Kla3()).equals("fysig").compareTo(true)
2021-03-12 06:39:45,729 [main:106] - GETTING Int from String
2021-03-12 06:39:45,751 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5747831d]]
2021-03-12 06:39:45,752 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:39:45,752 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5747831d]
2021-03-12 06:39:45,871 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:45,874 [main:117] - GENERATED CALL = (result).compareTo(var result =.rotateLeft(-523828043)
2021-03-12 06:39:45,874 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ad0806f], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]]
2021-03-12 06:39:45,874 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e77d9e6]
2021-03-12 06:39:45,991 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:45,993 [main:117] - GENERATED CALL = (result).length.shr(-779548260)
2021-03-12 06:39:45,993 [main:113] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@6ef6c029]]
2021-03-12 06:39:45,993 [main:117] - GENERATED CALL = (result).lastIndex
2021-03-12 06:39:45,993 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ad0806f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5da0292e]]
2021-03-12 06:39:45,993 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5da0292e]
2021-03-12 06:39:46,114 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:46,116 [main:117] - GENERATED CALL = (result).length.rotateRight(-758120122)
2021-03-12 06:39:46,116 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d458cb8]]
2021-03-12 06:39:46,116 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:39:46,117 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d458cb8]
2021-03-12 06:39:46,240 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:46,242 [main:117] - GENERATED CALL = (result).compareTo(var result =.ushr(1902427797)
2021-03-12 06:39:46,243 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a5d4375]]
2021-03-12 06:39:46,243 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:39:46,243 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a5d4375]
2021-03-12 06:39:46,366 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:39:46,369 [main:117] - GENERATED CALL = (result).compareTo(var result =.rem(-101)
2021-03-12 06:39:46,369 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2da76201]]
2021-03-12 06:39:46,369 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2da76201]
2021-03-12 06:39:46,502 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 06:39:46,624 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 06:39:46,627 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 06:39:46,751 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:39:46,753 [main:95] - GENERATED = charArrayOf('㶆')
2021-03-12 06:39:46,870 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:46,989 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:46,991 [main:117] - GENERATED CALL = (result).indexOfAny(charArrayOf('㶆'), 1264502912, true)
2021-03-12 06:39:46,991 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ad0806f], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30a8db01]]
2021-03-12 06:39:46,991 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30a8db01]
2021-03-12 06:39:46,991 [main:117] - GENERATED CALL = (result).length.toInt()
2021-03-12 06:39:46,991 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2da76201]]
2021-03-12 06:39:46,991 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:39:47,109 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:47,232 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:47,234 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2da76201]
2021-03-12 06:39:47,353 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 06:39:47,475 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-12 06:39:47,478 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-12 06:39:47,733 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:39:47,736 [main:95] - GENERATED = CharArray(531311526)
2021-03-12 06:39:47,880 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:48,029 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:48,032 [main:117] - GENERATED CALL = (result).subSequence(805378989, 1437872942).indexOfAny(CharArray(531311526), 1908161876, false)
2021-03-12 06:39:48,032 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2c4766e3]]
2021-03-12 06:39:48,032 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:39:48,149 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:48,152 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2c4766e3]
2021-03-12 06:39:48,269 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:48,271 [main:117] - GENERATED CALL = (result).get(1458479769).minus('육')
2021-03-12 06:39:48,271 [main:114] - replacement of numberOfSuspensions of type Int is (result).compareTo(var result =.ushr(1902427797)
2021-03-12 06:39:48,387 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 06:39:48,387 [main:66] - Compilation checking started
2021-03-12 06:39:48,392 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:39:48,392 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..(result).compareTo(var result =.ushr(1902427797)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:48,395 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine ", String)
2021-03-12 06:39:48,395 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " String
2021-03-12 06:39:48,395 [main:54] - Getting value of type String
2021-03-12 06:39:48,512 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:48,514 [main:58] - GENERATED VALUE OF TYPE String = "npssc"
2021-03-12 06:39:48,514 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:48,654 [main:67] - randomType = Kla1?
2021-03-12 06:39:48,772 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:39:48,774 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}
2021-03-12 06:39:48,794 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6bd10b84]
2021-03-12 06:39:48,794 [main:78] - Generated call from random type = (Kla1())?.prope6?.toString()!!
2021-03-12 06:39:48,795 [main:106] - GETTING String from Inner
2021-03-12 06:39:48,801 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6423e6d6]]
2021-03-12 06:39:48,801 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:48,801 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6423e6d6]
2021-03-12 06:39:48,919 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:49,038 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:49,201 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:39:49,207 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceRange(1130076345, 2104735127, StringBuilder())
2021-03-12 06:39:49,207 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d78057]]
2021-03-12 06:39:49,207 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:49,207 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d78057]
2021-03-12 06:39:49,342 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:49,463 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:49,465 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceAfterLast('﷮', var result =
2021-03-12 06:39:49,465 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d8a94b]]
2021-03-12 06:39:49,465 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:49,466 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d8a94b]
2021-03-12 06:39:49,583 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:49,585 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceBefore('鬓', result, result)
2021-03-12 06:39:49,585 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aa1f8fc]]
2021-03-12 06:39:49,585 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:49,585 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aa1f8fc]
2021-03-12 06:39:49,702 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:49,704 [main:117] - GENERATED CALL = (Child().Inner()).o().takeLast(1617171000)
2021-03-12 06:39:49,704 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ca23e4]]
2021-03-12 06:39:49,704 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:49,704 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ca23e4]
2021-03-12 06:39:49,821 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:49,823 [main:117] - GENERATED CALL = (Child().Inner()).o().drop(-1484443130)
2021-03-12 06:39:49,823 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1055adc6]]
2021-03-12 06:39:49,823 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:49,823 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1055adc6]
2021-03-12 06:39:49,824 [main:117] - GENERATED CALL = (Child().Inner()).o().trim()
2021-03-12 06:39:49,824 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ea953fe]]
2021-03-12 06:39:49,824 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:49,824 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ea953fe]
2021-03-12 06:39:49,941 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:49,943 [main:117] - GENERATED CALL = (Child().Inner()).o().substringAfterLast('ꑰ', result)
2021-03-12 06:39:49,943 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d137b6c]]
2021-03-12 06:39:49,943 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:49,943 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d137b6c]
2021-03-12 06:39:50,061 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:50,182 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:50,184 [main:117] - GENERATED CALL = (Child().Inner()).o().padEnd(2067214841, '坈')
2021-03-12 06:39:50,184 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]]
2021-03-12 06:39:50,184 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:50,184 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]
2021-03-12 06:39:50,306 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:39:50,309 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:39:50,311 [main:117] - GENERATED CALL = (Child().Inner()).o().filterNot({a: Char -> false})
2021-03-12 06:39:50,311 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@437865f6]]
2021-03-12 06:39:50,311 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:50,311 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@437865f6]
2021-03-12 06:39:50,458 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:50,595 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:50,597 [main:117] - GENERATED CALL = (Child().Inner()).o().padStart(-990653830, '庨')
2021-03-12 06:39:50,598 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " of type String is (Child().Inner()).o().drop(-1484443130)
2021-03-12 06:39:50,715 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:39:50,715 [main:66] - Compilation checking started
2021-03-12 06:39:51,358 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:51,362 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-12 06:39:51,362 [main:50] - replacing prope10 Function0<Unit>
2021-03-12 06:39:51,362 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:39:51,493 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:39:51,495 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:39:51,619 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:39:51,622 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:39:52,016 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:39:52,018 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:39:52,020 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:39:52,021 [main:95] - GENERATED = check(true, { "zseng"})
2021-03-12 06:39:52,021 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "zseng"})}
2021-03-12 06:39:52,021 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:52,025 [main:67] - randomType = UInt
2021-03-12 06:39:52,164 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 06:39:52,207 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:39:52,235 [main:106] - GETTING Function0<Unit> from Inner
2021-03-12 06:39:52,241 [main:106] - GETTING Function0<Unit> from Child
2021-03-12 06:39:52,248 [main:114] - replacement of prope10 of type Function0<Unit> is { check(true, { "zseng"})}
2021-03-12 06:39:52,370 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:39:52,371 [main:66] - Compilation checking started
2021-03-12 06:39:52,761 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            { check(true, { "zseng"})}()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:52,763 [main:107] - replacing ("call to 'resume' before 'invoke' with coroutine", String)
2021-03-12 06:39:52,764 [main:50] - replacing "call to 'resume' before 'invoke' with coroutine" String
2021-03-12 06:39:52,764 [main:54] - Getting value of type String
2021-03-12 06:39:52,893 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:52,895 [main:58] - GENERATED VALUE OF TYPE String = "rodbm"
2021-03-12 06:39:52,895 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:53,175 [main:67] - randomType = Sequence<Kla5>
2021-03-12 06:39:53,176 [main:106] - GETTING String from Inner
2021-03-12 06:39:53,183 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1fc0a4]]
2021-03-12 06:39:53,183 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:53,183 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1fc0a4]
2021-03-12 06:39:53,183 [main:117] - GENERATED CALL = (Child().Inner()).o().trimStart()
2021-03-12 06:39:53,183 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e313596]]
2021-03-12 06:39:53,183 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:53,183 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e313596]
2021-03-12 06:39:53,304 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:39:53,306 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:39:53,308 [main:117] - GENERATED CALL = (Child().Inner()).o().takeLastWhile({a: Char -> true})
2021-03-12 06:39:53,308 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d8a94b]]
2021-03-12 06:39:53,309 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:53,309 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d8a94b]
2021-03-12 06:39:53,431 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:53,559 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:53,562 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceBefore('㘕', "nbwyu", result)
2021-03-12 06:39:53,562 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]]
2021-03-12 06:39:53,562 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:53,562 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]
2021-03-12 06:39:53,698 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:53,702 [main:117] - GENERATED CALL = (Child().Inner()).o().substringBefore('', var result =
2021-03-12 06:39:53,702 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6038dc]]
2021-03-12 06:39:53,702 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:53,702 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6038dc]
2021-03-12 06:39:53,841 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 06:39:53,844 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:39:53,846 [main:117] - GENERATED CALL = (Child().Inner()).o().filterIndexed({a: Int, b: Char -> false})
2021-03-12 06:39:53,846 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d137b6c]]
2021-03-12 06:39:53,846 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:53,846 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d137b6c]
2021-03-12 06:39:53,969 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:39:54,100 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:54,102 [main:117] - GENERATED CALL = (Child().Inner()).o().padEnd(1628368693, '耡')
2021-03-12 06:39:54,102 [main:113] - Case = [public final fun k(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@23b84840]]
2021-03-12 06:39:54,102 [main:149] - GENERATING call of type public final fun k(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@23b84840]
2021-03-12 06:39:54,103 [main:117] - GENERATED CALL = (Child().Inner()).k()
2021-03-12 06:39:54,103 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d78057]]
2021-03-12 06:39:54,103 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:54,103 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d78057]
2021-03-12 06:39:54,221 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:39:54,223 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceAfterLast('∐', var result =
2021-03-12 06:39:54,223 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d7b733]]
2021-03-12 06:39:54,223 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:54,223 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d7b733]
2021-03-12 06:39:54,354 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:39:54,356 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceIndentByMargin(result, "msloo")
2021-03-12 06:39:54,357 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147ab626]]
2021-03-12 06:39:54,357 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:54,357 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@147ab626]
2021-03-12 06:39:54,357 [main:117] - GENERATED CALL = (Child().Inner()).o().capitalize()
2021-03-12 06:39:54,357 [main:114] - replacement of "call to 'resume' before 'invoke' with coroutine" of type String is (Child().Inner()).o().replaceAfterLast('∐', var result =
2021-03-12 06:39:54,476 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(BINARY_EXPRESSION)
2021-03-12 06:39:54,477 [main:66] - Compilation checking started
2021-03-12 06:39:54,481 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:39:54,482 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != (Child().Inner()).o().replaceAfterLast('∐', var result =) return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:54,484 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 06:39:54,484 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 06:39:54,484 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 06:39:54,602 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 06:39:54,604 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:39:54,728 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:39:54,731 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:39:54,993 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:39:54,994 [main:95] - GENERATED = println("wrhfd")
2021-03-12 06:39:54,994 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> println("wrhfd")}
2021-03-12 06:39:54,994 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:55,573 [main:67] - randomType = ArrayList<Short?>?
2021-03-12 06:39:55,701 [main:302] - generating value of type = ArrayList<Short?> false depth = 0
2021-03-12 06:39:55,843 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Short?): ArrayList<Short?> = TODO()
2021-03-12 06:39:55,847 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Short?): ArrayList<Short?> = TODO()
2021-03-12 06:39:55,979 [main:302] - generating value of type = Short true depth = 3
2021-03-12 06:39:55,981 [main:95] - GENERATED = arrayListOf<Short?>(4523)
2021-03-12 06:39:56,138 [main:106] - GETTING Function1<Throwable, Unit> from Inner
2021-03-12 06:39:56,144 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 06:39:56,161 [main:106] - GETTING Function1<Throwable, Unit> from Child
2021-03-12 06:39:56,166 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> println("wrhfd")}
2021-03-12 06:39:56,284 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:39:56,284 [main:66] - Compilation checking started
2021-03-12 06:39:56,845 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:56,848 [main:107] - replacing (prope9, Boolean)
2021-03-12 06:39:56,848 [main:50] - replacing prope9 Boolean
2021-03-12 06:39:56,848 [main:54] - Getting value of type Boolean
2021-03-12 06:39:57,013 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:57,015 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:39:57,015 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:57,019 [main:67] - randomType = Boolean
2021-03-12 06:39:57,156 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:57,170 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5cb6f326]
2021-03-12 06:39:57,291 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:57,293 [main:78] - Generated call from random type = (true).or(false)
2021-03-12 06:39:57,294 [main:106] - GETTING Boolean from Inner
2021-03-12 06:39:57,300 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd3e252]]
2021-03-12 06:39:57,300 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:57,300 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd3e252]
2021-03-12 06:39:57,420 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:57,422 [main:117] - GENERATED CALL = (Child().Inner()).o().endsWith(result, false)
2021-03-12 06:39:57,423 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b149480]]
2021-03-12 06:39:57,423 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:57,423 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b149480]
2021-03-12 06:39:57,423 [main:117] - GENERATED CALL = (Child().Inner()).o().toBoolean()
2021-03-12 06:39:57,423 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969aa07]]
2021-03-12 06:39:57,423 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:57,423 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969aa07]
2021-03-12 06:39:57,423 [main:117] - GENERATED CALL = (Child().Inner()).o().matches(result)
2021-03-12 06:39:57,423 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c6fae99]]
2021-03-12 06:39:57,423 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:39:57,423 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c6fae99]
2021-03-12 06:39:57,541 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:57,543 [main:117] - GENERATED CALL = (Child().Inner()).o().startsWith(result, true)
2021-03-12 06:39:57,543 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@792333b0]]
2021-03-12 06:39:57,543 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:39:57,662 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:57,662 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@792333b0]
2021-03-12 06:39:57,662 [main:117] - GENERATED CALL = (Child().Inner()).equals("njpcf").not()
2021-03-12 06:39:57,662 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@287e719]]
2021-03-12 06:39:57,662 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:39:57,780 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:57,781 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 06:39:57,899 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:57,901 [main:117] - GENERATED CALL = (Child().Inner()).equals("ktmnj").xor(false)
2021-03-12 06:39:57,901 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]]
2021-03-12 06:39:57,901 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:39:58,026 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:58,027 [main:117] - GENERATED CALL = (Child().Inner()).equals("pfqeb")
2021-03-12 06:39:58,027 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]]
2021-03-12 06:39:58,027 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:39:58,155 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:58,155 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]
2021-03-12 06:39:58,277 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:58,278 [main:117] - GENERATED CALL = (Child().Inner()).equals("dlgar").equals("pmsai")
2021-03-12 06:39:58,278 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5cb6f326]]
2021-03-12 06:39:58,278 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:39:58,396 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:58,397 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5cb6f326]
2021-03-12 06:39:58,515 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:58,518 [main:117] - GENERATED CALL = (Child().Inner()).equals("poszg").or(false)
2021-03-12 06:39:58,518 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40bfe33e]]
2021-03-12 06:39:58,518 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:39:58,662 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:39:58,662 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40bfe33e]
2021-03-12 06:39:58,802 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:39:58,804 [main:117] - GENERATED CALL = (Child().Inner()).equals("fryuw").and(false)
2021-03-12 06:39:58,804 [main:114] - replacement of prope9 of type Boolean is (Child().Inner()).equals("dlgar").equals("pmsai")
2021-03-12 06:39:58,931 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:39:58,931 [main:66] - Compilation checking started
2021-03-12 06:39:59,463 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().(Child().Inner()).equals("dlgar").equals("pmsai") = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:39:59,466 [main:107] - replacing ({ x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
}, Function1<Continuation<Unit>, Any?>)
2021-03-12 06:39:59,466 [main:50] - replacing { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
} Function1<Continuation<Unit>, Any?>
2021-03-12 06:39:59,466 [main:54] - Getting value of type Function1<Continuation<Unit>, Any?>
2021-03-12 06:39:59,600 [main:302] - generating value of type = Function1<Continuation<Unit>, Any?> false depth = 0
2021-03-12 06:39:59,602 [main:302] - generating value of type = Any false depth = 1
2021-03-12 06:39:59,602 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Any?> = {a: Continuation<Unit> -> "rnpnl"}
2021-03-12 06:39:59,602 [main:61] - GENERATED IS CALL =false
2021-03-12 06:39:59,610 [main:67] - randomType = Base
2021-03-12 06:39:59,733 [main:302] - generating value of type = Base false depth = 0
2021-03-12 06:39:59,735 [main:112] - generating klass Base text = abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}
2021-03-12 06:39:59,986 [main:302] - generating value of type = Child false depth = 2
2021-03-12 06:39:59,988 [main:112] - generating klass Child text = class Child : Base()
2021-03-12 06:39:59,993 [main:106] - GETTING Function1<Continuation<Unit>, Any?> from Inner
2021-03-12 06:39:59,999 [main:106] - GETTING Function1<Continuation<Unit>, Any?> from String
2021-03-12 06:40:00,019 [main:106] - GETTING Function1<Continuation<Unit>, Any?> from Child
2021-03-12 06:40:00,025 [main:114] - replacement of { x ->
    x.resume(Unit)
    COROUTINE_SUSPENDED
} of type Function1<Continuation<Unit>, Any?> is {a: Continuation<Unit> -> "rnpnl"}
2021-03-12 06:40:00,145 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:40:00,145 [main:66] - Compilation checking started
2021-03-12 06:40:00,765 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, -3)
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:40:00,768 [main:107] - replacing (prope6, Result<Ty0>)
2021-03-12 06:40:00,768 [main:50] - replacing prope6 Result<Ty0>
2021-03-12 06:40:00,769 [main:54] - Getting value of type Result<Ty0>
2021-03-12 06:40:00,912 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 06:40:01,055 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 06:40:01,058 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 06:40:01,315 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 06:40:01,315 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 06:40:01,446 [main:67] - randomType = ULong
2021-03-12 06:40:01,563 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 06:40:01,594 [main:106] - GETTING Result<Ty0> from String
2021-03-12 06:40:01,611 [main:106] - GETTING Result<Ty0> from Child
2021-03-12 06:40:01,617 [main:106] - GETTING Result<Ty0> from Inner
2021-03-12 06:40:01,621 [main:111] - Cant find and generate replacement for prope6 type Result<Ty0>
2021-03-12 06:40:01,621 [main:107] - replacing (prope2, Continuation<Unit>)
2021-03-12 06:40:01,622 [main:50] - replacing prope2 Continuation<Unit>
2021-03-12 06:40:01,622 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 06:40:01,739 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 06:40:01,862 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 06:40:01,865 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 06:40:02,292 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:40:02,415 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:40:02,418 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:40:02,676 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:40:02,800 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:40:02,804 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:40:03,208 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 06:40:03,336 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:40:03,339 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:40:03,787 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:40:03,787 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:40:03,788 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:40:03,788 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 06:40:03,788 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 06:40:03,924 [main:67] - randomType = Short
2021-03-12 06:40:04,042 [main:302] - generating value of type = Short true depth = 0
2021-03-12 06:40:04,082 [main:106] - GETTING Continuation<Unit> from Inner
2021-03-12 06:40:04,086 [main:106] - GETTING Continuation<Unit> from Child
2021-03-12 06:40:04,092 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 06:40:04,107 [main:111] - Cant find and generate replacement for prope2 type Continuation<Unit>
2021-03-12 06:40:04,107 [main:107] - replacing (-3, Int)
2021-03-12 06:40:04,107 [main:50] - replacing -3 Int
2021-03-12 06:40:04,107 [main:54] - Getting value of type Int
2021-03-12 06:40:04,225 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:04,227 [main:58] - GENERATED VALUE OF TYPE Int = 843480690
2021-03-12 06:40:04,227 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:04,512 [main:67] - randomType = LinkedHashMap<UInt, Base?>
2021-03-12 06:40:04,630 [main:302] - generating value of type = LinkedHashMap<UInt, Base?> false depth = 0
2021-03-12 06:40:04,754 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): LinkedHashMap<UInt, Base?> = TODO()
2021-03-12 06:40:04,757 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): LinkedHashMap<UInt, Base?> = TODO()
2021-03-12 06:40:04,881 [main:95] - GENERATED = LinkedHashMap<UInt, Base?>()
2021-03-12 06:40:04,996 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3dee58]
2021-03-12 06:40:05,116 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:05,118 [main:78] - Generated call from random type = (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454)
2021-03-12 06:40:05,119 [main:106] - GETTING Int from String
2021-03-12 06:40:05,144 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3dee58]]
2021-03-12 06:40:05,144 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:40:05,144 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d3dee58]
2021-03-12 06:40:05,286 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:05,288 [main:117] - GENERATED CALL = (result).compareTo(result).xor(300097614)
2021-03-12 06:40:05,288 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@721b941b]]
2021-03-12 06:40:05,288 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:40:05,288 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@721b941b]
2021-03-12 06:40:05,406 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:05,408 [main:117] - GENERATED CALL = (result).compareTo(var result =.coerceAtMost(825295070)
2021-03-12 06:40:05,408 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@203cc120]]
2021-03-12 06:40:05,408 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:40:05,525 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:05,527 [main:117] - GENERATED CALL = (result).get(-1530203482).code
2021-03-12 06:40:05,527 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30a8db01]]
2021-03-12 06:40:05,527 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:40:05,528 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30a8db01]
2021-03-12 06:40:05,528 [main:117] - GENERATED CALL = (result).compareTo(result).toInt()
2021-03-12 06:40:05,528 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbbec7c]]
2021-03-12 06:40:05,528 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:05,646 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:05,766 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:05,768 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbbec7c]
2021-03-12 06:40:05,885 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:40:05,887 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:40:05,889 [main:117] - GENERATED CALL = (result).subSequence(-332726535, -1991962355).indexOfFirst({a: Char -> false})
2021-03-12 06:40:05,889 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2da76201]]
2021-03-12 06:40:05,889 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2da76201]
2021-03-12 06:40:06,007 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 06:40:06,130 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 06:40:06,133 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 06:40:06,262 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:40:06,264 [main:95] - GENERATED = charArrayOf('㲠')
2021-03-12 06:40:06,381 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:06,501 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:06,504 [main:117] - GENERATED CALL = (result).indexOfAny(charArrayOf('㲠'), 1116746634, true)
2021-03-12 06:40:06,504 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71b6c29]]
2021-03-12 06:40:06,504 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:06,621 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:06,741 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:06,743 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71b6c29]
2021-03-12 06:40:06,886 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:40:07,034 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:07,157 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:07,160 [main:117] - GENERATED CALL = (result).subSequence(1274003163, 1820762854).indexOf('㒧', -1314718842, true)
2021-03-12 06:40:07,160 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bacbc0f]]
2021-03-12 06:40:07,160 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:40:07,160 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bacbc0f]
2021-03-12 06:40:07,160 [main:117] - GENERATED CALL = (result).compareTo(var result =.unaryPlus()
2021-03-12 06:40:07,160 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c031fd]]
2021-03-12 06:40:07,160 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:07,278 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:07,405 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:07,407 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c031fd]
2021-03-12 06:40:07,407 [main:117] - GENERATED CALL = (result).subSequence(409746264, -1216356104).count()
2021-03-12 06:40:07,408 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2586ccb7]]
2021-03-12 06:40:07,408 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:40:07,408 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2586ccb7]
2021-03-12 06:40:07,408 [main:117] - GENERATED CALL = (result).compareTo(result).unaryMinus()
2021-03-12 06:40:07,408 [main:114] - replacement of -3 of type Int is (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454)
2021-03-12 06:40:07,535 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:40:07,535 [main:66] - Compilation checking started
2021-03-12 06:40:08,236 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:40:08,239 [main:107] - replacing (exception, Throwable)
2021-03-12 06:40:08,239 [main:50] - replacing exception Throwable
2021-03-12 06:40:08,239 [main:54] - Getting value of type Throwable
2021-03-12 06:40:08,362 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 06:40:08,490 [main:43] - GENERATING CALL OF fun Error(message: kotlin.String?): Throwable = TODO()
2021-03-12 06:40:08,493 [main:61] - WITHOUT TYPE PARAMS = fun Error(message: kotlin.String?): Throwable = TODO()
2021-03-12 06:40:08,779 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:40:08,781 [main:95] - GENERATED = Error("dyukt")
2021-03-12 06:40:08,782 [main:58] - GENERATED VALUE OF TYPE Throwable = Error("dyukt")
2021-03-12 06:40:08,782 [main:61] - GENERATED IS CALL =true
2021-03-12 06:40:08,790 [main:67] - randomType = Kla3
2021-03-12 06:40:08,911 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 06:40:08,913 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 06:40:08,920 [main:106] - GETTING Throwable from String
2021-03-12 06:40:08,940 [main:106] - GETTING Throwable from Child
2021-03-12 06:40:08,945 [main:106] - GETTING Throwable from Inner
2021-03-12 06:40:08,949 [main:114] - replacement of exception of type Throwable is Error("dyukt")
2021-03-12 06:40:09,078 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:40:09,078 [main:66] - Compilation checking started
2021-03-12 06:40:09,734 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:09,736 [main:107] - replacing ("\n", String)
2021-03-12 06:40:09,736 [main:50] - replacing "\n" String
2021-03-12 06:40:09,736 [main:54] - Getting value of type String
2021-03-12 06:40:09,875 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:09,877 [main:58] - GENERATED VALUE OF TYPE String = "gifmh"
2021-03-12 06:40:09,878 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:10,025 [main:67] - randomType = Long
2021-03-12 06:40:10,157 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:40:10,212 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6f89fc23]
2021-03-12 06:40:10,212 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1266f8f1]
2021-03-12 06:40:10,212 [main:78] - Generated call from random type = (-4795248794636194158).toChar().lowercase()
2021-03-12 06:40:10,212 [main:114] - replacement of "\n" of type String is (-4795248794636194158).toChar().lowercase()
2021-03-12 06:40:10,335 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:40:10,335 [main:66] - Compilation checking started
2021-03-12 06:40:10,943 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:10,945 [main:107] - replacing (false, Boolean)
2021-03-12 06:40:10,945 [main:50] - replacing false Boolean
2021-03-12 06:40:10,945 [main:54] - Getting value of type Boolean
2021-03-12 06:40:11,087 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:11,089 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:40:11,089 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:11,238 [main:67] - randomType = Byte
2021-03-12 06:40:11,363 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:40:11,394 [main:149] - GENERATING call of type public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7ad8bd4d]
2021-03-12 06:40:11,395 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7446bbe5]
2021-03-12 06:40:11,515 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:11,515 [main:78] - Generated call from random type = (-23).toByte().equals("gsghb")
2021-03-12 06:40:11,516 [main:106] - GETTING Boolean from String
2021-03-12 06:40:11,537 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@502c2531]]
2021-03-12 06:40:11,537 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:11,660 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:11,790 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:11,793 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@502c2531]
2021-03-12 06:40:11,915 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:40:11,917 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:40:11,919 [main:117] - GENERATED CALL = (result).subSequence(-402080828, 1177136337).all({a: Char -> false})
2021-03-12 06:40:11,919 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e49445c]]
2021-03-12 06:40:11,919 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:40:12,041 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:12,043 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e49445c]
2021-03-12 06:40:12,043 [main:117] - GENERATED CALL = (result).get(-424049036).isUpperCase()
2021-03-12 06:40:12,043 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@108dd5c6]]
2021-03-12 06:40:12,043 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:12,167 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:12,290 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:12,293 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@108dd5c6]
2021-03-12 06:40:12,293 [main:117] - GENERATED CALL = (result).subSequence(99980392, 1536645787).isNotEmpty()
2021-03-12 06:40:12,293 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59699047]]
2021-03-12 06:40:12,293 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59699047]
2021-03-12 06:40:12,293 [main:117] - GENERATED CALL = (result).none()
2021-03-12 06:40:12,293 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b883b82]]
2021-03-12 06:40:12,293 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:40:12,415 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:12,417 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b883b82]
2021-03-12 06:40:12,418 [main:117] - GENERATED CALL = (result).get(-1434637222).isDefined()
2021-03-12 06:40:12,418 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@738a77d2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]]
2021-03-12 06:40:12,418 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@738a77d2]
2021-03-12 06:40:12,559 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:12,559 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]
2021-03-12 06:40:12,700 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:12,701 [main:117] - GENERATED CALL = (result).equals("shukj").equals("zxdxg")
2021-03-12 06:40:12,701 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31ddf833]]
2021-03-12 06:40:12,701 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31ddf833]
2021-03-12 06:40:12,823 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:12,945 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:40:13,072 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:13,197 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:13,318 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:13,320 [main:117] - GENERATED CALL = (result).regionMatches(826844759, "aybpz", 1202684796, -1915399403, true)
2021-03-12 06:40:13,320 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58c399df]]
2021-03-12 06:40:13,320 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:13,443 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:13,566 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:13,568 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58c399df]
2021-03-12 06:40:13,689 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:40:13,812 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:13,814 [main:117] - GENERATED CALL = (result).subSequence(1401286232, 1359603380).endsWith('濟', false)
2021-03-12 06:40:13,814 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc28ef5]]
2021-03-12 06:40:13,814 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:40:13,961 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:13,964 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cc28ef5]
2021-03-12 06:40:13,964 [main:117] - GENERATED CALL = (result).get(-1900664321).isHighSurrogate()
2021-03-12 06:40:13,964 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@362235df]]
2021-03-12 06:40:13,964 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@362235df]
2021-03-12 06:40:13,965 [main:117] - GENERATED CALL = (result).isEmpty()
2021-03-12 06:40:13,965 [main:114] - replacement of false of type Boolean is (result).subSequence(1401286232, 1359603380).endsWith('濟', false)
2021-03-12 06:40:14,105 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:40:14,105 [main:66] - Compilation checking started
2021-03-12 06:40:14,671 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = (result).subSequence(1401286232, 1359603380).endsWith('濟', false)

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:14,673 [main:107] - replacing (1..numberOfSuspensions, IntRange)
2021-03-12 06:40:14,673 [main:50] - replacing 1..numberOfSuspensions IntRange
2021-03-12 06:40:14,673 [main:54] - Getting value of type IntRange
2021-03-12 06:40:14,801 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 06:40:14,930 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 06:40:14,934 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 06:40:15,331 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:40:15,333 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:40:15,336 [main:95] - GENERATED = IntRange(-1709230674, -1463489353)
2021-03-12 06:40:15,336 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-1709230674, -1463489353)
2021-03-12 06:40:15,336 [main:61] - GENERATED IS CALL =true
2021-03-12 06:40:15,482 [main:67] - randomType = Kla0?
2021-03-12 06:40:15,602 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:40:15,605 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}
2021-03-12 06:40:15,725 [main:194] - Type params = []
2021-03-12 06:40:15,866 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 06:40:15,997 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:40:16,000 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:40:16,267 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 06:40:16,395 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:40:16,398 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:40:16,804 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:40:16,804 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:40:16,817 [main:106] - GETTING IntRange from String
2021-03-12 06:40:16,832 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ad0806f], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@61c9e646]]
2021-03-12 06:40:16,832 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@61c9e646]
2021-03-12 06:40:16,953 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:40:16,955 [main:117] - GENERATED CALL = (result).length.until(121)
2021-03-12 06:40:16,955 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3102ee71]]
2021-03-12 06:40:16,955 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:40:17,075 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:17,077 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3102ee71]
2021-03-12 06:40:17,201 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:40:17,203 [main:117] - GENERATED CALL = (result).compareTo("npbfu").rangeTo(41)
2021-03-12 06:40:17,203 [main:113] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@bb614f5]]
2021-03-12 06:40:17,204 [main:117] - GENERATED CALL = (result).indices
2021-03-12 06:40:17,204 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@61c9e646]]
2021-03-12 06:40:17,204 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4380706a]
2021-03-12 06:40:17,204 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@61c9e646]
2021-03-12 06:40:17,336 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:40:17,339 [main:117] - GENERATED CALL = (result).compareTo(var result =.until(-123)
2021-03-12 06:40:17,339 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2ad0806f], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3102ee71]]
2021-03-12 06:40:17,339 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3102ee71]
2021-03-12 06:40:17,478 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:40:17,480 [main:117] - GENERATED CALL = (result).length.rangeTo(-89)
2021-03-12 06:40:17,480 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@bb614f5]]
2021-03-12 06:40:17,480 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:17,602 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:17,728 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:17,730 [main:117] - GENERATED CALL = (result).subSequence(-1356917302, -327204976).indices
2021-03-12 06:40:17,730 [main:114] - replacement of 1..numberOfSuspensions of type IntRange is (result).compareTo("npbfu").rangeTo(41)
2021-03-12 06:40:17,853 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:40:17,853 [main:66] - Compilation checking started
2021-03-12 06:40:18,438 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:18,441 [main:107] - replacing (prope9, Boolean)
2021-03-12 06:40:18,441 [main:50] - replacing prope9 Boolean
2021-03-12 06:40:18,441 [main:54] - Getting value of type Boolean
2021-03-12 06:40:18,561 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:18,563 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:40:18,563 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:19,575 [main:67] - randomType = Function1<UByte, Function2<MutableMap<Float, UByte>, Double, UShort>>
2021-03-12 06:40:19,576 [main:106] - GETTING Boolean from Child
2021-03-12 06:40:19,588 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5cb6f326]]
2021-03-12 06:40:19,588 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:40:19,712 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:19,712 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5cb6f326]
2021-03-12 06:40:19,832 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:19,834 [main:117] - GENERATED CALL = (Child()).equals("fsqtn").or(false)
2021-03-12 06:40:19,834 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]]
2021-03-12 06:40:19,834 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:40:19,955 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:19,955 [main:117] - GENERATED CALL = (Child()).equals("rtycc")
2021-03-12 06:40:19,955 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@287e719]]
2021-03-12 06:40:19,955 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:40:20,078 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:20,078 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 06:40:20,198 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:20,201 [main:117] - GENERATED CALL = (Child()).equals("ctcos").xor(false)
2021-03-12 06:40:20,201 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40bfe33e]]
2021-03-12 06:40:20,201 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:40:20,323 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:20,323 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40bfe33e]
2021-03-12 06:40:20,444 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:20,447 [main:117] - GENERATED CALL = (Child()).equals("ocphm").and(false)
2021-03-12 06:40:20,447 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]]
2021-03-12 06:40:20,447 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:40:20,567 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:20,567 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]
2021-03-12 06:40:20,687 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:20,688 [main:117] - GENERATED CALL = (Child()).equals("tluic").equals("entlf")
2021-03-12 06:40:20,688 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@792333b0]]
2021-03-12 06:40:20,688 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:40:20,822 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:20,823 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@792333b0]
2021-03-12 06:40:20,823 [main:117] - GENERATED CALL = (Child()).equals("oreqk").not()
2021-03-12 06:40:20,823 [main:114] - replacement of prope9 of type Boolean is (Child()).equals("ctcos").xor(false)
2021-03-12 06:40:20,950 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:40:20,950 [main:66] - Compilation checking started
2021-03-12 06:40:21,367 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().(Child()).equals("ctcos").xor(false) = true
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:21,369 [main:107] - replacing ("call to 'resume' before 'invoke' with coroutine", String)
2021-03-12 06:40:21,369 [main:50] - replacing "call to 'resume' before 'invoke' with coroutine" String
2021-03-12 06:40:21,369 [main:54] - Getting value of type String
2021-03-12 06:40:21,490 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:21,493 [main:58] - GENERATED VALUE OF TYPE String = "csqry"
2021-03-12 06:40:21,493 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:21,644 [main:67] - randomType = Collection<Base>
2021-03-12 06:40:21,645 [main:106] - GETTING String from Inner
2021-03-12 06:40:21,655 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c8534ce]]
2021-03-12 06:40:21,655 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:21,655 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c8534ce]
2021-03-12 06:40:21,776 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:40:21,902 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:40:21,905 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:40:22,168 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:40:22,173 [main:95] - GENERATED = StringBuilder("iryvb")
2021-03-12 06:40:22,174 [main:117] - GENERATED CALL = (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))
2021-03-12 06:40:22,174 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]]
2021-03-12 06:40:22,174 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:22,174 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]
2021-03-12 06:40:22,294 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:40:22,417 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:22,419 [main:117] - GENERATED CALL = (Child().Inner()).o().substringBefore('', "selkv")
2021-03-12 06:40:22,419 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a77549]]
2021-03-12 06:40:22,419 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:22,419 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a77549]
2021-03-12 06:40:22,540 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:40:22,542 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:40:22,544 [main:117] - GENERATED CALL = (Child().Inner()).o().dropWhile({a: Char -> true})
2021-03-12 06:40:22,544 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eaf3094]]
2021-03-12 06:40:22,544 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:22,544 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eaf3094]
2021-03-12 06:40:22,664 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:40:22,666 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:40:22,669 [main:117] - GENERATED CALL = (Child().Inner()).o().dropLastWhile({a: Char -> true})
2021-03-12 06:40:22,669 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a8dbde]]
2021-03-12 06:40:22,669 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:22,669 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a8dbde]
2021-03-12 06:40:22,789 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:40:22,794 [main:117] - GENERATED CALL = (Child().Inner()).o().removePrefix("zgxql")
2021-03-12 06:40:22,794 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e32c57c]]
2021-03-12 06:40:22,794 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:22,794 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e32c57c]
2021-03-12 06:40:22,913 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:22,916 [main:117] - GENERATED CALL = (Child().Inner()).o().dropLast(1573196638)
2021-03-12 06:40:22,916 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]]
2021-03-12 06:40:22,916 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:22,916 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]
2021-03-12 06:40:23,063 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:40:23,066 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:40:23,068 [main:117] - GENERATED CALL = (Child().Inner()).o().filterNot({a: Char -> false})
2021-03-12 06:40:23,068 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5896f627]]
2021-03-12 06:40:23,068 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:23,068 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5896f627]
2021-03-12 06:40:23,188 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:40:23,310 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:40:23,432 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:23,435 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceFirst('', '凥', true)
2021-03-12 06:40:23,435 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d7b733]]
2021-03-12 06:40:23,435 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:23,435 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41d7b733]
2021-03-12 06:40:23,555 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:23,558 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceIndentByMargin("lvcph", var result =
2021-03-12 06:40:23,558 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d137b6c]]
2021-03-12 06:40:23,558 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:23,558 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d137b6c]
2021-03-12 06:40:23,678 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:23,801 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:40:23,803 [main:117] - GENERATED CALL = (Child().Inner()).o().padEnd(1134600516, '泣')
2021-03-12 06:40:23,803 [main:114] - replacement of "call to 'resume' before 'invoke' with coroutine" of type String is (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))
2021-03-12 06:40:23,922 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:40:23,923 [main:66] - Compilation checking started
2021-03-12 06:40:24,518 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))) return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:24,521 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 06:40:24,522 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 06:40:24,522 [main:54] - Getting value of type String
2021-03-12 06:40:24,675 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:24,678 [main:58] - GENERATED VALUE OF TYPE String = "iafcd"
2021-03-12 06:40:24,678 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:25,283 [main:67] - randomType = Function2<Kla0, Sequence<Kla1?>, ULong>
2021-03-12 06:40:25,284 [main:106] - GETTING String from Inner
2021-03-12 06:40:25,289 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6710390b]]
2021-03-12 06:40:25,289 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:25,289 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6710390b]
2021-03-12 06:40:25,409 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 06:40:25,411 [main:302] - generating value of type = Char true depth = 1
2021-03-12 06:40:25,414 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceFirstChar({a: Char -> '䃗'})
2021-03-12 06:40:25,414 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]]
2021-03-12 06:40:25,414 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:25,414 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@567d021c]
2021-03-12 06:40:25,534 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:40:25,536 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:40:25,539 [main:117] - GENERATED CALL = (Child().Inner()).o().filterNot({a: Char -> false})
2021-03-12 06:40:25,539 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51404f69]]
2021-03-12 06:40:25,539 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:25,539 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51404f69]
2021-03-12 06:40:25,660 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:40:25,662 [main:117] - GENERATED CALL = (Child().Inner()).o().substringAfter('磐', var result =
2021-03-12 06:40:25,662 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a77549]]
2021-03-12 06:40:25,662 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:25,662 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54a77549]
2021-03-12 06:40:25,784 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:40:25,786 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:40:25,788 [main:117] - GENERATED CALL = (Child().Inner()).o().dropWhile({a: Char -> false})
2021-03-12 06:40:25,789 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c8534ce]]
2021-03-12 06:40:25,789 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:25,789 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c8534ce]
2021-03-12 06:40:25,915 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:40:26,043 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:40:26,046 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:40:26,312 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:40:26,318 [main:95] - GENERATED = StringBuilder("themn")
2021-03-12 06:40:26,318 [main:117] - GENERATED CALL = (Child().Inner()).o().removeSuffix(StringBuilder("themn"))
2021-03-12 06:40:26,318 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d2b9075]]
2021-03-12 06:40:26,318 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:26,318 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d2b9075]
2021-03-12 06:40:26,318 [main:117] - GENERATED CALL = (Child().Inner()).o().replaceIndent(var result =
2021-03-12 06:40:26,318 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]]
2021-03-12 06:40:26,319 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:26,319 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cc5d71d]
2021-03-12 06:40:26,447 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:40:26,449 [main:117] - GENERATED CALL = (Child().Inner()).o().substringBefore('ʚ', result)
2021-03-12 06:40:26,449 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ea953fe]]
2021-03-12 06:40:26,449 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:26,449 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ea953fe]
2021-03-12 06:40:26,571 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:40:26,574 [main:117] - GENERATED CALL = (Child().Inner()).o().substringAfterLast('ꮞ', var result =
2021-03-12 06:40:26,574 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@326022ed]]
2021-03-12 06:40:26,574 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:26,574 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@326022ed]
2021-03-12 06:40:26,695 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:40:26,825 [main:43] - GENERATING CALL OF fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): Iterable<Int> = TODO()
2021-03-12 06:40:26,829 [main:61] - WITHOUT TYPE PARAMS = fun CharRange(start: kotlin.Char, endInclusive: kotlin.Char): Iterable<Int> = TODO()
2021-03-12 06:40:27,269 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:40:27,272 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:40:27,274 [main:95] - GENERATED = CharRange('㺜', 'ር')
2021-03-12 06:40:27,274 [main:117] - GENERATED CALL = (Child().Inner()).o().slice(CharRange('㺜', 'ር'))
2021-03-12 06:40:27,274 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c6d2f9]]
2021-03-12 06:40:27,274 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:27,275 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c6d2f9]
2021-03-12 06:40:27,396 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:40:27,519 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:27,521 [main:117] - GENERATED CALL = (Child().Inner()).o().substringBeforeLast('鐠', "svlnv")
2021-03-12 06:40:27,521 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (Child().Inner()).o().removeSuffix(StringBuilder("themn"))
2021-03-12 06:40:27,642 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:40:27,642 [main:66] - Compilation checking started
2021-03-12 06:40:28,234 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))) return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        var result = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (Child().Inner()).o().removeSuffix(StringBuilder("themn")))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:28,236 [main:107] - replacing ("fail 4: ${e.message!!}", String)
2021-03-12 06:40:28,237 [main:50] - replacing "fail 4: ${e.message!!}" String
2021-03-12 06:40:28,237 [main:54] - Getting value of type String
2021-03-12 06:40:28,365 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:28,367 [main:58] - GENERATED VALUE OF TYPE String = "ebtkr"
2021-03-12 06:40:28,368 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:28,811 [main:67] - randomType = ArrayDeque<Byte>
2021-03-12 06:40:28,935 [main:302] - generating value of type = ArrayDeque<Byte> false depth = 0
2021-03-12 06:40:29,062 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Byte>): ArrayDeque<Byte> = TODO()
2021-03-12 06:40:29,066 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Byte>): ArrayDeque<Byte> = TODO()
2021-03-12 06:40:29,369 [main:302] - generating value of type = Collection<Byte> false depth = 3
2021-03-12 06:40:29,497 [main:43] - GENERATING CALL OF fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Byte>.()->kotlin.Unit): Collection<Byte> = TODO()
2021-03-12 06:40:29,500 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Byte>.()->kotlin.Unit): Collection<Byte> = TODO()
2021-03-12 06:40:29,916 [main:302] - generating value of type = Int true depth = 6
2021-03-12 06:40:29,919 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<Byte>, Unit> false depth = 6
2021-03-12 06:40:29,921 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 06:40:30,049 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:40:30,052 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:40:30,320 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 10
2021-03-12 06:40:30,322 [main:302] - generating value of type = Unit false depth = 11
2021-03-12 06:40:30,449 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:40:30,453 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:40:30,856 [main:302] - generating value of type = Int true depth = 14
2021-03-12 06:40:30,858 [main:302] - generating value of type = Function1<Int, Unit> false depth = 14
2021-03-12 06:40:30,860 [main:302] - generating value of type = Unit false depth = 15
2021-03-12 06:40:30,866 [main:95] - GENERATED = repeat(-562125485, {a: Int -> println()})
2021-03-12 06:40:30,866 [main:95] - GENERATED = contract({ repeat(-562125485, {a: Int -> println()})})
2021-03-12 06:40:30,866 [main:95] - GENERATED = buildList<Byte>(-168460499, { contract({ repeat(-562125485, {a: Int -> println()})})})
2021-03-12 06:40:30,867 [main:95] - GENERATED = ArrayDeque<Byte>(buildList<Byte>(-168460499, { contract({ repeat(-562125485, {a: Int -> println()})})}))
2021-03-12 06:40:30,984 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e0cb373]
2021-03-12 06:40:31,107 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:31,110 [main:78] - Generated call from random type = (ArrayDeque<Byte>(buildList<Byte>(-168460499, { contract({ repeat(-562125485, {a: Int -> println()})})}))).size.toString(86101111)
2021-03-12 06:40:31,111 [main:106] - GETTING String from Inner
2021-03-12 06:40:31,117 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f66b93e]]
2021-03-12 06:40:31,117 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:31,117 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f66b93e]
2021-03-12 06:40:31,118 [main:117] - GENERATED CALL = (Child().Inner()).o().concat(var result =
2021-03-12 06:40:31,118 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51404f69]]
2021-03-12 06:40:31,118 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:31,118 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51404f69]
2021-03-12 06:40:31,264 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:40:31,266 [main:117] - GENERATED CALL = (Child().Inner()).o().substringAfter('楥', result)
2021-03-12 06:40:31,267 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a8dbde]]
2021-03-12 06:40:31,267 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:31,267 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31a8dbde]
2021-03-12 06:40:31,387 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:40:31,512 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:40:31,516 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:40:31,778 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:40:31,783 [main:95] - GENERATED = StringBuilder("diwtk")
2021-03-12 06:40:31,783 [main:117] - GENERATED CALL = (Child().Inner()).o().removePrefix(StringBuilder("diwtk"))
2021-03-12 06:40:31,783 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1055adc6]]
2021-03-12 06:40:31,783 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:31,783 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1055adc6]
2021-03-12 06:40:31,783 [main:117] - GENERATED CALL = (Child().Inner()).o().trim()
2021-03-12 06:40:31,783 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46328ee3]]
2021-03-12 06:40:31,783 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:31,784 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46328ee3]
2021-03-12 06:40:31,784 [main:117] - GENERATED CALL = (Child().Inner()).o().trimEnd()
2021-03-12 06:40:31,784 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c2f4ae]]
2021-03-12 06:40:31,784 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:31,784 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c2f4ae]
2021-03-12 06:40:31,784 [main:117] - GENERATED CALL = (Child().Inner()).o().reversed()
2021-03-12 06:40:31,784 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b9bd48]]
2021-03-12 06:40:31,784 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:31,784 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b9bd48]
2021-03-12 06:40:31,905 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:31,907 [main:117] - GENERATED CALL = (Child().Inner()).o().take(-1776740995)
2021-03-12 06:40:31,907 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3bee1bb3]]
2021-03-12 06:40:31,907 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:31,907 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3bee1bb3]
2021-03-12 06:40:32,028 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:32,028 [main:117] - GENERATED CALL = (Child().Inner()).o().plus("yoloj")
2021-03-12 06:40:32,029 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6038dc]]
2021-03-12 06:40:32,029 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:32,029 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6038dc]
2021-03-12 06:40:32,152 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 06:40:32,154 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:40:32,157 [main:117] - GENERATED CALL = (Child().Inner()).o().filterIndexed({a: Int, b: Char -> true})
2021-03-12 06:40:32,157 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e9228df]]
2021-03-12 06:40:32,157 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:32,157 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e9228df]
2021-03-12 06:40:32,279 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:32,403 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:32,405 [main:117] - GENERATED CALL = (Child().Inner()).o().removeRange(-938123764, 836572373)
2021-03-12 06:40:32,405 [main:114] - replacement of "fail 4: ${e.message!!}" of type String is (Child().Inner()).o().concat(var result =
2021-03-12 06:40:32,525 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(BINARY_EXPRESSION)
2021-03-12 06:40:32,526 [main:66] - Compilation checking started
2021-03-12 06:40:32,530 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:40:32,531 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))) return (Child().Inner()).o().concat(var result =
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        var result = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (Child().Inner()).o().removeSuffix(StringBuilder("themn")))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:32,533 [main:107] - replacing (Kla0, Kla6)
2021-03-12 06:40:32,533 [main:50] - replacing Kla0 Kla6
2021-03-12 06:40:32,534 [main:54] - Getting value of type Kla6
2021-03-12 06:40:32,654 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 06:40:32,656 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-12 06:40:32,656 [main:58] - GENERATED VALUE OF TYPE Kla6 = 
2021-03-12 06:40:32,798 [main:67] - randomType = Array<UInt>
2021-03-12 06:40:32,918 [main:302] - generating value of type = Array<UInt> false depth = 0
2021-03-12 06:40:33,046 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: UInt): Array<UInt> = TODO()
2021-03-12 06:40:33,049 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: UInt): Array<UInt> = TODO()
2021-03-12 06:40:33,177 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 06:40:33,179 [main:95] - GENERATED = arrayOf<UInt>(1702686270.toUInt())
2021-03-12 06:40:33,192 [main:106] - GETTING Kla6 from Child
2021-03-12 06:40:33,197 [main:106] - GETTING Kla6 from Inner
2021-03-12 06:40:33,201 [main:106] - GETTING Kla6 from String
2021-03-12 06:40:33,216 [main:111] - Cant find and generate replacement for Kla0 type Kla6
2021-03-12 06:40:33,216 [main:107] - replacing (prope6.isSuccess, Boolean)
2021-03-12 06:40:33,216 [main:50] - replacing prope6.isSuccess Boolean
2021-03-12 06:40:33,216 [main:54] - Getting value of type Boolean
2021-03-12 06:40:33,363 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:33,365 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:40:33,365 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:33,913 [main:67] - randomType = Pair<Double?, UShort>
2021-03-12 06:40:34,035 [main:302] - generating value of type = Pair<Double?, UShort> false depth = 0
2021-03-12 06:40:34,163 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Double?, second: UShort): Pair<Double?, UShort> = TODO()
2021-03-12 06:40:34,166 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Double?, second: UShort): Pair<Double?, UShort> = TODO()
2021-03-12 06:40:34,296 [main:302] - generating value of type = Double true depth = 3
2021-03-12 06:40:34,298 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 06:40:34,301 [main:95] - GENERATED = Pair<Double?, UShort>(0.5514807781839308, 4100.toUShort())
2021-03-12 06:40:34,317 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@3505db63]
2021-03-12 06:40:34,440 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:34,440 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]
2021-03-12 06:40:34,562 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:34,562 [main:78] - Generated call from random type = (Pair<Double?, UShort>(0.5514807781839308, 4100.toUShort())).equals("kgchp").equals("qoscr")
2021-03-12 06:40:34,563 [main:106] - GETTING Boolean from String
2021-03-12 06:40:34,581 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b149480]]
2021-03-12 06:40:34,581 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b149480]
2021-03-12 06:40:34,581 [main:117] - GENERATED CALL = (result).toBoolean()
2021-03-12 06:40:34,581 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69e75bb8]]
2021-03-12 06:40:34,581 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:34,701 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:34,824 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:34,827 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69e75bb8]
2021-03-12 06:40:34,827 [main:117] - GENERATED CALL = (result).subSequence(-1107738518, -1668865895).isBlank()
2021-03-12 06:40:34,827 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13d70965]]
2021-03-12 06:40:34,827 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:40:34,947 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:34,949 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13d70965]
2021-03-12 06:40:34,949 [main:117] - GENERATED CALL = (result).get(-1905632621).isLowSurrogate()
2021-03-12 06:40:34,949 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ad03fe3]]
2021-03-12 06:40:34,950 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:40:35,071 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:35,073 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ad03fe3]
2021-03-12 06:40:35,073 [main:117] - GENERATED CALL = (result).get(1896546634).isLowerCase()
2021-03-12 06:40:35,073 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c6fae99]]
2021-03-12 06:40:35,073 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c6fae99]
2021-03-12 06:40:35,197 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:35,322 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:35,324 [main:117] - GENERATED CALL = (result).startsWith("kkcwy", false)
2021-03-12 06:40:35,324 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@108dd5c6]]
2021-03-12 06:40:35,324 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:35,496 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:35,622 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:35,624 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@108dd5c6]
2021-03-12 06:40:35,624 [main:117] - GENERATED CALL = (result).subSequence(2003889978, -1902774396).isNotEmpty()
2021-03-12 06:40:35,624 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24b7342d]]
2021-03-12 06:40:35,624 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24b7342d]
2021-03-12 06:40:35,748 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:40:35,872 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:35,875 [main:117] - GENERATED CALL = (result).contains('娌', true)
2021-03-12 06:40:35,875 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@acca1ce]]
2021-03-12 06:40:35,875 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:35,997 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:36,121 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:36,124 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@acca1ce]
2021-03-12 06:40:36,124 [main:117] - GENERATED CALL = (result).subSequence(575020069, 291440932).isNotBlank()
2021-03-12 06:40:36,124 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69e75bb8]]
2021-03-12 06:40:36,124 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69e75bb8]
2021-03-12 06:40:36,124 [main:117] - GENERATED CALL = (result).isBlank()
2021-03-12 06:40:36,124 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@502c2531]]
2021-03-12 06:40:36,124 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:36,246 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:36,370 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:36,372 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@502c2531]
2021-03-12 06:40:36,495 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:40:36,497 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:40:36,499 [main:117] - GENERATED CALL = (result).subSequence(1631196479, 2089195777).all({a: Char -> true})
2021-03-12 06:40:36,499 [main:114] - replacement of prope6.isSuccess of type Boolean is (Pair<Double?, UShort>(0.5514807781839308, 4100.toUShort())).equals("kgchp").equals("qoscr")
2021-03-12 06:40:36,622 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:40:36,624 [main:107] - replacing (prope6.getOrThrow(), Any?)
2021-03-12 06:40:36,624 [main:50] - replacing prope6.getOrThrow() Any?
2021-03-12 06:40:36,624 [main:54] - Getting value of type Any?
2021-03-12 06:40:36,747 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:36,747 [main:58] - GENERATED VALUE OF TYPE Any? = "qkwun"
2021-03-12 06:40:36,747 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:36,756 [main:67] - randomType = Kla1
2021-03-12 06:40:36,877 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:40:36,879 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}
2021-03-12 06:40:36,900 [main:78] - Generated call from random type = (Kla1()).prope6
2021-03-12 06:40:36,900 [main:114] - replacement of prope6.getOrThrow() of type Any? is (Kla1()).prope6
2021-03-12 06:40:37,028 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:40:37,029 [main:66] - Compilation checking started
2021-03-12 06:40:37,616 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))) return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = (Kla1()).prope6
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        var result = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (Child().Inner()).o().removeSuffix(StringBuilder("themn")))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:37,618 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 06:40:37,618 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 06:40:37,618 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 06:40:37,744 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 06:40:37,749 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 06:40:37,754 [main:67] - randomType = Long
2021-03-12 06:40:37,899 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:40:37,937 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 06:40:37,954 [main:106] - GETTING EmptyCoroutineContext from Child
2021-03-12 06:40:37,959 [main:106] - GETTING EmptyCoroutineContext from Inner
2021-03-12 06:40:37,963 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 06:40:37,963 [main:107] - replacing (Kla4(), Kla4)
2021-03-12 06:40:37,963 [main:50] - replacing Kla4() Kla4
2021-03-12 06:40:37,963 [main:54] - Getting value of type Kla4
2021-03-12 06:40:38,086 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:40:38,088 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:40:38,088 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 06:40:38,088 [main:61] - GENERATED IS CALL =true
2021-03-12 06:40:38,377 [main:67] - randomType = MutableMap<UInt, Kla5>
2021-03-12 06:40:38,378 [main:106] - GETTING Kla4 from String
2021-03-12 06:40:38,400 [main:106] - GETTING Kla4 from Inner
2021-03-12 06:40:38,404 [main:106] - GETTING Kla4 from Child
2021-03-12 06:40:38,409 [main:114] - replacement of Kla4() of type Kla4 is Kla4()
2021-03-12 06:40:38,529 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:40:38,531 [main:107] - replacing (prope1, Kla4)
2021-03-12 06:40:38,532 [main:50] - replacing prope1 Kla4
2021-03-12 06:40:38,532 [main:54] - Getting value of type Kla4
2021-03-12 06:40:38,652 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:40:38,654 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:40:38,654 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 06:40:38,655 [main:61] - GENERATED IS CALL =true
2021-03-12 06:40:38,793 [main:67] - randomType = Kla5
2021-03-12 06:40:38,918 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 06:40:38,920 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}
2021-03-12 06:40:38,948 [main:106] - GETTING Kla4 from Inner
2021-03-12 06:40:38,955 [main:106] - GETTING Kla4 from String
2021-03-12 06:40:38,977 [main:106] - GETTING Kla4 from Child
2021-03-12 06:40:38,981 [main:114] - replacement of prope1 of type Kla4 is Kla4()
2021-03-12 06:40:39,104 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:40:39,104 [main:66] - Compilation checking started
2021-03-12 06:40:39,672 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))) return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = (Kla1()).prope6
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        var result = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (Child().Inner()).o().removeSuffix(StringBuilder("themn")))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
Kla4().prope10 = {
            Kla4().prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:39,676 [main:107] - replacing (true, Boolean)
2021-03-12 06:40:39,676 [main:50] - replacing true Boolean
2021-03-12 06:40:39,676 [main:54] - Getting value of type Boolean
2021-03-12 06:40:39,821 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:39,853 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:40:39,854 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:40,731 [main:67] - randomType = Function2<Kla5, ULong, MutableMap<ULong, Boolean?>>
2021-03-12 06:40:40,732 [main:106] - GETTING Boolean from String
2021-03-12 06:40:40,749 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@362235df]]
2021-03-12 06:40:40,749 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:40,871 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:40,995 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:40,998 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@362235df]
2021-03-12 06:40:40,998 [main:117] - GENERATED CALL = (result).subSequence(-209436882, -60706674).isEmpty()
2021-03-12 06:40:40,998 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@108dd5c6]]
2021-03-12 06:40:40,998 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:41,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:41,247 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:41,249 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@108dd5c6]
2021-03-12 06:40:41,249 [main:117] - GENERATED CALL = (result).subSequence(-91291433, -1756352319).isNotEmpty()
2021-03-12 06:40:41,249 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969aa07]]
2021-03-12 06:40:41,249 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969aa07]
2021-03-12 06:40:41,370 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:41,373 [main:117] - GENERATED CALL = (result).matches("bgdlb")
2021-03-12 06:40:41,373 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76aa0d27]]
2021-03-12 06:40:41,373 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:41,495 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:41,618 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:41,620 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76aa0d27]
2021-03-12 06:40:41,740 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:40:41,865 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:40:41,868 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:40:42,267 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:40:42,269 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 06:40:42,272 [main:95] - GENERATED = Regex("vvqff", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 06:40:42,272 [main:117] - GENERATED CALL = (result).subSequence(-1673328232, 1754239693).matches(Regex("vvqff", kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 06:40:42,272 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b149480]]
2021-03-12 06:40:42,272 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b149480]
2021-03-12 06:40:42,272 [main:117] - GENERATED CALL = (result).toBoolean()
2021-03-12 06:40:42,272 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@108dd5c6]]
2021-03-12 06:40:42,272 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@108dd5c6]
2021-03-12 06:40:42,272 [main:117] - GENERATED CALL = (result).isNotEmpty()
2021-03-12 06:40:42,272 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c2840a5]]
2021-03-12 06:40:42,273 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:40:42,394 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:42,396 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c2840a5]
2021-03-12 06:40:42,396 [main:117] - GENERATED CALL = (result).get(1399305285).isTitleCase()
2021-03-12 06:40:42,397 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f10e91b]]
2021-03-12 06:40:42,397 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:40:42,516 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:42,519 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f10e91b]
2021-03-12 06:40:42,519 [main:117] - GENERATED CALL = (result).get(320723310).isDigit()
2021-03-12 06:40:42,519 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44286d80]]
2021-03-12 06:40:42,519 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:42,665 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:42,788 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:42,790 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44286d80]
2021-03-12 06:40:42,790 [main:117] - GENERATED CALL = (result).subSequence(240251009, 454655975).any()
2021-03-12 06:40:42,790 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd3e252]]
2021-03-12 06:40:42,790 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd3e252]
2021-03-12 06:40:42,910 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:43,032 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:43,035 [main:117] - GENERATED CALL = (result).endsWith("tuzhp", false)
2021-03-12 06:40:43,035 [main:114] - replacement of true of type Boolean is (result).subSequence(240251009, 454655975).any()
2021-03-12 06:40:43,155 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:40:43,155 [main:66] - Compilation checking started
2021-03-12 06:40:43,761 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))) return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = (Kla1()).prope6
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        var result = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (Child().Inner()).o().removeSuffix(StringBuilder("themn")))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
Kla4().prope10 = {
            Kla4().prope9 = (result).subSequence(240251009, 454655975).any()
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:43,765 [main:107] - replacing (false, Boolean)
2021-03-12 06:40:43,765 [main:50] - replacing false Boolean
2021-03-12 06:40:43,765 [main:54] - Getting value of type Boolean
2021-03-12 06:40:43,910 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:43,912 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:40:43,912 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:44,060 [main:67] - randomType = UShort
2021-03-12 06:40:44,183 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:40:44,212 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@79c46e0d]
2021-03-12 06:40:44,335 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:44,335 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5cb6f326]
2021-03-12 06:40:44,457 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:44,460 [main:78] - Generated call from random type = (19449.toUShort()).equals("uvfti").or(true)
2021-03-12 06:40:44,461 [main:106] - GETTING Boolean from Child
2021-03-12 06:40:44,466 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@792333b0]]
2021-03-12 06:40:44,466 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:40:44,589 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:44,589 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@792333b0]
2021-03-12 06:40:44,589 [main:117] - GENERATED CALL = (Child()).equals("yiyqk").not()
2021-03-12 06:40:44,589 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40bfe33e]]
2021-03-12 06:40:44,590 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:40:44,713 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:44,713 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40bfe33e]
2021-03-12 06:40:44,835 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:44,838 [main:117] - GENERATED CALL = (Child()).equals("oydfp").and(true)
2021-03-12 06:40:44,838 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5cb6f326]]
2021-03-12 06:40:44,838 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:40:44,961 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:44,961 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5cb6f326]
2021-03-12 06:40:45,116 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:45,119 [main:117] - GENERATED CALL = (Child()).equals("alyaa").or(true)
2021-03-12 06:40:45,119 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]]
2021-03-12 06:40:45,119 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:40:45,245 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:45,246 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]
2021-03-12 06:40:45,368 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:45,368 [main:117] - GENERATED CALL = (Child()).equals("fmomq").equals("dstfa")
2021-03-12 06:40:45,369 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@287e719]]
2021-03-12 06:40:45,369 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:40:45,498 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:45,498 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 06:40:45,621 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:45,623 [main:117] - GENERATED CALL = (Child()).equals("fdqyi").xor(false)
2021-03-12 06:40:45,623 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]]
2021-03-12 06:40:45,623 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Child[DeserializedSimpleFunctionDescriptor@1284f7bd]
2021-03-12 06:40:45,746 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:45,747 [main:117] - GENERATED CALL = (Child()).equals("rbail")
2021-03-12 06:40:45,747 [main:114] - replacement of false of type Boolean is (Child()).equals("yiyqk").not()
2021-03-12 06:40:45,870 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:40:45,871 [main:66] - Compilation checking started
2021-03-12 06:40:46,471 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))) return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = (Kla1()).prope6
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        var result = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (Child().Inner()).o().removeSuffix(StringBuilder("themn")))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = (Child()).equals("yiyqk").not()

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
Kla4().prope10 = {
            Kla4().prope9 = (result).subSequence(240251009, 454655975).any()
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:46,474 [main:107] - replacing (Kla3(), Kla3)
2021-03-12 06:40:46,475 [main:50] - replacing Kla3() Kla3
2021-03-12 06:40:46,475 [main:54] - Getting value of type Kla3
2021-03-12 06:40:46,617 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 06:40:46,620 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        var result = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (Child().Inner()).o().removeSuffix(StringBuilder("themn")))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}
2021-03-12 06:40:46,620 [main:58] - GENERATED VALUE OF TYPE Kla3 = Kla3()
2021-03-12 06:40:46,620 [main:61] - GENERATED IS CALL =true
2021-03-12 06:40:46,915 [main:67] - randomType = ArrayList<Kla4>
2021-03-12 06:40:47,038 [main:302] - generating value of type = ArrayList<Kla4> false depth = 0
2021-03-12 06:40:47,168 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Kla4> = TODO()
2021-03-12 06:40:47,172 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Kla4> = TODO()
2021-03-12 06:40:47,441 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:40:47,443 [main:95] - GENERATED = ArrayList<Kla4>(-1406104513)
2021-03-12 06:40:47,559 [main:106] - GETTING Kla3 from Child
2021-03-12 06:40:47,564 [main:106] - GETTING Kla3 from String
2021-03-12 06:40:47,581 [main:106] - GETTING Kla3 from Inner
2021-03-12 06:40:47,586 [main:114] - replacement of Kla3() of type Kla3 is Kla3()
2021-03-12 06:40:47,734 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:40:47,736 [main:107] - replacing ("Continuation " + c + (Child().Inner()).o().removeSuffix(StringBuilder("themn")), String)
2021-03-12 06:40:47,736 [main:50] - replacing "Continuation " + c + (Child().Inner()).o().removeSuffix(StringBuilder("themn")) String
2021-03-12 06:40:47,736 [main:54] - Getting value of type String
2021-03-12 06:40:47,865 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:47,867 [main:58] - GENERATED VALUE OF TYPE String = "cccfu"
2021-03-12 06:40:47,868 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:47,872 [main:67] - randomType = Long
2021-03-12 06:40:47,994 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:40:48,025 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4953382c]
2021-03-12 06:40:48,025 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e0cb373]
2021-03-12 06:40:48,147 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:48,150 [main:78] - Generated call from random type = (-4120324788569254510).toInt().toString(1616515344)
2021-03-12 06:40:48,151 [main:106] - GETTING String from Child
2021-03-12 06:40:48,157 [main:106] - GETTING String from String
2021-03-12 06:40:48,172 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6710390b]]
2021-03-12 06:40:48,172 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6710390b]
2021-03-12 06:40:48,297 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 06:40:48,299 [main:302] - generating value of type = Char true depth = 1
2021-03-12 06:40:48,302 [main:117] - GENERATED CALL = (result).replaceFirstChar({a: Char -> ''})
2021-03-12 06:40:48,302 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e32c57c]]
2021-03-12 06:40:48,302 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e32c57c]
2021-03-12 06:40:48,424 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:48,426 [main:117] - GENERATED CALL = (result).dropLast(-1933229566)
2021-03-12 06:40:48,427 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c2f4ae]]
2021-03-12 06:40:48,427 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52c2f4ae]
2021-03-12 06:40:48,427 [main:117] - GENERATED CALL = (result).reversed()
2021-03-12 06:40:48,427 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d75fda]]
2021-03-12 06:40:48,427 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d75fda]
2021-03-12 06:40:48,554 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:48,557 [main:117] - GENERATED CALL = (result).repeat(482197202)
2021-03-12 06:40:48,557 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ae93fb7]]
2021-03-12 06:40:48,557 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:40:48,680 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:48,683 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ae93fb7]
2021-03-12 06:40:48,683 [main:117] - GENERATED CALL = (result).get(-1137198489).uppercase()
2021-03-12 06:40:48,683 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1788e6]]
2021-03-12 06:40:48,683 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@f765487]
2021-03-12 06:40:48,806 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:48,809 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1788e6]
2021-03-12 06:40:48,809 [main:117] - GENERATED CALL = (result).get(1143170696).titlecase()
2021-03-12 06:40:48,809 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@326022ed]]
2021-03-12 06:40:48,809 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@326022ed]
2021-03-12 06:40:48,932 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:40:49,066 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Iterable<Int> = TODO()
2021-03-12 06:40:49,069 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Iterable<Int> = TODO()
2021-03-12 06:40:49,474 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:40:49,476 [main:302] - generating value of type = Float true depth = 3
2021-03-12 06:40:49,478 [main:95] - GENERATED = LinkedHashSet<UByte>(2127111367, 0.2692889f)
2021-03-12 06:40:49,479 [main:117] - GENERATED CALL = (result).slice(LinkedHashSet<UByte>(2127111367, 0.2692889f))
2021-03-12 06:40:49,479 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e9228df]]
2021-03-12 06:40:49,479 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e9228df]
2021-03-12 06:40:49,606 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:49,730 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:49,733 [main:117] - GENERATED CALL = (result).removeRange(-303149177, -1608824934)
2021-03-12 06:40:49,733 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b9bd48]]
2021-03-12 06:40:49,733 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b9bd48]
2021-03-12 06:40:49,856 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:49,858 [main:117] - GENERATED CALL = (result).take(994995506)
2021-03-12 06:40:49,858 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e9680e2]]
2021-03-12 06:40:49,858 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b9f8866]
2021-03-12 06:40:49,982 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:50,132 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:40:50,135 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e9680e2]
2021-03-12 06:40:50,258 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:40:50,385 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:40:50,389 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:40:50,795 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:40:50,797 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 06:40:50,800 [main:95] - GENERATED = Regex("gnkrf", kotlin.text.RegexOption.MULTILINE)
2021-03-12 06:40:50,923 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 06:40:50,926 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 06:40:50,931 [main:117] - GENERATED CALL = (result).subSequence(1115206238, 1246486476).replace(Regex("gnkrf", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> "ezmes"})
2021-03-12 06:40:50,931 [main:114] - replacement of "Continuation " + c + (Child().Inner()).o().removeSuffix(StringBuilder("themn")) of type String is (result).take(994995506)
2021-03-12 06:40:51,053 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:40:51,053 [main:66] - Compilation checking started
2021-03-12 06:40:51,623 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))) return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = (Kla1()).prope6
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        var result = ""
if (c !is CoroutineStackFrame) error((result).take(994995506))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = (Child()).equals("yiyqk").not()

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
Kla4().prope10 = {
            Kla4().prope9 = (result).subSequence(240251009, 454655975).any()
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:51,626 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 06:40:51,626 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 06:40:51,626 [main:54] - Getting value of type Boolean
2021-03-12 06:40:51,749 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:51,751 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:40:51,751 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:52,058 [main:67] - randomType = HashMap<Kla1, Boolean>
2021-03-12 06:40:52,183 [main:302] - generating value of type = HashMap<Kla1, Boolean> false depth = 0
2021-03-12 06:40:52,312 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla1, Boolean>): HashMap<Kla1, Boolean> = TODO()
2021-03-12 06:40:52,315 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla1, Boolean>): HashMap<Kla1, Boolean> = TODO()
2021-03-12 06:40:52,444 [main:302] - generating value of type = Pair<Kla1, Boolean> false depth = 3
2021-03-12 06:40:52,573 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla1, second: Boolean): Pair<Kla1, Boolean> = TODO()
2021-03-12 06:40:52,576 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla1, second: Boolean): Pair<Kla1, Boolean> = TODO()
2021-03-12 06:40:52,743 [main:302] - generating value of type = Kla1 false depth = 6
2021-03-12 06:40:52,745 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = (Kla1()).prope6
    }

    var prope6: Any? = null
}
2021-03-12 06:40:52,746 [main:302] - generating value of type = Boolean true depth = 6
2021-03-12 06:40:52,748 [main:95] - GENERATED = Pair<Kla1, Boolean>(Kla1(), false)
2021-03-12 06:40:52,748 [main:95] - GENERATED = linkedMapOf<Kla1, Boolean>(Pair<Kla1, Boolean>(Kla1(), false))
2021-03-12 06:40:52,843 [main:149] - GENERATING call of type public fun <T> kotlin.collections.MutableCollection<in T>.addAll(elements: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2cb00f5d]
2021-03-12 06:40:52,966 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-12 06:40:53,097 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-12 06:40:53,100 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-12 06:40:53,229 [main:302] - generating value of type = T false depth = 3
2021-03-12 06:40:53,498 [main:43] - GENERATING CALL OF fun <T> minOf(a: UShort, other: UShort, comparator: kotlin.Comparator<UShort>): T = TODO()
2021-03-12 06:40:53,501 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UShort, other: UShort, comparator: kotlin.Comparator<UShort>): T = TODO()
2021-03-12 06:40:53,775 [main:302] - generating value of type = UShort true depth = 6
2021-03-12 06:40:53,777 [main:302] - generating value of type = UShort true depth = 6
2021-03-12 06:40:53,779 [main:302] - generating value of type = Comparator<UShort> false depth = 6
2021-03-12 06:40:53,909 [main:43] - GENERATING CALL OF fun <T> nullsLast(): Comparator<UShort> = TODO()
2021-03-12 06:40:53,912 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(): Comparator<UShort> = TODO()
2021-03-12 06:40:54,039 [main:95] - GENERATED = nullsLast<UShort>()
2021-03-12 06:40:54,040 [main:95] - GENERATED = minOf<UShort>(17992.toUShort(), 21418.toUShort(), nullsLast<UShort>())
2021-03-12 06:40:54,040 [main:95] - GENERATED = arrayOf<T>(minOf<UShort>(17992.toUShort(), 21418.toUShort(), nullsLast<UShort>()))
2021-03-12 06:40:54,040 [main:78] - Generated call from random type = (linkedMapOf<Kla1, Boolean>(Pair<Kla1, Boolean>(Kla1(), false))).values.addAll(arrayOf<T>(minOf<UShort>(17992.toUShort(), 21418.toUShort(), nullsLast<UShort>())))
2021-03-12 06:40:54,041 [main:106] - GETTING Boolean from Inner
2021-03-12 06:40:54,046 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@792333b0]]
2021-03-12 06:40:54,046 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:40:54,171 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:54,171 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@792333b0]
2021-03-12 06:40:54,171 [main:117] - GENERATED CALL = (Child().Inner()).equals("uadoy").not()
2021-03-12 06:40:54,171 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c6fae99]]
2021-03-12 06:40:54,171 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:54,171 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c6fae99]
2021-03-12 06:40:54,294 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:40:54,418 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:54,420 [main:117] - GENERATED CALL = (Child().Inner()).o().startsWith("tgnzs", true)
2021-03-12 06:40:54,420 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd3e252]]
2021-03-12 06:40:54,420 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:54,420 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bd3e252]
2021-03-12 06:40:54,542 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:54,545 [main:117] - GENERATED CALL = (Child().Inner()).o().endsWith(var result =
2021-03-12 06:40:54,545 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969aa07]]
2021-03-12 06:40:54,545 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:54,545 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6969aa07]
2021-03-12 06:40:54,545 [main:117] - GENERATED CALL = (Child().Inner()).o().matches(var result =
2021-03-12 06:40:54,545 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]]
2021-03-12 06:40:54,545 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:40:54,668 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:54,669 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5343ec9a]
2021-03-12 06:40:54,791 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:54,791 [main:117] - GENERATED CALL = (Child().Inner()).equals("xlmus").equals("mavue")
2021-03-12 06:40:54,791 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5cb6f326]]
2021-03-12 06:40:54,791 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:40:54,914 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:54,915 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5cb6f326]
2021-03-12 06:40:55,037 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:55,039 [main:117] - GENERATED CALL = (Child().Inner()).equals("nwcrd").or(true)
2021-03-12 06:40:55,039 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@287e719]]
2021-03-12 06:40:55,039 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:40:55,195 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:55,195 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@287e719]
2021-03-12 06:40:55,319 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:55,321 [main:117] - GENERATED CALL = (Child().Inner()).equals("ewrsc").xor(false)
2021-03-12 06:40:55,321 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]]
2021-03-12 06:40:55,321 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:40:55,444 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:55,445 [main:117] - GENERATED CALL = (Child().Inner()).equals("gvasm")
2021-03-12 06:40:55,445 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40bfe33e]]
2021-03-12 06:40:55,445 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Base.Inner[DeserializedSimpleFunctionDescriptor@3bec7aa1]
2021-03-12 06:40:55,566 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:55,567 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40bfe33e]
2021-03-12 06:40:55,690 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:40:55,692 [main:117] - GENERATED CALL = (Child().Inner()).equals("qfzfs").and(false)
2021-03-12 06:40:55,692 [main:113] - Case = [public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b149480]]
2021-03-12 06:40:55,692 [main:149] - GENERATING call of type public final fun o(): kotlin.String defined in Base.Inner[SimpleFunctionDescriptorImpl@43ddf897]
2021-03-12 06:40:55,692 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b149480]
2021-03-12 06:40:55,692 [main:117] - GENERATED CALL = (Child().Inner()).o().toBoolean()
2021-03-12 06:40:55,693 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (Child().Inner()).o().matches(var result =
2021-03-12 06:40:55,816 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 06:40:55,816 [main:66] - Compilation checking started
2021-03-12 06:40:55,821 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:40:55,821 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))) return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = (Kla1()).prope6
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        var result = ""
if (c !is CoroutineStackFrame) error((result).take(994995506))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        var result = ""
prope7.find { (Child().Inner()).o().matches(var result = }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = (Child()).equals("yiyqk").not()

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
Kla4().prope10 = {
            Kla4().prope9 = (result).subSequence(240251009, 454655975).any()
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:55,823 [main:107] - replacing ({
        var result = ""
"ooecm"
    }, Any?)
2021-03-12 06:40:55,823 [main:50] - replacing {
        var result = ""
"ooecm"
    } Any?
2021-03-12 06:40:55,823 [main:54] - Getting value of type Any?
2021-03-12 06:40:55,949 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:40:55,949 [main:58] - GENERATED VALUE OF TYPE Any? = "hsfup"
2021-03-12 06:40:55,949 [main:61] - GENERATED IS CALL =false
2021-03-12 06:40:56,089 [main:67] - randomType = Short
2021-03-12 06:40:56,215 [main:302] - generating value of type = Short true depth = 0
2021-03-12 06:40:56,254 [main:106] - GETTING Any? from Inner
2021-03-12 06:40:56,258 [main:106] - GETTING Any? from Child
2021-03-12 06:40:56,264 [main:106] - GETTING Any? from String
2021-03-12 06:40:56,279 [main:114] - replacement of {
        var result = ""
"ooecm"
    } of type Any? is "hsfup"
2021-03-12 06:40:56,402 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 06:40:56,402 [main:66] - Compilation checking started
2021-03-12 06:40:56,407 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:40:56,407 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))) return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) "hsfup"
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = (Kla1()).prope6
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        var result = ""
if (c !is CoroutineStackFrame) error((result).take(994995506))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        var result = ""
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = (Child()).equals("yiyqk").not()

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
Kla4().prope10 = {
            Kla4().prope9 = (result).subSequence(240251009, 454655975).any()
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:56,409 [main:107] - replacing (this, Kla1)
2021-03-12 06:40:56,410 [main:50] - replacing this Kla1
2021-03-12 06:40:56,410 [main:54] - Getting value of type Kla1
2021-03-12 06:40:56,532 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:40:56,534 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = (Kla1()).prope6
    }

    var prope6: Any? = null
}
2021-03-12 06:40:56,535 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-12 06:40:56,535 [main:61] - GENERATED IS CALL =true
2021-03-12 06:40:56,680 [main:67] - randomType = Kla1?
2021-03-12 06:40:56,802 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:40:56,805 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
this.prope6 = (Kla1()).prope6
    }

    var prope6: Any? = null
}
2021-03-12 06:40:56,824 [main:106] - GETTING Kla1 from Child
2021-03-12 06:40:56,829 [main:106] - GETTING Kla1 from String
2021-03-12 06:40:56,845 [main:106] - GETTING Kla1 from Inner
2021-03-12 06:40:56,849 [main:114] - replacement of this of type Kla1 is Kla1()
2021-03-12 06:40:56,971 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:40:56,971 [main:66] - Compilation checking started
2021-03-12 06:40:57,542 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
//KT-3927 Inner class cannot be instantiated with child instance of outer class

//KT-3927 Inner class cannot be instantiated with child instance of outer class

abstract class Base {
    inner class Inner {
        fun o() = "O"
        fun k() = "K"
    }
}

class Child : Base()

fun box(): String {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}

suspend fun fu0(): Unit = suspendCoroutineUninterceptedOrReturn {a: Continuation<Unit> -> "rnpnl"}

fun fu1(c: suspend () -> Unit) {
    (c as Continuation<Unit>).resume(Unit)
}

fun fu2(c: suspend () -> Unit) {
    var result = ""
val prope2 = c.createCoroutine(Kla0)

    val prope3 = prope2.javaClass.getDeclaredField("delegate")
    prope3.setAccessible(true)
    val prope4 = prope3.get(prope2)

    val prope5 = prope4.javaClass.superclass.getDeclaredField("label")
    prope5.setAccessible(true)
    prope5.set(prope4, (LinkedHashMap<UInt, Base?>()).size.xor(-1152095454))
    prope2.resume(Unit)
}

fun box989(): String {

    var result = ""
try {
        fu1 { require(false)}
        return "fail 1"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            fu0()
        }
        return "fail 3"
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != (Child().Inner()).o().removeSuffix(StringBuilder("iryvb"))) return "fail 4: ${e.message!!}"
    }

    var prope6 = (Child().Inner()).o().dropLastWhile({a: Char -> true})

    try {
        fu1 {
            prope6 = "fail 5"
        }
        return "fail 6"
    } catch (e: kotlin.KotlinNullPointerException) {
    }

    try {
        fu2 {
            prope6 = (Child().Inner()).o().replaceBefore('參', result, result)
        }
        return (1891095645.toUInt()).toUByte().toString(-1638244462)
    } catch (e: java.lang.IllegalStateException) {
        if (e.message != "call to 'resume' before 'invoke' with coroutine") return (Child().Inner()).o().reversed()
        return prope6
    }

    return "fail"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
prope6.exceptionOrNull()?.let({a: Throwable -> println("wrhfd")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
"ooecm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        var result = ""
Kla1().prope6 = (Kla1()).prope6
    }

    var prope6: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        var result = ""
if (c !is CoroutineStackFrame) error((result).take(994995506))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        var result = ""
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var result = ""
prope7.find { true} ?: error((Child().Inner()).o().drop(-1484443130) +
                prope7.joinToString(separator = (-4795248794636194158).toChar().lowercase()))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope8 = 0
    var prope9 = (Child()).equals("yiyqk").not()

    var prope10: () -> Unit = {}

    fun fu10() {
        var result = ""
prope8 = 0
        prope9 = false
        prope10 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Child().Inner()).o().length
        prope10 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in (result).compareTo("npbfu").rangeTo(41)) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (result).plus("gexyv") + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error(result + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Child()).equals("hstyr").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
Kla4().prope10 = {
            Kla4().prope9 = (result).subSequence(240251009, 454655975).any()
        }
    }

    override fun fu5(exception: Throwable) {
        var result = ""
throw Error("dyukt")
    }
}


2021-03-12 06:40:57,545 [main:107] - replacing (0, Int)
2021-03-12 06:40:57,545 [main:50] - replacing 0 Int
2021-03-12 06:40:57,545 [main:54] - Getting value of type Int
