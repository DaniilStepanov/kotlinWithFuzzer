2021-03-12 10:07:45,542 [main:66] - Compilation checking started
2021-03-12 10:07:47,169 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:07:47,173 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 10:07:47,187 [main:66] - Compilation checking started
2021-03-12 10:07:48,218 [main:53] - Result = true
Text:
import kotlin.test.*

fun Int.foo(s: String = "jisje") {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}
2021-03-12 10:07:48,218 [main:50] - replacing name: String String
2021-03-12 10:07:48,219 [main:54] - Getting value of type String
2021-03-12 10:07:48,337 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:07:48,338 [main:58] - GENERATED VALUE OF TYPE String = "foqjm"
2021-03-12 10:07:48,339 [main:61] - GENERATED IS CALL =false
2021-03-12 10:07:48,869 [main:67] - randomType = UByte
2021-03-12 10:07:49,047 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:07:49,231 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7ee6e25b]
2021-03-12 10:07:49,232 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f160948]
2021-03-12 10:07:49,405 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:07:49,406 [main:78] - Generated call from random type = (34.toUByte()).toLong().toString(1264160092)
2021-03-12 10:07:49,407 [main:106] - GETTING String from String
2021-03-12 10:07:49,453 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb800b5]]
2021-03-12 10:07:49,453 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb800b5]
2021-03-12 10:07:49,574 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:07:49,700 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:07:49,703 [main:117] - GENERATED CALL = (s).replaceAfterLast('矾', s, "vtevm")
2021-03-12 10:07:49,705 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e266ddd]]
2021-03-12 10:07:49,705 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e266ddd]
2021-03-12 10:07:49,808 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:07:49,809 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:07:49,812 [main:117] - GENERATED CALL = (s).dropWhile({a: Char -> true})
2021-03-12 10:07:49,812 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@112085ea]]
2021-03-12 10:07:49,812 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@112085ea]
2021-03-12 10:07:49,978 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:07:50,134 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:07:50,141 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:07:50,446 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 10:07:50,461 [main:95] - GENERATED = StringBuilder("fouuq")
2021-03-12 10:07:50,638 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:07:50,639 [main:117] - GENERATED CALL = (s).commonPrefixWith(StringBuilder("fouuq"), false)
2021-03-12 10:07:50,640 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ff4ab1b]]
2021-03-12 10:07:50,640 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ff4ab1b]
2021-03-12 10:07:50,755 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:07:50,857 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:07:50,858 [main:117] - GENERATED CALL = (s).padStart(-1870027110, '澮')
2021-03-12 10:07:50,859 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]]
2021-03-12 10:07:50,859 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]
2021-03-12 10:07:51,001 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:07:51,118 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:07:51,119 [main:117] - GENERATED CALL = (s).substringAfter('淆', "tuzqq")
2021-03-12 10:07:51,119 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]]
2021-03-12 10:07:51,120 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]
2021-03-12 10:07:51,209 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:07:51,209 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:07:51,211 [main:117] - GENERATED CALL = (s).filterNot({a: Char -> true})
2021-03-12 10:07:51,211 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:07:51,211 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:07:51,329 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:07:51,331 [main:117] - GENERATED CALL = (s).substringBeforeLast('㨰', s)
2021-03-12 10:07:51,331 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64faf504]]
2021-03-12 10:07:51,331 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 10:07:51,424 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:07:51,425 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64faf504]
2021-03-12 10:07:51,426 [main:117] - GENERATED CALL = (s).get(1583018744).lowercase()
2021-03-12 10:07:51,426 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]]
2021-03-12 10:07:51,426 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]
2021-03-12 10:07:51,520 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:07:51,526 [main:117] - GENERATED CALL = (s).removeSurrounding("rodid")
2021-03-12 10:07:51,527 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]]
2021-03-12 10:07:51,527 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]
2021-03-12 10:07:51,659 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:07:51,661 [main:117] - GENERATED CALL = (s).substringBefore('Έ', s)
2021-03-12 10:07:51,661 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 10:07:51,662 [main:66] - Compilation checking started
2021-03-12 10:07:52,039 [main:49] - Result = false
Text:
import kotlin.test.*

fun Int.foo(s: String = "jisje") {}

class A {
    fun bar() {}
}

fun baz(name: String = (s).commonPrefixWith(StringBuilder("fouuq"), false)) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}


2021-03-12 10:07:52,273 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:07:52,525 [main:43] - GENERATING CALL OF fun Int.foo(s: String) {}
2021-03-12 10:07:52,525 [main:61] - WITHOUT TYPE PARAMS = fun Int.foo(s: String) {}
2021-03-12 10:07:52,626 [main:302] - generating value of type = String true depth = 1
2021-03-12 10:07:52,627 [main:302] - generating value of type = Int true depth = 1
2021-03-12 10:07:52,628 [main:95] - GENERATED = -2138687832.foo("ymkfb")
2021-03-12 10:07:52,721 [main:43] - GENERATING CALL OF fun baz(name: String) {}
2021-03-12 10:07:52,721 [main:61] - WITHOUT TYPE PARAMS = fun baz(name: String) {}
2021-03-12 10:07:52,836 [main:302] - generating value of type = String true depth = 1
2021-03-12 10:07:52,837 [main:95] - GENERATED = baz("mnqep")
2021-03-12 10:07:52,943 [main:45] - Trying to change 15 nodes
2021-03-12 10:07:52,946 [main:53] - replacing ("parameter #0 name of ${::baz}", String)
2021-03-12 10:07:52,946 [main:50] - replacing "parameter #0 name of ${::baz}" String
2021-03-12 10:07:52,946 [main:54] - Getting value of type String
2021-03-12 10:07:53,037 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:07:53,038 [main:58] - GENERATED VALUE OF TYPE String = "blqly"
2021-03-12 10:07:53,038 [main:61] - GENERATED IS CALL =false
2021-03-12 10:07:53,606 [main:67] - randomType = Function1<LinkedHashSet<A?>, A>
2021-03-12 10:07:53,606 [main:61] - replacement of "parameter #0 name of ${::baz}" of type String is "blqly"
2021-03-12 10:07:53,696 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 10:07:53,696 [main:66] - Compilation checking started
2021-03-12 10:07:54,276 [main:53] - Result = true
Text:
import kotlin.test.*

fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("blqly"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}
2021-03-12 10:07:54,277 [main:53] - replacing (listOf("instance parameter of ${A::bar}"), List<String>)
2021-03-12 10:07:54,277 [main:50] - replacing listOf("instance parameter of ${A::bar}") List<String>
2021-03-12 10:07:54,278 [main:54] - Getting value of type List<String>
2021-03-12 10:07:54,382 [main:302] - generating value of type = List<String> false depth = 0
2021-03-12 10:07:54,489 [main:43] - GENERATING CALL OF fun <T> listOf(): List<Strg> = TODO()
2021-03-12 10:07:54,492 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): List<Strg> = TODO()
2021-03-12 10:07:54,592 [main:95] - GENERATED = listOf<String>()
2021-03-12 10:07:54,592 [main:58] - GENERATED VALUE OF TYPE List<String> = listOf<String>()
2021-03-12 10:07:54,592 [main:61] - GENERATED IS CALL =true
2021-03-12 10:07:54,689 [main:67] - randomType = Long
2021-03-12 10:07:54,778 [main:302] - generating value of type = Long true depth = 0
2021-03-12 10:07:54,846 [main:61] - replacement of listOf("instance parameter of ${A::bar}") of type List<String> is listOf<String>()
2021-03-12 10:07:54,951 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:07:54,951 [main:66] - Compilation checking started
2021-03-12 10:07:55,419 [main:53] - Result = true
Text:
import kotlin.test.*

fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf<String>(),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("blqly"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}


2021-03-12 10:07:55,421 [main:53] - replacing ("extension receiver parameter of ${Int::foo}", String)
2021-03-12 10:07:55,421 [main:50] - replacing "extension receiver parameter of ${Int::foo}" String
2021-03-12 10:07:55,422 [main:54] - Getting value of type String
2021-03-12 10:07:55,519 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:07:55,519 [main:58] - GENERATED VALUE OF TYPE String = "uwfpo"
2021-03-12 10:07:55,519 [main:61] - GENERATED IS CALL =false
2021-03-12 10:07:56,404 [main:67] - randomType = Triple<Long, Long, Triple<Double, A?, List<Float>>>
2021-03-12 10:07:56,492 [main:302] - generating value of type = Triple<Long, Long, Triple<Double, A?, List<Float>>> false depth = 0
2021-03-12 10:07:56,587 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Long, second: Long, third: Triple<Double, A?, List<Float>>): Triple<Long, Long, Triple<Double, A?, List<Float>>> = TODO()
2021-03-12 10:07:56,589 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Long, second: Long, third: Triple<Double, A?, List<Float>>): Triple<Long, Long, Triple<Double, A?, List<Float>>> = TODO()
2021-03-12 10:07:56,679 [main:302] - generating value of type = Long true depth = 3
2021-03-12 10:07:56,679 [main:302] - generating value of type = Long true depth = 3
2021-03-12 10:07:56,679 [main:302] - generating value of type = Triple<Double, A?, List<Float>> false depth = 3
2021-03-12 10:07:56,769 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Double, second: A?, third: List<Float>): Triple<Double, A?, List<Float>> = TODO()
2021-03-12 10:07:56,771 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Double, second: A?, third: List<Float>): Triple<Double, A?, List<Float>> = TODO()
2021-03-12 10:07:56,881 [main:302] - generating value of type = Double true depth = 6
2021-03-12 10:07:56,882 [main:302] - generating value of type = A false depth = 6
2021-03-12 10:07:56,882 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:07:56,883 [main:302] - generating value of type = List<Float> false depth = 6
2021-03-12 10:07:56,987 [main:43] - GENERATING CALL OF fun <T> listOf(): List<Float> = TODO()
2021-03-12 10:07:56,989 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(): List<Float> = TODO()
2021-03-12 10:07:57,084 [main:95] - GENERATED = listOf<Float>()
2021-03-12 10:07:57,085 [main:95] - GENERATED = Triple<Double, A?, List<Float>>(0.5246445550107081, A(), listOf<Float>())
2021-03-12 10:07:57,085 [main:95] - GENERATED = Triple<Long, Long, Triple<Double, A?, List<Float>>>(-1264591549033007965, 7794289800982299461, Triple<Double, A?, List<Float>>(0.5246445550107081, A(), listOf<Float>()))
2021-03-12 10:07:57,117 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f160948]
2021-03-12 10:07:57,203 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:07:57,205 [main:78] - Generated call from random type = (Triple<Long, Long, Triple<Double, A?, List<Float>>>(-1264591549033007965, 7794289800982299461, Triple<Double, A?, List<Float>>(0.5246445550107081, A(), listOf<Float>()))).first.toString(1362403396)
2021-03-12 10:07:57,205 [main:61] - replacement of "extension receiver parameter of ${Int::foo}" of type String is (Triple<Long, Long, Triple<Double, A?, List<Float>>>(-1264591549033007965, 7794289800982299461, Triple<Double, A?, List<Float>>(0.5246445550107081, A(), listOf<Float>()))).first.toString(1362403396)
2021-03-12 10:07:57,291 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:07:57,292 [main:66] - Compilation checking started
2021-03-12 10:07:57,763 [main:53] - Result = true
Text:
import kotlin.test.*

fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf((Triple<Long, Long, Triple<Double, A?, List<Float>>>(-1264591549033007965, 7794289800982299461, Triple<Double, A?, List<Float>>(0.5246445550107081, A(), listOf<Float>()))).first.toString(1362403396), "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf<String>(),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("blqly"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}


2021-03-12 10:07:57,763 [main:53] - replacing ("parameter #0 name of ${::baz}", String)
2021-03-12 10:07:57,763 [main:50] - replacing "parameter #0 name of ${::baz}" String
2021-03-12 10:07:57,764 [main:54] - Getting value of type String
2021-03-12 10:07:57,855 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:07:57,856 [main:58] - GENERATED VALUE OF TYPE String = "nioil"
2021-03-12 10:07:57,856 [main:61] - GENERATED IS CALL =false
2021-03-12 10:07:58,083 [main:67] - randomType = Short?
2021-03-12 10:07:58,179 [main:302] - generating value of type = Short true depth = 0
2021-03-12 10:07:58,278 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@f983c87]
2021-03-12 10:07:58,278 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6839e33f]
2021-03-12 10:07:58,375 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:07:58,377 [main:78] - Generated call from random type = (-13487)?.toByte().toString(-1849805107)
2021-03-12 10:07:58,377 [main:61] - replacement of "parameter #0 name of ${::baz}" of type String is "nioil"
2021-03-12 10:07:58,499 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 10:07:58,502 [main:53] - replacing ("OK", String)
2021-03-12 10:07:58,502 [main:50] - replacing "OK" String
2021-03-12 10:07:58,503 [main:54] - Getting value of type String
2021-03-12 10:07:58,597 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:07:58,598 [main:58] - GENERATED VALUE OF TYPE String = "meazz"
2021-03-12 10:07:58,598 [main:61] - GENERATED IS CALL =false
2021-03-12 10:07:58,691 [main:67] - randomType = A
2021-03-12 10:07:58,783 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:07:58,783 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:07:58,791 [main:61] - replacement of "OK" of type String is "meazz"
2021-03-12 10:07:58,890 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 10:07:58,890 [main:66] - Compilation checking started
2021-03-12 10:07:59,377 [main:53] - Result = true
Text:
import kotlin.test.*

fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf((Triple<Long, Long, Triple<Double, A?, List<Float>>>(-1264591549033007965, 7794289800982299461, Triple<Double, A?, List<Float>>(0.5246445550107081, A(), listOf<Float>()))).first.toString(1362403396), "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf<String>(),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("blqly"),
            ::baz.parameters.map(Any::toString)
    )

    return "meazz"
}


2021-03-12 10:07:59,379 [main:53] - replacing (Int::foo, KFunction2<Int, [@kotlin.ParameterName] String, Unit>)
2021-03-12 10:07:59,380 [main:50] - replacing Int::foo KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:07:59,380 [main:54] - Getting value of type KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:07:59,502 [main:302] - generating value of type = KFunction2<Int, [@kotlin.ParameterName] String, Unit> false depth = 0
2021-03-12 10:07:59,607 [main:58] - GENERATED VALUE OF TYPE KFunction2<Int, [@kotlin.ParameterName] String, Unit> = 
2021-03-12 10:07:59,719 [main:67] - randomType = ULong
2021-03-12 10:07:59,825 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 10:07:59,874 [main:58] - Cant find and generate replacement for Int::foo type KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:07:59,874 [main:53] - replacing ("OK", String)
2021-03-12 10:07:59,874 [main:50] - replacing "OK" String
2021-03-12 10:07:59,875 [main:54] - Getting value of type String
2021-03-12 10:07:59,966 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:07:59,966 [main:58] - GENERATED VALUE OF TYPE String = "sxawp"
2021-03-12 10:07:59,967 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:00,104 [main:67] - randomType = A
2021-03-12 10:08:00,192 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:08:00,192 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:08:00,200 [main:61] - replacement of "OK" of type String is "sxawp"
2021-03-12 10:08:00,290 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 10:08:00,291 [main:53] - replacing (Any::toString, KFunction1<Any, String>)
2021-03-12 10:08:00,291 [main:50] - replacing Any::toString KFunction1<Any, String>
2021-03-12 10:08:00,291 [main:54] - Getting value of type KFunction1<Any, String>
2021-03-12 10:08:00,384 [main:302] - generating value of type = KFunction1<Any, String> false depth = 0
2021-03-12 10:08:00,475 [main:58] - GENERATED VALUE OF TYPE KFunction1<Any, String> = 
2021-03-12 10:08:00,599 [main:67] - randomType = A
2021-03-12 10:08:00,691 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:08:00,692 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:08:00,699 [main:58] - Cant find and generate replacement for Any::toString type KFunction1<Any, String>
2021-03-12 10:08:00,701 [main:53] - replacing ("parameter #1 s of ${Int::foo}", String)
2021-03-12 10:08:00,701 [main:50] - replacing "parameter #1 s of ${Int::foo}" String
2021-03-12 10:08:00,701 [main:54] - Getting value of type String
2021-03-12 10:08:00,789 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:00,789 [main:58] - GENERATED VALUE OF TYPE String = "vrqpy"
2021-03-12 10:08:00,790 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:00,891 [main:67] - randomType = A
2021-03-12 10:08:00,990 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:08:00,991 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:08:01,000 [main:61] - replacement of "parameter #1 s of ${Int::foo}" of type String is "vrqpy"
2021-03-12 10:08:01,122 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 10:08:01,122 [main:66] - Compilation checking started
2021-03-12 10:08:01,514 [main:53] - Result = true
Text:
import kotlin.test.*

fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf((Triple<Long, Long, Triple<Double, A?, List<Float>>>(-1264591549033007965, 7794289800982299461, Triple<Double, A?, List<Float>>(0.5246445550107081, A(), listOf<Float>()))).first.toString(1362403396), "vrqpy"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf<String>(),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("blqly"),
            ::baz.parameters.map(Any::toString)
    )

    return "meazz"
}


2021-03-12 10:08:01,514 [main:53] - replacing (listOf("instance parameter of ${A::bar}"), List<String>)
2021-03-12 10:08:01,514 [main:50] - replacing listOf("instance parameter of ${A::bar}") List<String>
2021-03-12 10:08:01,514 [main:54] - Getting value of type List<String>
2021-03-12 10:08:01,601 [main:302] - generating value of type = List<String> false depth = 0
2021-03-12 10:08:01,695 [main:43] - GENERATING CALL OF fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<String>.()->kotlin.Unit): List<Strg> = TODO()
2021-03-12 10:08:01,697 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<String>.()->kotlin.Unit): List<Strg> = TODO()
2021-03-12 10:08:02,004 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:08:02,005 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<String>, Unit> false depth = 3
2021-03-12 10:08:02,006 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 10:08:02,113 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:08:02,114 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:08:02,429 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 10:08:02,429 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-12 10:08:02,429 [main:302] - generating value of type = Any false depth = 8
2021-03-12 10:08:02,430 [main:95] - GENERATED = check(false, { "wddgb"})
2021-03-12 10:08:02,430 [main:95] - GENERATED = buildList<String>(-726740034, { check(false, { "wddgb"})})
2021-03-12 10:08:02,430 [main:58] - GENERATED VALUE OF TYPE List<String> = buildList<String>(-726740034, { check(false, { "wddgb"})})
2021-03-12 10:08:02,431 [main:61] - GENERATED IS CALL =true
2021-03-12 10:08:02,432 [main:67] - randomType = A
2021-03-12 10:08:02,534 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:08:02,535 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:08:02,543 [main:61] - replacement of listOf("instance parameter of ${A::bar}") of type List<String> is buildList<String>(-726740034, { check(false, { "wddgb"})})
2021-03-12 10:08:02,643 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:08:02,728 [main:119] - TRYING TO REPLACE CONSTANT 1362403396
2021-03-12 10:08:02,813 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 10:08:02,813 [main:66] - Compilation checking started
2021-03-12 10:08:03,231 [main:119] - TRYING TO REPLACE CONSTANT 7794289800982299461
2021-03-12 10:08:03,317 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 10:08:03,317 [main:66] - Compilation checking started
2021-03-12 10:08:03,616 [main:49] - Result = false
Text:
import kotlin.test.*

fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf((Triple<Long, Long, Triple<Double, A?, List<Float>>>(-1264591549033007965, first, Triple<Double, A?, List<Float>>(0.5246445550107081, A(), listOf<Float>()))).first.toString(1362403396), "vrqpy"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf<String>(),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("blqly"),
            ::baz.parameters.map(Any::toString)
    )

    return "meazz"
}


2021-03-12 10:08:03,617 [main:119] - TRYING TO REPLACE CONSTANT 1264591549033007965
2021-03-12 10:08:03,709 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 10:08:03,710 [main:66] - Compilation checking started
2021-03-12 10:08:04,122 [main:53] - Result = true
Text:
import kotlin.test.*

fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf((Triple<Long, Long, Triple<Double, A?, List<Float>>>(1264591549033007965, 7794289800982299461, Triple<Double, A?, List<Float>>(0.5246445550107081, A(), listOf<Float>()))).first.toString(1362403396), "vrqpy"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf<String>(),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("blqly"),
            ::baz.parameters.map(Any::toString)
    )

    return "meazz"
}


2021-03-12 10:08:04,122 [main:119] - TRYING TO REPLACE CONSTANT 0.5246445550107081
2021-03-12 10:08:04,204 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-12 10:08:04,204 [main:66] - Compilation checking started
2021-03-12 10:08:04,600 [main:41] - AFTER TRY 0 res = import kotlin.test.*

fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}
2021-03-12 10:08:04,758 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:08:04,916 [main:43] - GENERATING CALL OF fun Int.foo(s: String) {}
2021-03-12 10:08:04,917 [main:61] - WITHOUT TYPE PARAMS = fun Int.foo(s: String) {}
2021-03-12 10:08:04,996 [main:302] - generating value of type = String true depth = 1
2021-03-12 10:08:04,996 [main:302] - generating value of type = Int true depth = 1
2021-03-12 10:08:04,997 [main:95] - GENERATED = 878113392.foo("ltduk")
2021-03-12 10:08:05,092 [main:43] - GENERATING CALL OF fun baz(name: String) {}
2021-03-12 10:08:05,092 [main:61] - WITHOUT TYPE PARAMS = fun baz(name: String) {}
2021-03-12 10:08:05,181 [main:302] - generating value of type = String true depth = 1
2021-03-12 10:08:05,182 [main:95] - GENERATED = baz("katoc")
2021-03-12 10:08:05,268 [main:43] - Try №0
2021-03-12 10:08:15,982 [main:48] - Already checked
2021-03-12 10:08:19,953 [main:69] - Trying to insert suspend fun fu4(): String {
                        return "OK"
                    }
2021-03-12 10:08:20,191 [main:66] - Compilation checking started
2021-03-12 10:08:21,351 [main:103] - Trying to change 143 nodes
2021-03-12 10:08:21,351 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 10:08:21,351 [main:50] - replacing getOrThrow() Any?
2021-03-12 10:08:21,351 [main:54] - Getting value of type Any?
2021-03-12 10:08:21,525 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:21,525 [main:58] - GENERATED VALUE OF TYPE Any? = "nlivb"
2021-03-12 10:08:21,526 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:21,680 [main:67] - randomType = ULong
2021-03-12 10:08:21,819 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 10:08:21,880 [main:106] - GETTING Any? from KFunction1<A, Unit>
2021-03-12 10:08:21,922 [main:106] - GETTING Any? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:21,996 [main:106] - GETTING Any? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:22,048 [main:114] - replacement of getOrThrow() of type Any? is "nlivb"
2021-03-12 10:08:22,197 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 10:08:22,197 [main:66] - Compilation checking started
2021-03-12 10:08:22,750 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return "OK"
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3."nlivb"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:22,753 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-12 10:08:22,753 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-12 10:08:22,753 [main:54] - Getting value of type String
2021-03-12 10:08:22,911 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:22,913 [main:58] - GENERATED VALUE OF TYPE String = "gzmlz"
2021-03-12 10:08:22,914 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:23,406 [main:67] - randomType = Kla2<HashSet<Kla5>>
2021-03-12 10:08:23,555 [main:302] - generating value of type = Kla2<HashSet<Kla5>> false depth = 0
2021-03-12 10:08:23,557 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 10:08:24,201 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 10:08:24,202 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 10:08:24,229 [main:106] - GETTING String from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:24,289 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]]
2021-03-12 10:08:24,289 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]
2021-03-12 10:08:24,439 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:08:24,441 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:08:24,444 [main:117] - GENERATED CALL = (Int::foo).name.takeWhile({a: Char -> true})
2021-03-12 10:08:24,444 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e266ddd]]
2021-03-12 10:08:24,444 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e266ddd]
2021-03-12 10:08:24,599 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:08:24,601 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:08:24,603 [main:117] - GENERATED CALL = (Int::foo).name.dropWhile({a: Char -> true})
2021-03-12 10:08:24,604 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]]
2021-03-12 10:08:24,604 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]
2021-03-12 10:08:24,742 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:24,877 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:08:24,879 [main:117] - GENERATED CALL = (Int::foo).name.padEnd(1268659460, '㻺')
2021-03-12 10:08:24,879 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]]
2021-03-12 10:08:24,879 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]
2021-03-12 10:08:24,880 [main:117] - GENERATED CALL = (Int::foo).name.trimStart()
2021-03-12 10:08:24,880 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]]
2021-03-12 10:08:24,880 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]
2021-03-12 10:08:25,007 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:08:25,008 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:08:25,011 [main:117] - GENERATED CALL = (Int::foo).name.replaceFirstChar({a: Char -> 'ꔚ'})
2021-03-12 10:08:25,011 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dad3b46]]
2021-03-12 10:08:25,011 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dad3b46]
2021-03-12 10:08:25,143 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:25,146 [main:117] - GENERATED CALL = (Int::foo).name.take(-1446765455)
2021-03-12 10:08:25,146 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]]
2021-03-12 10:08:25,146 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]
2021-03-12 10:08:25,270 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:25,272 [main:117] - GENERATED CALL = (Int::foo).name.drop(-172840793)
2021-03-12 10:08:25,272 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60659f12]]
2021-03-12 10:08:25,272 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60659f12]
2021-03-12 10:08:25,401 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:25,402 [main:117] - GENERATED CALL = (Int::foo).name.plus("rkoia")
2021-03-12 10:08:25,402 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]]
2021-03-12 10:08:25,402 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]
2021-03-12 10:08:25,582 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:08:25,730 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:25,860 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:25,862 [main:117] - GENERATED CALL = (Int::foo).name.replaceBefore('彛', "rhonu", "vqwjn")
2021-03-12 10:08:25,862 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]]
2021-03-12 10:08:25,862 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]
2021-03-12 10:08:25,863 [main:117] - GENERATED CALL = (Int::foo).name.reversed()
2021-03-12 10:08:25,863 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is (Int::foo).name.reversed()
2021-03-12 10:08:25,994 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:08:25,995 [main:66] - Compilation checking started
2021-03-12 10:08:26,746 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return "OK"
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Int::foo).name.reversed() + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:26,749 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 10:08:26,749 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 10:08:26,749 [main:54] - Getting value of type Ty0
2021-03-12 10:08:26,899 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 10:08:26,904 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 10:08:27,068 [main:67] - randomType = Double
2021-03-12 10:08:27,202 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:08:27,252 [main:106] - GETTING Ty0 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:27,312 [main:106] - GETTING Ty0 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:27,368 [main:106] - GETTING Ty0 from KFunction1<A, Unit>
2021-03-12 10:08:27,409 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 10:08:27,409 [main:107] - replacing (x, Function1<Ty0, Unit>)
2021-03-12 10:08:27,409 [main:50] - replacing x Function1<Ty0, Unit>
2021-03-12 10:08:27,409 [main:54] - Getting value of type Function1<Ty0, Unit>
2021-03-12 10:08:27,550 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-12 10:08:27,552 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:08:27,688 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:08:27,693 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:08:28,226 [main:302] - generating value of type = Int true depth = 4
2021-03-12 10:08:28,228 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 10:08:28,230 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 10:08:28,364 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:08:28,367 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:08:28,645 [main:302] - generating value of type = Any false depth = 8
2021-03-12 10:08:28,645 [main:95] - GENERATED = println("mhfuv")
2021-03-12 10:08:28,645 [main:95] - GENERATED = repeat(248449107, {a: Int -> println("mhfuv")})
2021-03-12 10:08:28,645 [main:58] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}
2021-03-12 10:08:28,646 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:28,653 [main:67] - randomType = Kla3
2021-03-12 10:08:28,828 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 10:08:28,829 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:08:28,839 [main:106] - GETTING Function1<Ty0, Unit> from KFunction1<A, Unit>
2021-03-12 10:08:28,885 [main:106] - GETTING Function1<Ty0, Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:28,947 [main:106] - GETTING Function1<Ty0, Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:29,004 [main:114] - replacement of x of type Function1<Ty0, Unit> is {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}
2021-03-12 10:08:29,141 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:08:29,141 [main:66] - Compilation checking started
2021-03-12 10:08:29,892 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return "OK"
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Int::foo).name.reversed() + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:29,895 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 10:08:29,895 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 10:08:29,895 [main:54] - Getting value of type Boolean
2021-03-12 10:08:30,051 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:30,053 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:08:30,053 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:30,226 [main:67] - randomType = Array<Kla3>
2021-03-12 10:08:30,378 [main:302] - generating value of type = Array<Kla3> false depth = 0
2021-03-12 10:08:30,530 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Kla3> = TODO()
2021-03-12 10:08:30,534 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Kla3> = TODO()
2021-03-12 10:08:30,717 [main:95] - GENERATED = emptyArray<Kla3>()
2021-03-12 10:08:30,737 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c8241eb]
2021-03-12 10:08:30,737 [main:78] - Generated call from random type = (emptyArray<Kla3>()).isNotEmpty()
2021-03-12 10:08:30,738 [main:106] - GETTING Boolean from KFunction1<A, Unit>
2021-03-12 10:08:30,776 [main:113] - Case = [public abstract fun invoke(p1: A): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@25ad605d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@616a635f]]
2021-03-12 10:08:30,777 [main:149] - GENERATING call of type public abstract fun invoke(p1: A): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@25ad605d]
2021-03-12 10:08:30,920 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:08:30,922 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:08:30,922 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@616a635f]
2021-03-12 10:08:31,081 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:31,081 [main:117] - GENERATED CALL = (A::bar).invoke(A()).equals("mbqiq")
2021-03-12 10:08:31,081 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]]
2021-03-12 10:08:31,082 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:08:31,232 [main:117] - GENERATED CALL = (A::bar).equals(null)
2021-03-12 10:08:31,232 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]]
2021-03-12 10:08:31,232 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:08:31,372 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:31,372 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:08:31,502 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:31,504 [main:117] - GENERATED CALL = (A::bar).equals("ghsmh").xor(false)
2021-03-12 10:08:31,504 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]]
2021-03-12 10:08:31,504 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:08:31,637 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:31,637 [main:117] - GENERATED CALL = (A::bar).name.equals("xvmxz")
2021-03-12 10:08:31,638 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]]
2021-03-12 10:08:31,638 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]
2021-03-12 10:08:31,770 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:31,935 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:31,937 [main:117] - GENERATED CALL = (A::bar).name.endsWith("nofrp", true)
2021-03-12 10:08:31,938 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:08:31,938 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:08:32,076 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:32,076 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:08:32,209 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:32,211 [main:117] - GENERATED CALL = (A::bar).equals("egjww").or(true)
2021-03-12 10:08:32,211 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:08:32,211 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:08:32,349 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:32,349 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:08:32,476 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:32,476 [main:117] - GENERATED CALL = (A::bar).equals("uqgty").equals("jddnw")
2021-03-12 10:08:32,477 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]]
2021-03-12 10:08:32,477 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]
2021-03-12 10:08:32,599 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:32,763 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:32,767 [main:117] - GENERATED CALL = (A::bar).name.startsWith("wuwhl", false)
2021-03-12 10:08:32,767 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 10:08:32,767 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:08:32,898 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:32,899 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 10:08:33,060 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:33,063 [main:117] - GENERATED CALL = (A::bar).equals("vxufd").and(false)
2021-03-12 10:08:33,063 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:08:33,063 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:08:33,193 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:33,194 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:08:33,194 [main:117] - GENERATED CALL = (A::bar).equals("qiygv").not()
2021-03-12 10:08:33,194 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (A::bar).invoke(A()).equals("mbqiq")
2021-03-12 10:08:33,333 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:08:33,333 [main:66] - Compilation checking started
2021-03-12 10:08:34,069 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return "OK"
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Int::foo).name.reversed() + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:34,072 [main:107] - replacing (prope6, Boolean)
2021-03-12 10:08:34,072 [main:50] - replacing prope6 Boolean
2021-03-12 10:08:34,072 [main:54] - Getting value of type Boolean
2021-03-12 10:08:34,210 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:34,211 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:08:34,212 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:34,555 [main:67] - randomType = UShort?
2021-03-12 10:08:34,689 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 10:08:34,750 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@a9c0e4b]
2021-03-12 10:08:34,869 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:34,870 [main:78] - Generated call from random type = (3956.toUShort())?.equals("ubnsx")
2021-03-12 10:08:34,871 [main:106] - GETTING Boolean from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:34,915 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]]
2021-03-12 10:08:34,915 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]
2021-03-12 10:08:35,052 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:35,055 [main:117] - GENERATED CALL = (::baz).name.matches("vrpii")
2021-03-12 10:08:35,055 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]]
2021-03-12 10:08:35,055 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]
2021-03-12 10:08:35,055 [main:117] - GENERATED CALL = (::baz).name.toBoolean()
2021-03-12 10:08:35,055 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]]
2021-03-12 10:08:35,055 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:08:35,180 [main:117] - GENERATED CALL = (::baz).equals(null)
2021-03-12 10:08:35,181 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]]
2021-03-12 10:08:35,181 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]
2021-03-12 10:08:35,301 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:35,426 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:35,428 [main:117] - GENERATED CALL = (::baz).name.startsWith("xrwqi", false)
2021-03-12 10:08:35,428 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]]
2021-03-12 10:08:35,428 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:08:35,549 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:35,549 [main:117] - GENERATED CALL = (::baz).name.equals("bcblz")
2021-03-12 10:08:35,549 [main:113] - Case = [public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@616a635f]]
2021-03-12 10:08:35,549 [main:149] - GENERATING call of type public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]
2021-03-12 10:08:35,671 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:08:35,681 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]
2021-03-12 10:08:35,681 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]]
2021-03-12 10:08:35,682 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:08:35,805 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:35,805 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:08:35,964 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:35,978 [main:117] - GENERATED CALL = (::baz).equals("livee").xor(true)
2021-03-12 10:08:35,978 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:08:35,978 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:08:36,112 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:36,113 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:08:36,252 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:36,253 [main:117] - GENERATED CALL = (::baz).equals("dynad").equals("fhwvj")
2021-03-12 10:08:36,253 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:08:36,253 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:08:36,388 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:08:36,388 [main:117] - GENERATED CALL = (::baz).equals(null).not()
2021-03-12 10:08:36,388 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]]
2021-03-12 10:08:36,389 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]
2021-03-12 10:08:36,522 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:36,659 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:36,661 [main:117] - GENERATED CALL = (::baz).name.endsWith("vldsk", false)
2021-03-12 10:08:36,661 [main:114] - replacement of prope6 of type Boolean is (::baz).name.endsWith("vldsk", false)
2021-03-12 10:08:36,810 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:08:36,811 [main:66] - Compilation checking started
2021-03-12 10:08:37,504 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return "OK"
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((Int::foo).name.reversed() + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:37,507 [main:107] - replacing (Kla0, Kla6)
2021-03-12 10:08:37,508 [main:50] - replacing Kla0 Kla6
2021-03-12 10:08:37,508 [main:54] - Getting value of type Kla6
2021-03-12 10:08:37,648 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 10:08:37,650 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-12 10:08:37,650 [main:58] - GENERATED VALUE OF TYPE Kla6 = 
2021-03-12 10:08:37,799 [main:67] - randomType = Sequence<Kla3>
2021-03-12 10:08:37,800 [main:106] - GETTING Kla6 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:37,846 [main:106] - GETTING Kla6 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:37,891 [main:106] - GETTING Kla6 from KFunction1<A, Unit>
2021-03-12 10:08:37,930 [main:111] - Cant find and generate replacement for Kla0 type Kla6
2021-03-12 10:08:37,930 [main:107] - replacing ((Int::foo).name.reversed() + i, String)
2021-03-12 10:08:37,930 [main:50] - replacing (Int::foo).name.reversed() + i String
2021-03-12 10:08:37,930 [main:54] - Getting value of type String
2021-03-12 10:08:38,049 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:38,051 [main:58] - GENERATED VALUE OF TYPE String = "vxjkm"
2021-03-12 10:08:38,051 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:38,188 [main:67] - randomType = Float
2021-03-12 10:08:38,310 [main:302] - generating value of type = Float true depth = 0
2021-03-12 10:08:38,347 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@21f064dc]
2021-03-12 10:08:38,347 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fdd65]
2021-03-12 10:08:38,464 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:38,466 [main:78] - Generated call from random type = (0.07092816f).toShort().toString(11043007)
2021-03-12 10:08:38,467 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:38,514 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:08:38,514 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:08:38,631 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:38,634 [main:117] - GENERATED CALL = (::baz).name.prependIndent("irvhs")
2021-03-12 10:08:38,634 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1]]
2021-03-12 10:08:38,634 [main:117] - GENERATED CALL = (::baz).name
2021-03-12 10:08:38,634 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6b6a0]]
2021-03-12 10:08:38,634 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6b6a0]
2021-03-12 10:08:38,752 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:38,754 [main:117] - GENERATED CALL = (::baz).name.trimMargin("gxmxo")
2021-03-12 10:08:38,754 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b75800]]
2021-03-12 10:08:38,754 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b75800]
2021-03-12 10:08:38,916 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:08:39,039 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:08:39,161 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:39,163 [main:117] - GENERATED CALL = (::baz).name.replaceFirst('韊', '鍼', false)
2021-03-12 10:08:39,163 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]]
2021-03-12 10:08:39,163 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]
2021-03-12 10:08:39,296 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:08:39,434 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:39,565 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:39,569 [main:117] - GENERATED CALL = (::baz).name.replaceAfter('퀬', "cipyr", "wdlle")
2021-03-12 10:08:39,569 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]]
2021-03-12 10:08:39,569 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]
2021-03-12 10:08:39,569 [main:117] - GENERATED CALL = (::baz).name.lowercase()
2021-03-12 10:08:39,570 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ea8dc]]
2021-03-12 10:08:39,570 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ea8dc]
2021-03-12 10:08:39,749 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:39,883 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:39,886 [main:117] - GENERATED CALL = (::baz).name.removeRange(1340050159, 2054981513)
2021-03-12 10:08:39,886 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]]
2021-03-12 10:08:39,886 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]
2021-03-12 10:08:39,886 [main:117] - GENERATED CALL = (::baz).name.reversed()
2021-03-12 10:08:39,886 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]]
2021-03-12 10:08:39,886 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]
2021-03-12 10:08:40,005 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:08:40,132 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:40,135 [main:117] - GENERATED CALL = (::baz).name.substringBefore('?', "wvjkw")
2021-03-12 10:08:40,135 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]]
2021-03-12 10:08:40,135 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]
2021-03-12 10:08:40,259 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 10:08:40,398 [main:43] - GENERATING CALL OF fun <T> listOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 10:08:40,401 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 10:08:40,555 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:08:40,557 [main:95] - GENERATED = listOf<Int>(-2054850665)
2021-03-12 10:08:40,558 [main:117] - GENERATED CALL = (::baz).name.slice(listOf<Int>(-2054850665))
2021-03-12 10:08:40,558 [main:114] - replacement of (Int::foo).name.reversed() + i of type String is (::baz).name.reversed()
2021-03-12 10:08:40,693 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:08:40,693 [main:66] - Compilation checking started
2021-03-12 10:08:41,312 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return "OK"
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:41,315 [main:107] - replacing (c, Continuation<*>)
2021-03-12 10:08:41,315 [main:50] - replacing c Continuation<*>
2021-03-12 10:08:41,315 [main:54] - Getting value of type Continuation<*>
2021-03-12 10:08:41,441 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 10:08:41,579 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:08:41,582 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:08:42,005 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 10:08:42,130 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:08:42,133 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:08:42,396 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 10:08:42,523 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:08:42,526 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:08:43,029 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 10:08:43,165 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:08:43,168 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:08:43,577 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-12 10:08:43,780 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:08:43,783 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:08:44,198 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:08:44,198 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:08:44,198 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:08:44,198 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:08:44,198 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:08:44,198 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 10:08:44,459 [main:67] - randomType = UByte?
2021-03-12 10:08:44,573 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:08:44,622 [main:106] - GETTING Continuation<*> from KFunction1<A, Unit>
2021-03-12 10:08:44,659 [main:106] - GETTING Continuation<*> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:44,708 [main:106] - GETTING Continuation<*> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:44,770 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 10:08:44,771 [main:107] - replacing ({
        prope3.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 10:08:44,771 [main:50] - replacing {
        prope3.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 10:08:44,771 [main:54] - Getting value of type Unit?
2021-03-12 10:08:44,888 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 10:08:45,009 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:08:45,013 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:08:45,267 [main:95] - GENERATED = println(null)
2021-03-12 10:08:45,267 [main:58] - GENERATED VALUE OF TYPE Unit? = println(null)
2021-03-12 10:08:45,268 [main:61] - GENERATED IS CALL =true
2021-03-12 10:08:45,537 [main:67] - randomType = ArrayDeque<Float>
2021-03-12 10:08:45,674 [main:302] - generating value of type = ArrayDeque<Float> false depth = 0
2021-03-12 10:08:45,811 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Float> = TODO()
2021-03-12 10:08:45,813 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Float> = TODO()
2021-03-12 10:08:45,938 [main:95] - GENERATED = ArrayDeque<Float>()
2021-03-12 10:08:46,142 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@4657de0d]
2021-03-12 10:08:46,143 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.Any?): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@765c80d5]
2021-03-12 10:08:46,272 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:46,403 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:46,404 [main:78] - Generated call from random type = (ArrayDeque<Float>()).toArray().set(1564646003, "wmkgo")
2021-03-12 10:08:46,411 [main:106] - GETTING Unit? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:46,466 [main:113] - Case = [public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]]
2021-03-12 10:08:46,466 [main:149] - GENERATING call of type public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]
2021-03-12 10:08:46,595 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:46,734 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:08:46,745 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]
2021-03-12 10:08:46,747 [main:106] - GETTING Unit? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:46,806 [main:113] - Case = [public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]]
2021-03-12 10:08:46,807 [main:149] - GENERATING call of type public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]
2021-03-12 10:08:46,968 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:08:46,979 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]
2021-03-12 10:08:46,980 [main:106] - GETTING Unit? from KFunction1<A, Unit>
2021-03-12 10:08:47,021 [main:113] - Case = [public abstract fun invoke(p1: A): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@25ad605d]]
2021-03-12 10:08:47,021 [main:149] - GENERATING call of type public abstract fun invoke(p1: A): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@25ad605d]
2021-03-12 10:08:47,146 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:08:47,148 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:08:47,149 [main:117] - GENERATED CALL = (A::bar)?.invoke(A())
2021-03-12 10:08:47,149 [main:114] - replacement of {
        prope3.exceptionOrNull()?.let(x)
    } of type Unit? is println(null)
2021-03-12 10:08:47,272 [main:33] - Trying to replace BLOCK on Element(CALL_EXPRESSION)
2021-03-12 10:08:47,272 [main:66] - Compilation checking started
2021-03-12 10:08:47,276 [main:71] - Wrong syntax or breaks conditions
2021-03-12 10:08:47,277 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return "OK"
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) println(null)
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:47,279 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 10:08:47,279 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 10:08:47,279 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:08:47,398 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:08:47,400 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:08:47,526 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:08:47,529 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:08:47,785 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:08:47,785 [main:95] - GENERATED = print("onglg")
2021-03-12 10:08:47,785 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("onglg")}
2021-03-12 10:08:47,786 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:47,916 [main:67] - randomType = UByte
2021-03-12 10:08:48,038 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:08:48,071 [main:106] - GETTING Function0<Unit> from KFunction1<A, Unit>
2021-03-12 10:08:48,097 [main:106] - GETTING Function0<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:48,146 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:48,202 [main:114] - replacement of prope7 of type Function0<Unit> is { print("onglg")}
2021-03-12 10:08:48,318 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:08:48,318 [main:66] - Compilation checking started
2021-03-12 10:08:48,677 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return "OK"
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        { print("onglg")} = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:48,679 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 10:08:48,680 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 10:08:48,680 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 10:08:48,799 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 10:08:48,804 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 10:08:49,064 [main:67] - randomType = Kla5?
2021-03-12 10:08:49,179 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:08:49,180 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 10:08:49,201 [main:106] - GETTING EmptyCoroutineContext from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:49,246 [main:106] - GETTING EmptyCoroutineContext from KFunction1<A, Unit>
2021-03-12 10:08:49,273 [main:106] - GETTING EmptyCoroutineContext from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:49,318 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 10:08:49,318 [main:107] - replacing (prope5, Int)
2021-03-12 10:08:49,318 [main:50] - replacing prope5 Int
2021-03-12 10:08:49,318 [main:54] - Getting value of type Int
2021-03-12 10:08:49,444 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:49,446 [main:58] - GENERATED VALUE OF TYPE Int = 494375550
2021-03-12 10:08:49,446 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:49,581 [main:67] - randomType = UInt
2021-03-12 10:08:49,700 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 10:08:49,735 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@25af1c17]
2021-03-12 10:08:49,854 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:08:49,856 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63972697]
2021-03-12 10:08:49,975 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:49,977 [main:78] - Generated call from random type = (109991008.toUInt()).compareTo(97.toUByte()).xor(1301514279)
2021-03-12 10:08:49,978 [main:106] - GETTING Int from KFunction1<A, Unit>
2021-03-12 10:08:50,011 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]]
2021-03-12 10:08:50,011 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:08:50,128 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:08:50,243 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:50,245 [main:117] - GENERATED CALL = (A::bar).equals(null).compareTo(false)
2021-03-12 10:08:50,245 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e642d]]
2021-03-12 10:08:50,245 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e642d]
2021-03-12 10:08:50,360 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:50,478 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:50,480 [main:117] - GENERATED CALL = (A::bar).name.compareTo("yoeht", true)
2021-03-12 10:08:50,481 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@236a23f]]
2021-03-12 10:08:50,481 [main:117] - GENERATED CALL = (A::bar).name.length
2021-03-12 10:08:50,481 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c301924]]
2021-03-12 10:08:50,481 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c301924]
2021-03-12 10:08:50,481 [main:117] - GENERATED CALL = (A::bar).name.toInt()
2021-03-12 10:08:50,481 [main:114] - replacement of prope5 of type Int is 494375550
2021-03-12 10:08:50,620 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 10:08:50,621 [main:66] - Compilation checking started
2021-03-12 10:08:51,258 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return "OK"
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 494375550)
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:51,261 [main:107] - replacing ("OK", String)
2021-03-12 10:08:51,262 [main:50] - replacing "OK" String
2021-03-12 10:08:51,262 [main:54] - Getting value of type String
2021-03-12 10:08:51,381 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:51,383 [main:58] - GENERATED VALUE OF TYPE String = "ziucm"
2021-03-12 10:08:51,383 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:51,390 [main:67] - randomType = Kla3
2021-03-12 10:08:51,507 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 10:08:51,509 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:08:51,517 [main:106] - GETTING String from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:51,564 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]]
2021-03-12 10:08:51,564 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]
2021-03-12 10:08:51,678 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:08:51,802 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:51,921 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:51,924 [main:117] - GENERATED CALL = (Int::foo).name.replaceAfter('啟', "xozyb", "tkyjy")
2021-03-12 10:08:51,924 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]]
2021-03-12 10:08:51,924 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]
2021-03-12 10:08:52,046 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:08:52,051 [main:117] - GENERATED CALL = (Int::foo).name.removeSuffix("qxxdq")
2021-03-12 10:08:52,051 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60659f12]]
2021-03-12 10:08:52,051 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60659f12]
2021-03-12 10:08:52,165 [main:117] - GENERATED CALL = (Int::foo).name.plus(null)
2021-03-12 10:08:52,166 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:08:52,166 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:08:52,279 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:08:52,395 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:52,397 [main:117] - GENERATED CALL = (Int::foo).name.substringBeforeLast('〻', "nciqq")
2021-03-12 10:08:52,397 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]]
2021-03-12 10:08:52,398 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]
2021-03-12 10:08:52,398 [main:117] - GENERATED CALL = (Int::foo).name.trimIndent()
2021-03-12 10:08:52,398 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]]
2021-03-12 10:08:52,398 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]
2021-03-12 10:08:52,398 [main:117] - GENERATED CALL = (Int::foo).name.toLowerCase()
2021-03-12 10:08:52,398 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]]
2021-03-12 10:08:52,398 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]
2021-03-12 10:08:52,512 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:52,643 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:52,777 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:08:52,897 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:08:52,900 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:08:53,150 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 10:08:53,155 [main:95] - GENERATED = StringBuilder("elwri")
2021-03-12 10:08:53,156 [main:117] - GENERATED CALL = (Int::foo).name.replaceRange(-1488546815, -900622550, StringBuilder("elwri"))
2021-03-12 10:08:53,156 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]]
2021-03-12 10:08:53,156 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]
2021-03-12 10:08:53,274 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:08:53,276 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:08:53,278 [main:117] - GENERATED CALL = (Int::foo).name.takeLastWhile({a: Char -> true})
2021-03-12 10:08:53,278 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]]
2021-03-12 10:08:53,278 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]
2021-03-12 10:08:53,392 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:08:53,394 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:08:53,396 [main:117] - GENERATED CALL = (Int::foo).name.filterNot({a: Char -> true})
2021-03-12 10:08:53,397 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4eb2d9]]
2021-03-12 10:08:53,397 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4eb2d9]
2021-03-12 10:08:53,535 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:08:53,667 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:53,669 [main:117] - GENERATED CALL = (Int::foo).name.substringAfterLast('碼', "ylpyf")
2021-03-12 10:08:53,669 [main:114] - replacement of "OK" of type String is (Int::foo).name.substringBeforeLast('〻', "nciqq")
2021-03-12 10:08:53,782 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:08:53,782 [main:66] - Compilation checking started
2021-03-12 10:08:54,450 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 494375550)
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:54,453 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 494375550, String)
2021-03-12 10:08:54,454 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 494375550 String
2021-03-12 10:08:54,454 [main:54] - Getting value of type String
2021-03-12 10:08:54,597 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:54,599 [main:58] - GENERATED VALUE OF TYPE String = "ecwzk"
2021-03-12 10:08:54,599 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:54,895 [main:67] - randomType = Set<UByte>
2021-03-12 10:08:54,897 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:54,948 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bca7bb0]]
2021-03-12 10:08:54,948 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bca7bb0]
2021-03-12 10:08:54,949 [main:117] - GENERATED CALL = (::baz).name.trim()
2021-03-12 10:08:54,949 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]]
2021-03-12 10:08:54,949 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]
2021-03-12 10:08:55,067 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:08:55,069 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:08:55,071 [main:117] - GENERATED CALL = (::baz).name.filterIndexed({a: Int, b: Char -> false})
2021-03-12 10:08:55,071 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]]
2021-03-12 10:08:55,071 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]
2021-03-12 10:08:55,185 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:08:55,303 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:55,305 [main:117] - GENERATED CALL = (::baz).name.substringBefore('?', "vhvto")
2021-03-12 10:08:55,305 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b75800]]
2021-03-12 10:08:55,305 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b75800]
2021-03-12 10:08:55,421 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:08:55,537 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:08:55,653 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:55,655 [main:117] - GENERATED CALL = (::baz).name.replaceFirst('㖦', '?', true)
2021-03-12 10:08:55,655 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]]
2021-03-12 10:08:55,655 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]
2021-03-12 10:08:55,769 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:08:55,771 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:08:55,773 [main:117] - GENERATED CALL = (::baz).name.replaceFirstChar({a: Char -> '鿩'})
2021-03-12 10:08:55,774 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]]
2021-03-12 10:08:55,774 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]
2021-03-12 10:08:55,954 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:08:55,957 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:08:55,960 [main:117] - GENERATED CALL = (::baz).name.takeLastWhile({a: Char -> true})
2021-03-12 10:08:55,961 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]]
2021-03-12 10:08:55,961 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]
2021-03-12 10:08:56,117 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:08:56,119 [main:117] - GENERATED CALL = (::baz).name.takeLast(1208322481)
2021-03-12 10:08:56,120 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]]
2021-03-12 10:08:56,120 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]
2021-03-12 10:08:56,120 [main:117] - GENERATED CALL = (::baz).name.toUpperCase()
2021-03-12 10:08:56,120 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]]
2021-03-12 10:08:56,120 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]
2021-03-12 10:08:56,120 [main:117] - GENERATED CALL = (::baz).name.reversed()
2021-03-12 10:08:56,120 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]]
2021-03-12 10:08:56,120 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]
2021-03-12 10:08:56,233 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:08:56,234 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:08:56,236 [main:117] - GENERATED CALL = (::baz).name.takeWhile({a: Char -> true})
2021-03-12 10:08:56,237 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + 494375550 of type String is (::baz).name.replaceFirst('㖦', '?', true)
2021-03-12 10:08:56,350 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:08:56,351 [main:66] - Compilation checking started
2021-03-12 10:08:56,965 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:56,967 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 10:08:56,967 [main:50] - replacing getOrThrow() Any?
2021-03-12 10:08:56,967 [main:54] - Getting value of type Any?
2021-03-12 10:08:57,090 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:57,090 [main:58] - GENERATED VALUE OF TYPE Any? = "wbkzk"
2021-03-12 10:08:57,090 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:57,240 [main:67] - randomType = Kla1?
2021-03-12 10:08:57,370 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 10:08:57,372 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:08:57,394 [main:78] - Generated call from random type = (Kla1())?.prope3
2021-03-12 10:08:57,394 [main:114] - replacement of getOrThrow() of type Any? is (Kla1())?.prope3
2021-03-12 10:08:57,521 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 10:08:57,522 [main:66] - Compilation checking started
2021-03-12 10:08:57,875 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.(Kla1())?.prope3
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:57,877 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 10:08:57,878 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 10:08:57,878 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 10:08:57,991 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 10:08:57,993 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:08:57,995 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-12 10:08:57,995 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:58,002 [main:67] - randomType = Kla1
2021-03-12 10:08:58,117 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 10:08:58,119 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:08:58,141 [main:106] - GETTING Function0<Boolean> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:58,186 [main:106] - GETTING Function0<Boolean> from KFunction1<A, Unit>
2021-03-12 10:08:58,211 [main:106] - GETTING Function0<Boolean> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:58,264 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { false}
2021-03-12 10:08:58,386 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:08:58,387 [main:66] - Compilation checking started
2021-03-12 10:08:58,976 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:08:58,978 [main:107] - replacing (isSuccess, Boolean)
2021-03-12 10:08:58,978 [main:50] - replacing isSuccess Boolean
2021-03-12 10:08:58,978 [main:54] - Getting value of type Boolean
2021-03-12 10:08:59,093 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:59,095 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:08:59,095 [main:61] - GENERATED IS CALL =false
2021-03-12 10:08:59,228 [main:67] - randomType = A?
2021-03-12 10:08:59,342 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:08:59,344 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:08:59,348 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@5a36b3c6]
2021-03-12 10:08:59,461 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:59,462 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:08:59,586 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:08:59,588 [main:78] - Generated call from random type = (A())?.equals("xwcaj").xor(true)
2021-03-12 10:08:59,589 [main:106] - GETTING Boolean from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:08:59,634 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:08:59,634 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:08:59,747 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:08:59,748 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:08:59,748 [main:117] - GENERATED CALL = (Int::foo).equals("lhoro").not()
2021-03-12 10:08:59,748 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]]
2021-03-12 10:08:59,748 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]
2021-03-12 10:08:59,870 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:08:59,872 [main:117] - GENERATED CALL = (Int::foo).name.matches("nxihk")
2021-03-12 10:08:59,872 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]]
2021-03-12 10:08:59,872 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]
2021-03-12 10:08:59,984 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:00,099 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:00,101 [main:117] - GENERATED CALL = (Int::foo).name.startsWith("bdctc", false)
2021-03-12 10:09:00,101 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]]
2021-03-12 10:09:00,101 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:09:00,216 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:00,217 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:09:00,329 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:00,332 [main:117] - GENERATED CALL = (Int::foo).equals("tdzvn").xor(false)
2021-03-12 10:09:00,332 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 10:09:00,332 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:09:00,443 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:00,443 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 10:09:00,595 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:00,597 [main:117] - GENERATED CALL = (Int::foo).equals("gjntc").and(true)
2021-03-12 10:09:00,598 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:09:00,598 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:09:00,739 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:00,740 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:09:00,864 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:00,864 [main:117] - GENERATED CALL = (Int::foo).equals("ypedo").equals("wfulb")
2021-03-12 10:09:00,864 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:09:00,864 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:09:00,980 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:00,981 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:09:01,093 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:01,095 [main:117] - GENERATED CALL = (Int::foo).equals("uyigl").or(false)
2021-03-12 10:09:01,095 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]]
2021-03-12 10:09:01,095 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:09:01,209 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:01,210 [main:117] - GENERATED CALL = (Int::foo).equals("sfujd")
2021-03-12 10:09:01,210 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]]
2021-03-12 10:09:01,210 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]
2021-03-12 10:09:01,323 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:01,436 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:01,438 [main:117] - GENERATED CALL = (Int::foo).name.endsWith("reqla", true)
2021-03-12 10:09:01,438 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]]
2021-03-12 10:09:01,438 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:09:01,601 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:01,602 [main:117] - GENERATED CALL = (Int::foo).name.equals("kysom")
2021-03-12 10:09:01,602 [main:114] - replacement of isSuccess of type Boolean is (Int::foo).equals("uyigl").or(false)
2021-03-12 10:09:01,731 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:01,733 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 10:09:01,733 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 10:09:01,733 [main:54] - Getting value of type Ty0
2021-03-12 10:09:01,849 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 10:09:01,854 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 10:09:02,244 [main:67] - randomType = Array<Byte?>
2021-03-12 10:09:02,355 [main:302] - generating value of type = Array<Byte?> false depth = 0
2021-03-12 10:09:02,500 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Byte?): Array<Byte?> = TODO()
2021-03-12 10:09:02,504 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Byte?): Array<Byte?> = TODO()
2021-03-12 10:09:02,904 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:09:02,906 [main:302] - generating value of type = Function1<Int, Byte?> false depth = 3
2021-03-12 10:09:02,908 [main:302] - generating value of type = Byte true depth = 4
2021-03-12 10:09:02,910 [main:95] - GENERATED = Array<Byte?>(1072009482, {a: Int -> 3})
2021-03-12 10:09:02,924 [main:106] - GETTING Ty0 from KFunction1<A, Unit>
2021-03-12 10:09:02,950 [main:106] - GETTING Ty0 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:02,995 [main:106] - GETTING Ty0 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:03,041 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 10:09:03,041 [main:107] - replacing ({
        prope3.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 10:09:03,041 [main:50] - replacing {
        prope3.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 10:09:03,041 [main:54] - Getting value of type Unit?
2021-03-12 10:09:03,155 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 10:09:03,278 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:09:03,281 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:09:03,703 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:09:03,705 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-12 10:09:03,707 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 10:09:03,713 [main:95] - GENERATED = repeat(887032364, {a: Int -> println()})
2021-03-12 10:09:03,713 [main:58] - GENERATED VALUE OF TYPE Unit? = repeat(887032364, {a: Int -> println()})
2021-03-12 10:09:03,713 [main:61] - GENERATED IS CALL =true
2021-03-12 10:09:03,721 [main:67] - randomType = Kla3
2021-03-12 10:09:03,841 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 10:09:03,843 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:09:03,850 [main:149] - GENERATING call of type public final suspend fun fu7(): kotlin.Unit defined in Kla3[SimpleFunctionDescriptorImpl@2b150cf3]
2021-03-12 10:09:03,850 [main:78] - Generated call from random type = (Kla3()).fu7()
2021-03-12 10:09:03,851 [main:106] - GETTING Unit? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:03,897 [main:113] - Case = [public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]]
2021-03-12 10:09:03,897 [main:149] - GENERATING call of type public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]
2021-03-12 10:09:04,010 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:04,124 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:09:04,133 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]
2021-03-12 10:09:04,135 [main:106] - GETTING Unit? from KFunction1<A, Unit>
2021-03-12 10:09:04,161 [main:113] - Case = [public abstract fun invoke(p1: A): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@25ad605d]]
2021-03-12 10:09:04,162 [main:149] - GENERATING call of type public abstract fun invoke(p1: A): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@25ad605d]
2021-03-12 10:09:04,274 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:09:04,276 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:09:04,276 [main:117] - GENERATED CALL = (A::bar)?.invoke(A())
2021-03-12 10:09:04,276 [main:114] - replacement of {
        prope3.exceptionOrNull()?.let(x)
    } of type Unit? is (Kla3()).fu7()
2021-03-12 10:09:04,390 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:04,391 [main:66] - Compilation checking started
2021-03-12 10:09:04,395 [main:71] - Wrong syntax or breaks conditions
2021-03-12 10:09:04,395 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return prope2
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) (Kla3()).fu7()
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:04,397 [main:107] - replacing (prope2, String)
2021-03-12 10:09:04,397 [main:50] - replacing prope2 String
2021-03-12 10:09:04,397 [main:54] - Getting value of type String
2021-03-12 10:09:04,510 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:04,512 [main:58] - GENERATED VALUE OF TYPE String = "gxcjh"
2021-03-12 10:09:04,512 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:05,197 [main:67] - randomType = List<Function1<Map<Boolean, LinkedHashSet<UShort>>, Kla1>>
2021-03-12 10:09:05,198 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:05,250 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]]
2021-03-12 10:09:05,251 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]
2021-03-12 10:09:05,251 [main:117] - GENERATED CALL = (::baz).name.capitalize()
2021-03-12 10:09:05,251 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]]
2021-03-12 10:09:05,251 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]
2021-03-12 10:09:05,364 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:09:05,369 [main:117] - GENERATED CALL = (::baz).name.removeSurrounding("emozx")
2021-03-12 10:09:05,369 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bca7bb0]]
2021-03-12 10:09:05,369 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bca7bb0]
2021-03-12 10:09:05,369 [main:117] - GENERATED CALL = (::baz).name.trim()
2021-03-12 10:09:05,369 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:09:05,369 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:09:05,482 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:05,485 [main:117] - GENERATED CALL = (::baz).name.prependIndent("cnion")
2021-03-12 10:09:05,485 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]]
2021-03-12 10:09:05,485 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]
2021-03-12 10:09:05,597 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:09:05,599 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:09:05,601 [main:117] - GENERATED CALL = (::baz).name.dropLastWhile({a: Char -> false})
2021-03-12 10:09:05,601 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]]
2021-03-12 10:09:05,601 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]
2021-03-12 10:09:05,601 [main:117] - GENERATED CALL = (::baz).name.reversed()
2021-03-12 10:09:05,601 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]]
2021-03-12 10:09:05,601 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]
2021-03-12 10:09:05,602 [main:117] - GENERATED CALL = (::baz).name.trimIndent()
2021-03-12 10:09:05,602 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]]
2021-03-12 10:09:05,602 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]
2021-03-12 10:09:05,745 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:09:05,747 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:09:05,749 [main:117] - GENERATED CALL = (::baz).name.takeWhile({a: Char -> false})
2021-03-12 10:09:05,750 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd90b7c]]
2021-03-12 10:09:05,750 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd90b7c]
2021-03-12 10:09:05,882 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:05,884 [main:117] - GENERATED CALL = (::baz).name.replaceIndent("khtkn")
2021-03-12 10:09:05,884 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]]
2021-03-12 10:09:05,884 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]
2021-03-12 10:09:05,995 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:09:05,997 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:09:05,999 [main:117] - GENERATED CALL = (::baz).name.takeLastWhile({a: Char -> false})
2021-03-12 10:09:05,999 [main:114] - replacement of prope2 of type String is "gxcjh"
2021-03-12 10:09:06,111 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 10:09:06,111 [main:66] - Compilation checking started
2021-03-12 10:09:06,707 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:06,710 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 10:09:06,710 [main:50] - replacing {} Function0<Unit>
2021-03-12 10:09:06,710 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:09:06,834 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:09:06,836 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:09:06,841 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-12 10:09:06,842 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:06,849 [main:67] - randomType = Kla3
2021-03-12 10:09:06,966 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 10:09:06,968 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:09:06,975 [main:106] - GETTING Function0<Unit> from KFunction1<A, Unit>
2021-03-12 10:09:07,002 [main:106] - GETTING Function0<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:07,062 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:07,105 [main:114] - replacement of {} of type Function0<Unit> is { println()}
2021-03-12 10:09:07,217 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:09:07,218 [main:66] - Compilation checking started
2021-03-12 10:09:07,802 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:07,805 [main:107] - replacing ({ error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-12 10:09:07,805 [main:50] - replacing { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-12 10:09:07,805 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 10:09:07,961 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 10:09:07,963 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 10:09:08,088 [main:43] - GENERATING CALL OF fun error(message: kotlin.Any): Nothg = TODO()
2021-03-12 10:09:08,092 [main:61] - WITHOUT TYPE PARAMS = fun error(message: kotlin.Any): Nothg = TODO()
2021-03-12 10:09:08,338 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:09:08,338 [main:95] - GENERATED = error("jtrtp")
2021-03-12 10:09:08,338 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { error("jtrtp")}
2021-03-12 10:09:08,338 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:09,143 [main:67] - randomType = Kla2<Function1<LinkedHashMap<ULong, UInt>, Double>>
2021-03-12 10:09:09,260 [main:302] - generating value of type = Kla2<Function1<LinkedHashMap<ULong, UInt>, Double>> false depth = 0
2021-03-12 10:09:09,262 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 10:09:09,819 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 10:09:09,821 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 10:09:09,848 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:09,903 [main:106] - GETTING Function0<Nothing> from KFunction1<A, Unit>
2021-03-12 10:09:09,930 [main:106] - GETTING Function0<Nothing> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:09,974 [main:114] - replacement of { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) } of type Function0<Nothing> is { error("jtrtp")}
2021-03-12 10:09:10,085 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:09:10,085 [main:66] - Compilation checking started
2021-03-12 10:09:10,636 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:10,639 [main:107] - replacing (let(x), Unit?)
2021-03-12 10:09:10,640 [main:50] - replacing let(x) Unit?
2021-03-12 10:09:10,640 [main:54] - Getting value of type Unit?
2021-03-12 10:09:10,769 [main:58] - GENERATED VALUE OF TYPE Unit? = null
2021-03-12 10:09:10,769 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:10,897 [main:67] - randomType = UByte
2021-03-12 10:09:11,021 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:09:11,060 [main:106] - GETTING Unit? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:11,104 [main:113] - Case = [public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]]
2021-03-12 10:09:11,105 [main:149] - GENERATING call of type public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]
2021-03-12 10:09:11,220 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:09:11,230 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]
2021-03-12 10:09:11,231 [main:106] - GETTING Unit? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:11,284 [main:113] - Case = [public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]]
2021-03-12 10:09:11,284 [main:149] - GENERATING call of type public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]
2021-03-12 10:09:11,395 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:11,508 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:09:11,518 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]
2021-03-12 10:09:11,519 [main:106] - GETTING Unit? from KFunction1<A, Unit>
2021-03-12 10:09:11,550 [main:113] - Case = [public abstract fun invoke(p1: A): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@25ad605d]]
2021-03-12 10:09:11,550 [main:149] - GENERATING call of type public abstract fun invoke(p1: A): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@25ad605d]
2021-03-12 10:09:11,665 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:09:11,667 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:09:11,668 [main:117] - GENERATED CALL = (A::bar)?.invoke(A())
2021-03-12 10:09:11,668 [main:114] - replacement of let(x) of type Unit? is (A::bar)?.invoke(A())
2021-03-12 10:09:11,783 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 10:09:11,784 [main:66] - Compilation checking started
2021-03-12 10:09:12,171 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.(A::bar)?.invoke(A())
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:12,174 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 10:09:12,174 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 10:09:12,174 [main:54] - Getting value of type String
2021-03-12 10:09:12,324 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:12,327 [main:58] - GENERATED VALUE OF TYPE String = "qeumy"
2021-03-12 10:09:12,327 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:12,461 [main:67] - randomType = UShort
2021-03-12 10:09:12,578 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 10:09:12,609 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@34073799]
2021-03-12 10:09:12,610 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f160948]
2021-03-12 10:09:12,720 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:12,722 [main:78] - Generated call from random type = (5730.toUShort()).toLong().toString(3491577)
2021-03-12 10:09:12,723 [main:106] - GETTING String from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:12,768 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]]
2021-03-12 10:09:12,768 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]
2021-03-12 10:09:12,768 [main:117] - GENERATED CALL = (Int::foo).name.uppercase()
2021-03-12 10:09:12,768 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]]
2021-03-12 10:09:12,768 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]
2021-03-12 10:09:12,769 [main:117] - GENERATED CALL = (Int::foo).name.lowercase()
2021-03-12 10:09:12,769 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]]
2021-03-12 10:09:12,769 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]
2021-03-12 10:09:12,769 [main:117] - GENERATED CALL = (Int::foo).name.decapitalize()
2021-03-12 10:09:12,769 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81]]
2021-03-12 10:09:12,769 [main:117] - GENERATED CALL = (Int::foo).name
2021-03-12 10:09:12,769 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]]
2021-03-12 10:09:12,769 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]
2021-03-12 10:09:12,879 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:09:12,884 [main:117] - GENERATED CALL = (Int::foo).name.removePrefix("lijjf")
2021-03-12 10:09:12,884 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:09:12,884 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:09:12,995 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:13,107 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:13,110 [main:117] - GENERATED CALL = (Int::foo).name.substringBeforeLast('安', "pauwu")
2021-03-12 10:09:13,110 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]]
2021-03-12 10:09:13,110 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]
2021-03-12 10:09:13,220 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:13,222 [main:117] - GENERATED CALL = (Int::foo).name.drop(-186422839)
2021-03-12 10:09:13,222 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]]
2021-03-12 10:09:13,222 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]
2021-03-12 10:09:13,222 [main:117] - GENERATED CALL = (Int::foo).name.reversed()
2021-03-12 10:09:13,223 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c84f1f]]
2021-03-12 10:09:13,223 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c84f1f]
2021-03-12 10:09:13,358 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:13,489 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:13,491 [main:117] - GENERATED CALL = (Int::foo).name.replaceIndentByMargin("ursoe", "vwdli")
2021-03-12 10:09:13,492 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]]
2021-03-12 10:09:13,492 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]
2021-03-12 10:09:13,606 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:09:13,608 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:09:13,610 [main:117] - GENERATED CALL = (Int::foo).name.replaceFirstChar({a: Char -> '?'})
2021-03-12 10:09:13,610 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (Int::foo).name.drop(-186422839)
2021-03-12 10:09:13,720 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:13,721 [main:66] - Compilation checking started
2021-03-12 10:09:14,290 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:14,292 [main:107] - replacing (!prope6, Boolean)
2021-03-12 10:09:14,292 [main:50] - replacing !prope6 Boolean
2021-03-12 10:09:14,292 [main:54] - Getting value of type Boolean
2021-03-12 10:09:14,412 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:14,414 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:09:14,414 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:14,421 [main:67] - randomType = A
2021-03-12 10:09:14,534 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:09:14,536 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:09:14,541 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@44eaec5f]
2021-03-12 10:09:14,669 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:14,669 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:09:14,782 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:14,784 [main:78] - Generated call from random type = (A()).equals("mhnhu").or(false)
2021-03-12 10:09:14,785 [main:106] - GETTING Boolean from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:14,828 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]]
2021-03-12 10:09:14,828 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]
2021-03-12 10:09:14,940 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:14,942 [main:117] - GENERATED CALL = (Int::foo).name.matches("alzbg")
2021-03-12 10:09:14,942 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]]
2021-03-12 10:09:14,942 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:09:15,055 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:15,056 [main:117] - GENERATED CALL = (Int::foo).equals("bhctp")
2021-03-12 10:09:15,056 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]]
2021-03-12 10:09:15,056 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:09:15,170 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:15,171 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:09:15,286 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:15,288 [main:117] - GENERATED CALL = (Int::foo).equals("wqstq").xor(false)
2021-03-12 10:09:15,288 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:09:15,288 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:09:15,403 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:15,403 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:09:15,515 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:15,517 [main:117] - GENERATED CALL = (Int::foo).equals("ngopr").or(true)
2021-03-12 10:09:15,517 [main:113] - Case = [public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@616a635f]]
2021-03-12 10:09:15,517 [main:149] - GENERATING call of type public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]
2021-03-12 10:09:15,629 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:15,767 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:09:15,783 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]
2021-03-12 10:09:15,784 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:09:15,784 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:09:15,928 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:15,928 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:09:16,044 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:16,044 [main:117] - GENERATED CALL = (Int::foo).equals("dbsjp").equals("ixkwl")
2021-03-12 10:09:16,044 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]]
2021-03-12 10:09:16,044 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:09:16,158 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:16,158 [main:117] - GENERATED CALL = (Int::foo).name.equals("rivxa")
2021-03-12 10:09:16,158 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]]
2021-03-12 10:09:16,158 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]
2021-03-12 10:09:16,272 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:16,389 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:16,391 [main:117] - GENERATED CALL = (Int::foo).name.startsWith("szgfn", true)
2021-03-12 10:09:16,391 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]]
2021-03-12 10:09:16,392 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]
2021-03-12 10:09:16,392 [main:117] - GENERATED CALL = (Int::foo).name.toBoolean()
2021-03-12 10:09:16,392 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:09:16,392 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:09:16,513 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:16,513 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:09:16,513 [main:117] - GENERATED CALL = (Int::foo).equals("ktxjs").not()
2021-03-12 10:09:16,513 [main:114] - replacement of !prope6 of type Boolean is (Int::foo).equals("ktxjs").not()
2021-03-12 10:09:16,630 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:16,631 [main:66] - Compilation checking started
2021-03-12 10:09:17,262 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:17,265 [main:107] - replacing (true, Boolean)
2021-03-12 10:09:17,265 [main:50] - replacing true Boolean
2021-03-12 10:09:17,265 [main:54] - Getting value of type Boolean
2021-03-12 10:09:17,400 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:17,402 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:09:17,402 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:17,410 [main:67] - randomType = Kla3
2021-03-12 10:09:17,525 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 10:09:17,527 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:09:17,532 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@1bc6dece]
2021-03-12 10:09:17,645 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:17,645 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:09:17,757 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:17,759 [main:78] - Generated call from random type = (Kla3()).equals("xlqaf").or(false)
2021-03-12 10:09:17,759 [main:114] - replacement of true of type Boolean is (Kla3()).equals("xlqaf").or(false)
2021-03-12 10:09:17,876 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:17,876 [main:66] - Compilation checking started
2021-03-12 10:09:18,448 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = (Kla3()).equals("xlqaf").or(false)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:18,451 [main:107] - replacing (" has no state-machine ", String)
2021-03-12 10:09:18,451 [main:50] - replacing " has no state-machine " String
2021-03-12 10:09:18,451 [main:54] - Getting value of type String
2021-03-12 10:09:18,579 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:18,581 [main:58] - GENERATED VALUE OF TYPE String = "afuln"
2021-03-12 10:09:18,581 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:18,974 [main:67] - randomType = Set<Array<Double>>
2021-03-12 10:09:18,975 [main:106] - GETTING String from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:19,019 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]]
2021-03-12 10:09:19,019 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]
2021-03-12 10:09:19,019 [main:117] - GENERATED CALL = (Int::foo).name.trimIndent()
2021-03-12 10:09:19,019 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:09:19,019 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:09:19,131 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:19,245 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:19,247 [main:117] - GENERATED CALL = (Int::foo).name.substringBeforeLast('翞', "memwf")
2021-03-12 10:09:19,247 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bd3920c]]
2021-03-12 10:09:19,247 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bd3920c]
2021-03-12 10:09:19,360 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:09:19,362 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:09:19,364 [main:117] - GENERATED CALL = (Int::foo).name.filter({a: Char -> true})
2021-03-12 10:09:19,364 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]]
2021-03-12 10:09:19,364 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]
2021-03-12 10:09:19,364 [main:117] - GENERATED CALL = (Int::foo).name.trimStart()
2021-03-12 10:09:19,364 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]]
2021-03-12 10:09:19,364 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]
2021-03-12 10:09:19,476 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:09:19,623 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:09:19,626 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:09:19,893 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:09:19,896 [main:95] - GENERATED = StringBuilder("qrtch")
2021-03-12 10:09:19,897 [main:117] - GENERATED CALL = (Int::foo).name.removeSurrounding(StringBuilder("qrtch"))
2021-03-12 10:09:19,897 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]]
2021-03-12 10:09:19,897 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]
2021-03-12 10:09:19,897 [main:117] - GENERATED CALL = (Int::foo).name.capitalize()
2021-03-12 10:09:19,897 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c84f1f]]
2021-03-12 10:09:19,897 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c84f1f]
2021-03-12 10:09:20,009 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:20,124 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:20,126 [main:117] - GENERATED CALL = (Int::foo).name.replaceIndentByMargin("xspgv", "hfwbm")
2021-03-12 10:09:20,126 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]]
2021-03-12 10:09:20,126 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]
2021-03-12 10:09:20,238 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:20,351 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:20,466 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:20,468 [main:117] - GENERATED CALL = (Int::foo).name.replaceBeforeLast('ꯄ', "syoxa", "bmbgk")
2021-03-12 10:09:20,468 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]]
2021-03-12 10:09:20,468 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]
2021-03-12 10:09:20,469 [main:117] - GENERATED CALL = (Int::foo).name.toLowerCase()
2021-03-12 10:09:20,469 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]]
2021-03-12 10:09:20,469 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]
2021-03-12 10:09:20,582 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:20,729 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:20,865 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:20,867 [main:117] - GENERATED CALL = (Int::foo).name.replace('佫', '⥕', false)
2021-03-12 10:09:20,867 [main:114] - replacement of " has no state-machine " of type String is (Int::foo).name.trimIndent()
2021-03-12 10:09:20,979 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:20,979 [main:66] - Compilation checking started
2021-03-12 10:09:21,548 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = (Kla3()).equals("xlqaf").or(false)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:21,550 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-12 10:09:21,550 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-12 10:09:21,550 [main:54] - Getting value of type Boolean
2021-03-12 10:09:21,667 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:21,669 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:09:21,669 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:21,797 [main:67] - randomType = UShort
2021-03-12 10:09:21,911 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 10:09:21,942 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4043df73]
2021-03-12 10:09:22,076 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:09:22,078 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5acb81ef]
2021-03-12 10:09:22,191 [main:78] - Generated call from random type = (14459.toUShort()).compareTo(6.toUByte()).equals(null)
2021-03-12 10:09:22,192 [main:106] - GETTING Boolean from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:22,234 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]]
2021-03-12 10:09:22,234 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:09:22,349 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:22,349 [main:117] - GENERATED CALL = (::baz).equals("yakrh")
2021-03-12 10:09:22,349 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 10:09:22,349 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:09:22,462 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:22,463 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 10:09:22,578 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:22,580 [main:117] - GENERATED CALL = (::baz).equals("jvckn").and(false)
2021-03-12 10:09:22,580 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]]
2021-03-12 10:09:22,580 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:09:22,693 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:22,693 [main:117] - GENERATED CALL = (::baz).name.equals("ubdbi")
2021-03-12 10:09:22,694 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:09:22,694 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:09:22,807 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:22,807 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:09:22,919 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:22,921 [main:117] - GENERATED CALL = (::baz).equals("zjfpo").or(true)
2021-03-12 10:09:22,921 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]]
2021-03-12 10:09:22,922 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]
2021-03-12 10:09:23,036 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:23,152 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:23,154 [main:117] - GENERATED CALL = (::baz).name.endsWith("tsdjr", false)
2021-03-12 10:09:23,154 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]]
2021-03-12 10:09:23,154 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]
2021-03-12 10:09:23,300 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:23,302 [main:117] - GENERATED CALL = (::baz).name.matches("cbzdn")
2021-03-12 10:09:23,302 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]]
2021-03-12 10:09:23,302 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]
2021-03-12 10:09:23,302 [main:117] - GENERATED CALL = (::baz).name.toBoolean()
2021-03-12 10:09:23,302 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:09:23,302 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:09:23,433 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:23,434 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:09:23,434 [main:117] - GENERATED CALL = (::baz).equals("zvklj").not()
2021-03-12 10:09:23,434 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]]
2021-03-12 10:09:23,434 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]
2021-03-12 10:09:23,552 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:23,679 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:23,681 [main:117] - GENERATED CALL = (::baz).name.startsWith("qezub", false)
2021-03-12 10:09:23,681 [main:113] - Case = [public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@616a635f]]
2021-03-12 10:09:23,681 [main:149] - GENERATING call of type public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]
2021-03-12 10:09:23,794 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:09:23,803 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]
2021-03-12 10:09:23,804 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (::baz).equals("zjfpo").or(true)
2021-03-12 10:09:23,915 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:23,915 [main:66] - Compilation checking started
2021-03-12 10:09:24,264 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return fu4()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if ((::baz).equals("zjfpo").or(true)) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = (Kla3()).equals("xlqaf").or(false)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:24,267 [main:107] - replacing (fu4(), String)
2021-03-12 10:09:24,267 [main:50] - replacing fu4() String
2021-03-12 10:09:24,267 [main:54] - Getting value of type String
2021-03-12 10:09:24,385 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:24,387 [main:58] - GENERATED VALUE OF TYPE String = "tnekc"
2021-03-12 10:09:24,426 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:24,562 [main:67] - randomType = Byte
2021-03-12 10:09:24,694 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:09:24,752 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1b6b605]
2021-03-12 10:09:24,752 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64faf504]
2021-03-12 10:09:24,752 [main:78] - Generated call from random type = (122).toChar().lowercase()
2021-03-12 10:09:24,752 [main:114] - replacement of fu4() of type String is (122).toChar().lowercase()
2021-03-12 10:09:24,875 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:24,876 [main:66] - Compilation checking started
2021-03-12 10:09:25,445 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = (Kla3()).equals("xlqaf").or(false)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:25,448 [main:107] - replacing (prope2, String)
2021-03-12 10:09:25,448 [main:50] - replacing prope2 String
2021-03-12 10:09:25,448 [main:54] - Getting value of type String
2021-03-12 10:09:25,568 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:25,570 [main:58] - GENERATED VALUE OF TYPE String = "dxvfp"
2021-03-12 10:09:25,570 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:25,578 [main:67] - randomType = Kla0
2021-03-12 10:09:25,694 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 10:09:25,696 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-12 10:09:25,812 [main:194] - Type params = []
2021-03-12 10:09:25,926 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 10:09:26,049 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:09:26,052 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:09:26,332 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 10:09:26,457 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:09:26,460 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:09:26,846 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 10:09:26,968 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:09:26,971 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:09:27,357 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-12 10:09:27,542 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:09:27,545 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:09:27,953 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 14
2021-03-12 10:09:28,078 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:09:28,081 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:09:28,465 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:09:28,465 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:09:28,465 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:09:28,465 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:09:28,465 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:09:28,480 [main:106] - GETTING String from KFunction1<A, Unit>
2021-03-12 10:09:28,513 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]]
2021-03-12 10:09:28,513 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]
2021-03-12 10:09:28,513 [main:117] - GENERATED CALL = (A::bar).name.trimIndent()
2021-03-12 10:09:28,513 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]]
2021-03-12 10:09:28,514 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]
2021-03-12 10:09:28,514 [main:117] - GENERATED CALL = (A::bar).name.decapitalize()
2021-03-12 10:09:28,514 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]]
2021-03-12 10:09:28,514 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]
2021-03-12 10:09:28,629 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:28,746 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:28,867 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:28,869 [main:117] - GENERATED CALL = (A::bar).name.replaceBeforeLast('ܵ', "unghg", "tcpkk")
2021-03-12 10:09:28,869 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]]
2021-03-12 10:09:28,869 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]
2021-03-12 10:09:29,014 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:09:29,145 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:09:29,149 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:09:29,396 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 10:09:29,514 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:09:29,516 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:09:29,761 [main:302] - generating value of type = Int true depth = 6
2021-03-12 10:09:29,764 [main:95] - GENERATED = StringBuilder(-1805824984)
2021-03-12 10:09:29,764 [main:95] - GENERATED = StringBuilder(StringBuilder(-1805824984))
2021-03-12 10:09:29,764 [main:117] - GENERATED CALL = (A::bar).name.removeSurrounding(StringBuilder(StringBuilder(-1805824984)))
2021-03-12 10:09:29,764 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]]
2021-03-12 10:09:29,764 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]
2021-03-12 10:09:29,878 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:09:29,880 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:09:29,882 [main:117] - GENERATED CALL = (A::bar).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 10:09:29,882 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]]
2021-03-12 10:09:29,882 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]
2021-03-12 10:09:29,994 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:29,996 [main:117] - GENERATED CALL = (A::bar).name.concat("avymi")
2021-03-12 10:09:29,997 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]]
2021-03-12 10:09:29,997 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]
2021-03-12 10:09:30,110 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:30,226 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:30,344 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:09:30,480 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:09:30,483 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:09:30,760 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:09:30,762 [main:95] - GENERATED = StringBuilder(242946141)
2021-03-12 10:09:30,762 [main:117] - GENERATED CALL = (A::bar).name.replaceRange(-2079574993, 183473048, StringBuilder(242946141))
2021-03-12 10:09:30,763 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]]
2021-03-12 10:09:30,763 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]
2021-03-12 10:09:30,875 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:30,989 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:31,105 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:31,108 [main:117] - GENERATED CALL = (A::bar).name.replaceAfter('?', "zjbtn", "nbfnj")
2021-03-12 10:09:31,108 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]]
2021-03-12 10:09:31,108 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]
2021-03-12 10:09:31,222 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:09:31,227 [main:117] - GENERATED CALL = (A::bar).name.removePrefix("olwpc")
2021-03-12 10:09:31,227 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]]
2021-03-12 10:09:31,227 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]
2021-03-12 10:09:31,340 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:09:31,342 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:09:31,344 [main:117] - GENERATED CALL = (A::bar).name.filterNot({a: Char -> false})
2021-03-12 10:09:31,344 [main:114] - replacement of prope2 of type String is (A::bar).name.filterNot({a: Char -> false})
2021-03-12 10:09:31,456 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:31,456 [main:66] - Compilation checking started
2021-03-12 10:09:31,824 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        (A::bar).name.filterNot({a: Char -> false}) = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = (Kla3()).equals("xlqaf").or(false)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:31,826 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-12 10:09:31,827 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-12 10:09:31,827 [main:54] - Getting value of type Boolean
2021-03-12 10:09:31,947 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:31,949 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:09:31,949 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:32,226 [main:67] - randomType = Pair<UShort, Kla1>
2021-03-12 10:09:32,339 [main:302] - generating value of type = Pair<UShort, Kla1> false depth = 0
2021-03-12 10:09:32,457 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort, second: Kla1): Pair<UShort, Kla1> = TODO()
2021-03-12 10:09:32,459 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort, second: Kla1): Pair<UShort, Kla1> = TODO()
2021-03-12 10:09:32,578 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 10:09:32,580 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-12 10:09:32,582 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:09:32,582 [main:95] - GENERATED = Pair<UShort, Kla1>(18877.toUShort(), Kla1())
2021-03-12 10:09:32,596 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@3b589d58]
2021-03-12 10:09:32,709 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:32,709 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:09:32,710 [main:78] - Generated call from random type = (Pair<UShort, Kla1>(18877.toUShort(), Kla1())).equals("ivuzk").not()
2021-03-12 10:09:32,710 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (Pair<UShort, Kla1>(18877.toUShort(), Kla1())).equals("ivuzk").not()
2021-03-12 10:09:32,821 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:32,821 [main:66] - Compilation checking started
2021-03-12 10:09:33,177 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if ((Pair<UShort, Kla1>(18877.toUShort(), Kla1())).equals("ivuzk").not()) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = (Kla3()).equals("xlqaf").or(false)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:33,180 [main:107] - replacing (prope5, Int)
2021-03-12 10:09:33,180 [main:50] - replacing prope5 Int
2021-03-12 10:09:33,180 [main:54] - Getting value of type Int
2021-03-12 10:09:33,313 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:33,315 [main:58] - GENERATED VALUE OF TYPE Int = 1906521819
2021-03-12 10:09:33,316 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:33,323 [main:67] - randomType = Kla4
2021-03-12 10:09:33,441 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 10:09:33,443 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}
2021-03-12 10:09:33,453 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:09:33,598 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:33,601 [main:78] - Generated call from random type = (Kla4()).prope6.compareTo(false)
2021-03-12 10:09:33,602 [main:106] - GETTING Int from KFunction1<A, Unit>
2021-03-12 10:09:33,642 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]]
2021-03-12 10:09:33,642 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:09:33,757 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:33,758 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:09:33,871 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:33,873 [main:117] - GENERATED CALL = (A::bar).equals("ijhrz").compareTo(true)
2021-03-12 10:09:33,873 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c301924]]
2021-03-12 10:09:33,873 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c301924]
2021-03-12 10:09:33,873 [main:117] - GENERATED CALL = (A::bar).name.toInt()
2021-03-12 10:09:33,873 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@236a23f]]
2021-03-12 10:09:33,874 [main:117] - GENERATED CALL = (A::bar).name.length
2021-03-12 10:09:33,874 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e642d]]
2021-03-12 10:09:33,874 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e642d]
2021-03-12 10:09:33,987 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:34,103 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:34,105 [main:117] - GENERATED CALL = (A::bar).name.compareTo("ftcwl", true)
2021-03-12 10:09:34,105 [main:114] - replacement of prope5 of type Int is (A::bar).name.toInt()
2021-03-12 10:09:34,218 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:34,218 [main:66] - Compilation checking started
2021-03-12 10:09:34,583 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        (A::bar).name.toInt()++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = (Kla3()).equals("xlqaf").or(false)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:34,586 [main:107] - replacing (prope5, Int)
2021-03-12 10:09:34,586 [main:50] - replacing prope5 Int
2021-03-12 10:09:34,586 [main:54] - Getting value of type Int
2021-03-12 10:09:34,707 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:34,709 [main:58] - GENERATED VALUE OF TYPE Int = -481806293
2021-03-12 10:09:34,709 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:34,967 [main:67] - randomType = Collection<Kla5>
2021-03-12 10:09:34,968 [main:106] - GETTING Int from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:35,016 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c301924]]
2021-03-12 10:09:35,016 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c301924]
2021-03-12 10:09:35,017 [main:117] - GENERATED CALL = (Int::foo).name.toInt()
2021-03-12 10:09:35,017 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@236a23f]]
2021-03-12 10:09:35,017 [main:117] - GENERATED CALL = (Int::foo).name.length
2021-03-12 10:09:35,017 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e642d]]
2021-03-12 10:09:35,017 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e642d]
2021-03-12 10:09:35,131 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:35,259 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:35,261 [main:117] - GENERATED CALL = (Int::foo).name.compareTo("dnxao", false)
2021-03-12 10:09:35,261 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]]
2021-03-12 10:09:35,261 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:09:35,377 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:35,378 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:09:35,499 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:35,501 [main:117] - GENERATED CALL = (Int::foo).equals("pdokn").compareTo(true)
2021-03-12 10:09:35,502 [main:114] - replacement of prope5 of type Int is (Int::foo).name.toInt()
2021-03-12 10:09:35,619 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:35,620 [main:66] - Compilation checking started
2021-03-12 10:09:36,192 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = (Kla3()).equals("xlqaf").or(false)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:36,194 [main:107] - replacing (prope3.exceptionOrNull()?.let(x), Unit?)
2021-03-12 10:09:36,194 [main:50] - replacing prope3.exceptionOrNull()?.let(x) Unit?
2021-03-12 10:09:36,194 [main:54] - Getting value of type Unit?
2021-03-12 10:09:36,308 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 10:09:36,313 [main:58] - GENERATED VALUE OF TYPE Unit? = println()
2021-03-12 10:09:36,313 [main:61] - GENERATED IS CALL =true
2021-03-12 10:09:36,727 [main:67] - randomType = Function2<Kla3, Array<Kla3>, UShort>
2021-03-12 10:09:36,729 [main:106] - GETTING Unit? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:36,783 [main:113] - Case = [public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]]
2021-03-12 10:09:36,783 [main:149] - GENERATING call of type public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]
2021-03-12 10:09:36,901 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:09:36,911 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@671ee6b9]
2021-03-12 10:09:36,912 [main:106] - GETTING Unit? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:36,957 [main:113] - Case = [public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]]
2021-03-12 10:09:36,957 [main:149] - GENERATING call of type public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]
2021-03-12 10:09:37,083 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:37,204 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:09:37,214 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]
2021-03-12 10:09:37,215 [main:106] - GETTING Unit? from KFunction1<A, Unit>
2021-03-12 10:09:37,254 [main:113] - Case = [public abstract fun invoke(p1: A): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@25ad605d]]
2021-03-12 10:09:37,254 [main:149] - GENERATING call of type public abstract fun invoke(p1: A): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@25ad605d]
2021-03-12 10:09:37,374 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:09:37,376 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:09:37,376 [main:117] - GENERATED CALL = (A::bar)?.invoke(A())
2021-03-12 10:09:37,376 [main:114] - replacement of prope3.exceptionOrNull()?.let(x) of type Unit? is println()
2021-03-12 10:09:37,489 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:09:37,489 [main:66] - Compilation checking started
2021-03-12 10:09:38,018 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = (Kla3()).equals("xlqaf").or(false)
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:38,020 [main:107] - replacing ({
            prope1.prope6 = (Kla3()).equals("xlqaf").or(false)
        }, Function0<Unit>)
2021-03-12 10:09:38,020 [main:50] - replacing {
            prope1.prope6 = (Kla3()).equals("xlqaf").or(false)
        } Function0<Unit>
2021-03-12 10:09:38,020 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:09:38,132 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:09:38,134 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:09:38,253 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:09:38,256 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:09:38,501 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:09:38,501 [main:95] - GENERATED = println("civtf")
2021-03-12 10:09:38,502 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("civtf")}
2021-03-12 10:09:38,502 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:38,645 [main:67] - randomType = Kla0?
2021-03-12 10:09:38,758 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 10:09:38,760 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-12 10:09:38,890 [main:194] - Type params = []
2021-03-12 10:09:39,003 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 10:09:39,126 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:09:39,129 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:09:39,378 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 10:09:39,501 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:09:39,503 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:09:39,883 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 10:09:40,002 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:09:40,005 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:09:40,392 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:09:40,392 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:09:40,393 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:09:40,430 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:40,480 [main:106] - GETTING Function0<Unit> from KFunction1<A, Unit>
2021-03-12 10:09:40,508 [main:106] - GETTING Function0<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:40,553 [main:114] - replacement of {
            prope1.prope6 = (Kla3()).equals("xlqaf").or(false)
        } of type Function0<Unit> is { println("civtf")}
2021-03-12 10:09:40,665 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:09:40,666 [main:66] - Compilation checking started
2021-03-12 10:09:41,193 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:41,195 [main:107] - replacing (prope2, String)
2021-03-12 10:09:41,196 [main:50] - replacing prope2 String
2021-03-12 10:09:41,196 [main:54] - Getting value of type String
2021-03-12 10:09:41,310 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:41,312 [main:58] - GENERATED VALUE OF TYPE String = "hgxlh"
2021-03-12 10:09:41,312 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:41,316 [main:67] - randomType = Char
2021-03-12 10:09:41,429 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:41,454 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@36e1b827]
2021-03-12 10:09:41,569 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:41,571 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:09:41,681 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:41,683 [main:78] - Generated call from random type = ('뤲').compareTo('ꗭ').toString(-1104923148)
2021-03-12 10:09:41,684 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:41,727 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1]]
2021-03-12 10:09:41,727 [main:117] - GENERATED CALL = (::baz).name
2021-03-12 10:09:41,727 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ea8dc]]
2021-03-12 10:09:41,727 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ea8dc]
2021-03-12 10:09:41,837 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:41,948 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:41,950 [main:117] - GENERATED CALL = (::baz).name.removeRange(-1058494392, -241355610)
2021-03-12 10:09:41,950 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:09:41,950 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:09:42,061 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:42,063 [main:117] - GENERATED CALL = (::baz).name.prependIndent("vmzbx")
2021-03-12 10:09:42,063 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]]
2021-03-12 10:09:42,063 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]
2021-03-12 10:09:42,174 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:09:42,179 [main:117] - GENERATED CALL = (::baz).name.removeSuffix(StringBuilder())
2021-03-12 10:09:42,179 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:09:42,179 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:09:42,302 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:42,418 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:42,421 [main:117] - GENERATED CALL = (::baz).name.substringBeforeLast('㛞', "aslps")
2021-03-12 10:09:42,421 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]]
2021-03-12 10:09:42,421 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]
2021-03-12 10:09:42,421 [main:117] - GENERATED CALL = (::baz).name.uppercase()
2021-03-12 10:09:42,421 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]]
2021-03-12 10:09:42,421 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]
2021-03-12 10:09:42,533 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:42,645 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:42,758 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:42,760 [main:117] - GENERATED CALL = (::baz).name.replaceBefore('锴', "gsxvc", "tezcl")
2021-03-12 10:09:42,760 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]]
2021-03-12 10:09:42,760 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]
2021-03-12 10:09:42,760 [main:117] - GENERATED CALL = (::baz).name.trimEnd()
2021-03-12 10:09:42,760 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]]
2021-03-12 10:09:42,760 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]
2021-03-12 10:09:42,872 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 10:09:42,988 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 10:09:42,991 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 10:09:43,107 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:09:43,109 [main:95] - GENERATED = linkedSetOf<Int>(-1019335328)
2021-03-12 10:09:43,109 [main:117] - GENERATED CALL = (::baz).name.slice(linkedSetOf<Int>(-1019335328))
2021-03-12 10:09:43,109 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]]
2021-03-12 10:09:43,110 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]
2021-03-12 10:09:43,220 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:43,333 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:43,445 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:43,447 [main:117] - GENERATED CALL = (::baz).name.replaceAfter('ക', "eboxc", "xjiqn")
2021-03-12 10:09:43,447 [main:114] - replacement of prope2 of type String is (::baz).name.removeSuffix(StringBuilder())
2021-03-12 10:09:43,558 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:43,558 [main:66] - Compilation checking started
2021-03-12 10:09:43,957 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        (::baz).name.removeSuffix(StringBuilder()) = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:43,960 [main:107] - replacing (1, Int)
2021-03-12 10:09:43,960 [main:50] - replacing 1 Int
2021-03-12 10:09:43,960 [main:54] - Getting value of type Int
2021-03-12 10:09:44,070 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:44,072 [main:58] - GENERATED VALUE OF TYPE Int = -1079259030
2021-03-12 10:09:44,072 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:44,327 [main:67] - randomType = Set<String>
2021-03-12 10:09:44,328 [main:106] - GETTING Int from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:44,371 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e642d]]
2021-03-12 10:09:44,371 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e642d]
2021-03-12 10:09:44,480 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:44,591 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:44,593 [main:117] - GENERATED CALL = (Int::foo).name.compareTo("rifvq", false)
2021-03-12 10:09:44,593 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@236a23f]]
2021-03-12 10:09:44,593 [main:117] - GENERATED CALL = (Int::foo).name.length
2021-03-12 10:09:44,593 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]]
2021-03-12 10:09:44,593 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:09:44,703 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:44,704 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:09:44,814 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:44,816 [main:117] - GENERATED CALL = (Int::foo).equals("tolcr").compareTo(true)
2021-03-12 10:09:44,816 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c301924]]
2021-03-12 10:09:44,816 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c301924]
2021-03-12 10:09:44,816 [main:117] - GENERATED CALL = (Int::foo).name.toInt()
2021-03-12 10:09:44,816 [main:114] - replacement of 1 of type Int is -1079259030
2021-03-12 10:09:44,927 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 10:09:44,927 [main:66] - Compilation checking started
2021-03-12 10:09:45,454 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return fu4()
        }
        return fu4()
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:45,457 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 10:09:45,457 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 10:09:45,457 [main:54] - Getting value of type Result<Ty0>
2021-03-12 10:09:45,568 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 10:09:45,683 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 10:09:45,686 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 10:09:45,949 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 10:09:45,949 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 10:09:46,079 [main:67] - randomType = UInt
2021-03-12 10:09:46,198 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 10:09:46,242 [main:106] - GETTING Result<Ty0> from KFunction1<A, Unit>
2021-03-12 10:09:46,270 [main:106] - GETTING Result<Ty0> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:46,315 [main:106] - GETTING Result<Ty0> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:46,362 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 10:09:46,362 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 10:09:46,362 [main:50] - replacing c Continuation<Unit>
2021-03-12 10:09:46,362 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 10:09:46,472 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 10:09:46,589 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 10:09:46,592 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 10:09:46,967 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 10:09:47,082 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:09:47,085 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:09:47,331 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 10:09:47,449 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:09:47,451 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:09:47,868 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 10:09:47,985 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:09:47,988 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:09:48,363 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 10:09:48,482 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:09:48,485 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:09:48,863 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:09:48,863 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:09:48,863 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:09:48,863 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:09:48,863 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 10:09:48,863 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 10:09:48,998 [main:67] - randomType = HashSet<Kla1>
2021-03-12 10:09:49,108 [main:302] - generating value of type = HashSet<Kla1> false depth = 0
2021-03-12 10:09:49,224 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Kla1): HashSet<Kla1> = TODO()
2021-03-12 10:09:49,227 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Kla1): HashSet<Kla1> = TODO()
2021-03-12 10:09:49,369 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-12 10:09:49,371 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:09:49,372 [main:95] - GENERATED = hashSetOf<Kla1>(Kla1())
2021-03-12 10:09:49,480 [main:106] - GETTING Continuation<Unit> from KFunction1<A, Unit>
2021-03-12 10:09:49,507 [main:106] - GETTING Continuation<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:49,552 [main:106] - GETTING Continuation<Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:49,596 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 10:09:49,596 [main:107] - replacing (fu4(), String)
2021-03-12 10:09:49,596 [main:50] - replacing fu4() String
2021-03-12 10:09:49,596 [main:54] - Getting value of type String
2021-03-12 10:09:49,706 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:49,708 [main:58] - GENERATED VALUE OF TYPE String = "khcvs"
2021-03-12 10:09:49,708 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:50,345 [main:67] - randomType = Pair<Function2<Kla5, UShort, A>, Byte>
2021-03-12 10:09:50,455 [main:302] - generating value of type = Pair<Function2<Kla5, UShort, A>, Byte> false depth = 0
2021-03-12 10:09:50,574 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Function2<Kla5, UShort, A>, second: Byte): Pair<Function2<Kla5, UShort, A>, Byte> = TODO()
2021-03-12 10:09:50,577 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Function2<Kla5, UShort, A>, second: Byte): Pair<Function2<Kla5, UShort, A>, Byte> = TODO()
2021-03-12 10:09:50,694 [main:302] - generating value of type = Function2<Kla5, UShort, A> false depth = 3
2021-03-12 10:09:50,697 [main:302] - generating value of type = A false depth = 4
2021-03-12 10:09:50,698 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:09:50,699 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 10:09:50,700 [main:95] - GENERATED = Pair<Function2<Kla5, UShort, A>, Byte>({a: Kla5, b: UShort -> A()}, 11)
2021-03-12 10:09:50,716 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6839e33f]
2021-03-12 10:09:50,829 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:50,832 [main:78] - Generated call from random type = (Pair<Function2<Kla5, UShort, A>, Byte>({a: Kla5, b: UShort -> A()}, 11)).second.toString(-907558815)
2021-03-12 10:09:50,833 [main:106] - GETTING String from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:50,886 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]]
2021-03-12 10:09:50,886 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]
2021-03-12 10:09:50,999 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:51,112 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:51,253 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:09:51,375 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:09:51,378 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:09:51,620 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:09:51,623 [main:95] - GENERATED = StringBuilder("yxmtx")
2021-03-12 10:09:51,623 [main:117] - GENERATED CALL = (Int::foo).name.replaceRange(-1574602385, -1700707318, StringBuilder("yxmtx"))
2021-03-12 10:09:51,623 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e266ddd]]
2021-03-12 10:09:51,623 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e266ddd]
2021-03-12 10:09:51,733 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:09:51,735 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:09:51,737 [main:117] - GENERATED CALL = (Int::foo).name.dropWhile({a: Char -> true})
2021-03-12 10:09:51,737 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]]
2021-03-12 10:09:51,737 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]
2021-03-12 10:09:51,850 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:09:51,852 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:09:51,854 [main:117] - GENERATED CALL = (Int::foo).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 10:09:51,854 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]]
2021-03-12 10:09:51,854 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]
2021-03-12 10:09:51,967 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:52,080 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:52,194 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:52,196 [main:117] - GENERATED CALL = (Int::foo).name.replaceBefore('꿣', "bqrhl", "rztfa")
2021-03-12 10:09:52,196 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]]
2021-03-12 10:09:52,196 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]
2021-03-12 10:09:52,307 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:09:52,309 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:09:52,311 [main:117] - GENERATED CALL = (Int::foo).name.filterNot({a: Char -> false})
2021-03-12 10:09:52,311 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:09:52,311 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:09:52,423 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:52,536 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:52,538 [main:117] - GENERATED CALL = (Int::foo).name.substringBeforeLast('', "bumtu")
2021-03-12 10:09:52,539 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]]
2021-03-12 10:09:52,539 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]
2021-03-12 10:09:52,650 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:52,762 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:52,875 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:52,877 [main:117] - GENERATED CALL = (Int::foo).name.replaceAfter('馬', "omkwe", "ylnur")
2021-03-12 10:09:52,877 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]]
2021-03-12 10:09:52,877 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]
2021-03-12 10:09:52,877 [main:117] - GENERATED CALL = (Int::foo).name.decapitalize()
2021-03-12 10:09:52,877 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]]
2021-03-12 10:09:52,877 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]
2021-03-12 10:09:52,987 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:52,989 [main:117] - GENERATED CALL = (Int::foo).name.dropLast(-542595619)
2021-03-12 10:09:52,989 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]]
2021-03-12 10:09:52,989 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]
2021-03-12 10:09:53,099 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:53,126 [main:117] - GENERATED CALL = (Int::foo).name.concat("viymh")
2021-03-12 10:09:53,127 [main:114] - replacement of fu4() of type String is (Int::foo).name.substringBeforeLast('', "bumtu")
2021-03-12 10:09:53,241 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:53,242 [main:66] - Compilation checking started
2021-03-12 10:09:53,769 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return fu4()
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:53,771 [main:107] - replacing (fu4(), String)
2021-03-12 10:09:53,771 [main:50] - replacing fu4() String
2021-03-12 10:09:53,771 [main:54] - Getting value of type String
2021-03-12 10:09:53,888 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:53,890 [main:58] - GENERATED VALUE OF TYPE String = "ogmey"
2021-03-12 10:09:53,890 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:53,894 [main:67] - randomType = Int
2021-03-12 10:09:54,010 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:54,047 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7faf6a72]
2021-03-12 10:09:54,047 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fdd65]
2021-03-12 10:09:54,160 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:54,162 [main:78] - Generated call from random type = (-962240231).toShort().toString(1350901772)
2021-03-12 10:09:54,163 [main:106] - GETTING String from KFunction1<A, Unit>
2021-03-12 10:09:54,188 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]]
2021-03-12 10:09:54,188 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]
2021-03-12 10:09:54,188 [main:117] - GENERATED CALL = (A::bar).name.uppercase()
2021-03-12 10:09:54,188 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]]
2021-03-12 10:09:54,188 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]
2021-03-12 10:09:54,302 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:09:54,304 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:09:54,306 [main:117] - GENERATED CALL = (A::bar).name.dropLastWhile({a: Char -> false})
2021-03-12 10:09:54,306 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]]
2021-03-12 10:09:54,306 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]
2021-03-12 10:09:54,306 [main:117] - GENERATED CALL = (A::bar).name.trimIndent()
2021-03-12 10:09:54,307 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]]
2021-03-12 10:09:54,307 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]
2021-03-12 10:09:54,418 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:54,420 [main:117] - GENERATED CALL = (A::bar).name.takeLast(849708907)
2021-03-12 10:09:54,420 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]]
2021-03-12 10:09:54,420 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]
2021-03-12 10:09:54,530 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:09:54,643 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:09:54,646 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:09:54,889 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:09:54,891 [main:95] - GENERATED = StringBuilder("nmgrx")
2021-03-12 10:09:54,892 [main:117] - GENERATED CALL = (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
2021-03-12 10:09:54,892 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bca7bb0]]
2021-03-12 10:09:54,892 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bca7bb0]
2021-03-12 10:09:54,892 [main:117] - GENERATED CALL = (A::bar).name.trim()
2021-03-12 10:09:54,892 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]]
2021-03-12 10:09:54,892 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]
2021-03-12 10:09:55,005 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:09:55,007 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:09:55,009 [main:117] - GENERATED CALL = (A::bar).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 10:09:55,009 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ea8dc]]
2021-03-12 10:09:55,009 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ea8dc]
2021-03-12 10:09:55,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:55,233 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:09:55,235 [main:117] - GENERATED CALL = (A::bar).name.removeRange(166118657, -849766393)
2021-03-12 10:09:55,235 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]]
2021-03-12 10:09:55,235 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]
2021-03-12 10:09:55,366 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:09:55,481 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:09:55,483 [main:117] - GENERATED CALL = (A::bar).name.substringAfter('⋎', "tsmkm")
2021-03-12 10:09:55,483 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bd3920c]]
2021-03-12 10:09:55,483 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bd3920c]
2021-03-12 10:09:55,592 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:09:55,594 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:09:55,596 [main:117] - GENERATED CALL = (A::bar).name.filter({a: Char -> false})
2021-03-12 10:09:55,596 [main:114] - replacement of fu4() of type String is (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
2021-03-12 10:09:55,707 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:09:55,707 [main:66] - Compilation checking started
2021-03-12 10:09:56,263 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:56,265 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 10:09:56,265 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 10:09:56,265 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:09:56,391 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:09:56,393 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:09:56,517 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:09:56,520 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:09:56,775 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:09:56,776 [main:95] - GENERATED = println("qwlxx")
2021-03-12 10:09:56,776 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("qwlxx")}
2021-03-12 10:09:56,776 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:56,919 [main:67] - randomType = Sequence<Kla0>
2021-03-12 10:09:56,921 [main:106] - GETTING Function0<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:56,980 [main:106] - GETTING Function0<Unit> from KFunction1<A, Unit>
2021-03-12 10:09:57,013 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:57,066 [main:114] - replacement of prope7 of type Function0<Unit> is { println("qwlxx")}
2021-03-12 10:09:57,184 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:09:57,184 [main:66] - Compilation checking started
2021-03-12 10:09:57,586 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            { println("qwlxx")}()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:57,589 [main:107] - replacing (this.prope3, Any?)
2021-03-12 10:09:57,589 [main:50] - replacing this.prope3 Any?
2021-03-12 10:09:57,589 [main:54] - Getting value of type Any?
2021-03-12 10:09:57,733 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:57,733 [main:58] - GENERATED VALUE OF TYPE Any? = "zksxm"
2021-03-12 10:09:57,733 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:58,685 [main:67] - randomType = Function2<A?, HashMap<LinkedHashMap<UShort, Char>, Kla3>, UShort?>
2021-03-12 10:09:58,686 [main:106] - GETTING Any? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:58,730 [main:106] - GETTING Any? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:09:58,776 [main:106] - GETTING Any? from KFunction1<A, Unit>
2021-03-12 10:09:58,800 [main:114] - replacement of this.prope3 of type Any? is "zksxm"
2021-03-12 10:09:58,913 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 10:09:58,913 [main:66] - Compilation checking started
2021-03-12 10:09:59,264 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        "zksxm" = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:09:59,266 [main:107] - replacing (prope6, Boolean)
2021-03-12 10:09:59,266 [main:50] - replacing prope6 Boolean
2021-03-12 10:09:59,266 [main:54] - Getting value of type Boolean
2021-03-12 10:09:59,382 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:09:59,384 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:09:59,384 [main:61] - GENERATED IS CALL =false
2021-03-12 10:09:59,644 [main:67] - randomType = Double?
2021-03-12 10:09:59,761 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:09:59,805 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@48edce83]
2021-03-12 10:09:59,805 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@56ddd82a]
2021-03-12 10:09:59,920 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:09:59,920 [main:78] - Generated call from random type = (0.16314077761823265)?.toShort().equals("xlphd")
2021-03-12 10:09:59,921 [main:106] - GETTING Boolean from KFunction1<A, Unit>
2021-03-12 10:09:59,966 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]]
2021-03-12 10:09:59,966 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]
2021-03-12 10:10:00,082 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:00,198 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:00,200 [main:117] - GENERATED CALL = (A::bar).name.startsWith("auqdu", true)
2021-03-12 10:10:00,200 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]]
2021-03-12 10:10:00,200 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]
2021-03-12 10:10:00,314 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:00,316 [main:117] - GENERATED CALL = (A::bar).name.matches("llpdv")
2021-03-12 10:10:00,316 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:10:00,316 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:10:00,429 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:00,430 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:10:00,542 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:00,544 [main:117] - GENERATED CALL = (A::bar).equals("bfori").or(true)
2021-03-12 10:10:00,544 [main:113] - Case = [public abstract fun invoke(p1: A): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@25ad605d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@616a635f]]
2021-03-12 10:10:00,544 [main:149] - GENERATING call of type public abstract fun invoke(p1: A): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@25ad605d]
2021-03-12 10:10:00,656 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:10:00,658 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:10:00,659 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@616a635f]
2021-03-12 10:10:00,772 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:00,772 [main:117] - GENERATED CALL = (A::bar).invoke(A()).equals("qqnpb")
2021-03-12 10:10:00,772 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]]
2021-03-12 10:10:00,772 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:10:00,886 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:00,887 [main:117] - GENERATED CALL = (A::bar).equals("wdvas")
2021-03-12 10:10:00,887 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]]
2021-03-12 10:10:00,887 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]
2021-03-12 10:10:00,887 [main:117] - GENERATED CALL = (A::bar).name.toBoolean()
2021-03-12 10:10:00,887 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]]
2021-03-12 10:10:00,887 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:10:01,002 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:01,002 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:10:01,117 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:01,119 [main:117] - GENERATED CALL = (A::bar).equals("wezbo").xor(true)
2021-03-12 10:10:01,119 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:10:01,119 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:10:01,232 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:01,232 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:10:01,232 [main:117] - GENERATED CALL = (A::bar).equals("euwnl").not()
2021-03-12 10:10:01,233 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]]
2021-03-12 10:10:01,233 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:10:01,344 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:01,345 [main:117] - GENERATED CALL = (A::bar).name.equals("qszed")
2021-03-12 10:10:01,345 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:10:01,345 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:10:01,458 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:01,458 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:10:01,570 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:01,571 [main:117] - GENERATED CALL = (A::bar).equals("pvdug").equals("rrfwo")
2021-03-12 10:10:01,571 [main:114] - replacement of prope6 of type Boolean is (A::bar).equals("bfori").or(true)
2021-03-12 10:10:01,682 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:10:01,683 [main:66] - Compilation checking started
2021-03-12 10:10:02,027 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        (A::bar).equals("bfori").or(true) = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:10:02,028 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 10:10:02,028 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 10:10:02,028 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 10:10:02,163 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 10:10:02,168 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 10:10:02,293 [main:67] - randomType = Float
2021-03-12 10:10:02,404 [main:302] - generating value of type = Float true depth = 0
2021-03-12 10:10:02,437 [main:106] - GETTING EmptyCoroutineContext from KFunction1<A, Unit>
2021-03-12 10:10:02,462 [main:106] - GETTING EmptyCoroutineContext from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:02,508 [main:106] - GETTING EmptyCoroutineContext from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:02,552 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 10:10:02,552 [main:107] - replacing (Kla3(), Kla3)
2021-03-12 10:10:02,552 [main:50] - replacing Kla3() Kla3
2021-03-12 10:10:02,552 [main:54] - Getting value of type Kla3
2021-03-12 10:10:02,665 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 10:10:02,667 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:10:02,667 [main:58] - GENERATED VALUE OF TYPE Kla3 = Kla3()
2021-03-12 10:10:02,667 [main:61] - GENERATED IS CALL =true
2021-03-12 10:10:02,791 [main:67] - randomType = UByte
2021-03-12 10:10:02,911 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:10:02,941 [main:106] - GETTING Kla3 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:02,984 [main:106] - GETTING Kla3 from KFunction1<A, Unit>
2021-03-12 10:10:03,010 [main:106] - GETTING Kla3 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:03,053 [main:114] - replacement of Kla3() of type Kla3 is Kla3()
2021-03-12 10:10:03,163 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:10:03,165 [main:107] - replacing (prope3.getOrThrow(), Any?)
2021-03-12 10:10:03,165 [main:50] - replacing prope3.getOrThrow() Any?
2021-03-12 10:10:03,165 [main:54] - Getting value of type Any?
2021-03-12 10:10:03,276 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:03,276 [main:58] - GENERATED VALUE OF TYPE Any? = "rfdft"
2021-03-12 10:10:03,276 [main:61] - GENERATED IS CALL =false
2021-03-12 10:10:03,402 [main:67] - randomType = Short
2021-03-12 10:10:03,521 [main:302] - generating value of type = Short true depth = 0
2021-03-12 10:10:03,568 [main:106] - GETTING Any? from KFunction1<A, Unit>
2021-03-12 10:10:03,605 [main:106] - GETTING Any? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:03,659 [main:106] - GETTING Any? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:03,715 [main:114] - replacement of prope3.getOrThrow() of type Any? is "rfdft"
2021-03-12 10:10:03,829 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 10:10:03,829 [main:66] - Compilation checking started
2021-03-12 10:10:04,553 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:10:04,554 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 10:10:04,555 [main:50] - replacing {} Function0<Unit>
2021-03-12 10:10:04,555 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:10:04,668 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:10:04,670 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:10:04,800 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:10:04,803 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:10:05,047 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:10:05,049 [main:95] - GENERATED = require(false)
2021-03-12 10:10:05,049 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-12 10:10:05,049 [main:61] - GENERATED IS CALL =false
2021-03-12 10:10:05,181 [main:67] - randomType = A?
2021-03-12 10:10:05,294 [main:302] - generating value of type = A false depth = 0
2021-03-12 10:10:05,296 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:10:05,302 [main:106] - GETTING Function0<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:05,348 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:05,393 [main:106] - GETTING Function0<Unit> from KFunction1<A, Unit>
2021-03-12 10:10:05,417 [main:114] - replacement of {} of type Function0<Unit> is { require(false)}
2021-03-12 10:10:05,529 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:10:05,530 [main:66] - Compilation checking started
2021-03-12 10:10:06,079 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = fu0()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:10:06,081 [main:107] - replacing (fu0(), String)
2021-03-12 10:10:06,081 [main:50] - replacing fu0() String
2021-03-12 10:10:06,081 [main:54] - Getting value of type String
2021-03-12 10:10:06,196 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:06,198 [main:58] - GENERATED VALUE OF TYPE String = "feybu"
2021-03-12 10:10:06,199 [main:61] - GENERATED IS CALL =false
2021-03-12 10:10:06,206 [main:67] - randomType = Kla1
2021-03-12 10:10:06,321 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 10:10:06,323 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:10:06,337 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]
2021-03-12 10:10:06,338 [main:78] - Generated call from random type = (Kla1()).prope3?.toString()!!
2021-03-12 10:10:06,339 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:06,383 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]]
2021-03-12 10:10:06,383 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]
2021-03-12 10:10:06,494 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:10:06,607 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:06,720 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:06,723 [main:117] - GENERATED CALL = (::baz).name.replaceBefore('≊', "aqvjf", "teoee")
2021-03-12 10:10:06,723 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]]
2021-03-12 10:10:06,723 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]
2021-03-12 10:10:06,852 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:10:06,854 [main:117] - GENERATED CALL = (::baz).name.dropLast(1227198956)
2021-03-12 10:10:06,854 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]]
2021-03-12 10:10:06,854 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]
2021-03-12 10:10:06,855 [main:117] - GENERATED CALL = (::baz).name.toUpperCase()
2021-03-12 10:10:06,855 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]]
2021-03-12 10:10:06,855 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]
2021-03-12 10:10:06,967 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:10:06,969 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:10:06,972 [main:117] - GENERATED CALL = (::baz).name.filterNot({a: Char -> false})
2021-03-12 10:10:06,972 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]]
2021-03-12 10:10:06,972 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]
2021-03-12 10:10:07,084 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:10:07,086 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:10:07,088 [main:117] - GENERATED CALL = (::baz).name.takeWhile({a: Char -> true})
2021-03-12 10:10:07,088 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]]
2021-03-12 10:10:07,089 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]
2021-03-12 10:10:07,201 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:10:07,203 [main:117] - GENERATED CALL = (::baz).name.takeLast(1857296735)
2021-03-12 10:10:07,203 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:10:07,203 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:10:07,317 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:07,319 [main:117] - GENERATED CALL = (::baz).name.prependIndent("jagub")
2021-03-12 10:10:07,319 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]]
2021-03-12 10:10:07,320 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]
2021-03-12 10:10:07,320 [main:117] - GENERATED CALL = (::baz).name.lowercase()
2021-03-12 10:10:07,320 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]]
2021-03-12 10:10:07,320 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]
2021-03-12 10:10:07,432 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:10:07,437 [main:117] - GENERATED CALL = (::baz).name.removePrefix("ncfme")
2021-03-12 10:10:07,437 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]]
2021-03-12 10:10:07,437 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]
2021-03-12 10:10:07,437 [main:117] - GENERATED CALL = (::baz).name.trimIndent()
2021-03-12 10:10:07,437 [main:114] - replacement of fu0() of type String is (::baz).name.lowercase()
2021-03-12 10:10:07,548 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:10:07,548 [main:66] - Compilation checking started
2021-03-12 10:10:08,077 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = (::baz).name.lowercase()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:10:08,079 [main:107] - replacing (exception, Throwable)
2021-03-12 10:10:08,079 [main:50] - replacing exception Throwable
2021-03-12 10:10:08,079 [main:54] - Getting value of type Throwable
2021-03-12 10:10:08,194 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 10:10:08,315 [main:43] - GENERATING CALL OF fun IllegalStateException(message: kotlin.String?): Throwable = TODO()
2021-03-12 10:10:08,318 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(message: kotlin.String?): Throwable = TODO()
2021-03-12 10:10:08,561 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:10:08,563 [main:95] - GENERATED = IllegalStateException("wxbgo")
2021-03-12 10:10:08,563 [main:58] - GENERATED VALUE OF TYPE Throwable = IllegalStateException("wxbgo")
2021-03-12 10:10:08,563 [main:61] - GENERATED IS CALL =true
2021-03-12 10:10:08,688 [main:67] - randomType = Short
2021-03-12 10:10:08,800 [main:302] - generating value of type = Short true depth = 0
2021-03-12 10:10:08,833 [main:106] - GETTING Throwable from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:08,879 [main:106] - GETTING Throwable from KFunction1<A, Unit>
2021-03-12 10:10:08,905 [main:106] - GETTING Throwable from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:08,949 [main:114] - replacement of exception of type Throwable is IllegalStateException("wxbgo")
2021-03-12 10:10:09,091 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:10:09,092 [main:66] - Compilation checking started
2021-03-12 10:10:09,619 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = (::baz).name.lowercase()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { (A::bar).invoke(A()).equals("mbqiq") }?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:09,621 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 10:10:09,621 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 10:10:09,621 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 10:10:09,744 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 10:10:09,749 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 10:10:10,047 [main:67] - randomType = Short?
2021-03-12 10:10:10,167 [main:302] - generating value of type = Short true depth = 0
2021-03-12 10:10:10,203 [main:106] - GETTING EmptyCoroutineContext from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:10,247 [main:106] - GETTING EmptyCoroutineContext from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:10,290 [main:106] - GETTING EmptyCoroutineContext from KFunction1<A, Unit>
2021-03-12 10:10:10,314 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 10:10:10,314 [main:107] - replacing ({ (A::bar).invoke(A()).equals("mbqiq") }, Function0<Boolean>)
2021-03-12 10:10:10,315 [main:50] - replacing { (A::bar).invoke(A()).equals("mbqiq") } Function0<Boolean>
2021-03-12 10:10:10,315 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 10:10:10,426 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 10:10:10,428 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:10:10,430 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-12 10:10:10,430 [main:61] - GENERATED IS CALL =false
2021-03-12 10:10:10,437 [main:67] - randomType = Kla0
2021-03-12 10:10:10,551 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 10:10:10,553 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}
2021-03-12 10:10:10,665 [main:194] - Type params = []
2021-03-12 10:10:10,775 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 10:10:10,890 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:10:10,893 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:10:11,141 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 10:10:11,259 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:10:11,262 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:10:11,677 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:10:11,677 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:10:11,691 [main:106] - GETTING Function0<Boolean> from KFunction1<A, Unit>
2021-03-12 10:10:11,717 [main:106] - GETTING Function0<Boolean> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:11,763 [main:106] - GETTING Function0<Boolean> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:11,807 [main:114] - replacement of { (A::bar).invoke(A()).equals("mbqiq") } of type Function0<Boolean> is { false}
2021-03-12 10:10:11,920 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:10:11,921 [main:66] - Compilation checking started
2021-03-12 10:10:12,459 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = (::baz).name.lowercase()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:12,462 [main:107] - replacing (prope2, String)
2021-03-12 10:10:12,462 [main:50] - replacing prope2 String
2021-03-12 10:10:12,462 [main:54] - Getting value of type String
2021-03-12 10:10:12,575 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:12,577 [main:58] - GENERATED VALUE OF TYPE String = "easwp"
2021-03-12 10:10:12,577 [main:61] - GENERATED IS CALL =false
2021-03-12 10:10:12,704 [main:67] - randomType = Kla5
2021-03-12 10:10:12,816 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:10:12,817 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}
2021-03-12 10:10:12,836 [main:106] - GETTING String from KFunction1<A, Unit>
2021-03-12 10:10:12,863 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]]
2021-03-12 10:10:12,863 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]
2021-03-12 10:10:12,973 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:10:12,975 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:10:12,977 [main:117] - GENERATED CALL = (A::bar).name.takeLastWhile({a: Char -> false})
2021-03-12 10:10:12,977 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:10:12,977 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:10:13,088 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:13,090 [main:117] - GENERATED CALL = (A::bar).name.prependIndent("oypsq")
2021-03-12 10:10:13,090 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]]
2021-03-12 10:10:13,090 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]
2021-03-12 10:10:13,201 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:10:13,203 [main:117] - GENERATED CALL = (A::bar).name.drop(1474053075)
2021-03-12 10:10:13,203 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]]
2021-03-12 10:10:13,203 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]
2021-03-12 10:10:13,314 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:10:13,428 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:13,430 [main:117] - GENERATED CALL = (A::bar).name.substringBefore('벱', "axivi")
2021-03-12 10:10:13,430 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0f9bf]]
2021-03-12 10:10:13,430 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0f9bf]
2021-03-12 10:10:13,542 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:10:13,544 [main:117] - GENERATED CALL = (A::bar).name.substring(-944419671)
2021-03-12 10:10:13,544 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]]
2021-03-12 10:10:13,544 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]
2021-03-12 10:10:13,680 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:13,682 [main:117] - GENERATED CALL = (A::bar).name.concat("waafk")
2021-03-12 10:10:13,682 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]]
2021-03-12 10:10:13,682 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]
2021-03-12 10:10:13,800 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:10:13,919 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:14,034 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:14,036 [main:117] - GENERATED CALL = (A::bar).name.replaceAfter('⟎', "bialu", "bdvje")
2021-03-12 10:10:14,036 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]]
2021-03-12 10:10:14,036 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]
2021-03-12 10:10:14,151 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:10:14,153 [main:117] - GENERATED CALL = (A::bar).name.dropLast(-1413348161)
2021-03-12 10:10:14,153 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]]
2021-03-12 10:10:14,153 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]
2021-03-12 10:10:14,153 [main:117] - GENERATED CALL = (A::bar).name.toLowerCase()
2021-03-12 10:10:14,154 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@49a127fc], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]]
2021-03-12 10:10:14,154 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]
2021-03-12 10:10:14,268 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:10:14,273 [main:117] - GENERATED CALL = (A::bar).name.removeSuffix("dizkx")
2021-03-12 10:10:14,273 [main:114] - replacement of prope2 of type String is (A::bar).name.prependIndent("oypsq")
2021-03-12 10:10:14,385 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:10:14,385 [main:66] - Compilation checking started
2021-03-12 10:10:14,723 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        (A::bar).name.prependIndent("oypsq") = (::baz).name.lowercase()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:14,726 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 10:10:14,726 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 10:10:14,726 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:10:14,836 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:10:14,839 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:10:14,955 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 10:10:14,958 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 10:10:15,204 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 10:10:15,206 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 10:10:15,211 [main:95] - GENERATED = contract({ println()})
2021-03-12 10:10:15,211 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println()})}
2021-03-12 10:10:15,211 [main:61] - GENERATED IS CALL =false
2021-03-12 10:10:15,337 [main:67] - randomType = UInt
2021-03-12 10:10:15,448 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 10:10:15,480 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:15,526 [main:106] - GETTING Function0<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:15,571 [main:106] - GETTING Function0<Unit> from KFunction1<A, Unit>
2021-03-12 10:10:15,595 [main:114] - replacement of prope7 of type Function0<Unit> is { contract({ println()})}
2021-03-12 10:10:15,706 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:10:15,706 [main:66] - Compilation checking started
2021-03-12 10:10:16,111 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = (::baz).name.lowercase()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        { contract({ println()})}()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:16,113 [main:107] - replacing (prope5 != i, Boolean)
2021-03-12 10:10:16,113 [main:50] - replacing prope5 != i Boolean
2021-03-12 10:10:16,113 [main:54] - Getting value of type Boolean
2021-03-12 10:10:16,230 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:16,232 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:10:16,232 [main:61] - GENERATED IS CALL =false
2021-03-12 10:10:16,240 [main:67] - randomType = Kla4
2021-03-12 10:10:16,358 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 10:10:16,360 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if (prope5 != i) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}
2021-03-12 10:10:16,368 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:10:16,481 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:16,482 [main:78] - Generated call from random type = (Kla4()).prope7.equals("pibeo")
2021-03-12 10:10:16,482 [main:106] - GETTING Boolean from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:16,527 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]]
2021-03-12 10:10:16,527 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:10:16,639 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:16,639 [main:117] - GENERATED CALL = (Int::foo).name.equals("xfhue")
2021-03-12 10:10:16,639 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]]
2021-03-12 10:10:16,639 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]
2021-03-12 10:10:16,752 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:16,754 [main:117] - GENERATED CALL = (Int::foo).name.matches("goetx")
2021-03-12 10:10:16,754 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 10:10:16,754 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:10:16,865 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:16,866 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 10:10:16,977 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:16,979 [main:117] - GENERATED CALL = (Int::foo).equals("xtcqd").and(false)
2021-03-12 10:10:16,979 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]]
2021-03-12 10:10:16,979 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]
2021-03-12 10:10:17,090 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:17,206 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:17,208 [main:117] - GENERATED CALL = (Int::foo).name.endsWith("bduhs", false)
2021-03-12 10:10:17,208 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]]
2021-03-12 10:10:17,208 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:10:17,323 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:17,323 [main:117] - GENERATED CALL = (Int::foo).equals("kfubf")
2021-03-12 10:10:17,323 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]]
2021-03-12 10:10:17,323 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]
2021-03-12 10:10:17,436 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:17,551 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:17,553 [main:117] - GENERATED CALL = (Int::foo).name.startsWith("jkkib", true)
2021-03-12 10:10:17,553 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:10:17,553 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:10:17,666 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:17,666 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:10:17,779 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:17,781 [main:117] - GENERATED CALL = (Int::foo).equals("vgoah").or(false)
2021-03-12 10:10:17,781 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]]
2021-03-12 10:10:17,781 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]
2021-03-12 10:10:17,782 [main:117] - GENERATED CALL = (Int::foo).name.toBoolean()
2021-03-12 10:10:17,782 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:10:17,782 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:10:17,895 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:17,896 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:10:18,007 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:18,007 [main:117] - GENERATED CALL = (Int::foo).equals("ejkgr").equals("bcuzc")
2021-03-12 10:10:18,007 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:10:18,007 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:10:18,146 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:18,146 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:10:18,147 [main:117] - GENERATED CALL = (Int::foo).equals("rutik").not()
2021-03-12 10:10:18,147 [main:114] - replacement of prope5 != i of type Boolean is (Int::foo).name.endsWith("bduhs", false)
2021-03-12 10:10:18,260 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:10:18,260 [main:66] - Compilation checking started
2021-03-12 10:10:18,801 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = (::baz).name.lowercase()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (Int::foo).equals("ktxjs").not()) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:18,804 [main:107] - replacing (checkFinished && (Int::foo).equals("ktxjs").not(), Boolean)
2021-03-12 10:10:18,804 [main:50] - replacing checkFinished && (Int::foo).equals("ktxjs").not() Boolean
2021-03-12 10:10:18,804 [main:54] - Getting value of type Boolean
2021-03-12 10:10:18,922 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:18,924 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:10:18,924 [main:61] - GENERATED IS CALL =false
2021-03-12 10:10:18,932 [main:67] - randomType = Kla1
2021-03-12 10:10:19,043 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 10:10:19,045 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:10:19,060 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@7610554f]
2021-03-12 10:10:19,171 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:19,172 [main:78] - Generated call from random type = (Kla1()).context.equals("ymvor")
2021-03-12 10:10:19,172 [main:106] - GETTING Boolean from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:19,225 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:10:19,225 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:10:19,342 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:19,343 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:10:19,454 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:19,455 [main:117] - GENERATED CALL = (Int::foo).equals("wteom").equals("wijdl")
2021-03-12 10:10:19,455 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:10:19,455 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:10:19,567 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:19,567 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:10:19,567 [main:117] - GENERATED CALL = (Int::foo).equals("jfear").not()
2021-03-12 10:10:19,568 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]]
2021-03-12 10:10:19,568 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:10:19,680 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:19,680 [main:117] - GENERATED CALL = (Int::foo).equals("nnjif")
2021-03-12 10:10:19,680 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 10:10:19,680 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:10:19,792 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:19,792 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 10:10:19,904 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:19,906 [main:117] - GENERATED CALL = (Int::foo).equals("krfnz").and(false)
2021-03-12 10:10:19,906 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:10:19,906 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:10:20,017 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:20,017 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:10:20,136 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:20,139 [main:117] - GENERATED CALL = (Int::foo).equals("hdbsz").or(false)
2021-03-12 10:10:20,139 [main:113] - Case = [public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@616a635f]]
2021-03-12 10:10:20,139 [main:149] - GENERATING call of type public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]
2021-03-12 10:10:20,252 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:10:20,365 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:10:20,375 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(p1: kotlin.Int, s: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction2[FunctionInvokeDescriptor@2ef9c3d0]
2021-03-12 10:10:20,375 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]]
2021-03-12 10:10:20,375 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]
2021-03-12 10:10:20,514 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:20,517 [main:117] - GENERATED CALL = (Int::foo).name.matches("dxclj")
2021-03-12 10:10:20,517 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]]
2021-03-12 10:10:20,517 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]
2021-03-12 10:10:20,517 [main:117] - GENERATED CALL = (Int::foo).name.toBoolean()
2021-03-12 10:10:20,517 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]]
2021-03-12 10:10:20,517 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:10:20,630 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:10:20,630 [main:117] - GENERATED CALL = (Int::foo).name.equals("dgiid")
2021-03-12 10:10:20,630 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@40211a81], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]]
2021-03-12 10:10:20,630 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]
2021-03-12 10:10:20,741 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:20,853 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:20,856 [main:117] - GENERATED CALL = (Int::foo).name.endsWith("typxx", true)
2021-03-12 10:10:20,856 [main:114] - replacement of checkFinished && (Int::foo).equals("ktxjs").not() of type Boolean is (Int::foo).equals("hdbsz").or(false)
2021-03-12 10:10:20,970 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:10:20,971 [main:66] - Compilation checking started
2021-03-12 10:10:21,513 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = (::baz).name.lowercase()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in -1079259030..numberOfSuspensions) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:21,515 [main:107] - replacing (-1079259030..numberOfSuspensions, IntRange)
2021-03-12 10:10:21,515 [main:50] - replacing -1079259030..numberOfSuspensions IntRange
2021-03-12 10:10:21,515 [main:54] - Getting value of type IntRange
2021-03-12 10:10:21,628 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 10:10:21,742 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 10:10:21,745 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 10:10:22,107 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:10:22,109 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:10:22,111 [main:95] - GENERATED = IntRange(-2062920700, -1153379107)
2021-03-12 10:10:22,111 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-2062920700, -1153379107)
2021-03-12 10:10:22,111 [main:61] - GENERATED IS CALL =true
2021-03-12 10:10:22,883 [main:67] - randomType = HashSet<HashMap<Array<Kla3>, UByte?>>?
2021-03-12 10:10:23,020 [main:302] - generating value of type = HashSet<HashMap<Array<Kla3>, UByte?>> false depth = 0
2021-03-12 10:10:23,140 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: HashMap<Array<Kla3>, UByte?>): HashSet<HashMap<Array<Kla3>, UByte?>> = TODO()
2021-03-12 10:10:23,142 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: HashMap<Array<Kla3>, UByte?>): HashSet<HashMap<Array<Kla3>, UByte?>> = TODO()
2021-03-12 10:10:23,259 [main:302] - generating value of type = HashMap<Array<Kla3>, UByte?> false depth = 3
2021-03-12 10:10:23,376 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Array<Kla3>, UByte?> = TODO()
2021-03-12 10:10:23,379 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Array<Kla3>, UByte?> = TODO()
2021-03-12 10:10:23,495 [main:95] - GENERATED = hashMapOf<Array<Kla3>, UByte?>()
2021-03-12 10:10:23,495 [main:95] - GENERATED = hashSetOf<HashMap<Array<Kla3>, UByte?>>(hashMapOf<Array<Kla3>, UByte?>())
2021-03-12 10:10:23,659 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@718991cd]
2021-03-12 10:10:23,770 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:10:23,772 [main:78] - Generated call from random type = (hashSetOf<HashMap<Array<Kla3>, UByte?>>(hashMapOf<Array<Kla3>, UByte?>()))?.size.until(3)
2021-03-12 10:10:23,773 [main:106] - GETTING IntRange from KFunction1<A, Unit>
2021-03-12 10:10:23,799 [main:106] - GETTING IntRange from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:23,844 [main:106] - GETTING IntRange from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:23,890 [main:114] - replacement of -1079259030..numberOfSuspensions of type IntRange is IntRange(-2062920700, -1153379107)
2021-03-12 10:10:24,001 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:10:24,002 [main:66] - Compilation checking started
2021-03-12 10:10:24,606 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = (::baz).name.lowercase()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:24,609 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 10:10:24,609 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 10:10:24,609 [main:54] - Getting value of type Result<Ty0>
2021-03-12 10:10:24,731 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 10:10:24,847 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 10:10:24,850 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 10:10:25,097 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 10:10:25,097 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 10:10:25,356 [main:67] - randomType = UByte?
2021-03-12 10:10:25,494 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:10:25,527 [main:106] - GETTING Result<Ty0> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:25,570 [main:106] - GETTING Result<Ty0> from KFunction1<A, Unit>
2021-03-12 10:10:25,598 [main:106] - GETTING Result<Ty0> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:25,644 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 10:10:25,644 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 10:10:25,644 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 10:10:25,644 [main:54] - Getting value of type String
2021-03-12 10:10:25,756 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:25,758 [main:58] - GENERATED VALUE OF TYPE String = "lbjmh"
2021-03-12 10:10:25,758 [main:61] - GENERATED IS CALL =false
2021-03-12 10:10:25,762 [main:67] - randomType = Int
2021-03-12 10:10:25,872 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:10:25,906 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@e6939]
2021-03-12 10:10:25,907 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6839e33f]
2021-03-12 10:10:26,017 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:10:26,020 [main:78] - Generated call from random type = (1548866775).toByte().toString(1329424089)
2021-03-12 10:10:26,021 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:26,063 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd90b7c]]
2021-03-12 10:10:26,064 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd90b7c]
2021-03-12 10:10:26,177 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:26,179 [main:117] - GENERATED CALL = (::baz).name.replaceIndent("xrwbw")
2021-03-12 10:10:26,179 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]]
2021-03-12 10:10:26,179 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]
2021-03-12 10:10:26,293 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:10:26,407 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:10:26,523 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:10:26,525 [main:117] - GENERATED CALL = (::baz).name.replace('㏐', '尥', false)
2021-03-12 10:10:26,525 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]]
2021-03-12 10:10:26,525 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]
2021-03-12 10:10:26,525 [main:117] - GENERATED CALL = (::baz).name.toLowerCase()
2021-03-12 10:10:26,525 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]]
2021-03-12 10:10:26,525 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]
2021-03-12 10:10:26,640 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:10:26,642 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:10:26,644 [main:117] - GENERATED CALL = (::baz).name.takeWhile({a: Char -> true})
2021-03-12 10:10:26,644 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]]
2021-03-12 10:10:26,644 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]
2021-03-12 10:10:26,644 [main:117] - GENERATED CALL = (::baz).name.trimEnd()
2021-03-12 10:10:26,644 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]]
2021-03-12 10:10:26,644 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]
2021-03-12 10:10:26,763 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:26,919 [main:117] - GENERATED CALL = (::baz).name.concat("bghka")
2021-03-12 10:10:26,919 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]]
2021-03-12 10:10:26,919 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]
2021-03-12 10:10:27,030 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:10:27,035 [main:117] - GENERATED CALL = (::baz).name.removeSurrounding("juenw")
2021-03-12 10:10:27,035 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]]
2021-03-12 10:10:27,035 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]
2021-03-12 10:10:27,035 [main:117] - GENERATED CALL = (::baz).name.capitalize()
2021-03-12 10:10:27,035 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]]
2021-03-12 10:10:27,035 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]
2021-03-12 10:10:27,035 [main:117] - GENERATED CALL = (::baz).name.toUpperCase()
2021-03-12 10:10:27,035 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3e76ce1], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6b6a0]]
2021-03-12 10:10:27,035 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6b6a0]
2021-03-12 10:10:27,153 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:10:27,155 [main:117] - GENERATED CALL = (::baz).name.trimMargin("wlxfl")
2021-03-12 10:10:27,155 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (::baz).name.trimMargin("wlxfl")
2021-03-12 10:10:27,268 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:10:27,269 [main:66] - Compilation checking started
2021-03-12 10:10:27,787 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = (::baz).name.lowercase()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:27,789 [main:107] - replacing (prope1, Kla4)
2021-03-12 10:10:27,790 [main:50] - replacing prope1 Kla4
2021-03-12 10:10:27,790 [main:54] - Getting value of type Kla4
2021-03-12 10:10:27,909 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 10:10:27,911 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(-186422839))
    }
}
2021-03-12 10:10:27,911 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 10:10:27,912 [main:61] - GENERATED IS CALL =true
2021-03-12 10:10:28,039 [main:67] - randomType = UShort
2021-03-12 10:10:28,176 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 10:10:28,208 [main:106] - GETTING Kla4 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:28,251 [main:106] - GETTING Kla4 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:28,299 [main:106] - GETTING Kla4 from KFunction1<A, Unit>
2021-03-12 10:10:28,323 [main:114] - replacement of prope1 of type Kla4 is Kla4()
2021-03-12 10:10:28,435 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:10:28,435 [main:66] - Compilation checking started
2021-03-12 10:10:29,038 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 {
        prope2 = (::baz).name.lowercase()
    }
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:29,039 [main:107] - replacing ({
        prope2 = (::baz).name.lowercase()
    }, SuspendFunction0<Unit>)
2021-03-12 10:10:29,039 [main:50] - replacing {
        prope2 = (::baz).name.lowercase()
    } SuspendFunction0<Unit>
2021-03-12 10:10:29,040 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 10:10:29,156 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 10:10:29,158 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:10:29,276 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:10:29,279 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:10:29,653 [main:302] - generating value of type = Int true depth = 4
2021-03-12 10:10:29,655 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 10:10:29,657 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 10:10:29,774 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:10:29,776 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:10:30,146 [main:302] - generating value of type = Int true depth = 8
2021-03-12 10:10:30,148 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 10:10:30,150 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 10:10:30,273 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:10:30,277 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:10:30,656 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 10:10:30,658 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-12 10:10:30,660 [main:302] - generating value of type = Any false depth = 13
2021-03-12 10:10:30,660 [main:95] - GENERATED = require(true, { "cgxov"})
2021-03-12 10:10:30,660 [main:95] - GENERATED = repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})
2021-03-12 10:10:30,660 [main:95] - GENERATED = repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})
2021-03-12 10:10:30,660 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
2021-03-12 10:10:30,660 [main:61] - GENERATED IS CALL =false
2021-03-12 10:10:31,067 [main:67] - randomType = ArrayList<Kla5>
2021-03-12 10:10:31,181 [main:302] - generating value of type = ArrayList<Kla5> false depth = 0
2021-03-12 10:10:31,298 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<Kla5>): ArrayList<Kla5> = TODO()
2021-03-12 10:10:31,301 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<Kla5>): ArrayList<Kla5> = TODO()
2021-03-12 10:10:31,555 [main:302] - generating value of type = Collection<Kla5> false depth = 3
2021-03-12 10:10:31,675 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): Collection<Kla5> = TODO()
2021-03-12 10:10:31,677 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): Collection<Kla5> = TODO()
2021-03-12 10:10:31,803 [main:95] - GENERATED = LinkedHashSet<Kla5>()
2021-03-12 10:10:31,803 [main:95] - GENERATED = ArrayList<Kla5>(LinkedHashSet<Kla5>())
2021-03-12 10:10:31,929 [main:106] - GETTING SuspendFunction0<Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:31,974 [main:106] - GETTING SuspendFunction0<Unit> from KFunction1<A, Unit>
2021-03-12 10:10:32,000 [main:106] - GETTING SuspendFunction0<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:32,046 [main:114] - replacement of {
        prope2 = (::baz).name.lowercase()
    } of type SuspendFunction0<Unit> is { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
2021-03-12 10:10:32,159 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:10:32,159 [main:66] - Compilation checking started
2021-03-12 10:10:32,726 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:32,728 [main:107] - replacing (c, Continuation<*>)
2021-03-12 10:10:32,728 [main:50] - replacing c Continuation<*>
2021-03-12 10:10:32,728 [main:54] - Getting value of type Continuation<*>
2021-03-12 10:10:32,844 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 10:10:32,964 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:10:32,968 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:10:33,393 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 10:10:33,512 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:10:33,516 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:10:33,770 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 10:10:33,891 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:10:33,894 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:10:34,287 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:10:34,288 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:10:34,288 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:10:34,288 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 10:10:34,698 [main:67] - randomType = Pair<Kla5, Byte>
2021-03-12 10:10:34,814 [main:302] - generating value of type = Pair<Kla5, Byte> false depth = 0
2021-03-12 10:10:34,934 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla5, second: Byte): Pair<Kla5, Byte> = TODO()
2021-03-12 10:10:34,938 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla5, second: Byte): Pair<Kla5, Byte> = TODO()
2021-03-12 10:10:35,058 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-12 10:10:35,061 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}
2021-03-12 10:10:35,061 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 10:10:35,063 [main:95] - GENERATED = Pair<Kla5, Byte>(Kla5, 90)
2021-03-12 10:10:35,076 [main:106] - GETTING Continuation<*> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:35,119 [main:106] - GETTING Continuation<*> from KFunction1<A, Unit>
2021-03-12 10:10:35,145 [main:106] - GETTING Continuation<*> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:35,189 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 10:10:35,189 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 10:10:35,189 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 10:10:35,189 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 10:10:35,302 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 10:10:35,308 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 10:10:35,578 [main:67] - randomType = Kla2<Short>
2021-03-12 10:10:35,722 [main:302] - generating value of type = Kla2<Short> false depth = 0
2021-03-12 10:10:35,725 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 10:10:36,790 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 10:10:36,793 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}
2021-03-12 10:10:36,811 [main:106] - GETTING EmptyCoroutineContext from KFunction1<A, Unit>
2021-03-12 10:10:36,847 [main:106] - GETTING EmptyCoroutineContext from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:36,901 [main:106] - GETTING EmptyCoroutineContext from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:10:36,949 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 10:10:37,064 [main:141] - TRYING TO REPLACE CONSTANT 248449107
2021-03-12 10:10:37,177 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 10:10:37,177 [main:66] - Compilation checking started
2021-03-12 10:10:37,520 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('〻', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(prope5, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:37,520 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 10:10:37,635 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 10:10:37,635 [main:66] - Compilation checking started
2021-03-12 10:10:38,215 [main:141] - TRYING TO REPLACE CONSTANT '〻'
2021-03-12 10:10:38,388 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 10:10:38,389 [main:66] - Compilation checking started
2021-03-12 10:10:38,936 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst('㖦', '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:38,937 [main:141] - TRYING TO REPLACE CONSTANT '㖦'
2021-03-12 10:10:39,051 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:10:39,052 [main:66] - Compilation checking started
2021-03-12 10:10:39,616 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', true))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:39,616 [main:141] - TRYING TO REPLACE CONSTANT '?'
2021-03-12 10:10:39,730 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 10:10:39,730 [main:66] - Compilation checking started
2021-03-12 10:10:40,072 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), toChar(), true))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:40,073 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 10:10:40,188 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 10:10:40,188 [main:66] - Compilation checking started
2021-03-12 10:10:40,735 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:40,735 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 10:10:40,853 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 10:10:40,854 [main:66] - Compilation checking started
2021-03-12 10:10:41,243 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { prope6} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(-186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:41,244 [main:141] - TRYING TO REPLACE CONSTANT 186422839
2021-03-12 10:10:41,358 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 10:10:41,359 [main:66] - Compilation checking started
2021-03-12 10:10:41,869 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (122).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:41,869 [main:141] - TRYING TO REPLACE CONSTANT 122
2021-03-12 10:10:41,987 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 10:10:41,987 [main:66] - Compilation checking started
2021-03-12 10:10:42,527 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:42,527 [main:141] - TRYING TO REPLACE CONSTANT ''
2021-03-12 10:10:42,647 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 10:10:42,647 [main:66] - Compilation checking started
2021-03-12 10:10:43,032 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast(toChar(), "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { false}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:43,033 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 10:10:43,149 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 10:10:43,150 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 10:10:43,265 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 10:10:43,265 [main:66] - Compilation checking started
2021-03-12 10:10:43,781 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:43,781 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 10:10:43,895 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 10:10:43,896 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 10:10:44,032 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 10:10:44,032 [main:66] - Compilation checking started
2021-03-12 10:10:44,410 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(-2062920700, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(endsWith("vldsk", false))) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:44,411 [main:141] - TRYING TO REPLACE CONSTANT 2062920700
2021-03-12 10:10:44,548 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 10:10:44,548 [main:66] - Compilation checking started
2021-03-12 10:10:45,159 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, -1153379107)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:45,160 [main:141] - TRYING TO REPLACE CONSTANT 1153379107
2021-03-12 10:10:45,309 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 10:10:45,310 [main:66] - Compilation checking started
2021-03-12 10:10:45,874 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(994585255, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:45,874 [main:141] - TRYING TO REPLACE CONSTANT 994585255
2021-03-12 10:10:45,989 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 10:10:45,990 [main:66] - Compilation checking started
2021-03-12 10:10:46,530 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(-1438060187, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:46,530 [main:141] - TRYING TO REPLACE CONSTANT 1438060187
2021-03-12 10:10:46,651 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 10:10:46,651 [main:66] - Compilation checking started
2021-03-12 10:10:47,193 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:47,193 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 10:10:47,313 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 10:10:47,313 [main:41] - AFTER TRY 1 res = import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}


2021-03-12 10:10:47,548 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:10:47,549 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}
2021-03-12 10:10:47,661 [main:194] - Type params = []
2021-03-12 10:10:47,775 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 10:10:47,895 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:10:47,899 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:10:48,166 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 10:10:48,286 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:10:48,290 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:10:48,680 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:10:48,681 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:10:48,681 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:10:48,681 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 10:10:49,192 [main:302] - generating value of type = Kla5 false depth = 1
2021-03-12 10:10:49,195 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}
2021-03-12 10:10:49,195 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:10:49,195 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}
2021-03-12 10:10:49,195 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}
2021-03-12 10:10:49,195 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}
2021-03-12 10:10:49,196 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}
2021-03-12 10:10:49,196 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-12 10:10:49,459 [main:43] - GENERATING CALL OF fun Int.foo(s: String) {}
2021-03-12 10:10:49,462 [main:61] - WITHOUT TYPE PARAMS = fun Int.foo(s: String) {}
2021-03-12 10:10:49,657 [main:302] - generating value of type = String true depth = 1
2021-03-12 10:10:49,659 [main:302] - generating value of type = Int true depth = 1
2021-03-12 10:10:49,662 [main:95] - GENERATED = -338857277.foo("fgagh")
2021-03-12 10:10:49,781 [main:43] - GENERATING CALL OF fun baz(name: String) {}
2021-03-12 10:10:49,784 [main:61] - WITHOUT TYPE PARAMS = fun baz(name: String) {}
2021-03-12 10:10:49,906 [main:302] - generating value of type = String true depth = 1
2021-03-12 10:10:49,909 [main:95] - GENERATED = baz("xlncj")
2021-03-12 10:10:50,022 [main:43] - GENERATING CALL OF fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}
2021-03-12 10:10:50,025 [main:61] - WITHOUT TYPE PARAMS = fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}
2021-03-12 10:10:50,279 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-12 10:10:50,281 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 10:10:50,403 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:10:50,406 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:10:50,659 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 10:10:50,662 [main:95] - GENERATED = check(false)
2021-03-12 10:10:50,662 [main:95] - GENERATED = fu1({ check(false)})
2021-03-12 10:10:50,776 [main:43] - GENERATING CALL OF fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}
2021-03-12 10:10:50,910 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu2(x: (Short) -> Unit): Continuation<Short> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}
2021-03-12 10:10:51,181 [main:302] - generating value of type = Function1<Short, Unit> false depth = 1
2021-03-12 10:10:51,184 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 10:10:51,190 [main:95] - GENERATED = fu2<Short>({a: Short -> println()})
2021-03-12 10:10:51,308 [main:43] - GENERATING CALL OF fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}
2021-03-12 10:10:51,310 [main:61] - WITHOUT TYPE PARAMS = fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}
2021-03-12 10:10:51,565 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 10:10:51,568 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 10:10:51,688 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:10:51,691 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:10:52,074 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 10:10:52,077 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 10:10:52,079 [main:302] - generating value of type = Any false depth = 6
2021-03-12 10:10:52,080 [main:95] - GENERATED = check(false, { "fryuy"})
2021-03-12 10:10:52,080 [main:95] - GENERATED = fu3({a: Throwable -> check(false, { "fryuy"})})
2021-03-12 10:10:52,248 [main:43] - Try №1
2021-03-12 10:11:01,338 [main:48] - Already checked
2021-03-12 10:11:04,421 [main:69] - Trying to insert fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
2021-03-12 10:11:04,517 [main:66] - Compilation checking started
2021-03-12 10:11:05,748 [main:103] - Trying to change 237 nodes
2021-03-12 10:11:05,748 [main:107] - replacing (prope9.prope12 != "OK", Boolean)
2021-03-12 10:11:05,749 [main:50] - replacing prope9.prope12 != "OK" Boolean
2021-03-12 10:11:05,749 [main:54] - Getting value of type Boolean
2021-03-12 10:11:05,951 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:11:05,956 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:11:05,956 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:06,360 [main:67] - randomType = Sequence<Byte>
2021-03-12 10:11:06,362 [main:106] - GETTING Boolean from CoroutineContext
2021-03-12 10:11:06,372 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:11:06,372 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f]
2021-03-12 10:11:06,536 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:11:06,536 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:11:06,536 [main:117] - GENERATED CALL = (Kla5.context).equals("cbtbz").equals(Kla1().prope3)
2021-03-12 10:11:06,536 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:11:06,536 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f]
2021-03-12 10:11:06,537 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:11:06,537 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope3).not()
2021-03-12 10:11:06,537 [main:113] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@da3e184], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@9c7d40]]
2021-03-12 10:11:06,537 [main:149] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@da3e184]
2021-03-12 10:11:06,700 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-12 10:11:06,879 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 10:11:06,886 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 10:11:07,477 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 10:11:07,478 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@da3e184]
2021-03-12 10:11:07,478 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:11:07,478 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f]
2021-03-12 10:11:07,478 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:11:07,639 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:11:07,644 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope3).or(false)
2021-03-12 10:11:07,644 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36529853], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5f214f84]]
2021-03-12 10:11:07,644 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36529853]
2021-03-12 10:11:07,803 [main:302] - generating value of type = R false depth = 0
2021-03-12 10:11:08,410 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: HashMap<Long, Kla13>, block: T.()->Kla3): R = TODO()
2021-03-12 10:11:08,417 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: HashMap<Long, Kla13>, block: T.()->Kla3): R = TODO()
2021-03-12 10:11:08,788 [main:302] - generating value of type = HashMap<Long, Kla13> false depth = 3
2021-03-12 10:11:08,967 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Long, Kla13>): HashMap<Long, Kla13> = TODO()
2021-03-12 10:11:08,974 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Long, Kla13>): HashMap<Long, Kla13> = TODO()
2021-03-12 10:11:09,148 [main:302] - generating value of type = Pair<Long, Kla13> false depth = 6
2021-03-12 10:11:09,356 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long, second: Kla13): Pair<Long, Kla13> = TODO()
2021-03-12 10:11:09,363 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long, second: Kla13): Pair<Long, Kla13> = TODO()
2021-03-12 10:11:09,535 [main:302] - generating value of type = Long true depth = 9
2021-03-12 10:11:09,541 [main:302] - generating value of type = Kla13 false depth = 9
2021-03-12 10:11:09,546 [main:112] - generating klass Kla13 text = class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:11:09,546 [main:95] - GENERATED = Pair<Long, Kla13>(-7876345913496420497, Kla13())
2021-03-12 10:11:09,546 [main:95] - GENERATED = linkedMapOf<Long, Kla13>(Pair<Long, Kla13>(-7876345913496420497, Kla13()))
2021-03-12 10:11:09,546 [main:385] - Cant generate call of fun <T, R> with(receiver: HashMap<Long, Kla13>, block: T.()->Kla3): R = TODO()
2021-03-12 10:11:09,707 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 10:11:09,712 [main:302] - generating value of type = R false depth = 1
2021-03-12 10:11:11,126 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Triple<Sequence<A>, ULong, Kla14?>, block: T.()->Kla8): R = TODO()
2021-03-12 10:11:11,133 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Triple<Sequence<A>, ULong, Kla14?>, block: T.()->Kla8): R = TODO()
2021-03-12 10:11:11,520 [main:302] - generating value of type = Triple<Sequence<A>, ULong, Kla14?> false depth = 4
2021-03-12 10:11:11,691 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Sequence<A>, second: ULong, third: Kla14?): Triple<Sequence<A>, ULong, Kla14?> = TODO()
2021-03-12 10:11:11,697 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Sequence<A>, second: ULong, third: Kla14?): Triple<Sequence<A>, ULong, Kla14?> = TODO()
2021-03-12 10:11:11,870 [main:302] - generating value of type = Sequence<A> false depth = 7
2021-03-12 10:11:12,037 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: A): Sequence<A> = TODO()
2021-03-12 10:11:12,044 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: A): Sequence<A> = TODO()
2021-03-12 10:11:12,215 [main:302] - generating value of type = A false depth = 10
2021-03-12 10:11:12,220 [main:112] - generating klass A text = class A {
    fun bar() {}
}
2021-03-12 10:11:12,220 [main:95] - GENERATED = sequenceOf<A>(A())
2021-03-12 10:11:12,220 [main:302] - generating value of type = ULong true depth = 7
2021-03-12 10:11:12,225 [main:302] - generating value of type = Kla14 false depth = 7
2021-03-12 10:11:12,231 [main:112] - generating klass Kla14 text = object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope20 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}
2021-03-12 10:11:12,231 [main:95] - GENERATED = Triple<Sequence<A>, ULong, Kla14?>(sequenceOf<A>(A()), 1363313416511217766.toULong(), Kla14)
2021-03-12 10:11:12,231 [main:385] - Cant generate call of fun <T, R> with(receiver: Triple<Sequence<A>, ULong, Kla14?>, block: T.()->Kla8): R = TODO()
2021-03-12 10:11:12,231 [main:158] - CANT GENERATE PARAMS FOR public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36529853]
2021-03-12 10:11:12,231 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]]
2021-03-12 10:11:12,231 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f]
2021-03-12 10:11:12,231 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:11:12,231 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope3).xor(Kla4().prope6)
2021-03-12 10:11:12,232 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36529853], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@38968a48]]
2021-03-12 10:11:12,232 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@36529853]
2021-03-12 10:11:12,391 [main:302] - generating value of type = R false depth = 0
2021-03-12 10:11:12,993 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Byte?): R = TODO()
2021-03-12 10:11:12,999 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Byte?): R = TODO()
2021-03-12 10:11:13,366 [main:302] - generating value of type = Function0<Byte?> false depth = 3
2021-03-12 10:11:13,372 [main:302] - generating value of type = Byte true depth = 4
2021-03-12 10:11:13,377 [main:95] - GENERATED = run<Byte?>({ -47})
2021-03-12 10:11:13,537 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 10:11:13,542 [main:302] - generating value of type = R false depth = 1
2021-03-12 10:11:13,928 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Float, block: T.()->Kla13): R = TODO()
2021-03-12 10:11:13,935 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Float, block: T.()->Kla13): R = TODO()
2021-03-12 10:11:14,301 [main:302] - generating value of type = Float true depth = 4
2021-03-12 10:11:14,307 [main:385] - Cant generate call of fun <T, R> with(receiver: Float, block: T.()->Kla13): R = TODO()
2021-03-12 10:11:14,307 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@38968a48]
2021-03-12 10:11:14,474 [main:302] - generating value of type = T false depth = 0
2021-03-12 10:11:15,040 [main:43] - GENERATING CALL OF fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<A?>)->kotlin.Unit): T = TODO()
2021-03-12 10:11:15,047 [main:61] - WITHOUT TYPE PARAMS = fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<A?>)->kotlin.Unit): T = TODO()
2021-03-12 10:11:15,446 [main:302] - generating value of type = Function1<Continuation<A?>, Unit> false depth = 3
2021-03-12 10:11:15,452 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 10:11:15,624 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:11:15,631 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:11:16,254 [main:302] - generating value of type = Int true depth = 7
2021-03-12 10:11:16,260 [main:302] - generating value of type = Function1<Int, Unit> false depth = 7
2021-03-12 10:11:16,265 [main:302] - generating value of type = Unit false depth = 8
2021-03-12 10:11:16,432 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:11:16,439 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:11:16,807 [main:302] - generating value of type = Any false depth = 11
2021-03-12 10:11:16,807 [main:95] - GENERATED = println("jxvtg")
2021-03-12 10:11:16,807 [main:95] - GENERATED = repeat(-839694281, {a: Int -> println("jxvtg")})
2021-03-12 10:11:16,808 [main:95] - GENERATED = suspendCoroutine<A?>({a: Continuation<A?> -> repeat(-839694281, {a: Int -> println("jxvtg")})})
2021-03-12 10:11:16,808 [main:117] - GENERATED CALL = (Kla5.context).fold(run<Byte?>({ -47}), {a: R, b: Element -> })?.contains(suspendCoroutine<A?>({a: Continuation<A?> -> repeat(-839694281, {a: Int -> println("jxvtg")})}))
2021-03-12 10:11:16,808 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f]]
2021-03-12 10:11:16,808 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f]
2021-03-12 10:11:16,809 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope3)
2021-03-12 10:11:16,809 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 10:11:16,809 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f]
2021-03-12 10:11:16,971 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:11:16,971 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 10:11:16,971 [main:117] - GENERATED CALL = (Kla5.context).equals("zsijt").and(Kla4().prope6)
2021-03-12 10:11:16,972 [main:114] - replacement of prope9.prope12 != "OK" of type Boolean is (Kla5.context).equals("zsijt").and(Kla4().prope6)
2021-03-12 10:11:17,132 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:17,132 [main:66] - Compilation checking started
2021-03-12 10:11:17,949 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = "FAIL 1"
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = "FAIL 3"
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope20 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:17,952 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 10:11:17,954 [main:50] - replacing {} Function0<Unit>
2021-03-12 10:11:17,954 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:11:18,121 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:11:18,126 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:11:18,302 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:11:18,309 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:11:18,884 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:11:18,889 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:11:18,895 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:11:18,895 [main:95] - GENERATED = check(true, { "ygsbi"})
2021-03-12 10:11:18,895 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "ygsbi"})}
2021-03-12 10:11:18,895 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:19,528 [main:67] - randomType = LinkedHashMap<Kla14, Kla7?>
2021-03-12 10:11:19,724 [main:302] - generating value of type = LinkedHashMap<Kla14, Kla7?> false depth = 0
2021-03-12 10:11:19,898 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla14, Kla7?>): LkedHashMap<Kla14, Kla7?> = TODO()
2021-03-12 10:11:19,905 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla14, Kla7?>): LkedHashMap<Kla14, Kla7?> = TODO()
2021-03-12 10:11:20,076 [main:302] - generating value of type = Pair<Kla14, Kla7?> false depth = 3
2021-03-12 10:11:20,250 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla14, second: Kla7?): Pair<Kla14, Kla7?> = TODO()
2021-03-12 10:11:20,257 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla14, second: Kla7?): Pair<Kla14, Kla7?> = TODO()
2021-03-12 10:11:20,436 [main:302] - generating value of type = Kla14 false depth = 6
2021-03-12 10:11:20,441 [main:112] - generating klass Kla14 text = object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope20 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}
2021-03-12 10:11:20,442 [main:302] - generating value of type = Kla7 false depth = 6
2021-03-12 10:11:20,447 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope12 = "FAIL 1"
}
2021-03-12 10:11:20,447 [main:95] - GENERATED = Pair<Kla14, Kla7?>(Kla14, Kla7())
2021-03-12 10:11:20,447 [main:95] - GENERATED = linkedMapOf<Kla14, Kla7?>(Pair<Kla14, Kla7?>(Kla14, Kla7()))
2021-03-12 10:11:20,637 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:20,700 [main:106] - GETTING Function0<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:20,760 [main:106] - GETTING Function0<Unit> from KFunction1<A, Unit>
2021-03-12 10:11:20,800 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 10:11:20,810 [main:106] - GETTING Function0<Unit> from String
2021-03-12 10:11:20,829 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 10:11:20,835 [main:106] - GETTING Function0<Unit> from Continuation<Short>
2021-03-12 10:11:20,843 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 10:11:20,844 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 10:11:20,863 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 10:11:20,863 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 10:11:20,872 [main:114] - replacement of {} of type Function0<Unit> is Kla4().prope7
2021-03-12 10:11:21,048 [main:33] - Trying to replace LAMBDA_EXPRESSION on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:21,049 [main:66] - Compilation checking started
2021-03-12 10:11:21,833 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = "FAIL 1"
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = "FAIL 3"
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        prope20 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope20 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:21,835 [main:107] - replacing (this.prope16, Any?)
2021-03-12 10:11:21,836 [main:50] - replacing this.prope16 Any?
2021-03-12 10:11:21,837 [main:54] - Getting value of type Any?
2021-03-12 10:11:22,012 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:11:22,012 [main:58] - GENERATED VALUE OF TYPE Any? = "xmgah"
2021-03-12 10:11:22,012 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:22,228 [main:67] - randomType = List<Boolean>
2021-03-12 10:11:22,229 [main:106] - GETTING Any? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:22,273 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 10:11:22,282 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 10:11:22,290 [main:106] - GETTING Any? from Boolean
2021-03-12 10:11:22,299 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 10:11:22,313 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:11:22,319 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:11:22,319 [main:106] - GETTING Any? from KFunction1<A, Unit>
2021-03-12 10:11:22,344 [main:106] - GETTING Any? from Any?
2021-03-12 10:11:22,348 [main:106] - GETTING Any? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:22,392 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:11:22,393 [main:106] - GETTING Any? from String
2021-03-12 10:11:22,410 [main:106] - GETTING Any? from Continuation<Short>
2021-03-12 10:11:22,417 [main:114] - replacement of this.prope16 of type Any? is "xmgah"
2021-03-12 10:11:22,579 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 10:11:22,579 [main:66] - Compilation checking started
2021-03-12 10:11:23,063 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = "FAIL 1"
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = "FAIL 3"
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
"xmgah" = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        prope20 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope11.prope20 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:23,065 [main:107] - replacing (prope11.prope20, Function0<Unit>)
2021-03-12 10:11:23,066 [main:50] - replacing prope11.prope20 Function0<Unit>
2021-03-12 10:11:23,066 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:11:23,267 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:11:23,272 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:11:23,457 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:11:23,464 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:11:24,029 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:11:24,034 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:11:24,040 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:11:24,040 [main:95] - GENERATED = require(true, { "seimy"})
2021-03-12 10:11:24,040 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "seimy"})}
2021-03-12 10:11:24,040 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:24,434 [main:67] - randomType = Collection<Double>
2021-03-12 10:11:24,434 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 10:11:24,443 [main:114] - replacement of prope11.prope20 of type Function0<Unit> is Kla4().prope7
2021-03-12 10:11:24,608 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:24,609 [main:66] - Compilation checking started
2021-03-12 10:11:25,411 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = "FAIL 1"
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = "FAIL 3"
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        prope20 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:25,413 [main:107] - replacing ({
        prope16.getOrThrow()
    }, Any?)
2021-03-12 10:11:25,414 [main:50] - replacing {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    } Any?
2021-03-12 10:11:25,414 [main:54] - Getting value of type Any?
2021-03-12 10:11:25,580 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:11:25,580 [main:58] - GENERATED VALUE OF TYPE Any? = "ztvrx"
2021-03-12 10:11:25,580 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:25,777 [main:67] - randomType = Byte
2021-03-12 10:11:25,949 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:11:25,986 [main:106] - GETTING Any? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:26,031 [main:106] - GETTING Any? from String
2021-03-12 10:11:26,051 [main:106] - GETTING Any? from Continuation<Short>
2021-03-12 10:11:26,059 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 10:11:26,066 [main:106] - GETTING Any? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:26,112 [main:106] - GETTING Any? from Boolean
2021-03-12 10:11:26,122 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:11:26,128 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 10:11:26,144 [main:106] - GETTING Any? from Any?
2021-03-12 10:11:26,148 [main:106] - GETTING Any? from KFunction1<A, Unit>
2021-03-12 10:11:26,174 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:11:26,175 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 10:11:26,185 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:11:26,185 [main:114] - replacement of {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    } of type Any? is "ztvrx"
2021-03-12 10:11:26,346 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 10:11:26,346 [main:66] - Compilation checking started
2021-03-12 10:11:26,356 [main:71] - Wrong syntax or breaks conditions
2021-03-12 10:11:26,356 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = "FAIL 1"
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = "FAIL 3"
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) "ztvrx"
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        prope20 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:26,358 [main:107] - replacing (prope20, Function0<Unit>)
2021-03-12 10:11:26,358 [main:50] - replacing prope20 Function0<Unit>
2021-03-12 10:11:26,358 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:11:26,522 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:11:26,527 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:11:26,728 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:11:26,734 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:11:27,304 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:11:27,310 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:11:27,315 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:11:27,315 [main:95] - GENERATED = check(true, { "gaouz"})
2021-03-12 10:11:27,315 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "gaouz"})}
2021-03-12 10:11:27,316 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:27,513 [main:67] - randomType = UShort
2021-03-12 10:11:27,677 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 10:11:27,726 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 10:11:27,736 [main:106] - GETTING Function0<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:27,785 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 10:11:27,792 [main:114] - replacement of prope20 of type Function0<Unit> is Kla4().prope7
2021-03-12 10:11:27,955 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:27,955 [main:66] - Compilation checking started
2021-03-12 10:11:28,743 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = "FAIL 1"
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = "FAIL 3"
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:28,745 [main:107] - replacing ("OK", String)
2021-03-12 10:11:28,746 [main:50] - replacing "OK" String
2021-03-12 10:11:28,746 [main:54] - Getting value of type String
2021-03-12 10:11:28,924 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:11:28,930 [main:58] - GENERATED VALUE OF TYPE String = "hueuw"
2021-03-12 10:11:28,930 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:29,325 [main:67] - randomType = Short?
2021-03-12 10:11:29,493 [main:302] - generating value of type = Short true depth = 0
2021-03-12 10:11:29,533 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@778e52d0]
2021-03-12 10:11:29,533 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c25a5b1]
2021-03-12 10:11:29,533 [main:78] - Generated call from random type = (16272)?.toChar().plus(var prope2 =
2021-03-12 10:11:29,534 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:11:29,541 [main:106] - GETTING String from Function0<Unit>
2021-03-12 10:11:29,549 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 10:11:29,557 [main:106] - GETTING String from Boolean
2021-03-12 10:11:29,564 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]]
2021-03-12 10:11:29,564 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:11:29,564 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:11:29,728 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:11:29,733 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)
2021-03-12 10:11:29,733 [main:114] - replacement of "OK" of type String is (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)
2021-03-12 10:11:29,898 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:29,898 [main:66] - Compilation checking started
2021-03-12 10:11:30,709 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = "FAIL 1"
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = "FAIL 3"
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:30,712 [main:107] - replacing ("Continuation " + c + " is not subtype of CoroutineStackFrame", String)
2021-03-12 10:11:30,713 [main:50] - replacing "Continuation " + c + " is not subtype of CoroutineStackFrame" String
2021-03-12 10:11:30,713 [main:54] - Getting value of type String
2021-03-12 10:11:30,878 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:11:30,883 [main:58] - GENERATED VALUE OF TYPE String = "zrihn"
2021-03-12 10:11:30,883 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:32,139 [main:67] - randomType = HashSet<Kla2<Kla11<String?>?>>?
2021-03-12 10:11:32,316 [main:302] - generating value of type = HashSet<Kla2<Kla11<String?>?>> false depth = 0
2021-03-12 10:11:32,493 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Kla2<Kla11<Strg?>?>> = TODO()
2021-03-12 10:11:32,500 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Kla2<Kla11<Strg?>?>> = TODO()
2021-03-12 10:11:32,690 [main:95] - GENERATED = linkedSetOf<Kla2<Kla11<String?>?>>()
2021-03-12 10:11:32,847 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@2ddae070]
2021-03-12 10:11:32,847 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1ced415b]
2021-03-12 10:11:32,847 [main:78] - Generated call from random type = (linkedSetOf<Kla2<Kla11<String?>?>>())?.toArray().contentDeepToString()
2021-03-12 10:11:32,848 [main:106] - GETTING String from KFunction1<A, Unit>
2021-03-12 10:11:32,877 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ff4ab1b]]
2021-03-12 10:11:32,877 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ff4ab1b]
2021-03-12 10:11:33,043 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:11:33,219 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:11:33,225 [main:117] - GENERATED CALL = (A::bar).name.padStart(1032454611, '')
2021-03-12 10:11:33,225 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]]
2021-03-12 10:11:33,225 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]
2021-03-12 10:11:33,395 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:11:33,401 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:11:33,407 [main:117] - GENERATED CALL = (A::bar).name.replaceFirstChar({a: Char -> '랜'})
2021-03-12 10:11:33,407 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]]
2021-03-12 10:11:33,407 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]
2021-03-12 10:11:33,585 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:11:33,591 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:11:33,597 [main:117] - GENERATED CALL = (A::bar).name.dropLastWhile({a: Char -> true})
2021-03-12 10:11:33,597 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:11:33,597 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:11:33,762 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:11:33,767 [main:117] - GENERATED CALL = (A::bar).name.substringBeforeLast('ᩖ', fu0())
2021-03-12 10:11:33,767 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]]
2021-03-12 10:11:33,767 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]
2021-03-12 10:11:33,972 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:11:33,977 [main:117] - GENERATED CALL = (A::bar).name.replaceBefore('崞', var prope2 =
2021-03-12 10:11:33,978 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]]
2021-03-12 10:11:33,978 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]
2021-03-12 10:11:33,978 [main:117] - GENERATED CALL = (A::bar).name.concat(fu0())
2021-03-12 10:11:33,978 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]]
2021-03-12 10:11:33,978 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]
2021-03-12 10:11:34,145 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:11:34,151 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:11:34,157 [main:117] - GENERATED CALL = (A::bar).name.takeWhile({a: Char -> true})
2021-03-12 10:11:34,157 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bd3920c]]
2021-03-12 10:11:34,157 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bd3920c]
2021-03-12 10:11:34,322 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:11:34,327 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:11:34,333 [main:117] - GENERATED CALL = (A::bar).name.filter({a: Char -> true})
2021-03-12 10:11:34,333 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]]
2021-03-12 10:11:34,333 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]
2021-03-12 10:11:34,499 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:11:34,670 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:11:34,676 [main:117] - GENERATED CALL = (A::bar).name.padEnd(-852477066, '䥖')
2021-03-12 10:11:34,676 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]]
2021-03-12 10:11:34,676 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]
2021-03-12 10:11:34,849 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:11:34,855 [main:117] - GENERATED CALL = (A::bar).name.replaceBeforeLast('顲', fu0(), fu0())
2021-03-12 10:11:34,855 [main:114] - replacement of "Continuation " + c + " is not subtype of CoroutineStackFrame" of type String is (A::bar).name.substringBeforeLast('ᩖ', fu0())
2021-03-12 10:11:35,021 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:35,022 [main:66] - Compilation checking started
2021-03-12 10:11:35,512 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = "FAIL 1"
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = "FAIL 3"
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((A::bar).name.substringBeforeLast('ᩖ', fu0()))
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:35,515 [main:107] - replacing ("FAIL 1", String)
2021-03-12 10:11:35,515 [main:50] - replacing "FAIL 1" String
2021-03-12 10:11:35,515 [main:54] - Getting value of type String
2021-03-12 10:11:35,688 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:11:35,697 [main:58] - GENERATED VALUE OF TYPE String = "sbfvd"
2021-03-12 10:11:35,697 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:36,320 [main:67] - randomType = Kla11<Array<Double>>
2021-03-12 10:11:36,485 [main:302] - generating value of type = Kla11<Array<Double>> false depth = 0
2021-03-12 10:11:36,490 [main:112] - generating klass Kla11 text = abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 10:11:37,982 [main:302] - generating value of type = Kla14 false depth = 2
2021-03-12 10:11:37,987 [main:112] - generating klass Kla14 text = object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}
2021-03-12 10:11:38,004 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:11:38,010 [main:106] - GETTING String from Boolean
2021-03-12 10:11:38,018 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]]
2021-03-12 10:11:38,018 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:11:38,182 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:11:38,187 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:11:38,353 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:11:38,359 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(false).toString(542264369)
2021-03-12 10:11:38,359 [main:114] - replacement of "FAIL 1" of type String is (Kla4().prope6).compareTo(false).toString(542264369)
2021-03-12 10:11:38,524 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:38,524 [main:66] - Compilation checking started
2021-03-12 10:11:39,340 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = "FAIL 3"
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:39,343 [main:107] - replacing (prope11.prope19, Boolean)
2021-03-12 10:11:39,343 [main:50] - replacing prope11.prope19 Boolean
2021-03-12 10:11:39,343 [main:54] - Getting value of type Boolean
2021-03-12 10:11:39,518 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:11:39,524 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:11:39,524 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:39,546 [main:67] - randomType = Kla13
2021-03-12 10:11:39,713 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-12 10:11:39,718 [main:112] - generating klass Kla13 text = class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:11:39,727 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:11:39,727 [main:78] - Generated call from random type = (Kla13()).prope20.equals(Kla1().prope3)
2021-03-12 10:11:39,728 [main:106] - GETTING Boolean from Function0<Unit>
2021-03-12 10:11:39,736 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:11:39,736 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:11:39,906 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:11:39,906 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:11:39,906 [main:117] - GENERATED CALL = (Kla4().prope7).equals("bponx").equals(Kla1().prope3)
2021-03-12 10:11:39,906 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 10:11:39,906 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:11:40,076 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:11:40,077 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 10:11:40,077 [main:117] - GENERATED CALL = (Kla4().prope7).equals("bewlz").and(Kla4().prope6)
2021-03-12 10:11:40,077 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:11:40,077 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:11:40,077 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:11:40,243 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:11:40,248 [main:117] - GENERATED CALL = (Kla4().prope7).equals(Kla1().prope3).or(true)
2021-03-12 10:11:40,249 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]]
2021-03-12 10:11:40,249 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:11:40,422 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:11:40,423 [main:117] - GENERATED CALL = (Kla4().prope7).equals("tfsbd")
2021-03-12 10:11:40,423 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]]
2021-03-12 10:11:40,423 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:11:40,423 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:11:40,423 [main:117] - GENERATED CALL = (Kla4().prope7).equals(Kla1().prope3).xor(Kla4().prope6)
2021-03-12 10:11:40,423 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:11:40,423 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:11:40,423 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:11:40,423 [main:117] - GENERATED CALL = (Kla4().prope7).equals(Kla1().prope3).not()
2021-03-12 10:11:40,424 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@3e53e61b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6d8a7feb]]
2021-03-12 10:11:40,424 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@3e53e61b]
2021-03-12 10:11:40,424 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6d8a7feb]
2021-03-12 10:11:40,424 [main:117] - GENERATED CALL = (Kla4().prope7).invoke().equals(Kla1().prope3)
2021-03-12 10:11:40,424 [main:114] - replacement of prope11.prope19 of type Boolean is (Kla4().prope7).invoke().equals(Kla1().prope3)
2021-03-12 10:11:40,590 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:40,591 [main:66] - Compilation checking started
2021-03-12 10:11:41,080 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = "FAIL 3"
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            (Kla4().prope7).invoke().equals(Kla1().prope3) = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:41,083 [main:107] - replacing (prope16.exceptionOrNull(), Throwable?)
2021-03-12 10:11:41,084 [main:50] - replacing prope16.exceptionOrNull() Throwable?
2021-03-12 10:11:41,084 [main:54] - Getting value of type Throwable?
2021-03-12 10:11:41,282 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 10:11:41,291 [main:58] - GENERATED VALUE OF TYPE Throwable? = ArithmeticException()
2021-03-12 10:11:41,291 [main:61] - GENERATED IS CALL =true
2021-03-12 10:11:41,518 [main:67] - randomType = Kla0?
2021-03-12 10:11:41,686 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 10:11:41,691 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}
2021-03-12 10:11:41,856 [main:194] - Type params = []
2021-03-12 10:11:42,031 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 10:11:42,203 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:11:42,210 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:11:42,627 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 10:11:42,806 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:11:42,813 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:11:43,417 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 10:11:43,601 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:11:43,608 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:11:44,214 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 10:11:44,394 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:11:44,400 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:11:45,074 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:11:45,074 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:11:45,074 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:11:45,074 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:11:45,089 [main:106] - GETTING Throwable? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:45,134 [main:106] - GETTING Throwable? from Continuation<Any?>
2021-03-12 10:11:45,141 [main:106] - GETTING Throwable? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:45,184 [main:106] - GETTING Throwable? from KFunction1<A, Unit>
2021-03-12 10:11:45,210 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 10:11:45,216 [main:106] - GETTING Throwable? from Boolean
2021-03-12 10:11:45,227 [main:106] - GETTING Throwable? from Any?
2021-03-12 10:11:45,230 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 10:11:45,231 [main:106] - GETTING Throwable? from String
2021-03-12 10:11:45,248 [main:106] - GETTING Throwable? from EmptyCoroutineContext
2021-03-12 10:11:45,263 [main:106] - GETTING Throwable? from Continuation<Short>
2021-03-12 10:11:45,271 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 10:11:45,271 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-12 10:11:45,279 [main:114] - replacement of prope16.exceptionOrNull() of type Throwable? is ArithmeticException()
2021-03-12 10:11:45,442 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:11:45,445 [main:107] - replacing ("FAIL 3", String)
2021-03-12 10:11:45,445 [main:50] - replacing "FAIL 3" String
2021-03-12 10:11:45,445 [main:54] - Getting value of type String
2021-03-12 10:11:45,608 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:11:45,613 [main:58] - GENERATED VALUE OF TYPE String = "noorm"
2021-03-12 10:11:45,614 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:45,856 [main:67] - randomType = Map<Kla13, Char>
2021-03-12 10:11:45,857 [main:106] - GETTING String from KFunction1<A, Unit>
2021-03-12 10:11:45,886 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]]
2021-03-12 10:11:45,886 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]
2021-03-12 10:11:45,886 [main:117] - GENERATED CALL = (A::bar).name.trimIndent()
2021-03-12 10:11:45,886 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]]
2021-03-12 10:11:45,886 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]
2021-03-12 10:11:46,049 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:11:46,228 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:11:46,398 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:11:46,573 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:11:46,580 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:11:46,962 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:11:46,968 [main:95] - GENERATED = StringBuilder(-1806775588)
2021-03-12 10:11:46,968 [main:117] - GENERATED CALL = (A::bar).name.replaceRange(-1419818293, -893983444, StringBuilder(-1806775588))
2021-03-12 10:11:46,969 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd90b7c]]
2021-03-12 10:11:46,969 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd90b7c]
2021-03-12 10:11:46,969 [main:117] - GENERATED CALL = (A::bar).name.replaceIndent(fu0())
2021-03-12 10:11:46,969 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]]
2021-03-12 10:11:46,969 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]
2021-03-12 10:11:46,969 [main:117] - GENERATED CALL = (A::bar).name.uppercase()
2021-03-12 10:11:46,969 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]]
2021-03-12 10:11:46,969 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]
2021-03-12 10:11:47,134 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:11:47,140 [main:117] - GENERATED CALL = (A::bar).name.drop(-1353246459)
2021-03-12 10:11:47,140 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e266ddd]]
2021-03-12 10:11:47,140 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e266ddd]
2021-03-12 10:11:47,305 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:11:47,310 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:11:47,316 [main:117] - GENERATED CALL = (A::bar).name.dropWhile({a: Char -> false})
2021-03-12 10:11:47,316 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60659f12]]
2021-03-12 10:11:47,317 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60659f12]
2021-03-12 10:11:47,317 [main:117] - GENERATED CALL = (A::bar).name.plus(Kla1().prope3)
2021-03-12 10:11:47,317 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]]
2021-03-12 10:11:47,317 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]
2021-03-12 10:11:47,481 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:11:47,486 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:11:47,492 [main:117] - GENERATED CALL = (A::bar).name.takeWhile({a: Char -> false})
2021-03-12 10:11:47,492 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]]
2021-03-12 10:11:47,492 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]
2021-03-12 10:11:47,658 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:11:47,666 [main:117] - GENERATED CALL = (A::bar).name.removeSurrounding("mbmuu")
2021-03-12 10:11:47,666 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]]
2021-03-12 10:11:47,666 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]
2021-03-12 10:11:47,666 [main:117] - GENERATED CALL = (A::bar).name.lowercase()
2021-03-12 10:11:47,666 [main:114] - replacement of "FAIL 3" of type String is (A::bar).name.uppercase()
2021-03-12 10:11:47,830 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:47,830 [main:66] - Compilation checking started
2021-03-12 10:11:48,678 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:48,681 [main:107] - replacing (", got ", String)
2021-03-12 10:11:48,682 [main:50] - replacing ", got " String
2021-03-12 10:11:48,683 [main:54] - Getting value of type String
2021-03-12 10:11:48,848 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:11:48,853 [main:58] - GENERATED VALUE OF TYPE String = "yefaf"
2021-03-12 10:11:48,854 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:49,255 [main:67] - randomType = Short?
2021-03-12 10:11:49,439 [main:302] - generating value of type = Short true depth = 0
2021-03-12 10:11:49,496 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@778e52d0]
2021-03-12 10:11:49,496 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@710dff5e]
2021-03-12 10:11:49,497 [main:78] - Generated call from random type = (29627)?.toChar().titlecase()
2021-03-12 10:11:49,497 [main:114] - replacement of ", got " of type String is (29627)?.toChar().titlecase()
2021-03-12 10:11:49,666 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:49,667 [main:66] - Compilation checking started
2021-03-12 10:11:50,449 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:50,451 [main:107] - replacing (prope18, Int)
2021-03-12 10:11:50,451 [main:50] - replacing prope18 Int
2021-03-12 10:11:50,451 [main:54] - Getting value of type Int
2021-03-12 10:11:50,617 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:11:50,623 [main:58] - GENERATED VALUE OF TYPE Int = 470656552
2021-03-12 10:11:50,623 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:50,823 [main:67] - randomType = Double
2021-03-12 10:11:50,990 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:11:51,027 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a7554df]
2021-03-12 10:11:51,027 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3513c8bd]
2021-03-12 10:11:51,027 [main:78] - Generated call from random type = (0.24055097619911647).toInt().countOneBits()
2021-03-12 10:11:51,027 [main:114] - replacement of prope18 of type Int is (0.24055097619911647).toInt().countOneBits()
2021-03-12 10:11:51,193 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:51,193 [main:66] - Compilation checking started
2021-03-12 10:11:51,689 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(0.24055097619911647).toInt().countOneBits() = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:51,691 [main:107] - replacing (prope16, Result<Any?>)
2021-03-12 10:11:51,691 [main:50] - replacing prope16 Result<Any?>
2021-03-12 10:11:51,691 [main:54] - Getting value of type Result<Any?>
2021-03-12 10:11:51,857 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 10:11:52,032 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 10:11:52,039 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 10:11:52,442 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 10:11:52,448 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:11:52,448 [main:95] - GENERATED = runCatching<Any?>({ "gxyri"})
2021-03-12 10:11:52,448 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "gxyri"})
2021-03-12 10:11:52,448 [main:61] - GENERATED IS CALL =true
2021-03-12 10:11:53,072 [main:67] - randomType = HashMap<UByte, Boolean?>
2021-03-12 10:11:53,237 [main:302] - generating value of type = HashMap<UByte, Boolean?> false depth = 0
2021-03-12 10:11:53,413 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<UByte, Boolean?> = TODO()
2021-03-12 10:11:53,420 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<UByte, Boolean?> = TODO()
2021-03-12 10:11:53,597 [main:95] - GENERATED = hashMapOf<UByte, Boolean?>()
2021-03-12 10:11:53,701 [main:106] - GETTING Result<Any?> from Any?
2021-03-12 10:11:53,706 [main:106] - GETTING Result<Any?> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:53,750 [main:106] - GETTING Result<Any?> from KFunction1<A, Unit>
2021-03-12 10:11:53,778 [main:106] - GETTING Result<Any?> from Function0<Unit>
2021-03-12 10:11:53,787 [main:106] - GETTING Result<Any?> from Boolean
2021-03-12 10:11:53,798 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 10:11:53,805 [main:106] - GETTING Result<Any?> from Continuation<Any?>
2021-03-12 10:11:53,813 [main:106] - GETTING Result<Any?> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:53,859 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 10:11:53,860 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 10:11:53,861 [main:106] - GETTING Result<Any?> from EmptyCoroutineContext
2021-03-12 10:11:53,879 [main:106] - GETTING Result<Any?> from String
2021-03-12 10:11:53,899 [main:106] - GETTING Result<Any?> from Continuation<Short>
2021-03-12 10:11:53,906 [main:114] - replacement of prope16 of type Result<Any?> is runCatching<Any?>({ "gxyri"})
2021-03-12 10:11:54,070 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:11:54,070 [main:66] - Compilation checking started
2021-03-12 10:11:55,001 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:55,003 [main:107] - replacing (prope12, String)
2021-03-12 10:11:55,004 [main:50] - replacing prope12 String
2021-03-12 10:11:55,004 [main:54] - Getting value of type String
2021-03-12 10:11:55,179 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:11:55,185 [main:58] - GENERATED VALUE OF TYPE String = "euhne"
2021-03-12 10:11:55,185 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:55,208 [main:67] - randomType = Kla10
2021-03-12 10:11:55,379 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-12 10:11:55,385 [main:112] - generating klass Kla10 text = class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}
2021-03-12 10:11:55,403 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]
2021-03-12 10:11:55,403 [main:78] - Generated call from random type = (Kla10()).prope16?.toString()!!
2021-03-12 10:11:55,404 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:55,447 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]]
2021-03-12 10:11:55,447 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]
2021-03-12 10:11:55,617 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:11:55,622 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:11:55,628 [main:117] - GENERATED CALL = (::baz).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 10:11:55,629 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]]
2021-03-12 10:11:55,629 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]
2021-03-12 10:11:55,794 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:11:55,799 [main:117] - GENERATED CALL = (::baz).name.dropLast(-367623209)
2021-03-12 10:11:55,800 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]]
2021-03-12 10:11:55,800 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]
2021-03-12 10:11:55,965 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:11:55,971 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:11:55,977 [main:117] - GENERATED CALL = (::baz).name.takeWhile({a: Char -> false})
2021-03-12 10:11:55,977 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60659f12]]
2021-03-12 10:11:55,977 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60659f12]
2021-03-12 10:11:55,977 [main:117] - GENERATED CALL = (::baz).name.plus(Kla1().prope3)
2021-03-12 10:11:55,977 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]]
2021-03-12 10:11:55,977 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]
2021-03-12 10:11:56,157 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:11:56,163 [main:117] - GENERATED CALL = (::baz).name.drop(1964213506)
2021-03-12 10:11:56,163 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]]
2021-03-12 10:11:56,163 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]
2021-03-12 10:11:56,163 [main:117] - GENERATED CALL = (::baz).name.capitalize()
2021-03-12 10:11:56,163 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]]
2021-03-12 10:11:56,164 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]
2021-03-12 10:11:56,331 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:11:56,340 [main:117] - GENERATED CALL = (::baz).name.removeSuffix("cjlzj")
2021-03-12 10:11:56,340 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]]
2021-03-12 10:11:56,340 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]
2021-03-12 10:11:56,340 [main:117] - GENERATED CALL = (::baz).name.trimStart()
2021-03-12 10:11:56,340 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]]
2021-03-12 10:11:56,340 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]
2021-03-12 10:11:56,340 [main:117] - GENERATED CALL = (::baz).name.reversed()
2021-03-12 10:11:56,340 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]]
2021-03-12 10:11:56,340 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]
2021-03-12 10:11:56,340 [main:117] - GENERATED CALL = (::baz).name.uppercase()
2021-03-12 10:11:56,341 [main:114] - replacement of prope12 of type String is (::baz).name.plus(Kla1().prope3)
2021-03-12 10:11:56,508 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:56,509 [main:66] - Compilation checking started
2021-03-12 10:11:57,015 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.(::baz).name.plus(Kla1().prope3)
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:57,018 [main:107] - replacing (prope12, String)
2021-03-12 10:11:57,018 [main:50] - replacing prope12 String
2021-03-12 10:11:57,019 [main:54] - Getting value of type String
2021-03-12 10:11:57,190 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:11:57,196 [main:58] - GENERATED VALUE OF TYPE String = "wbhag"
2021-03-12 10:11:57,196 [main:61] - GENERATED IS CALL =false
2021-03-12 10:11:57,219 [main:67] - randomType = Kla7
2021-03-12 10:11:57,386 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 10:11:57,391 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}
2021-03-12 10:11:57,396 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bb800b5]
2021-03-12 10:11:57,565 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:11:57,738 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:11:57,744 [main:78] - Generated call from random type = (Kla7()).prope12.replaceAfterLast('顊', "scwzx", fu0())
2021-03-12 10:11:57,745 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 10:11:57,760 [main:106] - GETTING String from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:11:57,804 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]]
2021-03-12 10:11:57,804 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]
2021-03-12 10:11:57,971 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:11:57,976 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:11:57,982 [main:117] - GENERATED CALL = (Int::foo).name.takeLastWhile({a: Char -> true})
2021-03-12 10:11:57,982 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]]
2021-03-12 10:11:57,982 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]
2021-03-12 10:11:57,982 [main:117] - GENERATED CALL = (Int::foo).name.toUpperCase()
2021-03-12 10:11:57,982 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]]
2021-03-12 10:11:57,983 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]
2021-03-12 10:11:58,150 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:11:58,156 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:11:58,162 [main:117] - GENERATED CALL = (Int::foo).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 10:11:58,162 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c84f1f]]
2021-03-12 10:11:58,162 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c84f1f]
2021-03-12 10:11:58,329 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:11:58,504 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:11:58,510 [main:117] - GENERATED CALL = (Int::foo).name.replaceIndentByMargin("qwhdh", "ehutm")
2021-03-12 10:11:58,510 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd90b7c]]
2021-03-12 10:11:58,510 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd90b7c]
2021-03-12 10:11:58,677 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:11:58,683 [main:117] - GENERATED CALL = (Int::foo).name.replaceIndent("jmnfc")
2021-03-12 10:11:58,683 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]]
2021-03-12 10:11:58,683 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]
2021-03-12 10:11:58,849 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:11:58,855 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:11:58,861 [main:117] - GENERATED CALL = (Int::foo).name.replaceFirstChar({a: Char -> '⥌'})
2021-03-12 10:11:58,861 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]]
2021-03-12 10:11:58,861 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]
2021-03-12 10:11:58,861 [main:117] - GENERATED CALL = (Int::foo).name.trimStart()
2021-03-12 10:11:58,861 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]]
2021-03-12 10:11:58,861 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]
2021-03-12 10:11:58,861 [main:117] - GENERATED CALL = (Int::foo).name.trimEnd()
2021-03-12 10:11:58,861 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]]
2021-03-12 10:11:58,861 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]
2021-03-12 10:11:59,031 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:11:59,040 [main:117] - GENERATED CALL = (Int::foo).name.removePrefix("eyuzt")
2021-03-12 10:11:59,040 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]]
2021-03-12 10:11:59,040 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]
2021-03-12 10:11:59,040 [main:117] - GENERATED CALL = (Int::foo).name.decapitalize()
2021-03-12 10:11:59,040 [main:114] - replacement of prope12 of type String is (Int::foo).name.takeLastWhile({a: Char -> true})
2021-03-12 10:11:59,209 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:11:59,210 [main:66] - Compilation checking started
2021-03-12 10:11:59,701 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.(Int::foo).name.takeLastWhile({a: Char -> true}) != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(prope15) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:11:59,703 [main:107] - replacing (prope15, Kla7)
2021-03-12 10:11:59,704 [main:50] - replacing prope15 Kla7
2021-03-12 10:11:59,704 [main:54] - Getting value of type Kla7
2021-03-12 10:11:59,870 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 10:11:59,876 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}
2021-03-12 10:11:59,876 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 10:11:59,876 [main:61] - GENERATED IS CALL =true
2021-03-12 10:12:00,295 [main:67] - randomType = UByte?
2021-03-12 10:12:00,463 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:12:00,502 [main:106] - GETTING Kla7 from EmptyCoroutineContext
2021-03-12 10:12:00,516 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:12:00,522 [main:106] - GETTING Kla7 from Function0<Unit>
2021-03-12 10:12:00,531 [main:106] - GETTING Kla7 from KFunction1<A, Unit>
2021-03-12 10:12:00,557 [main:106] - GETTING Kla7 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:00,602 [main:106] - GETTING Kla7 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:00,649 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:12:00,650 [main:106] - GETTING Kla7 from Any?
2021-03-12 10:12:00,654 [main:106] - GETTING Kla7 from String
2021-03-12 10:12:00,671 [main:106] - GETTING Kla7 from Boolean
2021-03-12 10:12:00,680 [main:106] - GETTING Kla7 from Continuation<Short>
2021-03-12 10:12:00,689 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:12:00,690 [main:106] - GETTING Kla7 from Continuation<Any?>
2021-03-12 10:12:00,697 [main:114] - replacement of prope15 of type Kla7 is Kla7()
2021-03-12 10:12:00,863 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:12:00,864 [main:66] - Compilation checking started
2021-03-12 10:12:01,663 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:01,666 [main:107] - replacing (prope18, Int)
2021-03-12 10:12:01,666 [main:50] - replacing prope18 Int
2021-03-12 10:12:01,666 [main:54] - Getting value of type Int
2021-03-12 10:12:01,843 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:01,849 [main:58] - GENERATED VALUE OF TYPE Int = -1804260302
2021-03-12 10:12:01,849 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:02,489 [main:67] - randomType = Function1<Int?, A>
2021-03-12 10:12:02,490 [main:106] - GETTING Int from CoroutineContext
2021-03-12 10:12:02,496 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]]
2021-03-12 10:12:02,496 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@457c557f]
2021-03-12 10:12:02,496 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:12:02,496 [main:117] - GENERATED CALL = (Kla0().context).equals(Kla1().prope3).compareTo(Kla4().prope6)
2021-03-12 10:12:02,496 [main:114] - replacement of prope18 of type Int is -1804260302
2021-03-12 10:12:02,662 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 10:12:02,662 [main:66] - Compilation checking started
2021-03-12 10:12:03,169 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        -1804260302++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:03,172 [main:107] - replacing (prope12, String)
2021-03-12 10:12:03,173 [main:50] - replacing prope12 String
2021-03-12 10:12:03,173 [main:54] - Getting value of type String
2021-03-12 10:12:03,344 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:03,349 [main:58] - GENERATED VALUE OF TYPE String = "anwts"
2021-03-12 10:12:03,349 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:03,552 [main:67] - randomType = Float
2021-03-12 10:12:03,738 [main:302] - generating value of type = Float true depth = 0
2021-03-12 10:12:03,773 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a7554df]
2021-03-12 10:12:03,773 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:12:03,940 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:03,946 [main:78] - Generated call from random type = (0.6453704f).toInt().toString(916017645)
2021-03-12 10:12:03,947 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 10:12:03,963 [main:106] - GETTING String from KFunction1<A, Unit>
2021-03-12 10:12:03,988 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]]
2021-03-12 10:12:03,989 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]
2021-03-12 10:12:03,989 [main:117] - GENERATED CALL = (A::bar).name.trimStart()
2021-03-12 10:12:03,989 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]]
2021-03-12 10:12:03,989 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]
2021-03-12 10:12:04,157 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:04,163 [main:117] - GENERATED CALL = (A::bar).name.takeLast(-973950572)
2021-03-12 10:12:04,163 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0f9bf]]
2021-03-12 10:12:04,163 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0f9bf]
2021-03-12 10:12:04,331 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:04,336 [main:117] - GENERATED CALL = (A::bar).name.substring(1156482464)
2021-03-12 10:12:04,337 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]]
2021-03-12 10:12:04,337 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]
2021-03-12 10:12:04,505 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:04,510 [main:117] - GENERATED CALL = (A::bar).name.dropLast(1138061635)
2021-03-12 10:12:04,511 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]]
2021-03-12 10:12:04,511 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]
2021-03-12 10:12:04,677 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:04,849 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:05,019 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:12:05,028 [main:117] - GENERATED CALL = (A::bar).name.replaceRange(764631249, 905530336, "cdvez")
2021-03-12 10:12:05,028 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]]
2021-03-12 10:12:05,028 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]
2021-03-12 10:12:05,195 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 10:12:05,373 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 10:12:05,380 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 10:12:05,561 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:12:05,567 [main:95] - GENERATED = hashSetOf<Int>(276861891)
2021-03-12 10:12:05,568 [main:117] - GENERATED CALL = (A::bar).name.slice(hashSetOf<Int>(276861891))
2021-03-12 10:12:05,568 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:12:05,568 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:12:05,741 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:05,747 [main:117] - GENERATED CALL = (A::bar).name.substringBeforeLast('⒅', fu0())
2021-03-12 10:12:05,747 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]]
2021-03-12 10:12:05,747 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]
2021-03-12 10:12:05,915 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:12:05,920 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:12:05,926 [main:117] - GENERATED CALL = (A::bar).name.replaceFirstChar({a: Char -> '둭'})
2021-03-12 10:12:05,926 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]]
2021-03-12 10:12:05,926 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]
2021-03-12 10:12:06,091 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:06,264 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:06,271 [main:117] - GENERATED CALL = (A::bar).name.replaceBefore('㋽', "vquar", var prope2 =
2021-03-12 10:12:06,271 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4eb2d9]]
2021-03-12 10:12:06,271 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4eb2d9]
2021-03-12 10:12:06,439 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:06,445 [main:117] - GENERATED CALL = (A::bar).name.substringAfterLast('鬒', fu0())
2021-03-12 10:12:06,445 [main:114] - replacement of prope12 of type String is (A::bar).name.substringAfterLast('鬒', fu0())
2021-03-12 10:12:06,611 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:12:06,611 [main:66] - Compilation checking started
2021-03-12 10:12:07,120 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.(A::bar).name.substringAfterLast('鬒', fu0()) = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:07,123 [main:107] - replacing (prope16, Result<Ty1>)
2021-03-12 10:12:07,123 [main:50] - replacing prope16 Result<Ty1>
2021-03-12 10:12:07,123 [main:54] - Getting value of type Result<Ty1>
2021-03-12 10:12:07,290 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-12 10:12:07,466 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 10:12:07,493 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 10:12:07,880 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 10:12:07,880 [main:58] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-12 10:12:08,079 [main:67] - randomType = Double
2021-03-12 10:12:08,248 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:12:08,285 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 10:12:08,291 [main:106] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-12 10:12:08,299 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 10:12:08,300 [main:106] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-12 10:12:08,315 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 10:12:08,320 [main:106] - GETTING Result<Ty1> from Function0<Unit>
2021-03-12 10:12:08,329 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 10:12:08,330 [main:106] - GETTING Result<Ty1> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:08,378 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 10:12:08,389 [main:106] - GETTING Result<Ty1> from KFunction1<A, Unit>
2021-03-12 10:12:08,416 [main:106] - GETTING Result<Ty1> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:08,460 [main:106] - GETTING Result<Ty1> from String
2021-03-12 10:12:08,479 [main:106] - GETTING Result<Ty1> from Continuation<Short>
2021-03-12 10:12:08,486 [main:111] - Cant find and generate replacement for prope16 type Result<Ty1>
2021-03-12 10:12:08,486 [main:107] - replacing (c, Continuation<*>)
2021-03-12 10:12:08,486 [main:50] - replacing c Continuation<*>
2021-03-12 10:12:08,486 [main:54] - Getting value of type Continuation<*>
2021-03-12 10:12:08,655 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 10:12:08,832 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:12:08,839 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:12:09,440 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 10:12:09,614 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:12:09,621 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:12:10,014 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 10:12:10,198 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:12:10,205 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:12:10,817 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 10:12:10,999 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:12:11,006 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:12:11,670 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:12:11,671 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:12:11,671 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:12:11,671 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:12:11,671 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 10:12:12,345 [main:67] - randomType = Map<Kla2<A>, Int>
2021-03-12 10:12:12,346 [main:106] - GETTING Continuation<*> from KFunction1<A, Unit>
2021-03-12 10:12:12,373 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 10:12:12,382 [main:106] - GETTING Continuation<*> from Continuation<Short>
2021-03-12 10:12:12,390 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 10:12:12,393 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 10:12:12,403 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 10:12:12,411 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-12 10:12:12,425 [main:106] - GETTING Continuation<*> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:12,470 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 10:12:12,470 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 10:12:12,471 [main:106] - GETTING Continuation<*> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:12,516 [main:106] - GETTING Continuation<*> from String
2021-03-12 10:12:12,534 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-12 10:12:12,542 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 10:12:12,542 [main:107] - replacing (prope9, Kla7)
2021-03-12 10:12:12,543 [main:50] - replacing prope9 Kla7
2021-03-12 10:12:12,543 [main:54] - Getting value of type Kla7
2021-03-12 10:12:12,712 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 10:12:12,718 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}
2021-03-12 10:12:12,718 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 10:12:12,718 [main:61] - GENERATED IS CALL =true
2021-03-12 10:12:12,942 [main:67] - randomType = Sequence<Kla13>
2021-03-12 10:12:12,942 [main:106] - GETTING Kla7 from Function0<Unit>
2021-03-12 10:12:12,952 [main:106] - GETTING Kla7 from String
2021-03-12 10:12:12,970 [main:106] - GETTING Kla7 from Continuation<Any?>
2021-03-12 10:12:12,977 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:12:12,982 [main:106] - GETTING Kla7 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:13,027 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:12:13,028 [main:106] - GETTING Kla7 from Boolean
2021-03-12 10:12:13,039 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:12:13,039 [main:106] - GETTING Kla7 from EmptyCoroutineContext
2021-03-12 10:12:13,053 [main:106] - GETTING Kla7 from KFunction1<A, Unit>
2021-03-12 10:12:13,079 [main:106] - GETTING Kla7 from Continuation<Short>
2021-03-12 10:12:13,087 [main:106] - GETTING Kla7 from Any?
2021-03-12 10:12:13,090 [main:106] - GETTING Kla7 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:13,133 [main:114] - replacement of prope9 of type Kla7 is Kla7()
2021-03-12 10:12:13,298 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:12:13,299 [main:66] - Compilation checking started
2021-03-12 10:12:14,092 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:14,095 [main:107] - replacing (prope18 != numberOfSuspensions, Boolean)
2021-03-12 10:12:14,095 [main:50] - replacing prope18 != numberOfSuspensions Boolean
2021-03-12 10:12:14,096 [main:54] - Getting value of type Boolean
2021-03-12 10:12:14,279 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:12:14,284 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:12:14,284 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:14,307 [main:67] - randomType = Kla9
2021-03-12 10:12:14,473 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 10:12:14,478 [main:112] - generating klass Kla9 text = open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}
2021-03-12 10:12:14,643 [main:194] - Type params = []
2021-03-12 10:12:14,837 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 10:12:15,013 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:12:15,020 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:12:15,418 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 10:12:15,600 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:12:15,608 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:12:16,225 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:12:16,226 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:12:16,238 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla9[DeserializedSimpleFunctionDescriptor@4c0ed06a]
2021-03-12 10:12:16,238 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:12:16,239 [main:78] - Generated call from random type = (Kla9()).equals(Kla1().prope3).or(Kla4().prope6)
2021-03-12 10:12:16,239 [main:106] - GETTING Boolean from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:16,283 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]]
2021-03-12 10:12:16,283 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]
2021-03-12 10:12:16,453 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:16,459 [main:117] - GENERATED CALL = (::baz).name.endsWith("jdusv", Kla4().prope6)
2021-03-12 10:12:16,459 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]]
2021-03-12 10:12:16,459 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:12:16,459 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:12:16,626 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:12:16,632 [main:117] - GENERATED CALL = (::baz).equals(Kla1().prope3).xor(false)
2021-03-12 10:12:16,632 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]]
2021-03-12 10:12:16,632 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494c6181]
2021-03-12 10:12:16,633 [main:117] - GENERATED CALL = (::baz).name.toBoolean()
2021-03-12 10:12:16,633 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:12:16,633 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:12:16,799 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:12:16,800 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:12:16,800 [main:117] - GENERATED CALL = (::baz).equals("ieaxj").or(Kla4().prope6)
2021-03-12 10:12:16,800 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]]
2021-03-12 10:12:16,800 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:12:16,800 [main:117] - GENERATED CALL = (::baz).name.equals(Kla1().prope3)
2021-03-12 10:12:16,800 [main:113] - Case = [public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@165de6ee], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@616a635f]]
2021-03-12 10:12:16,800 [main:149] - GENERATING call of type public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@165de6ee]
2021-03-12 10:12:16,970 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:12:16,984 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@165de6ee]
2021-03-12 10:12:16,984 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:12:16,984 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:12:16,984 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:12:16,984 [main:117] - GENERATED CALL = (::baz).equals(Kla1().prope3).equals(Kla1().prope3)
2021-03-12 10:12:16,984 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]]
2021-03-12 10:12:16,984 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:12:16,984 [main:117] - GENERATED CALL = (::baz).equals(Kla1().prope3)
2021-03-12 10:12:16,984 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]]
2021-03-12 10:12:16,984 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]
2021-03-12 10:12:17,151 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:17,157 [main:117] - GENERATED CALL = (::baz).name.matches("rqkjr")
2021-03-12 10:12:17,157 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]]
2021-03-12 10:12:17,157 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]
2021-03-12 10:12:17,325 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:17,331 [main:117] - GENERATED CALL = (::baz).name.startsWith("idwiz", Kla4().prope6)
2021-03-12 10:12:17,331 [main:114] - replacement of prope18 != numberOfSuspensions of type Boolean is true
2021-03-12 10:12:17,498 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 10:12:17,499 [main:66] - Compilation checking started
2021-03-12 10:12:18,291 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:18,294 [main:107] - replacing (prope11.prope19, Boolean)
2021-03-12 10:12:18,294 [main:50] - replacing prope11.prope19 Boolean
2021-03-12 10:12:18,294 [main:54] - Getting value of type Boolean
2021-03-12 10:12:18,489 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:12:18,495 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:12:18,495 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:18,919 [main:67] - randomType = Double?
2021-03-12 10:12:19,085 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:12:19,122 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Double defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@e6266bf]
2021-03-12 10:12:19,122 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5daf3b9d]
2021-03-12 10:12:19,122 [main:78] - Generated call from random type = (0.5079808986081324)?.dec().isInfinite()
2021-03-12 10:12:19,123 [main:106] - GETTING Boolean from String
2021-03-12 10:12:19,139 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eae6d94]]
2021-03-12 10:12:19,139 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7]
2021-03-12 10:12:19,312 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:19,484 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:19,490 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eae6d94]
2021-03-12 10:12:19,490 [main:117] - GENERATED CALL = (fu0()).subSequence(236815783, 141257563).none()
2021-03-12 10:12:19,490 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53a509a1]]
2021-03-12 10:12:19,490 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53a509a1]
2021-03-12 10:12:19,490 [main:117] - GENERATED CALL = (fu0()).any()
2021-03-12 10:12:19,490 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]]
2021-03-12 10:12:19,490 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]
2021-03-12 10:12:19,491 [main:117] - GENERATED CALL = (fu0()).startsWith(var prope2 =
2021-03-12 10:12:19,491 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:12:19,491 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:12:19,659 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:12:19,660 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:12:19,660 [main:117] - GENERATED CALL = (fu0()).equals("imeri").equals(Kla1().prope3)
2021-03-12 10:12:19,660 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5af35000]]
2021-03-12 10:12:19,660 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 10:12:19,829 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:19,835 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5af35000]
2021-03-12 10:12:19,835 [main:117] - GENERATED CALL = (fu0()).get(1261871609).isISOControl()
2021-03-12 10:12:19,835 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aacc399]]
2021-03-12 10:12:19,835 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 10:12:20,008 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:20,013 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6aacc399]
2021-03-12 10:12:20,180 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:20,185 [main:117] - GENERATED CALL = (fu0()).get(361587509).equals('ꆀ', Kla4().prope6)
2021-03-12 10:12:20,186 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]]
2021-03-12 10:12:20,186 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]
2021-03-12 10:12:20,352 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:12:20,357 [main:117] - GENERATED CALL = (fu0()).endsWith(var prope2 =
2021-03-12 10:12:20,357 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]]
2021-03-12 10:12:20,357 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:12:20,358 [main:117] - GENERATED CALL = (fu0()).equals(Kla1().prope3)
2021-03-12 10:12:20,358 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5603b3b2]]
2021-03-12 10:12:20,358 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 10:12:20,523 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:20,529 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5603b3b2]
2021-03-12 10:12:20,529 [main:117] - GENERATED CALL = (fu0()).get(668191024).isSurrogate()
2021-03-12 10:12:20,529 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eae6d94]]
2021-03-12 10:12:20,529 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eae6d94]
2021-03-12 10:12:20,529 [main:117] - GENERATED CALL = (fu0()).none()
2021-03-12 10:12:20,529 [main:114] - replacement of prope11.prope19 of type Boolean is (fu0()).startsWith(var prope2 =
2021-03-12 10:12:20,695 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 10:12:20,695 [main:66] - Compilation checking started
2021-03-12 10:12:20,705 [main:71] - Wrong syntax or breaks conditions
2021-03-12 10:12:20,706 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            (fu0()).startsWith(var prope2 = = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:20,708 [main:107] - replacing (prope12, String)
2021-03-12 10:12:20,708 [main:50] - replacing prope12 String
2021-03-12 10:12:20,708 [main:54] - Getting value of type String
2021-03-12 10:12:20,885 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:20,891 [main:58] - GENERATED VALUE OF TYPE String = "gerxx"
2021-03-12 10:12:20,891 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:21,978 [main:67] - randomType = Sequence<Kla11<Triple<Short, String, UShort>>>
2021-03-12 10:12:21,979 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:12:21,986 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 10:12:22,000 [main:106] - GETTING String from Boolean
2021-03-12 10:12:22,009 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]]
2021-03-12 10:12:22,009 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:12:22,009 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:12:22,175 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:22,181 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(Kla4().prope6).toString(-1796812581)
2021-03-12 10:12:22,181 [main:114] - replacement of prope12 of type String is (Kla4().prope6).compareTo(Kla4().prope6).toString(-1796812581)
2021-03-12 10:12:22,348 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:12:22,348 [main:66] - Compilation checking started
2021-03-12 10:12:22,862 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.(Kla4().prope6).compareTo(Kla4().prope6).toString(-1796812581) != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:22,864 [main:107] - replacing (prope12, String)
2021-03-12 10:12:22,864 [main:50] - replacing prope12 String
2021-03-12 10:12:22,865 [main:54] - Getting value of type String
2021-03-12 10:12:23,035 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:23,040 [main:58] - GENERATED VALUE OF TYPE String = "fjqwh"
2021-03-12 10:12:23,041 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:23,266 [main:67] - randomType = Kla9?
2021-03-12 10:12:23,435 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-12 10:12:23,440 [main:112] - generating klass Kla9 text = open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}
2021-03-12 10:12:23,608 [main:194] - Type params = []
2021-03-12 10:12:23,776 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 10:12:23,953 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:12:23,960 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:12:24,361 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 10:12:24,544 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:12:24,551 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:12:25,166 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:12:25,166 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:12:25,183 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:12:25,188 [main:106] - GETTING String from String
2021-03-12 10:12:25,207 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]]
2021-03-12 10:12:25,207 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]
2021-03-12 10:12:25,376 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:12:25,385 [main:117] - GENERATED CALL = (fu0()).removeSurrounding("kzhsc")
2021-03-12 10:12:25,385 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]]
2021-03-12 10:12:25,385 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]
2021-03-12 10:12:25,554 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:12:25,559 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:12:25,565 [main:117] - GENERATED CALL = (fu0()).filterIndexed({a: Int, b: Char -> false})
2021-03-12 10:12:25,565 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]]
2021-03-12 10:12:25,565 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]
2021-03-12 10:12:25,732 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:25,907 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:25,913 [main:117] - GENERATED CALL = (fu0()).padEnd(-1217581128, '瞀')
2021-03-12 10:12:25,913 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@593c5b36]]
2021-03-12 10:12:25,913 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7]
2021-03-12 10:12:26,081 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:26,254 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:26,260 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@593c5b36]
2021-03-12 10:12:26,427 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:26,433 [main:117] - GENERATED CALL = (fu0()).subSequence(233864498, -754027176).repeat(-359465842)
2021-03-12 10:12:26,433 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]]
2021-03-12 10:12:26,433 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]
2021-03-12 10:12:26,633 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:26,805 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:26,810 [main:117] - GENERATED CALL = (fu0()).replace('죄', '嶬', Kla4().prope6)
2021-03-12 10:12:26,811 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b75800]]
2021-03-12 10:12:26,811 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b75800]
2021-03-12 10:12:26,979 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:27,152 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:27,158 [main:117] - GENERATED CALL = (fu0()).replaceFirst('⡠', 'ṥ', Kla4().prope6)
2021-03-12 10:12:27,158 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:12:27,158 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:12:27,323 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:27,329 [main:117] - GENERATED CALL = (fu0()).prependIndent("muumz")
2021-03-12 10:12:27,329 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]]
2021-03-12 10:12:27,329 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]
2021-03-12 10:12:27,495 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:12:27,501 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:12:27,507 [main:117] - GENERATED CALL = (fu0()).replaceFirstChar({a: Char -> 'څ'})
2021-03-12 10:12:27,507 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c829460]]
2021-03-12 10:12:27,507 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7]
2021-03-12 10:12:27,674 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:27,846 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:27,852 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c829460]
2021-03-12 10:12:28,020 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 10:12:28,196 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 10:12:28,203 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 10:12:28,819 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:12:28,824 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 10:12:29,000 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Set<RegexOption> = TODO()
2021-03-12 10:12:29,008 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Set<RegexOption> = TODO()
2021-03-12 10:12:29,598 [main:302] - generating value of type = Int true depth = 6
2021-03-12 10:12:29,604 [main:302] - generating value of type = Float true depth = 6
2021-03-12 10:12:29,610 [main:95] - GENERATED = LinkedHashSet<RegexOption>(-497698210, 0.32562596f)
2021-03-12 10:12:29,610 [main:95] - GENERATED = Regex("zyvbl", LinkedHashSet<RegexOption>(-497698210, 0.32562596f))
2021-03-12 10:12:29,775 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:29,781 [main:117] - GENERATED CALL = (fu0()).subSequence(557067152, -1632776051).replaceFirst(Regex("zyvbl", LinkedHashSet<RegexOption>(-497698210, 0.32562596f)), "lumub")
2021-03-12 10:12:29,782 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]]
2021-03-12 10:12:29,782 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]
2021-03-12 10:12:29,951 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:29,957 [main:117] - GENERATED CALL = (fu0()).takeLast(-455036477)
2021-03-12 10:12:29,957 [main:114] - replacement of prope12 of type String is (fu0()).replaceFirstChar({a: Char -> 'څ'})
2021-03-12 10:12:30,122 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:12:30,122 [main:66] - Compilation checking started
2021-03-12 10:12:30,647 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.(fu0()).replaceFirstChar({a: Char -> 'څ'})
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:30,649 [main:107] - replacing (prope20, Function0<Unit>)
2021-03-12 10:12:30,649 [main:50] - replacing prope20 Function0<Unit>
2021-03-12 10:12:30,649 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:12:30,819 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:12:30,825 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:12:30,998 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:12:31,005 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:12:31,384 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:12:31,390 [main:95] - GENERATED = check(true)
2021-03-12 10:12:31,390 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 10:12:31,390 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:31,594 [main:67] - randomType = UByte
2021-03-12 10:12:31,759 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:12:31,794 [main:106] - GETTING Function0<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:31,839 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 10:12:31,845 [main:106] - GETTING Function0<Unit> from Continuation<Short>
2021-03-12 10:12:31,853 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:31,897 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 10:12:31,908 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 10:12:31,917 [main:106] - GETTING Function0<Unit> from String
2021-03-12 10:12:31,934 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 10:12:31,943 [main:114] - replacement of prope20 of type Function0<Unit> is { check(true)}
2021-03-12 10:12:32,116 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:12:32,116 [main:66] - Compilation checking started
2021-03-12 10:12:32,626 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        { check(true)}()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:32,629 [main:107] - replacing ("\n", String)
2021-03-12 10:12:32,630 [main:50] - replacing "\n" String
2021-03-12 10:12:32,630 [main:54] - Getting value of type String
2021-03-12 10:12:32,799 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:32,804 [main:58] - GENERATED VALUE OF TYPE String = "scmkx"
2021-03-12 10:12:32,804 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:32,816 [main:67] - randomType = Int
2021-03-12 10:12:32,985 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:33,022 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7faf6a72]
2021-03-12 10:12:33,022 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fdd65]
2021-03-12 10:12:33,189 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:33,195 [main:78] - Generated call from random type = (893645895).toShort().toString(1025901279)
2021-03-12 10:12:33,196 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:33,239 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c]]
2021-03-12 10:12:33,240 [main:117] - GENERATED CALL = (::baz).name
2021-03-12 10:12:33,240 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]]
2021-03-12 10:12:33,240 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]
2021-03-12 10:12:33,407 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:12:33,412 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:12:33,418 [main:117] - GENERATED CALL = (::baz).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 10:12:33,418 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]]
2021-03-12 10:12:33,418 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]
2021-03-12 10:12:33,586 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 10:12:33,760 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 10:12:33,768 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 10:12:33,948 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:12:33,954 [main:95] - GENERATED = linkedSetOf<Int>(1551971172)
2021-03-12 10:12:33,955 [main:117] - GENERATED CALL = (::baz).name.slice(linkedSetOf<Int>(1551971172))
2021-03-12 10:12:33,955 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]]
2021-03-12 10:12:33,955 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]
2021-03-12 10:12:34,122 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:12:34,128 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:12:34,134 [main:117] - GENERATED CALL = (::baz).name.dropLastWhile({a: Char -> false})
2021-03-12 10:12:34,134 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]]
2021-03-12 10:12:34,134 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]
2021-03-12 10:12:34,134 [main:117] - GENERATED CALL = (::baz).name.trimIndent()
2021-03-12 10:12:34,134 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60659f12]]
2021-03-12 10:12:34,135 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60659f12]
2021-03-12 10:12:34,135 [main:117] - GENERATED CALL = (::baz).name.plus(Kla1().prope3)
2021-03-12 10:12:34,135 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]]
2021-03-12 10:12:34,135 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]
2021-03-12 10:12:34,135 [main:117] - GENERATED CALL = (::baz).name.capitalize()
2021-03-12 10:12:34,135 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]]
2021-03-12 10:12:34,135 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]
2021-03-12 10:12:34,303 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:34,501 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:34,676 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:12:34,685 [main:117] - GENERATED CALL = (::baz).name.replaceRange(2079530546, -125195525, "xuitv")
2021-03-12 10:12:34,685 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]]
2021-03-12 10:12:34,685 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]
2021-03-12 10:12:34,854 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:34,860 [main:117] - GENERATED CALL = (::baz).name.replaceAfter('', var prope2 =
2021-03-12 10:12:34,860 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ea8dc]]
2021-03-12 10:12:34,860 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ea8dc]
2021-03-12 10:12:35,028 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:35,200 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:35,206 [main:117] - GENERATED CALL = (::baz).name.removeRange(-516856343, -816549855)
2021-03-12 10:12:35,206 [main:114] - replacement of "\n" of type String is (::baz).name.plus(Kla1().prope3)
2021-03-12 10:12:35,373 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:12:35,374 [main:66] - Compilation checking started
2021-03-12 10:12:36,178 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:36,181 [main:107] - replacing (fu17(), String)
2021-03-12 10:12:36,182 [main:50] - replacing fu17() String
2021-03-12 10:12:36,182 [main:54] - Getting value of type String
2021-03-12 10:12:36,386 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:36,391 [main:58] - GENERATED VALUE OF TYPE String = "ahzcz"
2021-03-12 10:12:36,391 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:36,617 [main:67] - randomType = Kla13?
2021-03-12 10:12:36,783 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-12 10:12:36,789 [main:112] - generating klass Kla13 text = class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:12:36,797 [main:106] - GETTING String from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:36,842 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]]
2021-03-12 10:12:36,843 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]
2021-03-12 10:12:37,010 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:37,184 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:37,190 [main:117] - GENERATED CALL = (Int::foo).name.replaceAfter('嗔', "igfyp", fu0())
2021-03-12 10:12:37,190 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]]
2021-03-12 10:12:37,190 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]
2021-03-12 10:12:37,190 [main:117] - GENERATED CALL = (Int::foo).name.capitalize()
2021-03-12 10:12:37,190 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]]
2021-03-12 10:12:37,190 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]
2021-03-12 10:12:37,359 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:12:37,364 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:12:37,370 [main:117] - GENERATED CALL = (Int::foo).name.dropLastWhile({a: Char -> false})
2021-03-12 10:12:37,371 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:12:37,371 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:12:37,540 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:37,546 [main:117] - GENERATED CALL = (Int::foo).name.substringBeforeLast('㙨', fu0())
2021-03-12 10:12:37,546 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]]
2021-03-12 10:12:37,546 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]
2021-03-12 10:12:37,713 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:12:37,722 [main:117] - GENERATED CALL = (Int::foo).name.removeSuffix("filaf")
2021-03-12 10:12:37,722 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]]
2021-03-12 10:12:37,722 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]
2021-03-12 10:12:37,722 [main:117] - GENERATED CALL = (Int::foo).name.toLowerCase()
2021-03-12 10:12:37,722 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]]
2021-03-12 10:12:37,722 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]
2021-03-12 10:12:37,889 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:12:37,895 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:12:37,901 [main:117] - GENERATED CALL = (Int::foo).name.takeWhile({a: Char -> true})
2021-03-12 10:12:37,901 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:12:37,901 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:12:37,901 [main:117] - GENERATED CALL = (Int::foo).name.prependIndent(fu0())
2021-03-12 10:12:37,901 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]]
2021-03-12 10:12:37,901 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]
2021-03-12 10:12:38,069 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:12:38,078 [main:117] - GENERATED CALL = (Int::foo).name.removeSurrounding(StringBuilder())
2021-03-12 10:12:38,078 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]]
2021-03-12 10:12:38,078 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]
2021-03-12 10:12:38,078 [main:117] - GENERATED CALL = (Int::foo).name.uppercase()
2021-03-12 10:12:38,078 [main:114] - replacement of fu17() of type String is "ahzcz"
2021-03-12 10:12:38,245 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 10:12:38,245 [main:66] - Compilation checking started
2021-03-12 10:12:39,061 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:39,064 [main:107] - replacing (prope9.prope12, String)
2021-03-12 10:12:39,064 [main:50] - replacing prope9.prope12 String
2021-03-12 10:12:39,064 [main:54] - Getting value of type String
2021-03-12 10:12:39,238 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:39,244 [main:58] - GENERATED VALUE OF TYPE String = "sryvr"
2021-03-12 10:12:39,244 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:39,267 [main:67] - randomType = Kla4
2021-03-12 10:12:39,434 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 10:12:39,440 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}
2021-03-12 10:12:39,448 [main:106] - GETTING String from Any?
2021-03-12 10:12:39,451 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]]
2021-03-12 10:12:39,451 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]
2021-03-12 10:12:39,452 [main:117] - GENERATED CALL = (Kla1().prope3).toString()
2021-03-12 10:12:39,452 [main:114] - replacement of prope9.prope12 of type String is (Kla1().prope3).toString()
2021-03-12 10:12:39,619 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:12:39,619 [main:66] - Compilation checking started
2021-03-12 10:12:40,119 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    (Kla1().prope3).toString() = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = {
            prope11.prope19 = true
        }
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:40,121 [main:107] - replacing ({
            prope11.prope19 = true
        }, Function0<Unit>)
2021-03-12 10:12:40,121 [main:50] - replacing {
            prope11.prope19 = true
        } Function0<Unit>
2021-03-12 10:12:40,121 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:12:40,304 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:12:40,310 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:12:40,489 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:12:40,496 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:12:40,881 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:12:40,881 [main:95] - GENERATED = println("haytl")
2021-03-12 10:12:40,881 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("haytl")}
2021-03-12 10:12:40,882 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:40,904 [main:67] - randomType = Kla7
2021-03-12 10:12:41,074 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 10:12:41,080 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}
2021-03-12 10:12:41,085 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 10:12:41,092 [main:114] - replacement of {
            prope11.prope19 = true
        } of type Function0<Unit> is Kla4().prope7
2021-03-12 10:12:41,259 [main:33] - Trying to replace LAMBDA_EXPRESSION on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:12:41,259 [main:66] - Compilation checking started
2021-03-12 10:12:42,061 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:42,064 [main:107] - replacing (prope12, String)
2021-03-12 10:12:42,064 [main:50] - replacing prope12 String
2021-03-12 10:12:42,064 [main:54] - Getting value of type String
2021-03-12 10:12:42,238 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:42,244 [main:58] - GENERATED VALUE OF TYPE String = "wavez"
2021-03-12 10:12:42,244 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:42,919 [main:67] - randomType = LinkedHashMap<Float, Int?>
2021-03-12 10:12:43,084 [main:302] - generating value of type = LinkedHashMap<Float, Int?> false depth = 0
2021-03-12 10:12:43,258 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Float, Int?>): LinkedHashMap<Float, Int?> = TODO()
2021-03-12 10:12:43,265 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Float, Int?>): LinkedHashMap<Float, Int?> = TODO()
2021-03-12 10:12:43,677 [main:302] - generating value of type = Map<Float, Int?> false depth = 3
2021-03-12 10:12:43,853 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(): Map<Float, Int?> = TODO()
2021-03-12 10:12:43,860 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(): Map<Float, Int?> = TODO()
2021-03-12 10:12:44,038 [main:95] - GENERATED = mutableMapOf<Float, Int?>()
2021-03-12 10:12:44,038 [main:95] - GENERATED = LinkedHashMap<Float, Int?>(mutableMapOf<Float, Int?>())
2021-03-12 10:12:44,158 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:12:44,325 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:44,331 [main:78] - Generated call from random type = (LinkedHashMap<Float, Int?>(mutableMapOf<Float, Int?>())).size.toString(-925075103)
2021-03-12 10:12:44,332 [main:106] - GETTING String from Boolean
2021-03-12 10:12:44,342 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]]
2021-03-12 10:12:44,342 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:12:44,342 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:12:44,509 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:44,515 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(Kla4().prope6).toString(-1240941452)
2021-03-12 10:12:44,515 [main:114] - replacement of prope12 of type String is (Kla4().prope6).compareTo(Kla4().prope6).toString(-1240941452)
2021-03-12 10:12:44,681 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:12:44,681 [main:66] - Compilation checking started
2021-03-12 10:12:45,175 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            (Kla4().prope6).compareTo(Kla4().prope6).toString(-1240941452) = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:45,177 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 10:12:45,178 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 10:12:45,178 [main:54] - Getting value of type String
2021-03-12 10:12:45,345 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:45,351 [main:58] - GENERATED VALUE OF TYPE String = "pbexy"
2021-03-12 10:12:45,351 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:45,553 [main:67] - randomType = Float
2021-03-12 10:12:45,720 [main:302] - generating value of type = Float true depth = 0
2021-03-12 10:12:45,756 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2ccec9b8]
2021-03-12 10:12:45,756 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6839e33f]
2021-03-12 10:12:45,928 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:45,934 [main:78] - Generated call from random type = (0.14924037f).toByte().toString(-2005443176)
2021-03-12 10:12:45,935 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 10:12:45,954 [main:106] - GETTING String from Any?
2021-03-12 10:12:45,957 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]]
2021-03-12 10:12:45,957 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]
2021-03-12 10:12:45,958 [main:117] - GENERATED CALL = (Kla1().prope3).toString()
2021-03-12 10:12:45,958 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (Kla1().prope3).toString()
2021-03-12 10:12:46,123 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:12:46,124 [main:66] - Compilation checking started
2021-03-12 10:12:46,957 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:46,961 [main:107] - replacing (this.prope16, Any?)
2021-03-12 10:12:46,961 [main:50] - replacing this.prope16 Any?
2021-03-12 10:12:46,961 [main:54] - Getting value of type Any?
2021-03-12 10:12:47,151 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:12:47,151 [main:58] - GENERATED VALUE OF TYPE Any? = "ksdml"
2021-03-12 10:12:47,152 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:49,565 [main:67] - randomType = Function2<Function1<LinkedHashMap<Triple<UInt, Kla10, List<Char>>, UShort>, Int?>, Short, Double?>
2021-03-12 10:12:49,566 [main:106] - GETTING Any? from String
2021-03-12 10:12:49,586 [main:106] - GETTING Any? from Any?
2021-03-12 10:12:49,590 [main:106] - GETTING Any? from KFunction1<A, Unit>
2021-03-12 10:12:49,618 [main:106] - GETTING Any? from Boolean
2021-03-12 10:12:49,628 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 10:12:49,644 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 10:12:49,653 [main:106] - GETTING Any? from Continuation<Short>
2021-03-12 10:12:49,661 [main:106] - GETTING Any? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:49,704 [main:106] - GETTING Any? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:49,749 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:12:49,757 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:12:49,757 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:12:49,758 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 10:12:49,767 [main:114] - replacement of this.prope16 of type Any? is "ksdml"
2021-03-12 10:12:49,937 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 10:12:49,937 [main:66] - Compilation checking started
2021-03-12 10:12:50,427 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
"ksdml" = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:50,430 [main:107] - replacing (prope9, Kla7)
2021-03-12 10:12:50,432 [main:50] - replacing prope9 Kla7
2021-03-12 10:12:50,432 [main:54] - Getting value of type Kla7
2021-03-12 10:12:50,626 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 10:12:50,632 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}
2021-03-12 10:12:50,632 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 10:12:50,632 [main:61] - GENERATED IS CALL =true
2021-03-12 10:12:51,066 [main:67] - randomType = LinkedHashSet<Kla8>
2021-03-12 10:12:51,234 [main:302] - generating value of type = LinkedHashSet<Kla8> false depth = 0
2021-03-12 10:12:51,417 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Kla8> = TODO()
2021-03-12 10:12:51,424 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Kla8> = TODO()
2021-03-12 10:12:51,605 [main:95] - GENERATED = linkedSetOf<Kla8>()
2021-03-12 10:12:51,736 [main:106] - GETTING Kla7 from String
2021-03-12 10:12:51,753 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:12:51,759 [main:106] - GETTING Kla7 from Continuation<Any?>
2021-03-12 10:12:51,767 [main:106] - GETTING Kla7 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:51,811 [main:106] - GETTING Kla7 from Boolean
2021-03-12 10:12:51,820 [main:106] - GETTING Kla7 from Continuation<Short>
2021-03-12 10:12:51,828 [main:106] - GETTING Kla7 from EmptyCoroutineContext
2021-03-12 10:12:51,844 [main:106] - GETTING Kla7 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:51,889 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:12:51,889 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:12:51,890 [main:106] - GETTING Kla7 from Any?
2021-03-12 10:12:51,893 [main:106] - GETTING Kla7 from KFunction1<A, Unit>
2021-03-12 10:12:51,919 [main:106] - GETTING Kla7 from Function0<Unit>
2021-03-12 10:12:51,927 [main:114] - replacement of prope9 of type Kla7 is Kla7()
2021-03-12 10:12:52,095 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:12:52,096 [main:66] - Compilation checking started
2021-03-12 10:12:52,885 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:52,888 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected ", String)
2021-03-12 10:12:52,888 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " String
2021-03-12 10:12:52,888 [main:54] - Getting value of type String
2021-03-12 10:12:53,056 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:53,061 [main:58] - GENERATED VALUE OF TYPE String = "gmtcy"
2021-03-12 10:12:53,062 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:54,826 [main:67] - randomType = Function2<Kla14?, Kla14, Kla2<LinkedHashMap<Float?, Kla12>>>
2021-03-12 10:12:54,827 [main:106] - GETTING String from Function0<Unit>
2021-03-12 10:12:54,839 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 10:12:54,853 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:12:54,860 [main:106] - GETTING String from Continuation<Short>
2021-03-12 10:12:54,867 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:54,912 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4eb2d9]]
2021-03-12 10:12:54,912 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4eb2d9]
2021-03-12 10:12:55,085 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:55,091 [main:117] - GENERATED CALL = (::baz).name.substringAfterLast('ᵡ', var prope2 =
2021-03-12 10:12:55,091 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]]
2021-03-12 10:12:55,091 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]
2021-03-12 10:12:55,258 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:55,264 [main:117] - GENERATED CALL = (::baz).name.dropLast(-1250030720)
2021-03-12 10:12:55,264 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]]
2021-03-12 10:12:55,265 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]
2021-03-12 10:12:55,431 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:55,437 [main:117] - GENERATED CALL = (::baz).name.replaceBeforeLast('ᡧ', fu0(), var prope2 =
2021-03-12 10:12:55,437 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]]
2021-03-12 10:12:55,437 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]
2021-03-12 10:12:55,604 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:55,610 [main:117] - GENERATED CALL = (::baz).name.takeLast(141970617)
2021-03-12 10:12:55,610 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]]
2021-03-12 10:12:55,610 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]
2021-03-12 10:12:55,776 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:12:55,782 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:12:55,788 [main:117] - GENERATED CALL = (::baz).name.dropLastWhile({a: Char -> true})
2021-03-12 10:12:55,788 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]]
2021-03-12 10:12:55,788 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]
2021-03-12 10:12:55,954 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:12:56,126 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:56,132 [main:117] - GENERATED CALL = (::baz).name.padEnd(-844048349, '號')
2021-03-12 10:12:56,132 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:12:56,132 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:12:56,133 [main:117] - GENERATED CALL = (::baz).name.prependIndent(var prope2 =
2021-03-12 10:12:56,133 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]]
2021-03-12 10:12:56,133 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]
2021-03-12 10:12:56,299 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 10:12:56,474 [main:43] - GENERATING CALL OF fun <T> listOf(element: Int): Iterable<Int> = TODO()
2021-03-12 10:12:56,481 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(element: Int): Iterable<Int> = TODO()
2021-03-12 10:12:56,658 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:12:56,664 [main:95] - GENERATED = listOf<Int>(1024841311)
2021-03-12 10:12:56,664 [main:117] - GENERATED CALL = (::baz).name.slice(listOf<Int>(1024841311))
2021-03-12 10:12:56,665 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]]
2021-03-12 10:12:56,665 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]
2021-03-12 10:12:56,831 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:12:56,840 [main:117] - GENERATED CALL = (::baz).name.removePrefix("wiqve")
2021-03-12 10:12:56,840 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]]
2021-03-12 10:12:56,840 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]
2021-03-12 10:12:57,007 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:12:57,183 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:12:57,189 [main:117] - GENERATED CALL = (::baz).name.substringAfter('뾑', "rbaxt")
2021-03-12 10:12:57,189 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " of type String is (::baz).name.replaceBeforeLast('ᡧ', fu0(), var prope2 =
2021-03-12 10:12:57,358 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(BINARY_EXPRESSION)
2021-03-12 10:12:57,359 [main:66] - Compilation checking started
2021-03-12 10:12:57,369 [main:71] - Wrong syntax or breaks conditions
2021-03-12 10:12:57,369 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error((::baz).name.replaceBeforeLast('ᡧ', fu0(), var prope2 = + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:57,372 [main:107] - replacing ({
            prope12 = "ahzcz"
        }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>)
2021-03-12 10:12:57,372 [main:50] - replacing {
            prope12 = "ahzcz"
        } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:12:57,372 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:12:57,539 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> false depth = 0
2021-03-12 10:12:57,545 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:12:57,719 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:12:57,726 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:12:58,110 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:12:58,116 [main:95] - GENERATED = require(false)
2021-03-12 10:12:58,117 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> = {a: Kla7 -> require(false)}
2021-03-12 10:12:58,117 [main:61] - GENERATED IS CALL =false
2021-03-12 10:12:58,353 [main:67] - randomType = UInt
2021-03-12 10:12:58,523 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 10:12:58,562 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Function0<Unit>
2021-03-12 10:12:58,574 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:58,622 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Boolean
2021-03-12 10:12:58,635 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<A, Unit>
2021-03-12 10:12:58,665 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:12:58,674 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from String
2021-03-12 10:12:58,696 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Short>
2021-03-12 10:12:58,707 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Any?>
2021-03-12 10:12:58,719 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:12:58,723 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:12:58,769 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:12:58,773 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from EmptyCoroutineContext
2021-03-12 10:12:58,791 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Any?
2021-03-12 10:12:58,795 [main:114] - replacement of {
            prope12 = "ahzcz"
        } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> is {a: Kla7 -> require(false)}
2021-03-12 10:12:58,963 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:12:58,963 [main:66] - Compilation checking started
2021-03-12 10:12:59,468 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {a: Kla7 -> require(false)}
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:12:59,471 [main:107] - replacing (c, Continuation<*>)
2021-03-12 10:12:59,471 [main:50] - replacing c Continuation<*>
2021-03-12 10:12:59,471 [main:54] - Getting value of type Continuation<*>
2021-03-12 10:12:59,643 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 10:12:59,819 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:12:59,826 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:13:00,434 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 10:13:00,616 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:13:00,623 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:13:01,024 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 10:13:01,205 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:13:01,213 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:13:01,831 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 10:13:02,013 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:13:02,020 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:13:02,696 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 10:13:02,696 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:13:02,696 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:13:02,696 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:13:02,696 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 10:13:03,781 [main:67] - randomType = Function2<Sequence<Kla7>, Kla1?, Sequence<UInt>>
2021-03-12 10:13:03,783 [main:106] - GETTING Continuation<*> from Continuation<Short>
2021-03-12 10:13:03,790 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 10:13:03,797 [main:106] - GETTING Continuation<*> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:03,843 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-12 10:13:03,851 [main:106] - GETTING Continuation<*> from KFunction1<A, Unit>
2021-03-12 10:13:03,878 [main:106] - GETTING Continuation<*> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:03,923 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 10:13:03,932 [main:106] - GETTING Continuation<*> from String
2021-03-12 10:13:03,951 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 10:13:03,959 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-12 10:13:03,974 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 10:13:03,977 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 10:13:03,978 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 10:13:03,978 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 10:13:03,978 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 10:13:03,978 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 10:13:03,978 [main:54] - Getting value of type String
2021-03-12 10:13:04,146 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:13:04,152 [main:58] - GENERATED VALUE OF TYPE String = "fmiry"
2021-03-12 10:13:04,152 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:04,164 [main:67] - randomType = Boolean
2021-03-12 10:13:04,335 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:13:04,351 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:13:04,351 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:13:04,517 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:04,523 [main:78] - Generated call from random type = (true).compareTo(Kla4().prope6).toString(652150581)
2021-03-12 10:13:04,524 [main:106] - GETTING String from Continuation<Short>
2021-03-12 10:13:04,532 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:04,575 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]]
2021-03-12 10:13:04,575 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]
2021-03-12 10:13:04,575 [main:117] - GENERATED CALL = (::baz).name.lowercase()
2021-03-12 10:13:04,575 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b75800]]
2021-03-12 10:13:04,575 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b75800]
2021-03-12 10:13:04,741 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:13:04,921 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:13:04,927 [main:117] - GENERATED CALL = (::baz).name.replaceFirst('㖬', '', Kla4().prope6)
2021-03-12 10:13:04,927 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]]
2021-03-12 10:13:04,927 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]
2021-03-12 10:13:05,097 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:13:05,103 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:13:05,109 [main:117] - GENERATED CALL = (::baz).name.takeLastWhile({a: Char -> false})
2021-03-12 10:13:05,109 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]]
2021-03-12 10:13:05,109 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]
2021-03-12 10:13:05,109 [main:117] - GENERATED CALL = (::baz).name.decapitalize()
2021-03-12 10:13:05,109 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]]
2021-03-12 10:13:05,109 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]
2021-03-12 10:13:05,277 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:13:05,450 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:13:05,456 [main:117] - GENERATED CALL = (::baz).name.replaceBefore('ㅕ', fu0(), "wxxoq")
2021-03-12 10:13:05,456 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6b6a0]]
2021-03-12 10:13:05,456 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6b6a0]
2021-03-12 10:13:05,456 [main:117] - GENERATED CALL = (::baz).name.trimMargin(var prope2 =
2021-03-12 10:13:05,457 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]]
2021-03-12 10:13:05,457 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]
2021-03-12 10:13:05,624 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:13:05,797 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:13:05,996 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:13:06,002 [main:117] - GENERATED CALL = (::baz).name.replace('ƴ', '䡱', true)
2021-03-12 10:13:06,002 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]]
2021-03-12 10:13:06,002 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]
2021-03-12 10:13:06,002 [main:117] - GENERATED CALL = (::baz).name.trimStart()
2021-03-12 10:13:06,002 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c]]
2021-03-12 10:13:06,002 [main:117] - GENERATED CALL = (::baz).name
2021-03-12 10:13:06,002 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]]
2021-03-12 10:13:06,002 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]
2021-03-12 10:13:06,002 [main:117] - GENERATED CALL = (::baz).name.capitalize()
2021-03-12 10:13:06,002 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (::baz).name.capitalize()
2021-03-12 10:13:06,168 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:13:06,169 [main:66] - Compilation checking started
2021-03-12 10:13:07,016 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:07,020 [main:107] - replacing ("Continuation " + c + " is not subtype of CoroutineStackFrame", String)
2021-03-12 10:13:07,020 [main:50] - replacing "Continuation " + c + " is not subtype of CoroutineStackFrame" String
2021-03-12 10:13:07,020 [main:54] - Getting value of type String
2021-03-12 10:13:07,190 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:13:07,196 [main:58] - GENERATED VALUE OF TYPE String = "qwixs"
2021-03-12 10:13:07,197 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:08,696 [main:67] - randomType = Map<UShort?, ArrayDeque<Kla11<UByte>>>?
2021-03-12 10:13:08,697 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 10:13:08,705 [main:106] - GETTING String from Any?
2021-03-12 10:13:08,707 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]]
2021-03-12 10:13:08,707 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]
2021-03-12 10:13:08,707 [main:117] - GENERATED CALL = (Kla1().prope3).toString()
2021-03-12 10:13:08,708 [main:114] - replacement of "Continuation " + c + " is not subtype of CoroutineStackFrame" of type String is (Kla1().prope3).toString()
2021-03-12 10:13:08,875 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:13:08,876 [main:66] - Compilation checking started
2021-03-12 10:13:09,660 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:09,662 [main:107] - replacing (prope15.prope12, String)
2021-03-12 10:13:09,663 [main:50] - replacing prope15.prope12 String
2021-03-12 10:13:09,663 [main:54] - Getting value of type String
2021-03-12 10:13:09,846 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:13:09,852 [main:58] - GENERATED VALUE OF TYPE String = "lltgd"
2021-03-12 10:13:09,853 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:09,876 [main:67] - randomType = Kla12
2021-03-12 10:13:10,046 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-12 10:13:10,051 [main:112] - generating klass Kla12 text = class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}
2021-03-12 10:13:10,057 [main:106] - GETTING String from Continuation<Short>
2021-03-12 10:13:10,064 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 10:13:10,072 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:13:10,078 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 10:13:10,093 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:13:10,094 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:10,138 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:13:10,138 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:13:10,325 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:13:10,507 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:13:10,512 [main:117] - GENERATED CALL = (::baz).name.substringBeforeLast('Α', "znfit")
2021-03-12 10:13:10,513 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ea8dc]]
2021-03-12 10:13:10,513 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ea8dc]
2021-03-12 10:13:10,683 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:10,856 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:10,862 [main:117] - GENERATED CALL = (::baz).name.removeRange(626591796, -1686658467)
2021-03-12 10:13:10,862 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]]
2021-03-12 10:13:10,862 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]
2021-03-12 10:13:10,862 [main:117] - GENERATED CALL = (::baz).name.trimStart()
2021-03-12 10:13:10,862 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]]
2021-03-12 10:13:10,863 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]
2021-03-12 10:13:11,030 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:11,037 [main:117] - GENERATED CALL = (::baz).name.takeLast(-208686591)
2021-03-12 10:13:11,037 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]]
2021-03-12 10:13:11,037 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]
2021-03-12 10:13:11,204 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 10:13:11,381 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(): Iterable<Int> = TODO()
2021-03-12 10:13:11,388 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(): Iterable<Int> = TODO()
2021-03-12 10:13:11,569 [main:95] - GENERATED = mutableSetOf<Int>()
2021-03-12 10:13:11,569 [main:117] - GENERATED CALL = (::baz).name.slice(mutableSetOf<Int>())
2021-03-12 10:13:11,569 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]]
2021-03-12 10:13:11,569 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]
2021-03-12 10:13:11,738 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:11,910 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:13:11,916 [main:117] - GENERATED CALL = (::baz).name.padEnd(-68688016, '䩺')
2021-03-12 10:13:11,916 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]]
2021-03-12 10:13:11,916 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]
2021-03-12 10:13:12,083 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:13:12,092 [main:117] - GENERATED CALL = (::baz).name.removePrefix("kscmp")
2021-03-12 10:13:12,092 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]]
2021-03-12 10:13:12,092 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]
2021-03-12 10:13:12,092 [main:117] - GENERATED CALL = (::baz).name.lowercase()
2021-03-12 10:13:12,092 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]]
2021-03-12 10:13:12,092 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]
2021-03-12 10:13:12,092 [main:117] - GENERATED CALL = (::baz).name.toLowerCase()
2021-03-12 10:13:12,093 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]]
2021-03-12 10:13:12,093 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]
2021-03-12 10:13:12,259 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:13:12,264 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:13:12,270 [main:117] - GENERATED CALL = (::baz).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 10:13:12,271 [main:114] - replacement of prope15.prope12 of type String is (::baz).name.padEnd(-68688016, '䩺')
2021-03-12 10:13:12,438 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:13:12,439 [main:66] - Compilation checking started
2021-03-12 10:13:13,238 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if ((::baz).name.padEnd(-68688016, '䩺') != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:13,242 [main:107] - replacing ((::baz).name.padEnd(-68688016, '䩺') != "OK", Boolean)
2021-03-12 10:13:13,242 [main:50] - replacing (::baz).name.padEnd(-68688016, '䩺') != "OK" Boolean
2021-03-12 10:13:13,242 [main:54] - Getting value of type Boolean
2021-03-12 10:13:13,413 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:13:13,419 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:13:13,419 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:13,839 [main:67] - randomType = Array<Short>
2021-03-12 10:13:14,015 [main:302] - generating value of type = Array<Short> false depth = 0
2021-03-12 10:13:14,191 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Short): Array<Short> = TODO()
2021-03-12 10:13:14,198 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Short): Array<Short> = TODO()
2021-03-12 10:13:14,378 [main:302] - generating value of type = Short true depth = 3
2021-03-12 10:13:14,384 [main:95] - GENERATED = arrayOf<Short>(3757)
2021-03-12 10:13:14,395 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@7a1aa217]
2021-03-12 10:13:14,396 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:13:14,396 [main:78] - Generated call from random type = (arrayOf<Short>(3757)).equals(Kla1().prope3).not()
2021-03-12 10:13:14,397 [main:106] - GETTING Boolean from String
2021-03-12 10:13:14,438 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]]
2021-03-12 10:13:14,438 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]
2021-03-12 10:13:14,438 [main:117] - GENERATED CALL = (fu0()).endsWith(fu0(), Kla4().prope6)
2021-03-12 10:13:14,438 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]]
2021-03-12 10:13:14,438 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]
2021-03-12 10:13:14,438 [main:117] - GENERATED CALL = (fu0()).matches(var prope2 =
2021-03-12 10:13:14,439 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db38d1a]]
2021-03-12 10:13:14,439 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 10:13:14,611 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:14,617 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2db38d1a]
2021-03-12 10:13:14,617 [main:117] - GENERATED CALL = (fu0()).get(711688084).isHighSurrogate()
2021-03-12 10:13:14,617 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:13:14,617 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:13:14,618 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:13:14,618 [main:117] - GENERATED CALL = (fu0()).equals(Kla1().prope3).or(Kla4().prope6)
2021-03-12 10:13:14,618 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]]
2021-03-12 10:13:14,618 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:13:14,787 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:13:14,788 [main:117] - GENERATED CALL = (fu0()).equals("dsppm")
2021-03-12 10:13:14,788 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eae6d94]]
2021-03-12 10:13:14,788 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@eae6d94]
2021-03-12 10:13:14,788 [main:117] - GENERATED CALL = (fu0()).none()
2021-03-12 10:13:14,788 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@643b3652]]
2021-03-12 10:13:14,788 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7]
2021-03-12 10:13:14,959 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:15,133 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:15,139 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@643b3652]
2021-03-12 10:13:15,306 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 10:13:15,482 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 10:13:15,490 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 10:13:15,872 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:13:15,878 [main:95] - GENERATED = Regex("gnysl")
2021-03-12 10:13:15,878 [main:117] - GENERATED CALL = (fu0()).subSequence(-714770652, -37514241).matches(Regex("gnysl"))
2021-03-12 10:13:15,879 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e83109e]]
2021-03-12 10:13:15,879 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7]
2021-03-12 10:13:16,047 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:16,222 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:16,228 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e83109e]
2021-03-12 10:13:16,228 [main:117] - GENERATED CALL = (fu0()).subSequence(1618741120, -337664291).isBlank()
2021-03-12 10:13:16,228 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@130dc28e]]
2021-03-12 10:13:16,228 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7]
2021-03-12 10:13:16,396 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:16,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:16,577 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@130dc28e]
2021-03-12 10:13:16,745 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:16,751 [main:117] - GENERATED CALL = (fu0()).subSequence(-505035473, 245416868).hasSurrogatePairAt(-1153213865)
2021-03-12 10:13:16,751 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53a509a1]]
2021-03-12 10:13:16,751 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7]
2021-03-12 10:13:16,919 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:17,093 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:17,099 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53a509a1]
2021-03-12 10:13:17,100 [main:117] - GENERATED CALL = (fu0()).subSequence(1563697882, 787618584).any()
2021-03-12 10:13:17,100 [main:114] - replacement of (::baz).name.padEnd(-68688016, '䩺') != "OK" of type Boolean is (fu0()).subSequence(-714770652, -37514241).matches(Regex("gnysl"))
2021-03-12 10:13:17,267 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:13:17,267 [main:66] - Compilation checking started
2021-03-12 10:13:17,771 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if ((fu0()).subSequence(-714770652, -37514241).matches(Regex("gnysl"))) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:17,774 [main:107] - replacing (prope12, String)
2021-03-12 10:13:17,774 [main:50] - replacing prope12 String
2021-03-12 10:13:17,774 [main:54] - Getting value of type String
2021-03-12 10:13:17,944 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:13:17,950 [main:58] - GENERATED VALUE OF TYPE String = "pjspi"
2021-03-12 10:13:17,950 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:18,806 [main:67] - randomType = Array<UInt?>?
2021-03-12 10:13:18,975 [main:302] - generating value of type = Array<UInt?> false depth = 0
2021-03-12 10:13:19,155 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<UInt?> = TODO()
2021-03-12 10:13:19,162 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<UInt?> = TODO()
2021-03-12 10:13:19,344 [main:95] - GENERATED = enumValues<UInt?>()
2021-03-12 10:13:19,358 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@442eca97]
2021-03-12 10:13:19,358 [main:78] - Generated call from random type = (enumValues<UInt?>())?.contentToString()
2021-03-12 10:13:19,359 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 10:13:19,374 [main:106] - GETTING String from KFunction1<A, Unit>
2021-03-12 10:13:19,398 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]]
2021-03-12 10:13:19,398 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]
2021-03-12 10:13:19,568 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:13:19,577 [main:117] - GENERATED CALL = (A::bar).name.removeSurrounding("utzps")
2021-03-12 10:13:19,577 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]]
2021-03-12 10:13:19,577 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]
2021-03-12 10:13:19,577 [main:117] - GENERATED CALL = (A::bar).name.decapitalize()
2021-03-12 10:13:19,577 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]]
2021-03-12 10:13:19,577 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]
2021-03-12 10:13:19,578 [main:117] - GENERATED CALL = (A::bar).name.trimEnd()
2021-03-12 10:13:19,578 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]]
2021-03-12 10:13:19,578 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]
2021-03-12 10:13:19,745 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:13:19,751 [main:117] - GENERATED CALL = (A::bar).name.substringBefore('鶔', fu0())
2021-03-12 10:13:19,751 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]]
2021-03-12 10:13:19,751 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]
2021-03-12 10:13:19,920 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:13:19,925 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:13:19,931 [main:117] - GENERATED CALL = (A::bar).name.replaceFirstChar({a: Char -> '㣲'})
2021-03-12 10:13:19,931 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]]
2021-03-12 10:13:19,932 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]
2021-03-12 10:13:19,932 [main:117] - GENERATED CALL = (A::bar).name.concat(var prope2 =
2021-03-12 10:13:19,932 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]]
2021-03-12 10:13:19,932 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]
2021-03-12 10:13:20,101 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:20,107 [main:117] - GENERATED CALL = (A::bar).name.takeLast(-672472057)
2021-03-12 10:13:20,107 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]]
2021-03-12 10:13:20,107 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]
2021-03-12 10:13:20,275 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:20,281 [main:117] - GENERATED CALL = (A::bar).name.dropLast(-2059081170)
2021-03-12 10:13:20,281 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]]
2021-03-12 10:13:20,281 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]
2021-03-12 10:13:20,451 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:20,457 [main:117] - GENERATED CALL = (A::bar).name.drop(-1779811681)
2021-03-12 10:13:20,457 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]]
2021-03-12 10:13:20,457 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]
2021-03-12 10:13:20,457 [main:117] - GENERATED CALL = (A::bar).name.lowercase()
2021-03-12 10:13:20,457 [main:114] - replacement of prope12 of type String is (A::bar).name.removeSurrounding("utzps")
2021-03-12 10:13:20,628 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:13:20,628 [main:66] - Compilation checking started
2021-03-12 10:13:21,127 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.(A::bar).name.removeSurrounding("utzps")
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if ((::baz).name.padEnd(-68688016, '䩺') != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:21,130 [main:107] - replacing ({
            prope12 = "ahzcz"
        }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>)
2021-03-12 10:13:21,130 [main:50] - replacing {
            prope12 = "ahzcz"
        } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:13:21,130 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:13:21,299 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> false depth = 0
2021-03-12 10:13:21,305 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:13:21,483 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:13:21,491 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:13:21,876 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:13:21,882 [main:95] - GENERATED = require(false)
2021-03-12 10:13:21,882 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> = {a: Kla7 -> require(false)}
2021-03-12 10:13:21,883 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:21,906 [main:67] - randomType = Kla8
2021-03-12 10:13:21,910 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:21,958 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from String
2021-03-12 10:13:21,980 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:13:21,989 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<A, Unit>
2021-03-12 10:13:22,020 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Function0<Unit>
2021-03-12 10:13:22,034 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Short>
2021-03-12 10:13:22,045 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:13:22,049 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Any?
2021-03-12 10:13:22,056 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:13:22,060 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Boolean
2021-03-12 10:13:22,073 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from EmptyCoroutineContext
2021-03-12 10:13:22,092 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:22,139 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Any?>
2021-03-12 10:13:22,146 [main:114] - replacement of {
            prope12 = "ahzcz"
        } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> is {a: Kla7 -> require(false)}
2021-03-12 10:13:22,313 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:13:22,314 [main:66] - Compilation checking started
2021-03-12 10:13:22,835 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if ((::baz).name.padEnd(-68688016, '䩺') != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {a: Kla7 -> require(false)}
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:22,837 [main:107] - replacing (x, Function1<Ty1, Unit>)
2021-03-12 10:13:22,839 [main:50] - replacing x Function1<Ty1, Unit>
2021-03-12 10:13:22,839 [main:54] - Getting value of type Function1<Ty1, Unit>
2021-03-12 10:13:23,013 [main:302] - generating value of type = Function1<Ty1, Unit> false depth = 0
2021-03-12 10:13:23,019 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:13:23,199 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:13:23,206 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:13:23,803 [main:302] - generating value of type = Int true depth = 4
2021-03-12 10:13:23,809 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 10:13:23,815 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 10:13:23,991 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 10:13:23,998 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 10:13:24,391 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 10:13:24,397 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 10:13:24,576 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:13:24,584 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:13:25,179 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 10:13:25,185 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-12 10:13:25,190 [main:302] - generating value of type = Any false depth = 13
2021-03-12 10:13:25,191 [main:95] - GENERATED = require(true, { "hrfbh"})
2021-03-12 10:13:25,191 [main:95] - GENERATED = contract({ require(true, { "hrfbh"})})
2021-03-12 10:13:25,191 [main:95] - GENERATED = repeat(437653053, {a: Int -> contract({ require(true, { "hrfbh"})})})
2021-03-12 10:13:25,191 [main:58] - GENERATED VALUE OF TYPE Function1<Ty1, Unit> = {a: Ty1 -> repeat(437653053, {a: Int -> contract({ require(true, { "hrfbh"})})})}
2021-03-12 10:13:25,191 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:25,215 [main:67] - randomType = Kla1
2021-03-12 10:13:25,384 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 10:13:25,390 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:13:25,406 [main:106] - GETTING Function1<Ty1, Unit> from EmptyCoroutineContext
2021-03-12 10:13:25,421 [main:106] - GETTING Function1<Ty1, Unit> from Any?
2021-03-12 10:13:25,425 [main:106] - GETTING Function1<Ty1, Unit> from Function0<Unit>
2021-03-12 10:13:25,435 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-12 10:13:25,454 [main:106] - GETTING Function1<Ty1, Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:25,507 [main:106] - GETTING Function1<Ty1, Unit> from CoroutineContext
2021-03-12 10:13:25,517 [main:106] - GETTING Function1<Ty1, Unit> from KFunction1<A, Unit>
2021-03-12 10:13:25,558 [main:106] - GETTING Function1<Ty1, Unit> from CoroutineContext
2021-03-12 10:13:25,559 [main:106] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-12 10:13:25,574 [main:106] - GETTING Function1<Ty1, Unit> from Continuation<Short>
2021-03-12 10:13:25,587 [main:106] - GETTING Function1<Ty1, Unit> from Continuation<Any?>
2021-03-12 10:13:25,601 [main:106] - GETTING Function1<Ty1, Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:25,644 [main:106] - GETTING Function1<Ty1, Unit> from CoroutineContext
2021-03-12 10:13:25,644 [main:114] - replacement of x of type Function1<Ty1, Unit> is {a: Ty1 -> repeat(437653053, {a: Int -> contract({ require(true, { "hrfbh"})})})}
2021-03-12 10:13:25,818 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:13:25,818 [main:66] - Compilation checking started
2021-03-12 10:13:26,336 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if ((::baz).name.padEnd(-68688016, '䩺') != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
{a: Ty1 -> repeat(437653053, {a: Int -> contract({ require(true, { "hrfbh"})})})}(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:26,339 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-12 10:13:26,340 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-12 10:13:26,340 [main:54] - Getting value of type String
2021-03-12 10:13:26,511 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:13:26,517 [main:58] - GENERATED VALUE OF TYPE String = "bvynd"
2021-03-12 10:13:26,517 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:26,961 [main:67] - randomType = UByte?
2021-03-12 10:13:27,131 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:13:27,168 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UByte): kotlin.UByte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@43a7bcf9]
2021-03-12 10:13:27,338 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:13:27,344 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@314f7ce3]
2021-03-12 10:13:27,513 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:27,519 [main:78] - Generated call from random type = (72.toUByte())?.and(122.toUByte()).toString(-1060533518)
2021-03-12 10:13:27,519 [main:114] - replacement of "tail-call optimization hit: method " of type String is (72.toUByte())?.and(122.toUByte()).toString(-1060533518)
2021-03-12 10:13:27,688 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:13:27,688 [main:66] - Compilation checking started
2021-03-12 10:13:28,517 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if ((::baz).name.padEnd(-68688016, '䩺') != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:28,519 [main:107] - replacing (prope16, Result<Any?>)
2021-03-12 10:13:28,520 [main:50] - replacing prope16 Result<Any?>
2021-03-12 10:13:28,520 [main:54] - Getting value of type Result<Any?>
2021-03-12 10:13:28,694 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 10:13:28,876 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 10:13:28,883 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 10:13:29,283 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 10:13:29,289 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:13:29,289 [main:95] - GENERATED = runCatching<Any?>({ "bqfwo"})
2021-03-12 10:13:29,289 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "bqfwo"})
2021-03-12 10:13:29,289 [main:61] - GENERATED IS CALL =true
2021-03-12 10:13:30,158 [main:67] - randomType = ArrayDeque<UShort?>?
2021-03-12 10:13:30,335 [main:302] - generating value of type = ArrayDeque<UShort?> false depth = 0
2021-03-12 10:13:30,521 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UShort?>): ArrayDeque<UShort?> = TODO()
2021-03-12 10:13:30,528 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UShort?>): ArrayDeque<UShort?> = TODO()
2021-03-12 10:13:30,943 [main:302] - generating value of type = Collection<UShort?> false depth = 3
2021-03-12 10:13:31,166 [main:43] - GENERATING CALL OF fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->UShort?): Collection<UShort?> = TODO()
2021-03-12 10:13:31,173 [main:61] - WITHOUT TYPE PARAMS = fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->UShort?): Collection<UShort?> = TODO()
2021-03-12 10:13:31,782 [main:302] - generating value of type = Int true depth = 6
2021-03-12 10:13:31,788 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, UShort?> false depth = 6
2021-03-12 10:13:31,794 [main:302] - generating value of type = UShort true depth = 7
2021-03-12 10:13:31,800 [main:95] - GENERATED = MutableList<UShort?>(2040214462, {a: Int -> 31010.toUShort()})
2021-03-12 10:13:31,800 [main:95] - GENERATED = ArrayDeque<UShort?>(MutableList<UShort?>(2040214462, {a: Int -> 31010.toUShort()}))
2021-03-12 10:13:31,938 [main:106] - GETTING Result<Any?> from Continuation<Short>
2021-03-12 10:13:31,946 [main:106] - GETTING Result<Any?> from Function0<Unit>
2021-03-12 10:13:31,956 [main:106] - GETTING Result<Any?> from String
2021-03-12 10:13:31,975 [main:106] - GETTING Result<Any?> from Any?
2021-03-12 10:13:31,979 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 10:13:31,986 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 10:13:31,987 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 10:13:31,989 [main:106] - GETTING Result<Any?> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:32,034 [main:106] - GETTING Result<Any?> from EmptyCoroutineContext
2021-03-12 10:13:32,049 [main:106] - GETTING Result<Any?> from KFunction1<A, Unit>
2021-03-12 10:13:32,076 [main:106] - GETTING Result<Any?> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:32,126 [main:106] - GETTING Result<Any?> from Boolean
2021-03-12 10:13:32,136 [main:106] - GETTING Result<Any?> from Continuation<Any?>
2021-03-12 10:13:32,143 [main:114] - replacement of prope16 of type Result<Any?> is runCatching<Any?>({ "bqfwo"})
2021-03-12 10:13:32,314 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:13:32,314 [main:66] - Compilation checking started
2021-03-12 10:13:33,148 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if ((::baz).name.padEnd(-68688016, '䩺') != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if (prope15.prope12 != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:33,151 [main:107] - replacing (prope15.prope12, String)
2021-03-12 10:13:33,152 [main:50] - replacing prope15.prope12 String
2021-03-12 10:13:33,152 [main:54] - Getting value of type String
2021-03-12 10:13:33,326 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:13:33,332 [main:58] - GENERATED VALUE OF TYPE String = "fuyzd"
2021-03-12 10:13:33,332 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:33,566 [main:67] - randomType = LinkedHashSet<Kla3>
2021-03-12 10:13:33,738 [main:302] - generating value of type = LinkedHashSet<Kla3> false depth = 0
2021-03-12 10:13:33,921 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Kla3> = TODO()
2021-03-12 10:13:33,928 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Kla3> = TODO()
2021-03-12 10:13:34,114 [main:95] - GENERATED = linkedSetOf<Kla3>()
2021-03-12 10:13:34,233 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@7bb2f8c6]
2021-03-12 10:13:34,233 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@442eca97]
2021-03-12 10:13:34,233 [main:78] - Generated call from random type = (linkedSetOf<Kla3>()).toArray().contentToString()
2021-03-12 10:13:34,234 [main:106] - GETTING String from KFunction1<A, Unit>
2021-03-12 10:13:34,259 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]]
2021-03-12 10:13:34,259 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]
2021-03-12 10:13:34,431 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:13:34,437 [main:117] - GENERATED CALL = (A::bar).name.substringBefore('䝀', var prope2 =
2021-03-12 10:13:34,437 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]]
2021-03-12 10:13:34,437 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]
2021-03-12 10:13:34,437 [main:117] - GENERATED CALL = (A::bar).name.toUpperCase()
2021-03-12 10:13:34,437 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]]
2021-03-12 10:13:34,437 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]
2021-03-12 10:13:34,609 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:13:34,786 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:13:34,793 [main:117] - GENERATED CALL = (A::bar).name.replaceBefore('꧋', fu0(), "nespr")
2021-03-12 10:13:34,793 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]]
2021-03-12 10:13:34,793 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]
2021-03-12 10:13:34,793 [main:117] - GENERATED CALL = (A::bar).name.trimEnd()
2021-03-12 10:13:34,793 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:13:34,793 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:13:34,793 [main:117] - GENERATED CALL = (A::bar).name.prependIndent(var prope2 =
2021-03-12 10:13:34,793 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6b6a0]]
2021-03-12 10:13:34,793 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6b6a0]
2021-03-12 10:13:34,998 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:13:35,004 [main:117] - GENERATED CALL = (A::bar).name.trimMargin("jdcwb")
2021-03-12 10:13:35,004 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd90b7c]]
2021-03-12 10:13:35,004 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd90b7c]
2021-03-12 10:13:35,005 [main:117] - GENERATED CALL = (A::bar).name.replaceIndent(var prope2 =
2021-03-12 10:13:35,005 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0f9bf]]
2021-03-12 10:13:35,005 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0f9bf]
2021-03-12 10:13:35,179 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:35,185 [main:117] - GENERATED CALL = (A::bar).name.substring(1356148234)
2021-03-12 10:13:35,185 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]]
2021-03-12 10:13:35,185 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]
2021-03-12 10:13:35,186 [main:117] - GENERATED CALL = (A::bar).name.decapitalize()
2021-03-12 10:13:35,186 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]]
2021-03-12 10:13:35,186 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]
2021-03-12 10:13:35,367 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:13:35,373 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:13:35,379 [main:117] - GENERATED CALL = (A::bar).name.dropLastWhile({a: Char -> true})
2021-03-12 10:13:35,380 [main:114] - replacement of prope15.prope12 of type String is (linkedSetOf<Kla3>()).toArray().contentToString()
2021-03-12 10:13:35,555 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:13:35,555 [main:66] - Compilation checking started
2021-03-12 10:13:36,582 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if ((::baz).name.padEnd(-68688016, '䩺') != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:36,585 [main:107] - replacing (1, Int)
2021-03-12 10:13:36,586 [main:50] - replacing 1 Int
2021-03-12 10:13:36,586 [main:54] - Getting value of type Int
2021-03-12 10:13:36,788 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:36,794 [main:58] - GENERATED VALUE OF TYPE Int = -391677442
2021-03-12 10:13:36,794 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:37,039 [main:67] - randomType = Kla3?
2021-03-12 10:13:37,223 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 10:13:37,230 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:13:37,237 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@44307378]
2021-03-12 10:13:37,420 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:13:37,420 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:13:37,420 [main:78] - Generated call from random type = (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)
2021-03-12 10:13:37,421 [main:106] - GETTING Int from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:37,469 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c301924]]
2021-03-12 10:13:37,469 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c301924]
2021-03-12 10:13:37,470 [main:117] - GENERATED CALL = (Int::foo).name.toInt()
2021-03-12 10:13:37,470 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]]
2021-03-12 10:13:37,470 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@65f42c68]
2021-03-12 10:13:37,470 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:13:37,470 [main:117] - GENERATED CALL = (Int::foo).equals(Kla1().prope3).compareTo(Kla4().prope6)
2021-03-12 10:13:37,470 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@236a23f]]
2021-03-12 10:13:37,470 [main:117] - GENERATED CALL = (Int::foo).name.length
2021-03-12 10:13:37,470 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e642d]]
2021-03-12 10:13:37,470 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e642d]
2021-03-12 10:13:37,650 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:13:37,657 [main:117] - GENERATED CALL = (Int::foo).name.compareTo("fuorb", Kla4().prope6)
2021-03-12 10:13:37,657 [main:114] - replacement of 1 of type Int is (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)
2021-03-12 10:13:37,839 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:13:37,839 [main:66] - Compilation checking started
2021-03-12 10:13:38,728 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if ((::baz).name.padEnd(-68688016, '䩺') != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:38,731 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 10:13:38,732 [main:50] - replacing getOrThrow() Any?
2021-03-12 10:13:38,732 [main:54] - Getting value of type Any?
2021-03-12 10:13:38,909 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:13:38,910 [main:58] - GENERATED VALUE OF TYPE Any? = "gksha"
2021-03-12 10:13:38,910 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:39,351 [main:67] - randomType = List<Short>
2021-03-12 10:13:39,352 [main:106] - GETTING Any? from Any?
2021-03-12 10:13:39,358 [main:106] - GETTING Any? from Boolean
2021-03-12 10:13:39,369 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 10:13:39,376 [main:106] - GETTING Any? from Continuation<Short>
2021-03-12 10:13:39,384 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 10:13:39,394 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:13:39,400 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:13:39,401 [main:106] - GETTING Any? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:39,444 [main:106] - GETTING Any? from KFunction1<A, Unit>
2021-03-12 10:13:39,497 [main:106] - GETTING Any? from String
2021-03-12 10:13:39,517 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 10:13:39,530 [main:106] - GETTING Any? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:39,575 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:13:39,575 [main:114] - replacement of getOrThrow() of type Any? is "gksha"
2021-03-12 10:13:39,752 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 10:13:39,753 [main:66] - Compilation checking started
2021-03-12 10:13:40,292 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if ((::baz).name.padEnd(-68688016, '䩺') != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"})."gksha"
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:40,295 [main:107] - replacing (prope12, String)
2021-03-12 10:13:40,296 [main:50] - replacing prope12 String
2021-03-12 10:13:40,296 [main:54] - Getting value of type String
2021-03-12 10:13:40,478 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:13:40,484 [main:58] - GENERATED VALUE OF TYPE String = "lvzcc"
2021-03-12 10:13:40,484 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:42,897 [main:67] - randomType = ArrayList<Function1<ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>>, Kla3>>
2021-03-12 10:13:43,074 [main:302] - generating value of type = ArrayList<Function1<ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>>, Kla3>> false depth = 0
2021-03-12 10:13:43,264 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Function1<ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>>, Kla3>): ArrayList<Function1<ArrayList<LkedHashMap<Float, Function2<Double?, Kla9, LkedHashMap<Strg, UInt>>>>, Kla3>> = TODO()
2021-03-12 10:13:43,271 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Function1<ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>>, Kla3>): ArrayList<Function1<ArrayList<LkedHashMap<Float, Function2<Double?, Kla9, LkedHashMap<Strg, UInt>>>>, Kla3>> = TODO()
2021-03-12 10:13:43,464 [main:302] - generating value of type = Function1<ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>>, Kla3> false depth = 3
2021-03-12 10:13:43,470 [main:302] - generating value of type = Kla3 false depth = 4
2021-03-12 10:13:43,476 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:13:43,476 [main:95] - GENERATED = arrayListOf<Function1<ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>>, Kla3>>({a: ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>> -> Kla3()})
2021-03-12 10:13:43,886 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:13:44,066 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:44,072 [main:78] - Generated call from random type = (arrayListOf<Function1<ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>>, Kla3>>({a: ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>> -> Kla3()})).modCount.toString(1753834342)
2021-03-12 10:13:44,072 [main:114] - replacement of prope12 of type String is (arrayListOf<Function1<ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>>, Kla3>>({a: ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>> -> Kla3()})).modCount.toString(1753834342)
2021-03-12 10:13:44,251 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:13:44,251 [main:66] - Compilation checking started
2021-03-12 10:13:44,858 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.(arrayListOf<Function1<ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>>, Kla3>>({a: ArrayList<LinkedHashMap<Float, Function2<Double?, Kla9, LinkedHashMap<String, UInt>>>> -> Kla3()})).modCount.toString(1753834342)
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if ((::baz).name.padEnd(-68688016, '䩺') != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:44,861 [main:107] - replacing (c, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>)
2021-03-12 10:13:44,861 [main:50] - replacing c [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:13:44,861 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:13:45,060 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> false depth = 0
2021-03-12 10:13:45,066 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:13:45,254 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:13:45,262 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:13:45,672 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:13:45,678 [main:95] - GENERATED = check(true)
2021-03-12 10:13:45,678 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> = {a: Kla7 -> check(true)}
2021-03-12 10:13:45,678 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:45,926 [main:67] - randomType = LinkedHashSet<Kla7>
2021-03-12 10:13:46,105 [main:302] - generating value of type = LinkedHashSet<Kla7> false depth = 0
2021-03-12 10:13:46,293 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Kla7> = TODO()
2021-03-12 10:13:46,300 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Kla7> = TODO()
2021-03-12 10:13:46,488 [main:95] - GENERATED = linkedSetOf<Kla7>()
2021-03-12 10:13:46,615 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Any?
2021-03-12 10:13:46,622 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from EmptyCoroutineContext
2021-03-12 10:13:46,639 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:46,685 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Short>
2021-03-12 10:13:46,695 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:13:46,705 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<A, Unit>
2021-03-12 10:13:46,735 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Function0<Unit>
2021-03-12 10:13:46,747 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:13:46,750 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:13:46,754 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Any?>
2021-03-12 10:13:46,765 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:46,812 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Boolean
2021-03-12 10:13:46,824 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from String
2021-03-12 10:13:46,845 [main:114] - replacement of c of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> is {a: Kla7 -> check(true)}
2021-03-12 10:13:47,028 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:13:47,029 [main:66] - Compilation checking started
2021-03-12 10:13:47,627 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.{a: Kla7 -> check(true)}()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if ((::baz).name.padEnd(-68688016, '䩺') != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:47,630 [main:107] - replacing ((::baz).name.padEnd(-68688016, '䩺') != "OK", Boolean)
2021-03-12 10:13:47,631 [main:50] - replacing (::baz).name.padEnd(-68688016, '䩺') != "OK" Boolean
2021-03-12 10:13:47,631 [main:54] - Getting value of type Boolean
2021-03-12 10:13:47,810 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:13:47,816 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:13:47,816 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:48,034 [main:67] - randomType = UInt
2021-03-12 10:13:48,210 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 10:13:48,245 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@37971a2e]
2021-03-12 10:13:48,246 [main:78] - Generated call from random type = (1511240520.toUInt()).equals(Kla1().prope3)
2021-03-12 10:13:48,247 [main:106] - GETTING Boolean from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:48,289 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]]
2021-03-12 10:13:48,290 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6557de6]
2021-03-12 10:13:48,290 [main:117] - GENERATED CALL = (::baz).name.matches(var prope2 =
2021-03-12 10:13:48,290 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]]
2021-03-12 10:13:48,290 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24415283]
2021-03-12 10:13:48,290 [main:117] - GENERATED CALL = (::baz).name.equals(Kla1().prope3)
2021-03-12 10:13:48,290 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]]
2021-03-12 10:13:48,290 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a95e713]
2021-03-12 10:13:48,291 [main:117] - GENERATED CALL = (::baz).name.endsWith(var prope2 =
2021-03-12 10:13:48,291 [main:113] - Case = [public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@165de6ee], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@616a635f]]
2021-03-12 10:13:48,291 [main:149] - GENERATING call of type public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@165de6ee]
2021-03-12 10:13:48,470 [main:302] - generating value of type = [@kotlin.ParameterName] String true depth = 0
2021-03-12 10:13:48,484 [main:158] - CANT GENERATE PARAMS FOR public abstract fun invoke(name: kotlin.String): kotlin.Unit defined in kotlin.reflect.KFunction1[FunctionInvokeDescriptor@165de6ee]
2021-03-12 10:13:48,484 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:13:48,484 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:13:48,484 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:13:48,484 [main:117] - GENERATED CALL = (::baz).equals(Kla1().prope3).equals(Kla1().prope3)
2021-03-12 10:13:48,484 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:13:48,484 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:13:48,664 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:13:48,664 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:13:48,664 [main:117] - GENERATED CALL = (::baz).equals("xsxfr").not()
2021-03-12 10:13:48,664 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]]
2021-03-12 10:13:48,664 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:13:48,664 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:13:48,664 [main:117] - GENERATED CALL = (::baz).equals(Kla1().prope3).xor(Kla4().prope6)
2021-03-12 10:13:48,664 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]]
2021-03-12 10:13:48,665 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:13:48,841 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:13:48,842 [main:117] - GENERATED CALL = (::baz).equals("eyyaj")
2021-03-12 10:13:48,842 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]]
2021-03-12 10:13:48,842 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa2d2b6]
2021-03-12 10:13:49,019 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:13:49,025 [main:117] - GENERATED CALL = (::baz).name.startsWith(var prope2 =
2021-03-12 10:13:49,025 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 10:13:49,025 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@36c31d75]
2021-03-12 10:13:49,204 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:13:49,204 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 10:13:49,205 [main:117] - GENERATED CALL = (::baz).equals("cleyt").and(Kla4().prope6)
2021-03-12 10:13:49,205 [main:114] - replacement of (::baz).name.padEnd(-68688016, '䩺') != "OK" of type Boolean is true
2021-03-12 10:13:49,383 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 10:13:49,383 [main:66] - Compilation checking started
2021-03-12 10:13:50,245 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 {
        fu14 {
            prope12 = fu17()
        }
    }
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:50,248 [main:107] - replacing ({
        fu14 {
            prope12 = fu17()
        }
    }, SuspendFunction0<Unit>)
2021-03-12 10:13:50,249 [main:50] - replacing {
        fu14 {
            prope12 = fu17()
        }
    } SuspendFunction0<Unit>
2021-03-12 10:13:50,249 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 10:13:50,428 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 10:13:50,434 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:13:50,619 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:13:50,626 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:13:51,028 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:13:51,035 [main:95] - GENERATED = require(true)
2021-03-12 10:13:51,035 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(true)}
2021-03-12 10:13:51,035 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:51,460 [main:67] - randomType = Float?
2021-03-12 10:13:51,662 [main:302] - generating value of type = Float true depth = 0
2021-03-12 10:13:51,701 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 10:13:51,707 [main:106] - GETTING SuspendFunction0<Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:51,752 [main:106] - GETTING SuspendFunction0<Unit> from Any?
2021-03-12 10:13:51,755 [main:106] - GETTING SuspendFunction0<Unit> from Function0<Unit>
2021-03-12 10:13:51,765 [main:106] - GETTING SuspendFunction0<Unit> from KFunction1<A, Unit>
2021-03-12 10:13:51,791 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 10:13:51,808 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 10:13:51,809 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 10:13:51,810 [main:106] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-12 10:13:51,821 [main:106] - GETTING SuspendFunction0<Unit> from EmptyCoroutineContext
2021-03-12 10:13:51,836 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Any?>
2021-03-12 10:13:51,844 [main:106] - GETTING SuspendFunction0<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:51,889 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Short>
2021-03-12 10:13:51,896 [main:114] - replacement of {
        fu14 {
            prope12 = fu17()
        }
    } of type SuspendFunction0<Unit> is { require(true)}
2021-03-12 10:13:52,074 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:13:52,074 [main:66] - Compilation checking started
2021-03-12 10:13:52,898 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:52,900 [main:107] - replacing ({ c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 10:13:52,900 [main:50] - replacing { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 10:13:52,900 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 10:13:53,076 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 10:13:53,082 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:13:53,268 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:13:53,276 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:13:53,902 [main:302] - generating value of type = Int true depth = 4
2021-03-12 10:13:53,908 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 10:13:53,914 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 10:13:54,102 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:13:54,110 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:13:54,514 [main:302] - generating value of type = Any false depth = 8
2021-03-12 10:13:54,514 [main:95] - GENERATED = println("asclr")
2021-03-12 10:13:54,514 [main:95] - GENERATED = repeat(-569862545, {a: Int -> println("asclr")})
2021-03-12 10:13:54,514 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}
2021-03-12 10:13:54,514 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:55,002 [main:67] - randomType = LinkedHashMap<Kla9, String>
2021-03-12 10:13:55,177 [main:302] - generating value of type = LinkedHashMap<Kla9, String> false depth = 0
2021-03-12 10:13:55,363 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Kla9, Strg> = TODO()
2021-03-12 10:13:55,370 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Kla9, Strg> = TODO()
2021-03-12 10:13:55,560 [main:95] - GENERATED = linkedMapOf<Kla9, String>()
2021-03-12 10:13:55,708 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from KFunction1<A, Unit>
2021-03-12 10:13:55,735 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from EmptyCoroutineContext
2021-03-12 10:13:55,751 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 10:13:55,760 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 10:13:55,772 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 10:13:55,779 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:55,824 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Short>
2021-03-12 10:13:55,835 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 10:13:55,836 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Any?>
2021-03-12 10:13:55,845 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 10:13:55,850 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 10:13:55,851 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 10:13:55,872 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:55,916 [main:114] - replacement of { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}
2021-03-12 10:13:56,091 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:13:56,092 [main:66] - Compilation checking started
2021-03-12 10:13:56,963 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(prope15) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:56,966 [main:107] - replacing (prope15, Kla7)
2021-03-12 10:13:56,966 [main:50] - replacing prope15 Kla7
2021-03-12 10:13:56,966 [main:54] - Getting value of type Kla7
2021-03-12 10:13:57,165 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 10:13:57,171 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}
2021-03-12 10:13:57,171 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 10:13:57,171 [main:61] - GENERATED IS CALL =true
2021-03-12 10:13:57,598 [main:67] - randomType = Byte?
2021-03-12 10:13:57,773 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:13:57,813 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:13:57,820 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:13:57,820 [main:106] - GETTING Kla7 from String
2021-03-12 10:13:57,843 [main:106] - GETTING Kla7 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:57,897 [main:106] - GETTING Kla7 from EmptyCoroutineContext
2021-03-12 10:13:57,919 [main:106] - GETTING Kla7 from KFunction1<A, Unit>
2021-03-12 10:13:57,945 [main:106] - GETTING Kla7 from Boolean
2021-03-12 10:13:57,954 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:13:57,954 [main:106] - GETTING Kla7 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:13:58,001 [main:106] - GETTING Kla7 from Function0<Unit>
2021-03-12 10:13:58,010 [main:106] - GETTING Kla7 from Any?
2021-03-12 10:13:58,013 [main:106] - GETTING Kla7 from Continuation<Any?>
2021-03-12 10:13:58,022 [main:106] - GETTING Kla7 from Continuation<Short>
2021-03-12 10:13:58,028 [main:114] - replacement of prope15 of type Kla7 is Kla7()
2021-03-12 10:13:58,201 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:13:58,202 [main:66] - Compilation checking started
2021-03-12 10:13:59,023 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:13:59,027 [main:107] - replacing (i, Int)
2021-03-12 10:13:59,027 [main:50] - replacing i Int
2021-03-12 10:13:59,027 [main:54] - Getting value of type Int
2021-03-12 10:13:59,201 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:13:59,207 [main:58] - GENERATED VALUE OF TYPE Int = -59771407
2021-03-12 10:13:59,207 [main:61] - GENERATED IS CALL =false
2021-03-12 10:13:59,441 [main:67] - randomType = Kla3?
2021-03-12 10:13:59,618 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 10:13:59,624 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:13:59,630 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@49903367]
2021-03-12 10:13:59,631 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:13:59,631 [main:78] - Generated call from random type = (Kla3())?.equals(Kla1().prope3).compareTo(Kla4().prope6)
2021-03-12 10:13:59,632 [main:106] - GETTING Int from Boolean
2021-03-12 10:13:59,666 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1310a3a]]
2021-03-12 10:13:59,666 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:13:59,840 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:13:59,846 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1310a3a]
2021-03-12 10:14:00,020 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:00,027 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(true).rotateLeft(-178506384)
2021-03-12 10:14:00,027 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bf1681a]]
2021-03-12 10:14:00,027 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:14:00,027 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bf1681a]
2021-03-12 10:14:00,200 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:00,206 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(Kla4().prope6).ushr(-1100742963)
2021-03-12 10:14:00,206 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@dd9d3f9]]
2021-03-12 10:14:00,206 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:14:00,206 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@dd9d3f9]
2021-03-12 10:14:00,206 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(Kla4().prope6).dec()
2021-03-12 10:14:00,207 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@d77e362]]
2021-03-12 10:14:00,207 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:14:00,207 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(Kla4().prope6).sign
2021-03-12 10:14:00,207 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63972697]]
2021-03-12 10:14:00,207 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:14:00,207 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63972697]
2021-03-12 10:14:00,382 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:00,388 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(Kla4().prope6).xor(-756419129)
2021-03-12 10:14:00,389 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7d24645]]
2021-03-12 10:14:00,389 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:14:00,389 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7d24645]
2021-03-12 10:14:00,568 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:14:00,574 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(Kla4().prope6).minus(4)
2021-03-12 10:14:00,575 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@696e03b]]
2021-03-12 10:14:00,575 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:14:00,575 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@696e03b]
2021-03-12 10:14:00,575 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(Kla4().prope6).takeLowestOneBit()
2021-03-12 10:14:00,575 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2267a30c]]
2021-03-12 10:14:00,575 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:14:00,575 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2267a30c]
2021-03-12 10:14:00,752 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:14:00,758 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(Kla4().prope6).div(-107)
2021-03-12 10:14:00,758 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1499f2cf]]
2021-03-12 10:14:00,758 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:14:00,758 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1499f2cf]
2021-03-12 10:14:00,939 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:00,945 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(Kla4().prope6).coerceAtMost(-1076560774)
2021-03-12 10:14:00,946 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f9c5ea9]]
2021-03-12 10:14:00,946 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:14:01,120 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:14:01,126 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f9c5ea9]
2021-03-12 10:14:01,127 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(false).toInt()
2021-03-12 10:14:01,127 [main:114] - replacement of i of type Int is (Kla4().prope6).compareTo(Kla4().prope6).minus(4)
2021-03-12 10:14:01,302 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:14:01,302 [main:66] - Compilation checking started
2021-03-12 10:14:02,140 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:02,144 [main:107] - replacing (prope9.prope12, String)
2021-03-12 10:14:02,145 [main:50] - replacing prope9.prope12 String
2021-03-12 10:14:02,145 [main:54] - Getting value of type String
2021-03-12 10:14:02,356 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:02,362 [main:58] - GENERATED VALUE OF TYPE String = "shgvs"
2021-03-12 10:14:02,362 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:03,245 [main:67] - randomType = Array<Float?>?
2021-03-12 10:14:03,422 [main:302] - generating value of type = Array<Float?> false depth = 0
2021-03-12 10:14:03,609 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Float?> = TODO()
2021-03-12 10:14:03,617 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Float?> = TODO()
2021-03-12 10:14:03,805 [main:95] - GENERATED = emptyArray<Float?>()
2021-03-12 10:14:03,817 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:14:03,993 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:03,999 [main:78] - Generated call from random type = (emptyArray<Float?>())?.size.toString(-1410438791)
2021-03-12 10:14:04,000 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:14:04,031 [main:106] - GETTING String from Function0<Unit>
2021-03-12 10:14:04,042 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:04,089 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]]
2021-03-12 10:14:04,089 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]
2021-03-12 10:14:04,089 [main:117] - GENERATED CALL = (::baz).name.toUpperCase()
2021-03-12 10:14:04,090 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]]
2021-03-12 10:14:04,090 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]
2021-03-12 10:14:04,265 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:14:04,274 [main:117] - GENERATED CALL = (::baz).name.removeSuffix("ttbbq")
2021-03-12 10:14:04,275 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]]
2021-03-12 10:14:04,275 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]
2021-03-12 10:14:04,275 [main:117] - GENERATED CALL = (::baz).name.reversed()
2021-03-12 10:14:04,275 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]]
2021-03-12 10:14:04,275 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@714bbadf]
2021-03-12 10:14:04,275 [main:117] - GENERATED CALL = (::baz).name.trimIndent()
2021-03-12 10:14:04,275 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]]
2021-03-12 10:14:04,275 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]
2021-03-12 10:14:04,451 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:04,458 [main:117] - GENERATED CALL = (::baz).name.substringBefore('', var prope2 =
2021-03-12 10:14:04,458 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]]
2021-03-12 10:14:04,458 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]
2021-03-12 10:14:04,636 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:04,817 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:04,823 [main:117] - GENERATED CALL = (::baz).name.padEnd(-1046081586, '䬎')
2021-03-12 10:14:04,824 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0f9bf]]
2021-03-12 10:14:04,824 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0f9bf]
2021-03-12 10:14:04,998 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:05,004 [main:117] - GENERATED CALL = (::baz).name.substring(1534688423)
2021-03-12 10:14:05,004 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]]
2021-03-12 10:14:05,004 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]
2021-03-12 10:14:05,179 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:05,186 [main:117] - GENERATED CALL = (::baz).name.substringAfter('皞', var prope2 =
2021-03-12 10:14:05,186 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4eb2d9]]
2021-03-12 10:14:05,186 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4eb2d9]
2021-03-12 10:14:05,362 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:05,551 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:05,557 [main:117] - GENERATED CALL = (::baz).name.substringAfterLast('ꭰ', "uuthr")
2021-03-12 10:14:05,557 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]]
2021-03-12 10:14:05,557 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]
2021-03-12 10:14:05,742 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:14:05,748 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:14:05,754 [main:117] - GENERATED CALL = (::baz).name.filterNot({a: Char -> false})
2021-03-12 10:14:05,754 [main:114] - replacement of prope9.prope12 of type String is (::baz).name.padEnd(-1046081586, '䬎')
2021-03-12 10:14:05,935 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:14:05,936 [main:66] - Compilation checking started
2021-03-12 10:14:06,470 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    (::baz).name.padEnd(-1046081586, '䬎') = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:06,473 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-12 10:14:06,474 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-12 10:14:06,474 [main:54] - Getting value of type String
2021-03-12 10:14:06,655 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:06,661 [main:58] - GENERATED VALUE OF TYPE String = "nactv"
2021-03-12 10:14:06,661 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:07,759 [main:67] - randomType = List<Array<Kla14?>?>
2021-03-12 10:14:07,760 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:14:07,767 [main:106] - GETTING String from KFunction1<A, Unit>
2021-03-12 10:14:07,792 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]]
2021-03-12 10:14:07,792 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29579ff9]
2021-03-12 10:14:07,792 [main:117] - GENERATED CALL = (A::bar).name.toUpperCase()
2021-03-12 10:14:07,792 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]]
2021-03-12 10:14:07,792 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a95a34]
2021-03-12 10:14:07,967 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:08,149 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:08,356 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:08,363 [main:117] - GENERATED CALL = (A::bar).name.replaceAfter('ꗔ', "ptiez", "crqll")
2021-03-12 10:14:08,363 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:14:08,363 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:14:08,537 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:08,543 [main:117] - GENERATED CALL = (A::bar).name.substringBeforeLast('眥', var prope2 =
2021-03-12 10:14:08,543 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]]
2021-03-12 10:14:08,543 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]
2021-03-12 10:14:08,727 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:14:08,733 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:14:08,739 [main:117] - GENERATED CALL = (A::bar).name.dropLastWhile({a: Char -> false})
2021-03-12 10:14:08,740 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0f9bf]]
2021-03-12 10:14:08,740 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b0f9bf]
2021-03-12 10:14:08,916 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:08,922 [main:117] - GENERATED CALL = (A::bar).name.substring(33428901)
2021-03-12 10:14:08,922 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:14:08,922 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:14:08,922 [main:117] - GENERATED CALL = (A::bar).name.prependIndent(fu0())
2021-03-12 10:14:08,922 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ea8dc]]
2021-03-12 10:14:08,922 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@178ea8dc]
2021-03-12 10:14:09,099 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:09,280 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:09,286 [main:117] - GENERATED CALL = (A::bar).name.removeRange(-1258392243, 1245585712)
2021-03-12 10:14:09,287 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]]
2021-03-12 10:14:09,287 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]
2021-03-12 10:14:09,287 [main:117] - GENERATED CALL = (A::bar).name.decapitalize()
2021-03-12 10:14:09,287 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]]
2021-03-12 10:14:09,287 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]
2021-03-12 10:14:09,470 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:09,476 [main:117] - GENERATED CALL = (A::bar).name.substringAfter('䉷', var prope2 =
2021-03-12 10:14:09,476 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ff4ab1b]]
2021-03-12 10:14:09,476 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ff4ab1b]
2021-03-12 10:14:09,653 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:09,836 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:09,842 [main:117] - GENERATED CALL = (A::bar).name.padStart(1103969001, '㼊')
2021-03-12 10:14:09,842 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is (A::bar).name.substringBeforeLast('眥', var prope2 =
2021-03-12 10:14:10,019 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(BINARY_EXPRESSION)
2021-03-12 10:14:10,019 [main:66] - Compilation checking started
2021-03-12 10:14:10,030 [main:71] - Wrong syntax or breaks conditions
2021-03-12 10:14:10,030 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error((A::bar).name.substringBeforeLast('眥', var prope2 = + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:10,033 [main:107] - replacing ((72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method, String)
2021-03-12 10:14:10,033 [main:50] - replacing (72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method String
2021-03-12 10:14:10,033 [main:54] - Getting value of type String
2021-03-12 10:14:10,216 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:10,222 [main:58] - GENERATED VALUE OF TYPE String = "hvqkd"
2021-03-12 10:14:10,222 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:10,246 [main:67] - randomType = Kla3
2021-03-12 10:14:10,421 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 10:14:10,427 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:14:10,433 [main:106] - GETTING String from Any?
2021-03-12 10:14:10,436 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]]
2021-03-12 10:14:10,436 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]
2021-03-12 10:14:10,437 [main:117] - GENERATED CALL = (Kla1().prope3).toString()
2021-03-12 10:14:10,437 [main:114] - replacement of (72.toUByte())?.and(122.toUByte()).toString(-1060533518) + method of type String is (Kla1().prope3).toString()
2021-03-12 10:14:10,613 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:14:10,614 [main:66] - Compilation checking started
2021-03-12 10:14:11,425 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((Kla1().prope3).toString() + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:11,429 [main:107] - replacing ("tail-call optimization miss: method at ", String)
2021-03-12 10:14:11,429 [main:50] - replacing "tail-call optimization miss: method at " String
2021-03-12 10:14:11,429 [main:54] - Getting value of type String
2021-03-12 10:14:11,603 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:11,609 [main:58] - GENERATED VALUE OF TYPE String = "hxbjv"
2021-03-12 10:14:11,610 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:11,633 [main:67] - randomType = Kla3
2021-03-12 10:14:11,815 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 10:14:11,821 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:14:11,827 [main:106] - GETTING String from KFunction1<A, Unit>
2021-03-12 10:14:11,853 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]]
2021-03-12 10:14:11,854 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]
2021-03-12 10:14:12,028 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:12,211 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:12,217 [main:117] - GENERATED CALL = (A::bar).name.substringBefore('ﯴ', "wayos")
2021-03-12 10:14:12,217 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]]
2021-03-12 10:14:12,217 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]
2021-03-12 10:14:12,395 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:12,601 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:12,607 [main:117] - GENERATED CALL = (A::bar).name.replaceBeforeLast('Ƭ', "isakk", var prope2 =
2021-03-12 10:14:12,607 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]]
2021-03-12 10:14:12,607 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]
2021-03-12 10:14:12,784 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:12,963 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:12,970 [main:117] - GENERATED CALL = (A::bar).name.replace('ò', '괊', Kla4().prope6)
2021-03-12 10:14:12,970 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]]
2021-03-12 10:14:12,970 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]
2021-03-12 10:14:13,143 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:13,149 [main:117] - GENERATED CALL = (A::bar).name.substringAfter('ⅉ', fu0())
2021-03-12 10:14:13,149 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]]
2021-03-12 10:14:13,149 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]
2021-03-12 10:14:13,331 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:13,337 [main:117] - GENERATED CALL = (A::bar).name.dropLast(-1919284151)
2021-03-12 10:14:13,337 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4eb2d9]]
2021-03-12 10:14:13,337 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4eb2d9]
2021-03-12 10:14:13,508 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:13,688 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:13,695 [main:117] - GENERATED CALL = (A::bar).name.substringAfterLast('ꌚ', "jgujy")
2021-03-12 10:14:13,695 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]]
2021-03-12 10:14:13,695 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]
2021-03-12 10:14:13,868 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:13,874 [main:117] - GENERATED CALL = (A::bar).name.takeLast(1936785810)
2021-03-12 10:14:13,874 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:14:13,874 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:14:14,045 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:14,051 [main:117] - GENERATED CALL = (A::bar).name.substringBeforeLast('⦡', fu0())
2021-03-12 10:14:14,052 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]]
2021-03-12 10:14:14,052 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]
2021-03-12 10:14:14,224 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:14:14,405 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:14:14,413 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:14:14,809 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 10:14:14,818 [main:95] - GENERATED = StringBuilder("qdeje")
2021-03-12 10:14:14,818 [main:117] - GENERATED CALL = (A::bar).name.removePrefix(StringBuilder("qdeje"))
2021-03-12 10:14:14,818 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]]
2021-03-12 10:14:14,818 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]
2021-03-12 10:14:14,819 [main:117] - GENERATED CALL = (A::bar).name.reversed()
2021-03-12 10:14:14,819 [main:114] - replacement of "tail-call optimization miss: method at " of type String is (A::bar).name.substringAfter('ⅉ', fu0())
2021-03-12 10:14:14,990 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:14:14,991 [main:66] - Compilation checking started
2021-03-12 10:14:15,527 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((A::bar).name.substringAfter('ⅉ', fu0()) + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((Kla1().prope3).toString() + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:15,529 [main:107] - replacing ((Kla1().prope3).toString() + " has no state-machine " +
                prope17.joinToString(separator = "\n"), String)
2021-03-12 10:14:15,530 [main:50] - replacing (Kla1().prope3).toString() + " has no state-machine " +
                prope17.joinToString(separator = "\n") String
2021-03-12 10:14:15,530 [main:54] - Getting value of type String
2021-03-12 10:14:15,710 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:15,717 [main:58] - GENERATED VALUE OF TYPE String = "uknzw"
2021-03-12 10:14:15,717 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:15,946 [main:67] - randomType = Long
2021-03-12 10:14:16,121 [main:302] - generating value of type = Long true depth = 0
2021-03-12 10:14:16,157 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3328c159]
2021-03-12 10:14:16,157 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f160948]
2021-03-12 10:14:16,337 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:16,343 [main:78] - Generated call from random type = (-5459401976513949516).toLong().toString(663962799)
2021-03-12 10:14:16,344 [main:106] - GETTING String from KFunction1<A, Unit>
2021-03-12 10:14:16,370 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]]
2021-03-12 10:14:16,370 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]
2021-03-12 10:14:16,547 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 10:14:16,730 [main:43] - GENERATING CALL OF fun <T> emptySet(): Iterable<Int> = TODO()
2021-03-12 10:14:16,737 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySet(): Iterable<Int> = TODO()
2021-03-12 10:14:16,960 [main:95] - GENERATED = emptySet<Int>()
2021-03-12 10:14:16,960 [main:117] - GENERATED CALL = (A::bar).name.slice(emptySet<Int>())
2021-03-12 10:14:16,960 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]]
2021-03-12 10:14:16,960 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]
2021-03-12 10:14:17,138 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:14:17,144 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:14:17,151 [main:117] - GENERATED CALL = (A::bar).name.takeWhile({a: Char -> true})
2021-03-12 10:14:17,151 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]]
2021-03-12 10:14:17,151 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]
2021-03-12 10:14:17,326 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:14:17,335 [main:117] - GENERATED CALL = (A::bar).name.removeSuffix("pixxs")
2021-03-12 10:14:17,335 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]]
2021-03-12 10:14:17,335 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]
2021-03-12 10:14:17,336 [main:117] - GENERATED CALL = (A::bar).name.uppercase()
2021-03-12 10:14:17,336 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]]
2021-03-12 10:14:17,336 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]
2021-03-12 10:14:17,510 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:17,517 [main:117] - GENERATED CALL = (A::bar).name.dropLast(-1894830624)
2021-03-12 10:14:17,517 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]]
2021-03-12 10:14:17,517 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]
2021-03-12 10:14:17,691 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:17,698 [main:117] - GENERATED CALL = (A::bar).name.drop(1607999153)
2021-03-12 10:14:17,698 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]]
2021-03-12 10:14:17,698 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]
2021-03-12 10:14:17,874 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:17,880 [main:117] - GENERATED CALL = (A::bar).name.takeLast(-666447442)
2021-03-12 10:14:17,880 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]]
2021-03-12 10:14:17,880 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]
2021-03-12 10:14:18,055 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:18,062 [main:117] - GENERATED CALL = (A::bar).name.substringAfter('ڢ', var prope2 =
2021-03-12 10:14:18,062 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]]
2021-03-12 10:14:18,062 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b9fec87]
2021-03-12 10:14:18,062 [main:117] - GENERATED CALL = (A::bar).name.toLowerCase()
2021-03-12 10:14:18,062 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@3eba78b9], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:14:18,062 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:14:18,062 [main:117] - GENERATED CALL = (A::bar).name.prependIndent(var prope2 =
2021-03-12 10:14:18,063 [main:114] - replacement of (Kla1().prope3).toString() + " has no state-machine " +
                prope17.joinToString(separator = "\n") of type String is "uknzw"
2021-03-12 10:14:18,236 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 10:14:18,237 [main:66] - Compilation checking started
2021-03-12 10:14:19,044 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope16.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:19,047 [main:107] - replacing (prope16, Result<Any?>)
2021-03-12 10:14:19,047 [main:50] - replacing prope16 Result<Any?>
2021-03-12 10:14:19,047 [main:54] - Getting value of type Result<Any?>
2021-03-12 10:14:19,231 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 10:14:19,419 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 10:14:19,426 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 10:14:19,830 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 10:14:19,837 [main:95] - GENERATED = runCatching<Any?>({ null})
2021-03-12 10:14:19,837 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ null})
2021-03-12 10:14:19,837 [main:61] - GENERATED IS CALL =true
2021-03-12 10:14:19,849 [main:67] - randomType = Char
2021-03-12 10:14:20,022 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:20,048 [main:106] - GETTING Result<Any?> from Boolean
2021-03-12 10:14:20,057 [main:106] - GETTING Result<Any?> from Continuation<Short>
2021-03-12 10:14:20,066 [main:106] - GETTING Result<Any?> from EmptyCoroutineContext
2021-03-12 10:14:20,083 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 10:14:20,090 [main:106] - GETTING Result<Any?> from String
2021-03-12 10:14:20,108 [main:106] - GETTING Result<Any?> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:20,152 [main:106] - GETTING Result<Any?> from Continuation<Any?>
2021-03-12 10:14:20,159 [main:106] - GETTING Result<Any?> from KFunction1<A, Unit>
2021-03-12 10:14:20,185 [main:106] - GETTING Result<Any?> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:20,231 [main:106] - GETTING Result<Any?> from Function0<Unit>
2021-03-12 10:14:20,240 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 10:14:20,242 [main:106] - GETTING Result<Any?> from Any?
2021-03-12 10:14:20,247 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 10:14:20,247 [main:114] - replacement of prope16 of type Result<Any?> is runCatching<Any?>({ null})
2021-03-12 10:14:20,421 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:14:20,422 [main:66] - Compilation checking started
2021-03-12 10:14:21,258 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = runCatching<Any?>({ "gxyri"}).getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:21,260 [main:107] - replacing (runCatching<Any?>({ "gxyri"}).getOrThrow(), Any?)
2021-03-12 10:14:21,261 [main:50] - replacing runCatching<Any?>({ "gxyri"}).getOrThrow() Any?
2021-03-12 10:14:21,261 [main:54] - Getting value of type Any?
2021-03-12 10:14:21,437 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:14:21,437 [main:58] - GENERATED VALUE OF TYPE Any? = "fvneo"
2021-03-12 10:14:21,437 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:21,674 [main:67] - randomType = Kla1?
2021-03-12 10:14:21,849 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 10:14:21,855 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:14:21,870 [main:78] - Generated call from random type = (Kla1())?.prope3
2021-03-12 10:14:21,872 [main:106] - GETTING Any? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:21,915 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:14:21,921 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 10:14:21,931 [main:106] - GETTING Any? from Boolean
2021-03-12 10:14:21,940 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 10:14:21,949 [main:106] - GETTING Any? from KFunction1<A, Unit>
2021-03-12 10:14:21,974 [main:106] - GETTING Any? from Any?
2021-03-12 10:14:21,978 [main:106] - GETTING Any? from Continuation<Short>
2021-03-12 10:14:21,986 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:14:21,987 [main:106] - GETTING Any? from String
2021-03-12 10:14:22,005 [main:106] - GETTING Any? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:22,050 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:14:22,051 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 10:14:22,064 [main:114] - replacement of runCatching<Any?>({ "gxyri"}).getOrThrow() of type Any? is (Kla1())?.prope3
2021-03-12 10:14:22,237 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 10:14:22,237 [main:66] - Compilation checking started
2021-03-12 10:14:23,029 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:23,031 [main:107] - replacing ({
            prope12 = fu17()
        }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>)
2021-03-12 10:14:23,032 [main:50] - replacing {
            prope12 = fu17()
        } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:14:23,032 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:14:23,208 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> false depth = 0
2021-03-12 10:14:23,213 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:14:23,397 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:14:23,404 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:14:24,019 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:14:24,025 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:14:24,031 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:14:24,031 [main:95] - GENERATED = check(false, { "rafge"})
2021-03-12 10:14:24,031 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> = {a: Kla7 -> check(false, { "rafge"})}
2021-03-12 10:14:24,032 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:24,055 [main:67] - randomType = Kla7
2021-03-12 10:14:24,230 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 10:14:24,236 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}
2021-03-12 10:14:24,244 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:24,293 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Function0<Unit>
2021-03-12 10:14:24,305 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Short>
2021-03-12 10:14:24,316 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:14:24,326 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:14:24,330 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Any?>
2021-03-12 10:14:24,341 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<A, Unit>
2021-03-12 10:14:24,371 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:24,417 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Boolean
2021-03-12 10:14:24,429 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from EmptyCoroutineContext
2021-03-12 10:14:24,446 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Any?
2021-03-12 10:14:24,453 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:14:24,457 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from String
2021-03-12 10:14:24,474 [main:114] - replacement of {
            prope12 = fu17()
        } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> is {a: Kla7 -> check(false, { "rafge"})}
2021-03-12 10:14:24,651 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:14:24,651 [main:66] - Compilation checking started
2021-03-12 10:14:25,202 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = "OK"

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {a: Kla7 -> check(false, { "rafge"})}
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:25,205 [main:107] - replacing (c, Continuation<*>)
2021-03-12 10:14:25,206 [main:50] - replacing c Continuation<*>
2021-03-12 10:14:25,206 [main:54] - Getting value of type Continuation<*>
2021-03-12 10:14:25,383 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 10:14:25,568 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:14:25,576 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:14:26,214 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 10:14:26,398 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:14:26,405 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:14:26,828 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 10:14:27,017 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:14:27,025 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:14:27,667 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 10:14:27,856 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:14:27,864 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:14:28,499 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:14:28,500 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:14:28,500 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:14:28,500 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:14:28,500 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 10:14:28,710 [main:67] - randomType = Double
2021-03-12 10:14:28,884 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:14:28,921 [main:106] - GETTING Continuation<*> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:28,965 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-12 10:14:28,972 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 10:14:28,979 [main:106] - GETTING Continuation<*> from KFunction1<A, Unit>
2021-03-12 10:14:29,004 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 10:14:29,014 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-12 10:14:29,027 [main:106] - GETTING Continuation<*> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:29,073 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 10:14:29,074 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 10:14:29,085 [main:106] - GETTING Continuation<*> from Continuation<Short>
2021-03-12 10:14:29,092 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 10:14:29,097 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 10:14:29,097 [main:106] - GETTING Continuation<*> from String
2021-03-12 10:14:29,115 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 10:14:29,116 [main:107] - replacing (Kla7(), Kla7)
2021-03-12 10:14:29,116 [main:50] - replacing Kla7() Kla7
2021-03-12 10:14:29,116 [main:54] - Getting value of type Kla7
2021-03-12 10:14:29,289 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 10:14:29,295 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}
2021-03-12 10:14:29,295 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 10:14:29,295 [main:61] - GENERATED IS CALL =true
2021-03-12 10:14:29,768 [main:67] - randomType = LinkedHashSet<Kla3?>
2021-03-12 10:14:29,941 [main:302] - generating value of type = LinkedHashSet<Kla3?> false depth = 0
2021-03-12 10:14:30,122 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Kla3?> = TODO()
2021-03-12 10:14:30,130 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Kla3?> = TODO()
2021-03-12 10:14:30,313 [main:95] - GENERATED = linkedSetOf<Kla3?>()
2021-03-12 10:14:30,439 [main:106] - GETTING Kla7 from Continuation<Short>
2021-03-12 10:14:30,448 [main:106] - GETTING Kla7 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:30,492 [main:106] - GETTING Kla7 from Continuation<Any?>
2021-03-12 10:14:30,501 [main:106] - GETTING Kla7 from Function0<Unit>
2021-03-12 10:14:30,509 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:14:30,516 [main:106] - GETTING Kla7 from EmptyCoroutineContext
2021-03-12 10:14:30,532 [main:106] - GETTING Kla7 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:30,575 [main:106] - GETTING Kla7 from Boolean
2021-03-12 10:14:30,584 [main:106] - GETTING Kla7 from String
2021-03-12 10:14:30,603 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:14:30,603 [main:106] - GETTING Kla7 from Any?
2021-03-12 10:14:30,607 [main:106] - GETTING Kla7 from KFunction1<A, Unit>
2021-03-12 10:14:30,634 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:14:30,634 [main:114] - replacement of Kla7() of type Kla7 is Kla7()
2021-03-12 10:14:30,806 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:14:30,808 [main:107] - replacing ("OK", String)
2021-03-12 10:14:30,809 [main:50] - replacing "OK" String
2021-03-12 10:14:30,809 [main:54] - Getting value of type String
2021-03-12 10:14:30,983 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:30,988 [main:58] - GENERATED VALUE OF TYPE String = "mumma"
2021-03-12 10:14:30,989 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:31,001 [main:67] - randomType = Boolean
2021-03-12 10:14:31,174 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:14:31,189 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:14:31,189 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:14:31,364 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:31,370 [main:78] - Generated call from random type = (false).compareTo(Kla4().prope6).toString(1092680330)
2021-03-12 10:14:31,371 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 10:14:31,386 [main:106] - GETTING String from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:31,430 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]]
2021-03-12 10:14:31,430 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1466e890]
2021-03-12 10:14:31,605 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:31,611 [main:117] - GENERATED CALL = (Int::foo).name.drop(-1794833435)
2021-03-12 10:14:31,611 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]]
2021-03-12 10:14:31,611 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]
2021-03-12 10:14:31,784 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:14:31,795 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:14:31,801 [main:117] - GENERATED CALL = (Int::foo).name.takeLastWhile({a: Char -> true})
2021-03-12 10:14:31,802 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]]
2021-03-12 10:14:31,802 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b7a96b9]
2021-03-12 10:14:31,976 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:14:31,984 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:14:31,993 [main:117] - GENERATED CALL = (Int::foo).name.dropLastWhile({a: Char -> true})
2021-03-12 10:14:31,993 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]]
2021-03-12 10:14:31,993 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53590a5b]
2021-03-12 10:14:31,993 [main:117] - GENERATED CALL = (Int::foo).name.capitalize()
2021-03-12 10:14:31,993 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]]
2021-03-12 10:14:31,993 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ff3c844]
2021-03-12 10:14:32,167 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:14:32,350 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:14:32,358 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:14:32,751 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:14:32,757 [main:95] - GENERATED = StringBuilder(-275929299)
2021-03-12 10:14:32,757 [main:117] - GENERATED CALL = (Int::foo).name.removeSurrounding(StringBuilder(-275929299))
2021-03-12 10:14:32,757 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]]
2021-03-12 10:14:32,757 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]
2021-03-12 10:14:32,757 [main:117] - GENERATED CALL = (Int::foo).name.decapitalize()
2021-03-12 10:14:32,757 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:14:32,757 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:14:32,758 [main:117] - GENERATED CALL = (Int::foo).name.prependIndent(fu0())
2021-03-12 10:14:32,758 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]]
2021-03-12 10:14:32,758 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]
2021-03-12 10:14:32,930 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:32,936 [main:117] - GENERATED CALL = (Int::foo).name.dropLast(1857812773)
2021-03-12 10:14:32,936 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]]
2021-03-12 10:14:32,936 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]
2021-03-12 10:14:33,109 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:14:33,115 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:14:33,122 [main:117] - GENERATED CALL = (Int::foo).name.replaceFirstChar({a: Char -> '㺛'})
2021-03-12 10:14:33,122 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]]
2021-03-12 10:14:33,122 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ad4f9da]
2021-03-12 10:14:33,295 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:14:33,301 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:14:33,307 [main:117] - GENERATED CALL = (Int::foo).name.takeWhile({a: Char -> true})
2021-03-12 10:14:33,307 [main:114] - replacement of "OK" of type String is (Int::foo).name.capitalize()
2021-03-12 10:14:33,509 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:14:33,509 [main:66] - Compilation checking started
2021-03-12 10:14:34,313 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:34,317 [main:107] - replacing (prope9.prope12, String)
2021-03-12 10:14:34,317 [main:50] - replacing prope9.prope12 String
2021-03-12 10:14:34,317 [main:54] - Getting value of type String
2021-03-12 10:14:34,496 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:34,502 [main:58] - GENERATED VALUE OF TYPE String = "sevgm"
2021-03-12 10:14:34,502 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:34,758 [main:67] - randomType = MutableMap<Char, Int>
2021-03-12 10:14:34,759 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:34,802 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b75800]]
2021-03-12 10:14:34,802 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b75800]
2021-03-12 10:14:34,982 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:35,165 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:35,171 [main:117] - GENERATED CALL = (::baz).name.replaceFirst('䯉', '᯾', Kla4().prope6)
2021-03-12 10:14:35,171 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]]
2021-03-12 10:14:35,171 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29aecfce]
2021-03-12 10:14:35,346 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:14:35,352 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:14:35,358 [main:117] - GENERATED CALL = (::baz).name.filterIndexed({a: Int, b: Char -> true})
2021-03-12 10:14:35,359 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bca7bb0]]
2021-03-12 10:14:35,359 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bca7bb0]
2021-03-12 10:14:35,359 [main:117] - GENERATED CALL = (::baz).name.trim()
2021-03-12 10:14:35,359 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]]
2021-03-12 10:14:35,359 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]
2021-03-12 10:14:35,534 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:14:35,540 [main:117] - GENERATED CALL = (::baz).name.concat("zzmaj")
2021-03-12 10:14:35,540 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]]
2021-03-12 10:14:35,540 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]
2021-03-12 10:14:35,720 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 10:14:35,911 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-12 10:14:35,919 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-12 10:14:36,106 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:14:36,113 [main:95] - GENERATED = setOfNotNull<Int>(-1812680420)
2021-03-12 10:14:36,113 [main:117] - GENERATED CALL = (::baz).name.slice(setOfNotNull<Int>(-1812680420))
2021-03-12 10:14:36,113 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]]
2021-03-12 10:14:36,113 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]
2021-03-12 10:14:36,287 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:14:36,293 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:14:36,299 [main:117] - GENERATED CALL = (::baz).name.replaceFirstChar({a: Char -> '猔'})
2021-03-12 10:14:36,299 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]]
2021-03-12 10:14:36,299 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28f95bee]
2021-03-12 10:14:36,299 [main:117] - GENERATED CALL = (::baz).name.lowercase()
2021-03-12 10:14:36,299 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]]
2021-03-12 10:14:36,299 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]
2021-03-12 10:14:36,475 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:36,661 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:36,667 [main:117] - GENERATED CALL = (::baz).name.replace('㒲', '㊠', Kla4().prope6)
2021-03-12 10:14:36,667 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]]
2021-03-12 10:14:36,667 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]
2021-03-12 10:14:36,668 [main:117] - GENERATED CALL = (::baz).name.decapitalize()
2021-03-12 10:14:36,668 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@6d963b1c], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]]
2021-03-12 10:14:36,668 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]
2021-03-12 10:14:36,847 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:36,853 [main:117] - GENERATED CALL = (::baz).name.takeLast(1615786160)
2021-03-12 10:14:36,853 [main:114] - replacement of prope9.prope12 of type String is (::baz).name.replaceFirstChar({a: Char -> '猔'})
2021-03-12 10:14:37,025 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:14:37,026 [main:66] - Compilation checking started
2021-03-12 10:14:37,556 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    (::baz).name.replaceFirstChar({a: Char -> '猔'}) = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return prope9.prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:37,560 [main:107] - replacing (prope9, Kla7)
2021-03-12 10:14:37,560 [main:50] - replacing prope9 Kla7
2021-03-12 10:14:37,560 [main:54] - Getting value of type Kla7
2021-03-12 10:14:37,734 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 10:14:37,740 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}
2021-03-12 10:14:37,740 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 10:14:37,740 [main:61] - GENERATED IS CALL =true
2021-03-12 10:14:37,753 [main:67] - randomType = Char
2021-03-12 10:14:37,956 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:14:37,980 [main:106] - GETTING Kla7 from Function0<Unit>
2021-03-12 10:14:37,990 [main:106] - GETTING Kla7 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:38,034 [main:106] - GETTING Kla7 from Continuation<Short>
2021-03-12 10:14:38,042 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:14:38,047 [main:106] - GETTING Kla7 from KFunction1<A, Unit>
2021-03-12 10:14:38,073 [main:106] - GETTING Kla7 from String
2021-03-12 10:14:38,091 [main:106] - GETTING Kla7 from EmptyCoroutineContext
2021-03-12 10:14:38,105 [main:106] - GETTING Kla7 from Continuation<Any?>
2021-03-12 10:14:38,113 [main:106] - GETTING Kla7 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:38,157 [main:106] - GETTING Kla7 from Any?
2021-03-12 10:14:38,160 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:14:38,161 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:14:38,162 [main:106] - GETTING Kla7 from Boolean
2021-03-12 10:14:38,170 [main:114] - replacement of prope9 of type Kla7 is Kla7()
2021-03-12 10:14:38,344 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:14:38,344 [main:66] - Compilation checking started
2021-03-12 10:14:39,216 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:39,219 [main:107] - replacing (prope16.getOrThrow(), Ty1)
2021-03-12 10:14:39,219 [main:50] - replacing prope16.getOrThrow() Ty1
2021-03-12 10:14:39,219 [main:54] - Getting value of type Ty1
2021-03-12 10:14:39,401 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 10:14:39,409 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 10:14:39,620 [main:67] - randomType = Double
2021-03-12 10:14:39,793 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:14:39,830 [main:106] - GETTING Ty1 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:39,875 [main:106] - GETTING Ty1 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:39,919 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 10:14:39,934 [main:106] - GETTING Ty1 from Continuation<Short>
2021-03-12 10:14:39,941 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 10:14:39,948 [main:106] - GETTING Ty1 from Any?
2021-03-12 10:14:39,952 [main:106] - GETTING Ty1 from Boolean
2021-03-12 10:14:39,961 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 10:14:39,966 [main:106] - GETTING Ty1 from String
2021-03-12 10:14:39,984 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 10:14:39,985 [main:106] - GETTING Ty1 from KFunction1<A, Unit>
2021-03-12 10:14:40,009 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 10:14:40,010 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 10:14:40,018 [main:111] - Cant find and generate replacement for prope16.getOrThrow() type Ty1
2021-03-12 10:14:40,018 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 10:14:40,019 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 10:14:40,019 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 10:14:40,191 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 10:14:40,199 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 10:14:40,410 [main:67] - randomType = Double
2021-03-12 10:14:40,585 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:14:40,629 [main:106] - GETTING EmptyCoroutineContext from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:40,684 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 10:14:40,689 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 10:14:40,699 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-12 10:14:40,708 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 10:14:40,720 [main:106] - GETTING EmptyCoroutineContext from KFunction1<A, Unit>
2021-03-12 10:14:40,755 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 10:14:40,767 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 10:14:40,788 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-12 10:14:40,964 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:14:40,964 [main:66] - Compilation checking started
2021-03-12 10:14:41,791 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:41,794 [main:107] - replacing ({
            prope12 = fu17()
        }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>)
2021-03-12 10:14:41,794 [main:50] - replacing {
            prope12 = fu17()
        } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:14:41,794 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:14:41,968 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> false depth = 0
2021-03-12 10:14:41,974 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:14:42,184 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:14:42,191 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:14:42,805 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:14:42,811 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:14:42,817 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:14:42,817 [main:95] - GENERATED = check(false, { "akrad"})
2021-03-12 10:14:42,817 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> = {a: Kla7 -> check(false, { "akrad"})}
2021-03-12 10:14:42,817 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:46,104 [main:67] - randomType = Array<Collection<Function1<Boolean, List<LinkedHashSet<Function2<Function1<Kla0, Kla5?>, Sequence<Long?>?, Kla12>>?>>>>?
2021-03-12 10:14:46,277 [main:302] - generating value of type = Array<Collection<Function1<Boolean, List<LinkedHashSet<Function2<Function1<Kla0, Kla5?>, Sequence<Long?>?, Kla12>>?>>>> false depth = 0
2021-03-12 10:14:46,495 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Collection<Function1<Boolean, List<LkedHashSet<Function2<Function1<Kla0, Kla5?>, Sequence<Long?>?, Kla12>>?>>>> = TODO()
2021-03-12 10:14:46,502 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Collection<Function1<Boolean, List<LkedHashSet<Function2<Function1<Kla0, Kla5?>, Sequence<Long?>?, Kla12>>?>>>> = TODO()
2021-03-12 10:14:46,690 [main:95] - GENERATED = emptyArray<Collection<Function1<Boolean, List<LinkedHashSet<Function2<Function1<Kla0, Kla5?>, Sequence<Long?>?, Kla12>>?>>>>()
2021-03-12 10:14:46,739 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Any?>
2021-03-12 10:14:46,750 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:14:46,760 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:14:46,763 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Boolean
2021-03-12 10:14:46,775 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Any?
2021-03-12 10:14:46,783 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:46,829 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from String
2021-03-12 10:14:46,851 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from EmptyCoroutineContext
2021-03-12 10:14:46,868 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:46,915 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Short>
2021-03-12 10:14:46,925 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<A, Unit>
2021-03-12 10:14:46,955 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Function0<Unit>
2021-03-12 10:14:46,967 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:14:46,967 [main:114] - replacement of {
            prope12 = fu17()
        } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> is {a: Kla7 -> check(false, { "akrad"})}
2021-03-12 10:14:47,146 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:14:47,147 [main:66] - Compilation checking started
2021-03-12 10:14:47,669 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {a: Kla7 -> check(false, { "akrad"})}
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:47,673 [main:107] - replacing (0, Int)
2021-03-12 10:14:47,673 [main:50] - replacing 0 Int
2021-03-12 10:14:47,673 [main:54] - Getting value of type Int
2021-03-12 10:14:47,847 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:14:47,853 [main:58] - GENERATED VALUE OF TYPE Int = -433359117
2021-03-12 10:14:47,854 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:48,728 [main:67] - randomType = Collection<Kla2<A?>>
2021-03-12 10:14:48,729 [main:106] - GETTING Int from EmptyCoroutineContext
2021-03-12 10:14:48,742 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@1c5d7098], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]]
2021-03-12 10:14:48,742 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@1c5d7098]
2021-03-12 10:14:48,742 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:14:48,917 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:14:48,923 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla1().prope3).compareTo(false)
2021-03-12 10:14:48,923 [main:114] - replacement of 0 of type Int is (Kla1().context).equals(Kla1().prope3).compareTo(false)
2021-03-12 10:14:49,095 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:14:49,095 [main:66] - Compilation checking started
2021-03-12 10:14:49,915 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:49,919 [main:107] - replacing ({
        prope15.c()
    }, SuspendFunction0<Unit>)
2021-03-12 10:14:49,919 [main:50] - replacing {
        prope15.c()
    } SuspendFunction0<Unit>
2021-03-12 10:14:49,919 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 10:14:50,093 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 10:14:50,099 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:14:50,281 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 10:14:50,288 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 10:14:50,729 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 10:14:50,736 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 10:14:50,922 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:14:50,929 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:14:51,326 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 10:14:51,332 [main:95] - GENERATED = check(false)
2021-03-12 10:14:51,333 [main:95] - GENERATED = contract({ check(false)})
2021-03-12 10:14:51,333 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { contract({ check(false)})}
2021-03-12 10:14:51,333 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:51,545 [main:67] - randomType = UShort
2021-03-12 10:14:51,717 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 10:14:51,753 [main:106] - GETTING SuspendFunction0<Unit> from Any?
2021-03-12 10:14:51,757 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 10:14:51,763 [main:106] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-12 10:14:51,772 [main:106] - GETTING SuspendFunction0<Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:51,815 [main:106] - GETTING SuspendFunction0<Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:51,860 [main:106] - GETTING SuspendFunction0<Unit> from Function0<Unit>
2021-03-12 10:14:51,870 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Short>
2021-03-12 10:14:51,878 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 10:14:51,896 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 10:14:51,897 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Any?>
2021-03-12 10:14:51,904 [main:106] - GETTING SuspendFunction0<Unit> from KFunction1<A, Unit>
2021-03-12 10:14:51,929 [main:106] - GETTING SuspendFunction0<Unit> from EmptyCoroutineContext
2021-03-12 10:14:51,945 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 10:14:51,945 [main:114] - replacement of {
        prope15.c()
    } of type SuspendFunction0<Unit> is { contract({ check(false)})}
2021-03-12 10:14:52,118 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:14:52,119 [main:66] - Compilation checking started
2021-03-12 10:14:52,646 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = { contract({ check(false)})}
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:52,649 [main:107] - replacing ({
            prope12 = fu17()
        }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>)
2021-03-12 10:14:52,649 [main:50] - replacing {
            prope12 = fu17()
        } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:14:52,649 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:14:52,823 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> false depth = 0
2021-03-12 10:14:52,829 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:14:53,009 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:14:53,017 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:14:53,653 [main:302] - generating value of type = Int true depth = 4
2021-03-12 10:14:53,659 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 10:14:53,665 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 10:14:53,848 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:14:53,855 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:14:54,256 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 10:14:54,263 [main:95] - GENERATED = require(false)
2021-03-12 10:14:54,263 [main:95] - GENERATED = repeat(-1624495110, {a: Int -> require(false)})
2021-03-12 10:14:54,263 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> = {a: Kla7 -> repeat(-1624495110, {a: Int -> require(false)})}
2021-03-12 10:14:54,263 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:54,493 [main:67] - randomType = Set<String>
2021-03-12 10:14:54,497 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from EmptyCoroutineContext
2021-03-12 10:14:54,515 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<A, Unit>
2021-03-12 10:14:54,544 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Any?
2021-03-12 10:14:54,551 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:54,599 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Boolean
2021-03-12 10:14:54,614 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Short>
2021-03-12 10:14:54,631 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Any?>
2021-03-12 10:14:54,642 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:14:54,651 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:14:54,655 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Function0<Unit>
2021-03-12 10:14:54,669 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:14:54,672 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:54,719 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from String
2021-03-12 10:14:54,736 [main:114] - replacement of {
            prope12 = fu17()
        } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> is {a: Kla7 -> repeat(-1624495110, {a: Int -> require(false)})}
2021-03-12 10:14:54,934 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:14:54,934 [main:66] - Compilation checking started
2021-03-12 10:14:55,452 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {a: Kla7 -> repeat(-1624495110, {a: Int -> require(false)})}
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if (prope18 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:55,455 [main:107] - replacing (prope18 != i, Boolean)
2021-03-12 10:14:55,455 [main:50] - replacing prope18 != i Boolean
2021-03-12 10:14:55,455 [main:54] - Getting value of type Boolean
2021-03-12 10:14:55,634 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:14:55,639 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:14:55,640 [main:61] - GENERATED IS CALL =false
2021-03-12 10:14:57,018 [main:67] - randomType = Function2<HashMap<Char, UInt>, Kla7, Function1<UInt, Float>>
2021-03-12 10:14:57,019 [main:106] - GETTING Boolean from Function0<Unit>
2021-03-12 10:14:57,028 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]]
2021-03-12 10:14:57,028 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:14:57,203 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:14:57,203 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:14:57,377 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:14:57,383 [main:117] - GENERATED CALL = (Kla4().prope7).equals("yjfsz").xor(false)
2021-03-12 10:14:57,383 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@3e53e61b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6d8a7feb]]
2021-03-12 10:14:57,383 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@3e53e61b]
2021-03-12 10:14:57,383 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@6d8a7feb]
2021-03-12 10:14:57,556 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:14:57,556 [main:117] - GENERATED CALL = (Kla4().prope7).invoke().equals("wlpyr")
2021-03-12 10:14:57,557 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:14:57,557 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:14:57,557 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:14:57,557 [main:117] - GENERATED CALL = (Kla4().prope7).equals(Kla1().prope3).not()
2021-03-12 10:14:57,557 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:14:57,557 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:14:57,557 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:14:57,557 [main:117] - GENERATED CALL = (Kla4().prope7).equals(Kla1().prope3).equals(Kla1().prope3)
2021-03-12 10:14:57,557 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]]
2021-03-12 10:14:57,557 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:14:57,557 [main:117] - GENERATED CALL = (Kla4().prope7).equals(Kla1().prope3)
2021-03-12 10:14:57,557 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:14:57,557 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:14:57,557 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:14:57,558 [main:117] - GENERATED CALL = (Kla4().prope7).equals(Kla1().prope3).or(Kla4().prope6)
2021-03-12 10:14:57,558 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 10:14:57,558 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@db30f77]
2021-03-12 10:14:57,558 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 10:14:57,558 [main:117] - GENERATED CALL = (Kla4().prope7).equals(Kla1().prope3).and(Kla4().prope6)
2021-03-12 10:14:57,558 [main:114] - replacement of prope18 != i of type Boolean is (Kla4().prope7).equals(Kla1().prope3).not()
2021-03-12 10:14:57,738 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:14:57,738 [main:66] - Compilation checking started
2021-03-12 10:14:58,530 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:14:58,534 [main:107] - replacing (prope16.getOrThrow(), Ty1)
2021-03-12 10:14:58,534 [main:50] - replacing prope16.getOrThrow() Ty1
2021-03-12 10:14:58,534 [main:54] - Getting value of type Ty1
2021-03-12 10:14:58,709 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 10:14:58,718 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 10:14:59,146 [main:67] - randomType = Short?
2021-03-12 10:14:59,350 [main:302] - generating value of type = Short true depth = 0
2021-03-12 10:14:59,391 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 10:14:59,397 [main:106] - GETTING Ty1 from Boolean
2021-03-12 10:14:59,405 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 10:14:59,413 [main:106] - GETTING Ty1 from KFunction1<A, Unit>
2021-03-12 10:14:59,437 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 10:14:59,452 [main:106] - GETTING Ty1 from String
2021-03-12 10:14:59,469 [main:106] - GETTING Ty1 from Any?
2021-03-12 10:14:59,473 [main:106] - GETTING Ty1 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:59,519 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 10:14:59,528 [main:106] - GETTING Ty1 from Continuation<Short>
2021-03-12 10:14:59,537 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 10:14:59,537 [main:106] - GETTING Ty1 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:14:59,584 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 10:14:59,584 [main:111] - Cant find and generate replacement for prope16.getOrThrow() type Ty1
2021-03-12 10:14:59,584 [main:107] - replacing (Kla9, Kla15)
2021-03-12 10:14:59,585 [main:50] - replacing Kla9 Kla15
2021-03-12 10:14:59,585 [main:54] - Getting value of type Kla15
2021-03-12 10:14:59,760 [main:302] - generating value of type = Kla15 false depth = 0
2021-03-12 10:14:59,766 [main:112] - generating klass Kla15 text = companion object Kla15 : Kla9()
2021-03-12 10:14:59,766 [main:58] - GENERATED VALUE OF TYPE Kla15 = 
2021-03-12 10:15:01,350 [main:67] - randomType = Function2<HashSet<Array<Kla5>>?, Kla7, ArrayList<UInt>>
2021-03-12 10:15:01,351 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 10:15:01,357 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-12 10:15:01,367 [main:106] - GETTING Kla15 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:01,412 [main:106] - GETTING Kla15 from EmptyCoroutineContext
2021-03-12 10:15:01,425 [main:106] - GETTING Kla15 from Boolean
2021-03-12 10:15:01,434 [main:106] - GETTING Kla15 from Any?
2021-03-12 10:15:01,437 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 10:15:01,437 [main:106] - GETTING Kla15 from String
2021-03-12 10:15:01,456 [main:106] - GETTING Kla15 from KFunction1<A, Unit>
2021-03-12 10:15:01,481 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 10:15:01,482 [main:106] - GETTING Kla15 from Continuation<Any?>
2021-03-12 10:15:01,489 [main:106] - GETTING Kla15 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:01,533 [main:106] - GETTING Kla15 from Continuation<Short>
2021-03-12 10:15:01,539 [main:111] - Cant find and generate replacement for Kla9 type Kla15
2021-03-12 10:15:01,539 [main:107] - replacing (prope12, String)
2021-03-12 10:15:01,540 [main:50] - replacing prope12 String
2021-03-12 10:15:01,540 [main:54] - Getting value of type String
2021-03-12 10:15:01,715 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:15:01,721 [main:58] - GENERATED VALUE OF TYPE String = "ohdqu"
2021-03-12 10:15:01,878 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:01,902 [main:67] - randomType = Kla13
2021-03-12 10:15:02,076 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-12 10:15:02,083 [main:112] - generating klass Kla13 text = class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}
2021-03-12 10:15:02,091 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:15:02,097 [main:106] - GETTING String from String
2021-03-12 10:15:02,114 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ff4ab1b]]
2021-03-12 10:15:02,114 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ff4ab1b]
2021-03-12 10:15:02,291 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:02,475 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:02,482 [main:117] - GENERATED CALL = (fu0()).padStart(-660208081, '')
2021-03-12 10:15:02,482 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c84f1f]]
2021-03-12 10:15:02,482 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40c84f1f]
2021-03-12 10:15:02,482 [main:117] - GENERATED CALL = (fu0()).replaceIndentByMargin(var prope2 =
2021-03-12 10:15:02,482 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]]
2021-03-12 10:15:02,482 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2918391f]
2021-03-12 10:15:02,482 [main:117] - GENERATED CALL = (fu0()).uppercase()
2021-03-12 10:15:02,482 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]]
2021-03-12 10:15:02,483 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]
2021-03-12 10:15:02,483 [main:117] - GENERATED CALL = (fu0()).concat(var prope2 =
2021-03-12 10:15:02,483 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dad3b46]]
2021-03-12 10:15:02,483 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dad3b46]
2021-03-12 10:15:02,662 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:02,668 [main:117] - GENERATED CALL = (fu0()).take(1092345197)
2021-03-12 10:15:02,668 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]]
2021-03-12 10:15:02,668 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b64885d]
2021-03-12 10:15:02,846 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:02,852 [main:117] - GENERATED CALL = (fu0()).takeLast(-1343662948)
2021-03-12 10:15:02,852 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6b6a0]]
2021-03-12 10:15:02,852 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f6b6a0]
2021-03-12 10:15:02,852 [main:117] - GENERATED CALL = (fu0()).trimMargin(fu0())
2021-03-12 10:15:02,852 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]]
2021-03-12 10:15:02,852 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e71b168]
2021-03-12 10:15:03,029 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:15:03,038 [main:117] - GENERATED CALL = (fu0()).removePrefix("iyahw")
2021-03-12 10:15:03,038 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]]
2021-03-12 10:15:03,038 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36ef3df8]
2021-03-12 10:15:03,213 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:15:03,219 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:15:03,225 [main:117] - GENERATED CALL = (fu0()).takeLastWhile({a: Char -> true})
2021-03-12 10:15:03,225 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bd3920c]]
2021-03-12 10:15:03,226 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bd3920c]
2021-03-12 10:15:03,403 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:15:03,409 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:15:03,416 [main:117] - GENERATED CALL = (fu0()).filter({a: Char -> true})
2021-03-12 10:15:03,416 [main:114] - replacement of prope12 of type String is (fu0()).uppercase()
2021-03-12 10:15:03,620 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:15:03,620 [main:66] - Compilation checking started
2021-03-12 10:15:04,272 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.(fu0()).uppercase() = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:04,277 [main:107] - replacing (isSuccess, Boolean)
2021-03-12 10:15:04,277 [main:50] - replacing isSuccess Boolean
2021-03-12 10:15:04,277 [main:54] - Getting value of type Boolean
2021-03-12 10:15:04,462 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:15:04,468 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:15:04,468 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:04,684 [main:67] - randomType = Long
2021-03-12 10:15:04,860 [main:302] - generating value of type = Long true depth = 0
2021-03-12 10:15:04,899 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1c86ac08]
2021-03-12 10:15:04,899 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:15:05,074 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:15:05,081 [main:78] - Generated call from random type = (-1239404961914658584).equals(Kla1().prope3).xor(true)
2021-03-12 10:15:05,081 [main:106] - GETTING Boolean from Boolean
2021-03-12 10:15:05,091 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:15:05,091 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:15:05,091 [main:117] - GENERATED CALL = (Kla4().prope6).not()
2021-03-12 10:15:05,091 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@59096877], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:15:05,091 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@59096877]
2021-03-12 10:15:05,269 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:15:05,269 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:15:05,269 [main:117] - GENERATED CALL = (Kla4().prope6).equals("ocmdk").equals(Kla1().prope3)
2021-03-12 10:15:05,269 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5acb81ef]]
2021-03-12 10:15:05,270 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:15:05,270 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5acb81ef]
2021-03-12 10:15:05,447 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:15:05,448 [main:117] - GENERATED CALL = (Kla4().prope6).compareTo(Kla4().prope6).equals("mwfmd")
2021-03-12 10:15:05,448 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@59096877], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]]
2021-03-12 10:15:05,448 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@59096877]
2021-03-12 10:15:05,625 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:15:05,625 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5fc9593d]
2021-03-12 10:15:05,626 [main:117] - GENERATED CALL = (Kla4().prope6).equals("lezxu").and(Kla4().prope6)
2021-03-12 10:15:05,626 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@59096877], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]]
2021-03-12 10:15:05,626 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@59096877]
2021-03-12 10:15:05,626 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:15:05,626 [main:117] - GENERATED CALL = (Kla4().prope6).equals(Kla1().prope3).xor(Kla4().prope6)
2021-03-12 10:15:05,626 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]]
2021-03-12 10:15:05,626 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4550e457]
2021-03-12 10:15:05,805 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:15:05,811 [main:117] - GENERATED CALL = (Kla4().prope6).xor(false)
2021-03-12 10:15:05,811 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]]
2021-03-12 10:15:05,811 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@418068a7]
2021-03-12 10:15:05,812 [main:117] - GENERATED CALL = (Kla4().prope6).equals(Kla1().prope3)
2021-03-12 10:15:05,812 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@59096877], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]]
2021-03-12 10:15:05,812 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@59096877]
2021-03-12 10:15:05,989 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:15:05,989 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@14a78f54]
2021-03-12 10:15:05,989 [main:117] - GENERATED CALL = (Kla4().prope6).equals("hgsyl").not()
2021-03-12 10:15:05,989 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:15:05,989 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:15:06,167 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:15:06,173 [main:117] - GENERATED CALL = (Kla4().prope6).or(false)
2021-03-12 10:15:06,173 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@59096877], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]]
2021-03-12 10:15:06,174 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@59096877]
2021-03-12 10:15:06,352 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:15:06,352 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@17826240]
2021-03-12 10:15:06,352 [main:117] - GENERATED CALL = (Kla4().prope6).equals("qmlay").or(Kla4().prope6)
2021-03-12 10:15:06,352 [main:114] - replacement of isSuccess of type Boolean is (Kla4().prope6).equals("lezxu").and(Kla4().prope6)
2021-03-12 10:15:06,530 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:15:06,532 [main:107] - replacing (this.prope16, Any?)
2021-03-12 10:15:06,532 [main:50] - replacing this.prope16 Any?
2021-03-12 10:15:06,533 [main:54] - Getting value of type Any?
2021-03-12 10:15:06,708 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:15:06,708 [main:58] - GENERATED VALUE OF TYPE Any? = "zawah"
2021-03-12 10:15:06,708 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:07,141 [main:67] - randomType = HashSet<UInt>
2021-03-12 10:15:07,407 [main:302] - generating value of type = HashSet<UInt> false depth = 0
2021-03-12 10:15:07,592 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: UInt): HashSet<UInt> = TODO()
2021-03-12 10:15:07,600 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: UInt): HashSet<UInt> = TODO()
2021-03-12 10:15:07,787 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 10:15:07,793 [main:95] - GENERATED = linkedSetOf<UInt>(1894847742.toUInt())
2021-03-12 10:15:07,897 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@1d0dac17]
2021-03-12 10:15:07,897 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@7f7a9ffb]
2021-03-12 10:15:08,072 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:08,079 [main:78] - Generated call from random type = (linkedSetOf<UInt>(1894847742.toUInt())).toArray().get(855518216)
2021-03-12 10:15:08,079 [main:114] - replacement of this.prope16 of type Any? is (linkedSetOf<UInt>(1894847742.toUInt())).toArray().get(855518216)
2021-03-12 10:15:08,280 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:15:08,281 [main:66] - Compilation checking started
2021-03-12 10:15:08,811 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(linkedSetOf<UInt>(1894847742.toUInt())).toArray().get(855518216) = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:08,814 [main:107] - replacing ({
            prope12 = fu17()
        }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>)
2021-03-12 10:15:08,814 [main:50] - replacing {
            prope12 = fu17()
        } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:15:08,814 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:15:08,993 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> false depth = 0
2021-03-12 10:15:08,999 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:15:09,185 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:15:09,192 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 10:15:09,815 [main:302] - generating value of type = Int true depth = 4
2021-03-12 10:15:09,821 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 10:15:09,828 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 10:15:09,837 [main:95] - GENERATED = repeat(730351805, {a: Int -> println()})
2021-03-12 10:15:09,837 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> = {a: Kla7 -> repeat(730351805, {a: Int -> println()})}
2021-03-12 10:15:09,837 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:10,278 [main:67] - randomType = Sequence<Kla14>
2021-03-12 10:15:10,282 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:15:10,291 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<A, Unit>
2021-03-12 10:15:10,321 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:15:10,325 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Boolean
2021-03-12 10:15:10,339 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:15:10,343 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from EmptyCoroutineContext
2021-03-12 10:15:10,360 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Any?
2021-03-12 10:15:10,367 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:10,414 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Short>
2021-03-12 10:15:10,424 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:10,472 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Function0<Unit>
2021-03-12 10:15:10,485 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from String
2021-03-12 10:15:10,506 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Any?>
2021-03-12 10:15:10,513 [main:114] - replacement of {
            prope12 = fu17()
        } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> is {a: Kla7 -> repeat(730351805, {a: Int -> println()})}
2021-03-12 10:15:10,689 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:15:10,689 [main:66] - Compilation checking started
2021-03-12 10:15:11,231 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {a: Kla7 -> repeat(730351805, {a: Int -> println()})}
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:11,233 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-12 10:15:11,233 [main:50] - replacing getOrThrow() Ty1
2021-03-12 10:15:11,233 [main:54] - Getting value of type Ty1
2021-03-12 10:15:11,413 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 10:15:11,421 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 10:15:11,434 [main:67] - randomType = String
2021-03-12 10:15:11,610 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:15:11,634 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 10:15:11,644 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 10:15:11,657 [main:106] - GETTING Ty1 from String
2021-03-12 10:15:11,675 [main:106] - GETTING Ty1 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:11,720 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 10:15:11,726 [main:106] - GETTING Ty1 from Any?
2021-03-12 10:15:11,729 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 10:15:11,730 [main:106] - GETTING Ty1 from Boolean
2021-03-12 10:15:11,739 [main:106] - GETTING Ty1 from KFunction1<A, Unit>
2021-03-12 10:15:11,765 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 10:15:11,771 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 10:15:11,772 [main:106] - GETTING Ty1 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:11,816 [main:106] - GETTING Ty1 from Continuation<Short>
2021-03-12 10:15:11,822 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-12 10:15:11,822 [main:107] - replacing (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054), Boolean)
2021-03-12 10:15:11,822 [main:50] - replacing prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054) Boolean
2021-03-12 10:15:11,822 [main:54] - Getting value of type Boolean
2021-03-12 10:15:11,999 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:15:12,005 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:15:12,005 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:12,232 [main:67] - randomType = Int?
2021-03-12 10:15:12,438 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:12,481 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5acb81ef]
2021-03-12 10:15:12,481 [main:78] - Generated call from random type = (1229496101)?.equals(Kla1().prope3)
2021-03-12 10:15:12,482 [main:106] - GETTING Boolean from String
2021-03-12 10:15:12,501 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@594d2c5]]
2021-03-12 10:15:12,501 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@594d2c5]
2021-03-12 10:15:12,501 [main:117] - GENERATED CALL = (fu0()).isNotBlank()
2021-03-12 10:15:12,502 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3043bab1]]
2021-03-12 10:15:12,502 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7]
2021-03-12 10:15:12,678 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:12,863 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:12,870 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3043bab1]
2021-03-12 10:15:12,870 [main:117] - GENERATED CALL = (fu0()).subSequence(1050286515, 1577709228).isEmpty()
2021-03-12 10:15:12,870 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5af35000]]
2021-03-12 10:15:12,870 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 10:15:13,045 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:13,051 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5af35000]
2021-03-12 10:15:13,051 [main:117] - GENERATED CALL = (fu0()).get(759930496).isISOControl()
2021-03-12 10:15:13,051 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@236a23f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5acb81ef]]
2021-03-12 10:15:13,051 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5acb81ef]
2021-03-12 10:15:13,052 [main:117] - GENERATED CALL = (fu0()).length.equals(Kla1().prope3)
2021-03-12 10:15:13,052 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41b2d853]]
2021-03-12 10:15:13,052 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 10:15:13,227 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:13,233 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41b2d853]
2021-03-12 10:15:13,233 [main:117] - GENERATED CALL = (fu0()).get(-942330996).isWhitespace()
2021-03-12 10:15:13,233 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c6835f3]]
2021-03-12 10:15:13,233 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 10:15:13,409 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:13,415 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c6835f3]
2021-03-12 10:15:13,415 [main:117] - GENERATED CALL = (fu0()).get(1927482634).isTitleCase()
2021-03-12 10:15:13,415 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@331c3658]]
2021-03-12 10:15:13,415 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 10:15:13,592 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:13,598 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@331c3658]
2021-03-12 10:15:13,598 [main:117] - GENERATED CALL = (fu0()).get(2068114739).isLetterOrDigit()
2021-03-12 10:15:13,598 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3043bab1]]
2021-03-12 10:15:13,598 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3043bab1]
2021-03-12 10:15:13,598 [main:117] - GENERATED CALL = (fu0()).isEmpty()
2021-03-12 10:15:13,598 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53a509a1]]
2021-03-12 10:15:13,598 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7]
2021-03-12 10:15:13,773 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:13,955 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:13,961 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53a509a1]
2021-03-12 10:15:13,961 [main:117] - GENERATED CALL = (fu0()).subSequence(426925003, 1993466383).any()
2021-03-12 10:15:13,961 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4374636]]
2021-03-12 10:15:13,961 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 10:15:14,137 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:14,143 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4374636]
2021-03-12 10:15:14,143 [main:117] - GENERATED CALL = (fu0()).get(-641859745).isLowerCase()
2021-03-12 10:15:14,143 [main:114] - replacement of prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054) of type Boolean is (fu0()).get(-641859745).isLowerCase()
2021-03-12 10:15:14,317 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:15:14,318 [main:66] - Compilation checking started
2021-03-12 10:15:14,841 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if ((fu0()).get(-641859745).isLowerCase()) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3))) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:14,845 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3)), String)
2021-03-12 10:15:14,845 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3)) String
2021-03-12 10:15:14,845 [main:54] - Getting value of type String
2021-03-12 10:15:15,021 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:15:15,027 [main:58] - GENERATED VALUE OF TYPE String = "sjhah"
2021-03-12 10:15:15,027 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:15,040 [main:67] - randomType = Char
2021-03-12 10:15:15,214 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:15,239 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c25a5b1]
2021-03-12 10:15:15,239 [main:78] - Generated call from random type = ('').plus(fu0())
2021-03-12 10:15:15,240 [main:106] - GETTING String from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:15,284 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ff4ab1b]]
2021-03-12 10:15:15,284 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ff4ab1b]
2021-03-12 10:15:15,459 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:15,643 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:15,649 [main:117] - GENERATED CALL = (Int::foo).name.padStart(-518813384, '侮')
2021-03-12 10:15:15,650 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b75800]]
2021-03-12 10:15:15,650 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b75800]
2021-03-12 10:15:15,828 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:16,011 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:16,017 [main:117] - GENERATED CALL = (Int::foo).name.replaceFirst('䖽', 'ꢸ', Kla4().prope6)
2021-03-12 10:15:16,017 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]]
2021-03-12 10:15:16,017 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]
2021-03-12 10:15:16,193 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:16,199 [main:117] - GENERATED CALL = (Int::foo).name.replaceBeforeLast('Ｓ', fu0(), var prope2 =
2021-03-12 10:15:16,199 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60659f12]]
2021-03-12 10:15:16,200 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@60659f12]
2021-03-12 10:15:16,374 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:15:16,374 [main:117] - GENERATED CALL = (Int::foo).name.plus("ggfvy")
2021-03-12 10:15:16,374 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]]
2021-03-12 10:15:16,375 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c0101c1]
2021-03-12 10:15:16,549 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:16,556 [main:117] - GENERATED CALL = (Int::foo).name.substringBefore('菜', var prope2 =
2021-03-12 10:15:16,556 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]]
2021-03-12 10:15:16,556 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]
2021-03-12 10:15:16,556 [main:117] - GENERATED CALL = (Int::foo).name.decapitalize()
2021-03-12 10:15:16,556 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]]
2021-03-12 10:15:16,556 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a5ef815]
2021-03-12 10:15:16,733 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:16,740 [main:117] - GENERATED CALL = (Int::foo).name.substringBeforeLast('Ԭ', var prope2 =
2021-03-12 10:15:16,740 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]]
2021-03-12 10:15:16,740 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]
2021-03-12 10:15:16,947 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:16,953 [main:117] - GENERATED CALL = (Int::foo).name.dropLast(2039309129)
2021-03-12 10:15:16,953 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]]
2021-03-12 10:15:16,953 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eea283e]
2021-03-12 10:15:16,954 [main:117] - GENERATED CALL = (Int::foo).name.trimStart()
2021-03-12 10:15:16,954 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]]
2021-03-12 10:15:16,954 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]
2021-03-12 10:15:16,954 [main:117] - GENERATED CALL = (Int::foo).name.trimEnd()
2021-03-12 10:15:16,954 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = (::baz).name.plus(Kla1().prope3)) of type String is (Int::foo).name.trimStart()
2021-03-12 10:15:17,131 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:15:17,131 [main:66] - Compilation checking started
2021-03-12 10:15:18,097 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:18,100 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 10:15:18,100 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 10:15:18,100 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 10:15:18,278 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 10:15:18,284 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:15:18,468 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:15:18,476 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:15:19,102 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:15:19,108 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:15:19,114 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:15:19,115 [main:95] - GENERATED = check(true, { "cftia"})
2021-03-12 10:15:19,115 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> check(true, { "cftia"})}
2021-03-12 10:15:19,115 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:19,326 [main:67] - randomType = Float
2021-03-12 10:15:19,500 [main:302] - generating value of type = Float true depth = 0
2021-03-12 10:15:19,540 [main:106] - GETTING Function1<Throwable, Unit> from EmptyCoroutineContext
2021-03-12 10:15:19,554 [main:106] - GETTING Function1<Throwable, Unit> from KFunction1<A, Unit>
2021-03-12 10:15:19,582 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 10:15:19,588 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 10:15:19,593 [main:106] - GETTING Function1<Throwable, Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:19,637 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 10:15:19,638 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 10:15:19,649 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 10:15:19,650 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 10:15:19,669 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<Short>
2021-03-12 10:15:19,676 [main:106] - GETTING Function1<Throwable, Unit> from Function0<Unit>
2021-03-12 10:15:19,687 [main:106] - GETTING Function1<Throwable, Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:19,731 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<Any?>
2021-03-12 10:15:19,738 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> check(true, { "cftia"})}
2021-03-12 10:15:19,912 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:15:19,912 [main:66] - Compilation checking started
2021-03-12 10:15:20,737 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let({a: Throwable -> check(true, { "cftia"})})
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:20,740 [main:107] - replacing (prope12, String)
2021-03-12 10:15:20,740 [main:50] - replacing prope12 String
2021-03-12 10:15:20,740 [main:54] - Getting value of type String
2021-03-12 10:15:20,915 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:15:20,921 [main:58] - GENERATED VALUE OF TYPE String = "rnhqm"
2021-03-12 10:15:20,921 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:21,613 [main:67] - randomType = Pair<ULong, UShort>
2021-03-12 10:15:21,789 [main:302] - generating value of type = Pair<ULong, UShort> false depth = 0
2021-03-12 10:15:21,974 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong, second: UShort): Pair<ULong, UShort> = TODO()
2021-03-12 10:15:21,982 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong, second: UShort): Pair<ULong, UShort> = TODO()
2021-03-12 10:15:22,170 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 10:15:22,176 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 10:15:22,182 [main:95] - GENERATED = Pair<ULong, UShort>(1702775906154890604.toULong(), 12595.toUShort())
2021-03-12 10:15:22,195 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5708858c]
2021-03-12 10:15:22,370 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:22,376 [main:78] - Generated call from random type = (Pair<ULong, UShort>(1702775906154890604.toULong(), 12595.toUShort())).second.toString(-98249029)
2021-03-12 10:15:22,377 [main:106] - GETTING String from Function0<Unit>
2021-03-12 10:15:22,387 [main:106] - GETTING String from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:22,431 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]]
2021-03-12 10:15:22,431 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@684b6785]
2021-03-12 10:15:22,431 [main:117] - GENERATED CALL = (Int::foo).name.decapitalize()
2021-03-12 10:15:22,431 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]]
2021-03-12 10:15:22,431 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d5364b4]
2021-03-12 10:15:22,431 [main:117] - GENERATED CALL = (Int::foo).name.trimEnd()
2021-03-12 10:15:22,431 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]]
2021-03-12 10:15:22,431 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@109a1f1a]
2021-03-12 10:15:22,607 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:22,613 [main:117] - GENERATED CALL = (Int::foo).name.dropLast(1866878085)
2021-03-12 10:15:22,613 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]]
2021-03-12 10:15:22,613 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d7e613]
2021-03-12 10:15:22,614 [main:117] - GENERATED CALL = (Int::foo).name.prependIndent(var prope2 =
2021-03-12 10:15:22,614 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]]
2021-03-12 10:15:22,614 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e37a89e]
2021-03-12 10:15:22,791 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:15:22,797 [main:117] - GENERATED CALL = (Int::foo).name.concat("gugxy")
2021-03-12 10:15:22,797 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4eb2d9]]
2021-03-12 10:15:22,797 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4eb2d9]
2021-03-12 10:15:22,974 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:22,980 [main:117] - GENERATED CALL = (Int::foo).name.substringAfterLast('欖', fu0())
2021-03-12 10:15:22,980 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]]
2021-03-12 10:15:22,981 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63ef9532]
2021-03-12 10:15:23,167 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:23,348 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:23,355 [main:117] - GENERATED CALL = (Int::foo).name.replace('뷀', '삐', Kla4().prope6)
2021-03-12 10:15:23,355 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]]
2021-03-12 10:15:23,355 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c78a73]
2021-03-12 10:15:23,531 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:15:23,537 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:15:23,543 [main:117] - GENERATED CALL = (Int::foo).name.replaceFirstChar({a: Char -> ''})
2021-03-12 10:15:23,543 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]]
2021-03-12 10:15:23,543 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cb2f0cb]
2021-03-12 10:15:23,720 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:23,727 [main:117] - GENERATED CALL = (Int::foo).name.substringAfter('짆', var prope2 =
2021-03-12 10:15:23,727 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@2f5f83f9], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e266ddd]]
2021-03-12 10:15:23,727 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e266ddd]
2021-03-12 10:15:23,904 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:15:23,910 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:15:23,916 [main:117] - GENERATED CALL = (Int::foo).name.dropWhile({a: Char -> false})
2021-03-12 10:15:23,916 [main:114] - replacement of prope12 of type String is (Int::foo).name.dropLast(1866878085)
2021-03-12 10:15:24,094 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:15:24,094 [main:66] - Compilation checking started
2021-03-12 10:15:24,620 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return prope9.prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.(Int::foo).name.dropLast(1866878085) = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let({a: Throwable -> check(true, { "cftia"})})
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:24,623 [main:107] - replacing (prope9, Kla7)
2021-03-12 10:15:24,624 [main:50] - replacing prope9 Kla7
2021-03-12 10:15:24,624 [main:54] - Getting value of type Kla7
2021-03-12 10:15:24,802 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 10:15:24,808 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}
2021-03-12 10:15:24,808 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 10:15:24,808 [main:61] - GENERATED IS CALL =true
2021-03-12 10:15:28,594 [main:67] - randomType = ArrayDeque<Function1<ArrayDeque<Kla11<Function2<Kla14?, Function1<Float, Kla5>, HashMap<UByte, Kla14>>>>?, Kla11<Short>>>?
2021-03-12 10:15:28,769 [main:302] - generating value of type = ArrayDeque<Function1<ArrayDeque<Kla11<Function2<Kla14?, Function1<Float, Kla5>, HashMap<UByte, Kla14>>>>?, Kla11<Short>>> false depth = 0
2021-03-12 10:15:28,958 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Function1<ArrayDeque<Kla11<Function2<Kla14?, Function1<Float, Kla5>, HashMap<UByte, Kla14>>>>?, Kla11<Short>>>): ArrayDeque<Function1<ArrayDeque<Kla11<Function2<Kla14?, Function1<Float, Kla5>, HashMap<UByte, Kla14>>>>?, Kla11<Short>>> = TODO()
2021-03-12 10:15:28,966 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Function1<ArrayDeque<Kla11<Function2<Kla14?, Function1<Float, Kla5>, HashMap<UByte, Kla14>>>>?, Kla11<Short>>>): ArrayDeque<Function1<ArrayDeque<Kla11<Function2<Kla14?, Function1<Float, Kla5>, HashMap<UByte, Kla14>>>>?, Kla11<Short>>> = TODO()
2021-03-12 10:15:29,426 [main:302] - generating value of type = Collection<Function1<ArrayDeque<Kla11<Function2<Kla14?, Function1<Float, Kla5>, HashMap<UByte, Kla14>>>>?, Kla11<Short>>> false depth = 3
2021-03-12 10:15:29,619 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Collection<Function1<ArrayDeque<Kla11<Function2<Kla14?, Function1<Float, Kla5>, HashMap<UByte, Kla14>>>>?, Kla11<Short>>> = TODO()
2021-03-12 10:15:29,627 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Collection<Function1<ArrayDeque<Kla11<Function2<Kla14?, Function1<Float, Kla5>, HashMap<UByte, Kla14>>>>?, Kla11<Short>>> = TODO()
2021-03-12 10:15:30,239 [main:302] - generating value of type = Int true depth = 6
2021-03-12 10:15:30,246 [main:302] - generating value of type = Float true depth = 6
2021-03-12 10:15:30,252 [main:95] - GENERATED = HashSet<Function1<ArrayDeque<Kla11<Function2<Kla14?, Function1<Float, Kla5>, HashMap<UByte, Kla14>>>>?, Kla11<Short>>>(-254219285, 0.08663601f)
2021-03-12 10:15:30,252 [main:95] - GENERATED = ArrayDeque<Function1<ArrayDeque<Kla11<Function2<Kla14?, Function1<Float, Kla5>, HashMap<UByte, Kla14>>>>?, Kla11<Short>>>(HashSet<Function1<ArrayDeque<Kla11<Function2<Kla14?, Function1<Float, Kla5>, HashMap<UByte, Kla14>>>>?, Kla11<Short>>>(-254219285, 0.08663601f))
2021-03-12 10:15:30,745 [main:106] - GETTING Kla7 from Any?
2021-03-12 10:15:30,749 [main:106] - GETTING Kla7 from String
2021-03-12 10:15:30,767 [main:106] - GETTING Kla7 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:30,813 [main:106] - GETTING Kla7 from Boolean
2021-03-12 10:15:30,821 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:15:30,827 [main:106] - GETTING Kla7 from EmptyCoroutineContext
2021-03-12 10:15:30,843 [main:106] - GETTING Kla7 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:30,886 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:15:30,887 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:15:30,888 [main:106] - GETTING Kla7 from Continuation<Any?>
2021-03-12 10:15:30,896 [main:106] - GETTING Kla7 from Continuation<Short>
2021-03-12 10:15:30,902 [main:106] - GETTING Kla7 from KFunction1<A, Unit>
2021-03-12 10:15:30,928 [main:106] - GETTING Kla7 from Function0<Unit>
2021-03-12 10:15:30,937 [main:114] - replacement of prope9 of type Kla7 is Kla7()
2021-03-12 10:15:31,114 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:15:31,114 [main:66] - Compilation checking started
2021-03-12 10:15:31,914 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return Kla7().prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let({a: Throwable -> check(true, { "cftia"})})
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:31,916 [main:107] - replacing (prope16, Result<Ty1>)
2021-03-12 10:15:31,917 [main:50] - replacing prope16 Result<Ty1>
2021-03-12 10:15:31,917 [main:54] - Getting value of type Result<Ty1>
2021-03-12 10:15:32,090 [main:302] - generating value of type = Result<Ty1> false depth = 0
2021-03-12 10:15:32,273 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 10:15:32,280 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 10:15:32,688 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty1): Result<Ty1> = TODO()
2021-03-12 10:15:32,688 [main:58] - GENERATED VALUE OF TYPE Result<Ty1> = 
2021-03-12 10:15:33,343 [main:67] - randomType = HashSet<Collection<Short>>
2021-03-12 10:15:33,519 [main:302] - generating value of type = HashSet<Collection<Short>> false depth = 0
2021-03-12 10:15:33,704 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): HashSet<Collection<Short>> = TODO()
2021-03-12 10:15:33,712 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): HashSet<Collection<Short>> = TODO()
2021-03-12 10:15:34,112 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:15:34,118 [main:95] - GENERATED = LinkedHashSet<Collection<Short>>(-1048030993)
2021-03-12 10:15:34,243 [main:106] - GETTING Result<Ty1> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:34,288 [main:106] - GETTING Result<Ty1> from Continuation<Any?>
2021-03-12 10:15:34,296 [main:106] - GETTING Result<Ty1> from Continuation<Short>
2021-03-12 10:15:34,303 [main:106] - GETTING Result<Ty1> from EmptyCoroutineContext
2021-03-12 10:15:34,319 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 10:15:34,324 [main:106] - GETTING Result<Ty1> from String
2021-03-12 10:15:34,345 [main:106] - GETTING Result<Ty1> from Boolean
2021-03-12 10:15:34,382 [main:106] - GETTING Result<Ty1> from KFunction1<A, Unit>
2021-03-12 10:15:34,409 [main:106] - GETTING Result<Ty1> from Any?
2021-03-12 10:15:34,413 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 10:15:34,414 [main:106] - GETTING Result<Ty1> from Function0<Unit>
2021-03-12 10:15:34,423 [main:106] - GETTING Result<Ty1> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:34,469 [main:106] - GETTING Result<Ty1> from CoroutineContext
2021-03-12 10:15:34,469 [main:111] - Cant find and generate replacement for prope16 type Result<Ty1>
2021-03-12 10:15:34,469 [main:107] - replacing (prope16.getOrThrow(), Ty1)
2021-03-12 10:15:34,469 [main:50] - replacing prope16.getOrThrow() Ty1
2021-03-12 10:15:34,469 [main:54] - Getting value of type Ty1
2021-03-12 10:15:34,644 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 10:15:34,652 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 10:15:35,129 [main:67] - randomType = LinkedHashMap<Boolean?, Kla4>
2021-03-12 10:15:35,303 [main:302] - generating value of type = LinkedHashMap<Boolean?, Kla4> false depth = 0
2021-03-12 10:15:35,488 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Boolean?, Kla4> = TODO()
2021-03-12 10:15:35,495 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Boolean?, Kla4> = TODO()
2021-03-12 10:15:35,684 [main:95] - GENERATED = linkedMapOf<Boolean?, Kla4>()
2021-03-12 10:15:35,801 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 10:15:35,806 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 10:15:35,821 [main:106] - GETTING Ty1 from String
2021-03-12 10:15:35,840 [main:106] - GETTING Ty1 from Boolean
2021-03-12 10:15:35,850 [main:106] - GETTING Ty1 from KFunction1<A, Unit>
2021-03-12 10:15:35,876 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 10:15:35,877 [main:106] - GETTING Ty1 from Continuation<Short>
2021-03-12 10:15:35,885 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 10:15:35,892 [main:106] - GETTING Ty1 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:35,936 [main:106] - GETTING Ty1 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:35,982 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 10:15:35,991 [main:106] - GETTING Ty1 from Any?
2021-03-12 10:15:35,995 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 10:15:35,995 [main:111] - Cant find and generate replacement for prope16.getOrThrow() type Ty1
2021-03-12 10:15:35,995 [main:107] - replacing (runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let({a: Throwable -> check(true, { "cftia"})}), Unit?)
2021-03-12 10:15:35,995 [main:50] - replacing runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let({a: Throwable -> check(true, { "cftia"})}) Unit?
2021-03-12 10:15:35,995 [main:54] - Getting value of type Unit?
2021-03-12 10:15:36,171 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 10:15:36,181 [main:58] - GENERATED VALUE OF TYPE Unit? = println()
2021-03-12 10:15:36,181 [main:61] - GENERATED IS CALL =true
2021-03-12 10:15:36,394 [main:67] - randomType = Short
2021-03-12 10:15:36,569 [main:302] - generating value of type = Short true depth = 0
2021-03-12 10:15:36,610 [main:106] - GETTING Unit? from EmptyCoroutineContext
2021-03-12 10:15:36,624 [main:106] - GETTING Unit? from Function0<Unit>
2021-03-12 10:15:36,633 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@3e53e61b]]
2021-03-12 10:15:36,634 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@3e53e61b]
2021-03-12 10:15:36,634 [main:117] - GENERATED CALL = (Kla4().prope7)?.invoke()
2021-03-12 10:15:36,634 [main:114] - replacement of runCatching<Any?>({ "bqfwo"}).exceptionOrNull()?.let({a: Throwable -> check(true, { "cftia"})}) of type Unit? is (Kla4().prope7)?.invoke()
2021-03-12 10:15:36,808 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 10:15:36,808 [main:66] - Compilation checking started
2021-03-12 10:15:37,601 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return Kla7().prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(Kla4().prope7)?.invoke()
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:37,604 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 10:15:37,604 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 10:15:37,604 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 10:15:37,776 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 10:15:37,785 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 10:15:38,206 [main:67] - randomType = UByte?
2021-03-12 10:15:38,381 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:15:38,418 [main:106] - GETTING EmptyCoroutineContext from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:38,461 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-12 10:15:38,468 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 10:15:38,478 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 10:15:38,483 [main:106] - GETTING EmptyCoroutineContext from KFunction1<A, Unit>
2021-03-12 10:15:38,509 [main:106] - GETTING EmptyCoroutineContext from Continuation<Short>
2021-03-12 10:15:38,516 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 10:15:38,516 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 10:15:38,526 [main:106] - GETTING EmptyCoroutineContext from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:38,570 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 10:15:38,611 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-12 10:15:38,786 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:15:38,786 [main:66] - Compilation checking started
2021-03-12 10:15:39,591 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return Kla7().prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(Kla4().prope7)?.invoke()
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:39,593 [main:107] - replacing ({
            prope12 = "ahzcz"
        }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>)
2021-03-12 10:15:39,594 [main:50] - replacing {
            prope12 = "ahzcz"
        } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:15:39,594 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit>
2021-03-12 10:15:39,768 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> false depth = 0
2021-03-12 10:15:39,774 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:15:39,958 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:15:39,965 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:15:40,581 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:15:40,587 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:15:40,593 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:15:40,593 [main:95] - GENERATED = check(true, { "zqsmq"})
2021-03-12 10:15:40,593 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> = {a: Kla7 -> check(true, { "zqsmq"})}
2021-03-12 10:15:40,593 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:40,804 [main:67] - randomType = Long
2021-03-12 10:15:40,978 [main:302] - generating value of type = Long true depth = 0
2021-03-12 10:15:41,018 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<A, Unit>
2021-03-12 10:15:41,047 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:41,097 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Function0<Unit>
2021-03-12 10:15:41,109 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:41,157 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:15:41,167 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Short>
2021-03-12 10:15:41,177 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Boolean
2021-03-12 10:15:41,189 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Continuation<Any?>
2021-03-12 10:15:41,200 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:15:41,204 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from CoroutineContext
2021-03-12 10:15:41,208 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from EmptyCoroutineContext
2021-03-12 10:15:41,225 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from String
2021-03-12 10:15:41,246 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> from Any?
2021-03-12 10:15:41,249 [main:114] - replacement of {
            prope12 = "ahzcz"
        } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla7, Unit> is {a: Kla7 -> check(true, { "zqsmq"})}
2021-03-12 10:15:41,424 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:15:41,424 [main:66] - Compilation checking started
2021-03-12 10:15:41,941 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return Kla7().prope12
    prope9.prope12 = "FAIL 2"
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {a: Kla7 -> check(true, { "zqsmq"})}
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(Kla4().prope7)?.invoke()
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:41,944 [main:107] - replacing ("FAIL 2", String)
2021-03-12 10:15:41,945 [main:50] - replacing "FAIL 2" String
2021-03-12 10:15:41,945 [main:54] - Getting value of type String
2021-03-12 10:15:42,122 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:15:42,128 [main:58] - GENERATED VALUE OF TYPE String = "amblq"
2021-03-12 10:15:42,128 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:42,141 [main:67] - randomType = Boolean
2021-03-12 10:15:42,317 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:15:42,334 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:15:42,511 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:15:42,517 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:15:42,693 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:42,699 [main:78] - Generated call from random type = (false).compareTo(false).toString(1896185944)
2021-03-12 10:15:42,699 [main:114] - replacement of "FAIL 2" of type String is (false).compareTo(false).toString(1896185944)
2021-03-12 10:15:42,875 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:15:42,875 [main:66] - Compilation checking started
2021-03-12 10:15:43,705 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return Kla7().prope12
    prope9.prope12 = (false).compareTo(false).toString(1896185944)
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(Kla4().prope7)?.invoke()
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18)
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:43,708 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18, String)
2021-03-12 10:15:43,708 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18 String
2021-03-12 10:15:43,708 [main:54] - Getting value of type String
2021-03-12 10:15:43,883 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:15:43,889 [main:58] - GENERATED VALUE OF TYPE String = "xrswm"
2021-03-12 10:15:43,889 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:43,902 [main:67] - randomType = Boolean
2021-03-12 10:15:44,075 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:15:44,091 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@672c8149]
2021-03-12 10:15:44,264 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:15:44,270 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:15:44,445 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:44,451 [main:78] - Generated call from random type = (true).compareTo(false).toString(-1903808664)
2021-03-12 10:15:44,451 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla4().prope6).compareTo(Kla4().prope6).minus(4) + (29627)?.toChar().titlecase() + prope18 of type String is (true).compareTo(false).toString(-1903808664)
2021-03-12 10:15:44,627 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:15:44,628 [main:66] - Compilation checking started
2021-03-12 10:15:45,414 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return Kla7().prope12
    prope9.prope12 = (false).compareTo(false).toString(1896185944)
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(Kla4().prope7)?.invoke()
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error((true).compareTo(false).toString(-1903808664))
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:45,417 [main:107] - replacing (prope12, String)
2021-03-12 10:15:45,417 [main:50] - replacing prope12 String
2021-03-12 10:15:45,417 [main:54] - Getting value of type String
2021-03-12 10:15:45,593 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:15:45,599 [main:58] - GENERATED VALUE OF TYPE String = "wjhyq"
2021-03-12 10:15:45,599 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:45,827 [main:67] - randomType = ArrayDeque<Boolean>
2021-03-12 10:15:46,000 [main:302] - generating value of type = ArrayDeque<Boolean> false depth = 0
2021-03-12 10:15:46,182 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Boolean>): ArrayDeque<Boolean> = TODO()
2021-03-12 10:15:46,190 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Boolean>): ArrayDeque<Boolean> = TODO()
2021-03-12 10:15:46,605 [main:302] - generating value of type = Collection<Boolean> false depth = 3
2021-03-12 10:15:46,788 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(elements: Boolean): Collection<Boolean> = TODO()
2021-03-12 10:15:46,795 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(elements: Boolean): Collection<Boolean> = TODO()
2021-03-12 10:15:46,980 [main:302] - generating value of type = Boolean true depth = 6
2021-03-12 10:15:46,986 [main:95] - GENERATED = listOfNotNull<Boolean>(false)
2021-03-12 10:15:46,986 [main:95] - GENERATED = ArrayDeque<Boolean>(listOfNotNull<Boolean>(false))
2021-03-12 10:15:47,135 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@579ea36e]
2021-03-12 10:15:47,135 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4523432]
2021-03-12 10:15:47,308 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:15:47,489 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:15:47,672 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:15:47,680 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:15:48,105 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:15:48,111 [main:95] - GENERATED = StringBuilder("ibthr")
2021-03-12 10:15:48,283 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:15:48,463 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:48,640 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:15:48,824 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 10:15:48,830 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 10:15:49,011 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:15:49,018 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:15:49,418 [main:302] - generating value of type = String true depth = 4
2021-03-12 10:15:49,424 [main:95] - GENERATED = StringBuilder("bscdu")
2021-03-12 10:15:49,425 [main:78] - Generated call from random type = (ArrayDeque<Boolean>(listOfNotNull<Boolean>(false))).toArray().joinToString("kigpw", StringBuilder("ibthr"), "jtwpi", 673416641, "zikuc", {a: T -> StringBuilder("bscdu")})
2021-03-12 10:15:49,426 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:15:49,432 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 10:15:49,445 [main:106] - GETTING String from String
2021-03-12 10:15:49,462 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]]
2021-03-12 10:15:49,462 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@613548fd]
2021-03-12 10:15:49,634 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:49,812 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:49,990 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:15:49,999 [main:117] - GENERATED CALL = (fu0()).replaceRange(-1958883858, 1045135519, "thmta")
2021-03-12 10:15:50,000 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]]
2021-03-12 10:15:50,000 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40110d8b]
2021-03-12 10:15:50,000 [main:117] - GENERATED CALL = (fu0()).reversed()
2021-03-12 10:15:50,000 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]]
2021-03-12 10:15:50,000 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e809a1b]
2021-03-12 10:15:50,175 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:50,355 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:15:50,361 [main:117] - GENERATED CALL = (fu0()).replaceBefore('귫', fu0(), "ktmis")
2021-03-12 10:15:50,361 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1547c422]]
2021-03-12 10:15:50,361 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4e1e0cd7]
2021-03-12 10:15:50,534 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:50,713 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:50,719 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1547c422]
2021-03-12 10:15:50,893 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:15:51,072 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:15:51,079 [main:117] - GENERATED CALL = (fu0()).subSequence(-1136780520, 1117632117).commonSuffixWith("vnoew", true)
2021-03-12 10:15:51,079 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]]
2021-03-12 10:15:51,079 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@142bf5d3]
2021-03-12 10:15:51,250 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:15:51,429 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:15:51,437 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:15:51,832 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:15:51,838 [main:95] - GENERATED = StringBuilder(213686721)
2021-03-12 10:15:51,838 [main:117] - GENERATED CALL = (fu0()).removeSuffix(StringBuilder(213686721))
2021-03-12 10:15:51,838 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]]
2021-03-12 10:15:51,838 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56f3270]
2021-03-12 10:15:52,011 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:15:52,017 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:15:52,023 [main:117] - GENERATED CALL = (fu0()).filterNot({a: Char -> true})
2021-03-12 10:15:52,023 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@236a23f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]]
2021-03-12 10:15:52,023 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a674ed4]
2021-03-12 10:15:52,229 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:52,235 [main:117] - GENERATED CALL = (fu0()).length.toString(-1757104728)
2021-03-12 10:15:52,235 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]]
2021-03-12 10:15:52,235 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dab2c56]
2021-03-12 10:15:52,407 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:52,584 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:15:52,762 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:15:52,768 [main:117] - GENERATED CALL = (fu0()).replaceBeforeLast('燶', "qgaoj", "lagdw")
2021-03-12 10:15:52,768 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]]
2021-03-12 10:15:52,768 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@682b5dad]
2021-03-12 10:15:52,941 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 10:15:53,123 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-12 10:15:53,131 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-12 10:15:53,314 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:15:53,320 [main:95] - GENERATED = setOfNotNull<Int>(37940021)
2021-03-12 10:15:53,320 [main:117] - GENERATED CALL = (fu0()).slice(setOfNotNull<Int>(37940021))
2021-03-12 10:15:53,320 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]]
2021-03-12 10:15:53,320 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d8c232f]
2021-03-12 10:15:53,492 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:15:53,670 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:15:53,676 [main:117] - GENERATED CALL = (fu0()).padEnd(191921028, '䨥')
2021-03-12 10:15:53,676 [main:114] - replacement of prope12 of type String is "wjhyq"
2021-03-12 10:15:53,847 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 10:15:53,847 [main:66] - Compilation checking started
2021-03-12 10:15:54,371 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return Kla7().prope12
    prope9.prope12 = (false).compareTo(false).toString(1896185944)
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15."wjhyq"
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(Kla4().prope7)?.invoke()
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error((true).compareTo(false).toString(-1903808664))
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:54,374 [main:107] - replacing (true, Boolean)
2021-03-12 10:15:54,374 [main:50] - replacing true Boolean
2021-03-12 10:15:54,374 [main:54] - Getting value of type Boolean
2021-03-12 10:15:54,546 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:15:54,552 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:15:54,552 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:54,763 [main:67] - randomType = ULong
2021-03-12 10:15:54,938 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 10:15:54,974 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@285f0327]
2021-03-12 10:15:54,975 [main:78] - Generated call from random type = (2069573159361557312.toULong()).equals(Kla1().prope3)
2021-03-12 10:15:54,975 [main:114] - replacement of true of type Boolean is (2069573159361557312.toULong()).equals(Kla1().prope3)
2021-03-12 10:15:55,149 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:15:55,149 [main:66] - Compilation checking started
2021-03-12 10:15:55,958 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return Kla7().prope12
    prope9.prope12 = (false).compareTo(false).toString(1896185944)
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(Kla4().prope7)?.invoke()
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == (2069573159361557312.toULong()).equals(Kla1().prope3) } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error((true).compareTo(false).toString(-1903808664))
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:55,961 [main:107] - replacing ({
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }, Any?)
2021-03-12 10:15:55,961 [main:50] - replacing {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    } Any?
2021-03-12 10:15:55,961 [main:54] - Getting value of type Any?
2021-03-12 10:15:56,138 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:15:56,138 [main:58] - GENERATED VALUE OF TYPE Any? = "qrhlk"
2021-03-12 10:15:56,138 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:56,151 [main:67] - randomType = Boolean
2021-03-12 10:15:56,326 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:15:56,342 [main:106] - GETTING Any? from Boolean
2021-03-12 10:15:56,352 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 10:15:56,367 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 10:15:56,375 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 10:15:56,383 [main:106] - GETTING Any? from KFunction1<A, Unit>
2021-03-12 10:15:56,409 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:15:56,415 [main:106] - GETTING Any? from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:56,459 [main:106] - GETTING Any? from String
2021-03-12 10:15:56,476 [main:106] - GETTING Any? from Continuation<Short>
2021-03-12 10:15:56,485 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:15:56,486 [main:106] - GETTING Any? from Any?
2021-03-12 10:15:56,490 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 10:15:56,491 [main:106] - GETTING Any? from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:56,536 [main:114] - replacement of {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    } of type Any? is "qrhlk"
2021-03-12 10:15:56,715 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 10:15:56,715 [main:66] - Compilation checking started
2021-03-12 10:15:56,726 [main:71] - Wrong syntax or breaks conditions
2021-03-12 10:15:56,727 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return Kla7().prope12
    prope9.prope12 = (false).compareTo(false).toString(1896185944)
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return prope15.prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(Kla4().prope7)?.invoke()
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) "qrhlk"
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == (2069573159361557312.toULong()).equals(Kla1().prope3) } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error((true).compareTo(false).toString(-1903808664))
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:56,729 [main:107] - replacing (Kla9, Kla15)
2021-03-12 10:15:56,729 [main:50] - replacing Kla9 Kla15
2021-03-12 10:15:56,729 [main:54] - Getting value of type Kla15
2021-03-12 10:15:56,930 [main:302] - generating value of type = Kla15 false depth = 0
2021-03-12 10:15:56,936 [main:112] - generating klass Kla15 text = companion object Kla15 : Kla9()
2021-03-12 10:15:56,936 [main:58] - GENERATED VALUE OF TYPE Kla15 = 
2021-03-12 10:15:57,173 [main:67] - randomType = Double
2021-03-12 10:15:57,348 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:15:57,385 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 10:15:57,391 [main:106] - GETTING Kla15 from Continuation<Short>
2021-03-12 10:15:57,398 [main:106] - GETTING Kla15 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:57,442 [main:106] - GETTING Kla15 from KFunction1<A, Unit>
2021-03-12 10:15:57,467 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 10:15:57,467 [main:106] - GETTING Kla15 from Boolean
2021-03-12 10:15:57,477 [main:106] - GETTING Kla15 from Any?
2021-03-12 10:15:57,480 [main:106] - GETTING Kla15 from EmptyCoroutineContext
2021-03-12 10:15:57,494 [main:106] - GETTING Kla15 from Continuation<Any?>
2021-03-12 10:15:57,501 [main:106] - GETTING Kla15 from String
2021-03-12 10:15:57,518 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-12 10:15:57,528 [main:106] - GETTING Kla15 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:57,575 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 10:15:57,575 [main:111] - Cant find and generate replacement for Kla9 type Kla15
2021-03-12 10:15:57,575 [main:107] - replacing (prope15, Kla7)
2021-03-12 10:15:57,576 [main:50] - replacing prope15 Kla7
2021-03-12 10:15:57,576 [main:54] - Getting value of type Kla7
2021-03-12 10:15:57,749 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 10:15:57,755 [main:112] - generating klass Kla7 text = class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}
2021-03-12 10:15:57,756 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 10:15:57,756 [main:61] - GENERATED IS CALL =true
2021-03-12 10:15:57,967 [main:67] - randomType = Float
2021-03-12 10:15:58,150 [main:302] - generating value of type = Float true depth = 0
2021-03-12 10:15:58,186 [main:106] - GETTING Kla7 from KFunction1<A, Unit>
2021-03-12 10:15:58,211 [main:106] - GETTING Kla7 from String
2021-03-12 10:15:58,228 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:15:58,233 [main:106] - GETTING Kla7 from Continuation<Short>
2021-03-12 10:15:58,240 [main:106] - GETTING Kla7 from Function0<Unit>
2021-03-12 10:15:58,249 [main:106] - GETTING Kla7 from EmptyCoroutineContext
2021-03-12 10:15:58,263 [main:106] - GETTING Kla7 from Any?
2021-03-12 10:15:58,266 [main:106] - GETTING Kla7 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:58,310 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:15:58,310 [main:106] - GETTING Kla7 from Boolean
2021-03-12 10:15:58,319 [main:106] - GETTING Kla7 from Continuation<Any?>
2021-03-12 10:15:58,328 [main:106] - GETTING Kla7 from CoroutineContext
2021-03-12 10:15:58,329 [main:106] - GETTING Kla7 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:15:58,373 [main:114] - replacement of prope15 of type Kla7 is Kla7()
2021-03-12 10:15:58,552 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:15:58,553 [main:66] - Compilation checking started
2021-03-12 10:15:59,522 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return Kla7().prope12
    prope9.prope12 = (false).compareTo(false).toString(1896185944)
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return Kla7().prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(Kla4().prope7)?.invoke()
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == (2069573159361557312.toULong()).equals(Kla1().prope3) } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error((true).compareTo(false).toString(-1903808664))
            prope20()
        }
        if (true)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:15:59,525 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got ", String)
2021-03-12 10:15:59,526 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " String
2021-03-12 10:15:59,526 [main:54] - Getting value of type String
2021-03-12 10:15:59,702 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:15:59,708 [main:58] - GENERATED VALUE OF TYPE String = "qfvec"
2021-03-12 10:15:59,708 [main:61] - GENERATED IS CALL =false
2021-03-12 10:15:59,950 [main:67] - randomType = Kla12?
2021-03-12 10:16:00,124 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-12 10:16:00,130 [main:112] - generating klass Kla12 text = class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == (2069573159361557312.toULong()).equals(Kla1().prope3) } ?: error("uknzw")
    }
}
2021-03-12 10:16:00,136 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:16:00,142 [main:106] - GETTING String from CoroutineContext
2021-03-12 10:16:00,143 [main:106] - GETTING String from Any?
2021-03-12 10:16:00,146 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]]
2021-03-12 10:16:00,146 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@3ef26c78]
2021-03-12 10:16:00,146 [main:117] - GENERATED CALL = (Kla1().prope3).toString()
2021-03-12 10:16:00,146 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " of type String is "qfvec"
2021-03-12 10:16:00,322 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 10:16:00,323 [main:66] - Compilation checking started
2021-03-12 10:16:01,127 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return Kla7().prope12
    prope9.prope12 = (false).compareTo(false).toString(1896185944)
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return Kla7().prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(Kla4().prope7)?.invoke()
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == (2069573159361557312.toULong()).equals(Kla1().prope3) } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error((true).compareTo(false).toString(-1903808664))
            prope20()
        }
        if (true)
            error("qfvec" + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:16:01,130 [main:107] - replacing (this, Kla10)
2021-03-12 10:16:01,130 [main:50] - replacing this Kla10
2021-03-12 10:16:01,130 [main:54] - Getting value of type Kla10
2021-03-12 10:16:01,305 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-12 10:16:01,311 [main:112] - generating klass Kla10 text = class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
this.prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}
2021-03-12 10:16:01,311 [main:58] - GENERATED VALUE OF TYPE Kla10 = Kla10()
2021-03-12 10:16:01,311 [main:61] - GENERATED IS CALL =true
2021-03-12 10:16:01,553 [main:67] - randomType = UShort
2021-03-12 10:16:01,727 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 10:16:01,762 [main:106] - GETTING Kla10 from Continuation<Any?>
2021-03-12 10:16:01,769 [main:106] - GETTING Kla10 from String
2021-03-12 10:16:01,785 [main:106] - GETTING Kla10 from KFunction1<A, Unit>
2021-03-12 10:16:01,810 [main:106] - GETTING Kla10 from CoroutineContext
2021-03-12 10:16:01,815 [main:106] - GETTING Kla10 from Continuation<Short>
2021-03-12 10:16:01,823 [main:106] - GETTING Kla10 from CoroutineContext
2021-03-12 10:16:01,823 [main:106] - GETTING Kla10 from EmptyCoroutineContext
2021-03-12 10:16:01,839 [main:106] - GETTING Kla10 from Any?
2021-03-12 10:16:01,842 [main:106] - GETTING Kla10 from KFunction2<Int, [@kotlin.ParameterName] String, Unit>
2021-03-12 10:16:01,886 [main:106] - GETTING Kla10 from CoroutineContext
2021-03-12 10:16:01,886 [main:106] - GETTING Kla10 from KFunction1<[@kotlin.ParameterName] String, Unit>
2021-03-12 10:16:01,929 [main:106] - GETTING Kla10 from Function0<Unit>
2021-03-12 10:16:01,937 [main:106] - GETTING Kla10 from Boolean
2021-03-12 10:16:01,945 [main:114] - replacement of this of type Kla10 is Kla10()
2021-03-12 10:16:02,119 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:16:02,119 [main:66] - Compilation checking started
2021-03-12 10:16:02,915 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


fun Int.foo(s: String) {}

class A {
    fun bar() {}
}

fun baz(name: String) {}

fun box(): String {
    assertEquals(
            listOf("extension receiver parameter of ${Int::foo}", "parameter #1 s of ${Int::foo}"),
            Int::foo.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("instance parameter of ${A::bar}"),
            A::bar.parameters.map(Any::toString)
    )

    assertEquals(
            listOf("parameter #0 name of ${::baz}"),
            ::baz.parameters.map(Any::toString)
    )

    return "OK"
}

suspend fun fu0(): String {
    suspend fun fu4(): String {
        suspend fun fu4(): String {
            suspend fun fu4(): String {
                suspend fun fu4(): String {
                    suspend fun fu4(): String {
                        return (Int::foo).name.substringBeforeLast('', "nciqq")
                    }
                    return fu4()
                }
                return (0).toChar().lowercase()
            }
            return (A::bar).name.removeSuffix(StringBuilder("nmgrx"))
        }
        return (Int::foo).name.substringBeforeLast('', "bumtu")
    }
    return fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box560(): String {
    var prope2 = "FAIL"
    fu1 { repeat(0, {a: Int -> repeat(186422839, {a: Int -> require(true, { "cgxov"})})})}
    return "gxcjh"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> repeat(248449107, {a: Int -> println("mhfuv")})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        println()
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "rfdft"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { equals("hdbsz")}?.let { error("jtrtp")}
    }

    fun fu9(method: String) {
        prope4.find { false} ?: error("tail-call optimization hit: method " + method + (Int::foo).name.trimIndent() +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { require(false)}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in IntRange(1438060187, prope5++)) {
            if ((Int::foo).name.endsWith("bduhs", false)) error((::baz).name.reversed() + ", got " + prope5)
            prope7()
        }
        if ((Int::foo).name.toInt() != numberOfSuspensions)
            error((::baz).name.replaceFirst((122).toChar(), '?', false))
        if ((::baz).name.endsWith("vldsk", false)) error((::baz).name.trimMargin("wlxfl"))
        prope7()
        if ((Int::foo).equals("hdbsz").or(false)) error((Int::foo).name.drop(186422839))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { println("civtf")}
    }

    override fun fu5(exception: Throwable) {
        throw IllegalStateException("wxbgo")
    }
}

class Kla7 {
    var prope12 = (Kla4().prope6).compareTo(false).toString(542264369)
}

val prope9 = Kla7()

suspend inline fun fu13(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope15.c()
}

suspend inline fun fu14(prope15: Kla7 = Kla7(), crossinline c: suspend Kla7.() -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
val prope13 : suspend () -> Unit = {
        prope15.c()
    }
    prope13()
}

interface Kla8 {
    suspend fun fu20()
}

suspend inline fun fu15(prope15: Kla7 = prope9, crossinline c: suspend Kla7.() -> Unit) {
    val prope14 = object: Kla8 {
        override suspend fun fu20() {
            prope15.c()
        }
    }
    prope14.fu20()
}

fun fu16(c: suspend () -> Unit) {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla9)
}

suspend fun fu17() = (Int::foo).name.capitalize()

fun box190() : String {
    var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
fu16 {
        fu13 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != "OK") return Kla7().prope12
    prope9.prope12 = (false).compareTo(false).toString(1896185944)
    fu16 { require(true)}
    if ((Kla5.context).equals("zsijt").and(Kla4().prope6)) return prope9.prope12
    prope9.prope12 = (A::bar).name.uppercase()
    fu16 {
        fu15 {
            prope12 = fu17()
        }
    }
    if (prope9.prope12 != (Kla4().prope6).compareTo(Kla4().prope6).toString(-1854622054)) return Kla7().prope12
    val prope15 = Kla7()
    prope15.prope12 = "FAIL 4"
    fu16 {
        fu13(Kla7()) {
            prope12 = fu17()
        }
    }
    if (true) return prope15.prope12
    prope15.prope12 = "FAIL 5"
    fu16 {
        fu14(prope15) {
            prope12 = "ahzcz"
        }
    }
    if ((linkedSetOf<Kla3>()).toArray().contentToString() != "OK") return prope15.prope12
    prope15.prope12 = "FAIL 6"
    fu16 {
        fu15(Kla7()) {
            prope12 = fu17()
        }
    }
    return Kla7().prope12
}

fun <Ty1> fu18(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
x(prope16.getOrThrow())
    }
}

fun fu19(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
(Kla4().prope7)?.invoke()
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ null}).getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla10().prope16 = (Kla1())?.prope3
    }

    var prope16: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu21(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu21(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu23() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu23(it)
    }

    fun fu23(c: Continuation<*>) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error((Kla1().prope3).toString())
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu24(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error((Int::foo).name.trimStart()) }
    }

    fun fu25(method: String) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope17.find { it?.methodName?.startsWith(method) == (2069573159361557312.toULong()).equals(Kla1().prope3) } ?: error("uknzw")
    }
}

val prope10 = Kla12()

class Kla13 {
    private var prope18 = (Kla1().context).equals(Kla1().prope3).compareTo(false)
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu26() {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
prope18 = 0
        prope19 = false
        Kla4().prope7 = Kla4().prope7
    }

    suspend fun fu27() = suspendCoroutine<Unit> {a: Continuation<Unit> -> repeat(-569862545, {a: Int -> println("asclr")})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla3())?.equals("xjmby").compareTo(Kla4().prope6)..numberOfSuspensions) {
            if ((Kla4().prope7).equals(Kla1().prope3).not()) error((true).compareTo(false).toString(-1903808664))
            prope20()
        }
        if (true)
            error("qfvec" + prope18)
        if (prope19) error((::baz).name.capitalize())
        prope20()
        if (checkFinished && !prope19) error((Kla1().prope3).toString())
    }
}

val prope11 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope2 = "FAIL"
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope7 = Kla4().prope7
    }

    override fun fu21(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:16:02,918 [main:107] - replacing (!prope19, Boolean)
2021-03-12 10:16:02,919 [main:50] - replacing !prope19 Boolean
2021-03-12 10:16:02,919 [main:54] - Getting value of type Boolean
